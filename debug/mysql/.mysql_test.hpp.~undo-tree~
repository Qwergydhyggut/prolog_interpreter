(undo-tree-save-format-version . 1)
"df533058e5d15af3dc9d75235f6e992ba3f85246"
[nil nil nil nil (26078 12148 92391 564000) 0 nil]
([nil nil ((67 . 70) (#("f" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -67) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 68 (63 . 68) (#("f" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -63) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("e" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -64) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 65 (63 . 65) (apply yas--snippet-revive 54 64 #s(yas--snippet nil nil #s(yas--exit 63 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 63 nil) 36 nil nil nil nil)) (54 . 64) (#("include \"$0\"" 0 12 (fontified nil)) . 54) (undo-tree-id6 . -12) (54 . 66) (#("i" 0 1 (fontified nil c-in-sws t)) . 54) (undo-tree-id7 . -1) (54 . 55) (#("include \"header\"" 0 16 (fontified nil)) . -54) (undo-tree-id8 . -16) (54 . 70) (#("inc" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t) 2 3 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -54) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 57 (54 . 57) (53 . 54) (#("@" 0 1 (c-is-sws t fontified t)) . -53) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("#" 0 1 (fontified t)) . -54) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 55 (54 . 55) (53 . 54) (53 . 53) (53 . 54) (90 . 91) (85 . 90) (#("p" 0 1 (fontified t)) . -85) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 86 (85 . 86) (82 . 85) (83 . 86) (#("  " 0 2 (fontified t)) . 83) (undo-tree-id18 . -2) (undo-tree-id19 . -2) 85 (83 . 85) (82 . 84) (81 . 83) (80 . 81) (apply yas--snippet-revive 55 80 #s(yas--snippet nil (#s(yas--field 1 60 65 nil nil nil t #s(yas--field 2 67 79 nil nil nil t nil)) #s(yas--field 2 67 79 nil nil nil t nil)) nil 35 nil #s(yas--field 2 67 79 nil nil nil t nil) nil nil)) (68 . 79) (#("test_name" 0 9 (fontified nil)) . 68) (67 . 68) (61 . 65) (#("test_suite_name" 0 15 (fontified nil)) . 61) (60 . 61) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 60 65 nil nil nil t #s(yas--field 2 67 79 nil nil nil t nil)) #s(yas--field 2 67 79 nil nil nil t nil)) nil 35 nil #s(yas--field 2 67 79 nil nil nil t nil) nil nil)) (55 . 87) (#("TEST(${1:test_suite_name}, ${2:test_name})" 0 1 (c-is-sws t fontified nil) 1 42 (fontified nil)) . 55) (55 . 97) (#("TE" 0 1 (c-is-sws t fontified nil) 1 2 (fontified nil)) . 55) (55 . 57) (#("TEST(test_suite_name, test_name)" 0 1 (c-is-sws t fontified nil) 1 32 (fontified nil)) . -55) (55 . 87) (#("TE" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -55) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 57 (55 . 57) (54 . 54) (54 . 55) (53 . 53) (53 . 54) (52 . 52) (52 . 53) (42 . 51) (36 . 42) (35 . 37) (27 . 35) (26 . 27) (25 . 25) (25 . 26) (17 . 25) (#("g" 0 1 (fontified nil)) . 17) (undo-tree-id22 . -1) (17 . 18) (#("gtest.h>" 0 8 (fontified nil)) . -17) (undo-tree-id23 . -8) (17 . 25) (#("g" 0 1 (face font-lock-string-face fontified t)) . -17) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 18 (17 . 18) (11 . 17) (#("g" 0 1 (fontified nil)) . 11) (undo-tree-id27 . -1) (11 . 12) (#("gtest/" 0 6 (fontified nil)) . -11) (undo-tree-id28 . -6) (11 . 17) (#("gt" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t)) . -11) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) 13 (12 . 13) (11 . 12) (10 . 11) (#("\"" 0 1 (face font-lock-warning-face fontified t)) . -10) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (nil syntax-table (1) 10 . 11) (#("m" 0 1 (face font-lock-string-face fontified t)) . -11) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (nil syntax-table (1) 10 . 11) (#("y" 0 1 (face font-lock-string-face fontified t)) . -12) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (nil syntax-table (1) 10 . 11) (#("s" 0 1 (face font-lock-string-face fontified t)) . -13) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (nil syntax-table (1) 10 . 11) (#("q" 0 1 (face font-lock-string-face fontified t)) . -14) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (nil syntax-table (1) 10 . 11) (#("l" 0 1 (face font-lock-string-face fontified t)) . -15) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (nil syntax-table (1) 10 . 11) (#("_" 0 1 (face font-lock-string-face fontified t)) . -16) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (nil syntax-table (1) 10 . 11) (#("t" 0 1 (face font-lock-string-face fontified t)) . -17) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (nil syntax-table (1) 10 . 11) (#("e" 0 1 (face font-lock-string-face fontified t)) . -18) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (nil syntax-table (1) 10 . 11) (#("s" 0 1 (face font-lock-string-face fontified t)) . -19) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (nil syntax-table (1) 10 . 11) (#("t" 0 1 (face font-lock-string-face fontified t)) . -20) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (nil syntax-table (1) 10 . 11) (#("." 0 1 (face font-lock-string-face fontified t)) . -21) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (nil syntax-table (1) 10 . 11) (#("h" 0 1 (face font-lock-string-face fontified t)) . -22) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (nil syntax-table (1) 10 . 11) (#("p" 0 1 (face font-lock-string-face fontified t)) . -23) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (nil syntax-table (1) 10 . 11) (#("p" 0 1 (face font-lock-string-face fontified t)) . -24) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (nil syntax-table (1) 10 . 11) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -25) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 26 (11 . 26) (nil syntax-table (1) 10 . 11) (#("mysql\"" 0 5 (fontified nil) 5 6 (face font-lock-string-face fontified nil)) . 11) (undo-tree-id65 . -6) (11 . 16) (#("mysql_test.hpp\"" 0 15 (fontified nil)) . -11) (nil syntax-table (1) 26 . 27) (11 . 26) (#("mysql_" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t)) . -11) (undo-tree-id66 . -6) (undo-tree-id67 . -6) 17 (11 . 17) (apply yas--snippet-revive 2 12 #s(yas--snippet nil nil #s(yas--exit 11 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11 nil) 34 nil nil nil nil)) (2 . 12) (#("include \"$0\"" 0 12 (fontified nil)) . 2) (undo-tree-id68 . -12) (2 . 14) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id69 . -1) (2 . 3) (#("include \"header\"" 0 16 (fontified nil)) . -2) (undo-tree-id70 . -16) (2 . 18) (#("in" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) 4 (2 . 4) (1 . 2) (t 26078 11945 622293 915000)) nil (26078 12148 92377 847000) 0 nil])
([nil nil ((116 . 117) 69) nil (26078 12148 92281 645000) 0 nil])
([nil nil ((176 . 177) (apply yas--snippet-revive 115 176 #s(yas--snippet nil (#s(yas--field 1 129 145 nil nil nil t #s(yas--field 2 147 153 nil nil nil t #s(yas--field 3 155 163 nil nil nil t #s(yas--field 4 165 175 nil nil nil t nil)))) #s(yas--field 2 147 153 nil nil nil t #s(yas--field 3 155 163 nil nil nil t #s(yas--field 4 165 175 nil nil nil t nil))) #s(yas--field 3 155 163 nil nil nil t #s(yas--field 4 165 175 nil nil nil t nil)) #s(yas--field 4 165 175 nil nil nil t nil)) nil 37 nil #s(yas--field 4 165 175 nil nil nil t nil) nil nil)) (166 . 174) (#("std::string database" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 20 (face font-lock-variable-name-face fontified nil)) . 167) (165 . 167) (156 . 162) (#("std::string passwd" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 18 (face font-lock-variable-name-face fontified nil)) . 157) (155 . 157) (148 . 152) (#("std::string user" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 16 (face font-lock-variable-name-face fontified nil)) . 149) (147 . 149) (143 . 144) (#("7" 0 1 (face font-lock-string-face fontified t)) . -143) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 144 (140 . 144) (139 . 140) (134 . 139) (130 . 134) (#("std::string host" 0 3 (face font-lock-constant-face fontified nil) 3 5 (fontified nil) 5 11 (face font-lock-type-face fontified nil) 11 12 (fontified nil) 12 16 (face font-lock-variable-name-face fontified nil)) . 131) (129 . 131) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 129 145 nil nil nil t #s(yas--field 2 147 153 nil nil nil t #s(yas--field 3 155 163 nil nil nil t #s(yas--field 4 165 175 nil nil nil t nil)))) #s(yas--field 2 147 153 nil nil nil t #s(yas--field 3 155 163 nil nil nil t #s(yas--field 4 165 175 nil nil nil t nil))) #s(yas--field 3 155 163 nil nil nil t #s(yas--field 4 165 175 nil nil nil t nil)) #s(yas--field 4 165 175 nil nil nil t nil)) nil 37 nil #s(yas--field 4 165 175 nil nil nil t nil) nil nil)) (115 . 206) (#("mysql_connect(${1:std::string host}, ${2:std::string user}, ${3:std::string passwd}, ${4:std::string database})" 0 111 (fontified nil)) . 115) (115 . 226) (#("mysql_connect(std::string host, std::string user, std::string passwd, std::string database)" 0 91 (fontified nil)) . -115) (115 . 206) (#("m" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -115) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 116 (115 . 116) (102 . 104) (#(" " 0 1 (fontified nil)) . 102) (113 . 114) (102 . 103) (#("  " 0 2 (fontified nil)) . 102) (113 . 114) (104 . 113) (#("my" 0 2 (fontified nil)) . 104) (104 . 106) (#("mysql_mod" 0 9 (fontified nil)) . -104) (104 . 113) (#("my" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -104) (undo-tree-id78 . -2) (undo-tree-id79 . -2) 106 (104 . 106) (102 . 104) (102 . 103) 109 (t 26078 12148 98955 530000)) nil (26078 12249 762906 431000) 0 nil])
([nil nil ((135 . 137) (134 . 135) (130 . 134) (t 26078 12249 782286 327000)) nil (26078 12794 646241 441000) 0 nil])
([nil nil ((#("http://" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t)) . 130) (undo-tree-id80 . -6) (undo-tree-id81 . -6) (undo-tree-id82 . -6) (undo-tree-id83 . -6) (undo-tree-id84 . -6) (undo-tree-id85 . -6) (undo-tree-id86 . -6) (undo-tree-id87 . -6) (undo-tree-id88 . -6) (undo-tree-id89 . -6) (undo-tree-id90 . -6) (undo-tree-id91 . -6) (undo-tree-id92 . -6) (undo-tree-id93 . -6) (undo-tree-id94 . -6) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -6) (undo-tree-id108 . -6) (undo-tree-id109 . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) (undo-tree-id114 . -6) (undo-tree-id115 . -6) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) (undo-tree-id135 . -6) (undo-tree-id136 . -6) (undo-tree-id137 . -6) (undo-tree-id138 . -6) (undo-tree-id139 . -6) (undo-tree-id140 . -6) (undo-tree-id141 . -6) (undo-tree-id142 . -6) (undo-tree-id143 . -6) (undo-tree-id144 . -6) (undo-tree-id145 . -6) (undo-tree-id146 . -6) (undo-tree-id147 . -6) (undo-tree-id148 . -6) (undo-tree-id149 . -6) (undo-tree-id150 . -6) (undo-tree-id151 . -6) (undo-tree-id152 . -6) (undo-tree-id153 . -6) (undo-tree-id154 . -6) (undo-tree-id155 . -6) (undo-tree-id156 . -6) (undo-tree-id157 . -6) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id160 . -6) (undo-tree-id161 . -6) (undo-tree-id162 . -6) (undo-tree-id163 . -6) (undo-tree-id164 . -6) (undo-tree-id165 . -6) (undo-tree-id166 . -6) (undo-tree-id167 . -6) (undo-tree-id168 . -6) (undo-tree-id169 . -6) (undo-tree-id170 . -6) (undo-tree-id171 . -6) (undo-tree-id172 . -6) (undo-tree-id173 . -6) (undo-tree-id174 . -6) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) (undo-tree-id178 . -6) (undo-tree-id179 . -6) (undo-tree-id180 . -6) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) (undo-tree-id186 . -6) (undo-tree-id187 . -6) (undo-tree-id188 . -6) (undo-tree-id189 . -6) (undo-tree-id190 . -6) (undo-tree-id191 . -6) (undo-tree-id192 . -6) (undo-tree-id193 . -6) (undo-tree-id194 . -6) (undo-tree-id195 . -6) (undo-tree-id196 . -6) (undo-tree-id197 . -6) (undo-tree-id198 . -6) (undo-tree-id199 . -6) (undo-tree-id200 . -6) (undo-tree-id201 . -6) (undo-tree-id202 . -6) (undo-tree-id203 . -6) (undo-tree-id204 . -6) (undo-tree-id205 . -6) (undo-tree-id206 . -6) (undo-tree-id207 . -6) (undo-tree-id208 . -6) (undo-tree-id209 . -6) (undo-tree-id210 . -6) (undo-tree-id211 . -6) (undo-tree-id212 . -6) (undo-tree-id213 . -6) (undo-tree-id214 . -6) (undo-tree-id215 . -6) (undo-tree-id216 . -6) (undo-tree-id217 . -6) (undo-tree-id218 . -6) (undo-tree-id219 . -6) (undo-tree-id220 . -6) (undo-tree-id221 . -6) (undo-tree-id222 . -6) (undo-tree-id223 . -6) (undo-tree-id224 . -6) (undo-tree-id225 . -6) (undo-tree-id226 . -6) (undo-tree-id227 . -5) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -5) (undo-tree-id231 . -5) (undo-tree-id232 . -5) (undo-tree-id233 . -5) (undo-tree-id234 . -5) (undo-tree-id235 . -5) (undo-tree-id236 . -5) (undo-tree-id237 . -5) (undo-tree-id238 . -5) (undo-tree-id239 . -5) (undo-tree-id240 . -5) (undo-tree-id241 . -5) (undo-tree-id242 . -5) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) (undo-tree-id246 . -5) (undo-tree-id247 . -5) (undo-tree-id248 . -5) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -7) (undo-tree-id348 . -6) (t 26078 12794 652272 894000)) nil (26078 12937 944348 344000) 0 nil])
([nil nil ((#(":3306" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t)) . 139) (undo-tree-id349 . -4) (undo-tree-id350 . -5) (t 26078 12937 948936 68000)) nil (26078 13373 774014 641000) 0 nil])
([nil nil ((162 . 167) (161 . 162) (#("newshuju" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face fontified t) 7 8 (face font-lock-string-face fontified t)) . 161) (undo-tree-id351 . -7) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -8) (undo-tree-id396 . -8) (t 26078 13373 782258 782000)) nil (26078 13477 547016 182000) 0 nil])
([nil nil ((nil rear-nonsticky nil 186 . 187) (#("
" 0 1 (fontified nil)) . -296) (186 . 297) (t 26078 13477 565589 586000)) nil (26078 59480 420988 881000) 0 nil])
([nil nil ((195 . 197) (192 . 195) (#("synatax" 0 7 (fontified t)) . 192) (undo-tree-id0 . -6) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -7) (undo-tree-id109 . -7)) nil (26078 59480 420983 956000) 0 nil])
([nil nil ((294 . 295) 196) nil (26078 59480 419965 362000) 0 nil])
([nil nil ((281 . 282) (276 . 281) (273 . 276) (t 26078 59480 449892 128000) 260) nil (26079 904 947202 972000) 0 nil])
([nil nil ((52 . 53) (t 26079 904 966388 391000) 33) nil (26079 2879 804077 305000) 0 nil])
([nil nil ((53 . 54)) nil (26079 2879 804076 732000) 0 nil])
([nil nil ((54 . 55)) nil (26079 2879 804076 217000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t c-is-sws t c-in-sws t)) . -53) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -54) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 55) nil (26079 2879 804075 536000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t c-in-sws t)) . 52) (undo-tree-id128 . -1) (undo-tree-id129 . -1) 53) nil (26079 2879 804072 121000) 0 nil])
([nil nil ((71 . 71) (71 . 72)) nil (26079 2879 804070 462000) 0 nil])
([nil nil ((72 . 73)) nil (26079 2879 804069 871000) 0 nil])
([nil nil ((#("@" 0 1 (fontified t c-is-sws t)) . -72) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 73) nil (26079 2879 804068 963000) 0 nil])
([nil nil ((72 . 73)) nil (26079 2879 804067 360000) 0 nil])
([nil nil ((#("@" 0 1 (fontified t c-is-sws t)) . -72) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 73) nil (26079 2879 804066 837000) 0 nil])
([nil nil ((72 . 73)) nil (26079 2879 804065 274000) 0 nil])
([nil nil ((73 . 75)) nil (26079 2879 804064 623000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -73) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -74) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 75) nil (26079 2879 804063 670000) 0 nil])
([nil nil ((73 . 75)) nil (26079 2879 804059 947000) 0 nil])
([nil nil ((apply yas--snippet-revive 73 83 #s(yas--snippet nil nil #s(yas--exit 82 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 82 nil) 2 nil nil nil nil)) (73 . 83) (#("include \"$0\"" 0 12 (fontified nil)) . 73) (undo-tree-id112 . -12) (73 . 85) (#("i" 0 1 (c-in-sws t fontified nil)) . 73) (undo-tree-id113 . -1) (73 . 74) (#("include \"header\"" 0 16 (fontified nil)) . -73) (undo-tree-id114 . -16) (73 . 89) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -73) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) 75) nil (26079 2879 804058 675000) 0 nil])
([nil nil ((82 . 85)) nil (26079 2879 804053 781000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -84) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 85) nil (26079 2879 804052 642000) 0 nil])
([nil nil ((84 . 91)) nil (26079 2879 804041 178000) 0 nil])
([nil nil ((374 . 379) (371 . 374) (372 . 375) (#("  " 0 2 (fontified t)) . 372) (undo-tree-id139 . -2) (undo-tree-id140 . -2) 374 (371 . 374) (420 . 421) (418 . 420) (407 . 418) (405 . 407) (392 . 405) (#("source_select" 0 13 (fontified nil)) . -392) (392 . 405) (#("s" 0 1 (fontified t)) . -392) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 393 (392 . 393) (372 . 374) (#(" " 0 1 (fontified nil)) . 372) (390 . 391) (372 . 373) (#("  " 0 2 (fontified nil)) . 372) (390 . 391) (374 . 390) (#("so" 0 2 (fontified nil)) . 374) (374 . 376) (#("source_read_mode" 0 16 (fontified nil)) . -374) (374 . 390) (#("so" 0 1 (fontified t) 1 2 (fontified t)) . -374) (undo-tree-id143 . -2) (undo-tree-id144 . -2) 376 (374 . 376) (371 . 374) (103 . 116) (apply yas--snippet-revive 94 104 #s(yas--snippet nil nil #s(yas--exit 103 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 103 nil) 10 nil nil nil nil)) (94 . 104) (#("include \"$0\"" 0 12 (fontified nil)) . 94) (undo-tree-id145 . -12) (94 . 106) (#("i" 0 1 (c-in-sws t fontified nil)) . 94) (undo-tree-id146 . -1) (94 . 95) (#("include \"header\"" 0 16 (fontified nil)) . -94) (undo-tree-id147 . -16) (94 . 110) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -94) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) 96 (94 . 96) (93 . 94) (93 . 93) (93 . 94) (347 . 350) (#("  " 0 2 (fontified t)) . 347) (undo-tree-id151 . -2) (undo-tree-id152 . -2) 349 (347 . 349) (346 . 348) (345 . 347) (344 . 344) (344 . 345) (apply yas--snippet-revive 326 344 #s(yas--snippet nil (#s(yas--field 1 331 337 nil nil nil t #s(yas--field 2 339 343 nil nil nil t nil)) #s(yas--field 2 339 343 nil nil nil t nil)) nil 9 nil #s(yas--field 2 339 343 nil nil nil t nil) nil nil)) (340 . 343) (#("test_name" 0 9 (fontified nil)) . 340) (339 . 340) (332 . 337) (#("test_suite_name" 0 15 (fontified nil)) . 332) (331 . 332) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 331 337 nil nil nil t #s(yas--field 2 339 343 nil nil nil t nil)) #s(yas--field 2 339 343 nil nil nil t nil)) nil 9 nil #s(yas--field 2 339 343 nil nil nil t nil) nil nil)) (326 . 358) (#("TEST(${1:test_suite_name}, ${2:test_name})" 0 42 (fontified nil)) . 326) (326 . 368) (#("T" 0 1 (fontified nil)) . 326) (326 . 327) (#("TEST(test_suite_name, test_name)" 0 32 (fontified nil)) . -326) (326 . 358) (#("T" 0 1 (fontified t)) . -326) (undo-tree-id153 . -1) (undo-tree-id154 . -1) 327 (326 . 327) (325 . 326) (t 26079 2879 819673 555000) 325) nil (26079 22830 319994 12000) 0 nil])
([nil nil ((406 . 407) (401 . 404) (400 . 402) (399 . 400) (395 . 398) (395 . 396) (nil syntax-table nil 396 . 397) (nil syntax-table (1) 394 . 395) (394 . 395) (#("\"" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -394) (nil syntax-table nil 396 . 397) (nil syntax-table (1) 394 . 395) (394 . 395) (393 . 395) (389 . 393) (388 . 389) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -388) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 389 (383 . 389) (381 . 383) (#(" " 0 1 (fontified nil)) . 381) (380 . 381) (379 . 380) (374 . 379) (#("char" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 374) (undo-tree-id138 . -3)) nil (26079 22830 319978 757000) 0 nil])
([nil nil ((467 . 468) 406) nil (26079 22830 319963 734000) 0 nil])
([nil nil ((463 . 465) (#("a" 0 1 (fontified t)) . -463) (undo-tree-id155 . -1) (undo-tree-id156 . -1) 464 (463 . 464) (461 . 463) (#("q" 0 1 (fontified t)) . -461) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("q" 0 1 (fontified t)) . -462) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("q" 0 1 (fontified t)) . -463) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 464 (461 . 464) (#("\"" 0 1 (fontified t face font-lock-warning-face)) . -461) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (nil syntax-table nil 464 . 465) (nil syntax-table (1) 461 . 462) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -462) (undo-tree-id165 . -1) 463 (460 . 461) (459 . 460) (459 . 461) (t 26079 22830 332520 437000)) nil (26079 22848 457549 777000) 0 nil])
([nil nil ((394 . 396) (392 . 394) (t 26079 22848 465853 323000)) nil (26079 22908 796576 156000) 0 nil])
([nil nil ((393 . 394) (t 26079 22908 802518 501000)) nil (26079 22946 279414 967000) 0 nil])
([nil nil ((396 . 397) (t 26079 22946 302517 575000)) nil (26079 23011 52787 59000) 0 nil])
([nil nil ((492 . 496) (#("s" 0 1 (fontified t)) . -492) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (#("t" 0 1 (fontified t)) . -493) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("r" 0 1 (fontified t)) . -494) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("s" 0 1 (fontified t)) . -495) (undo-tree-id172 . -1) 496 (441 . 442) (439 . 441) (#("y" 0 1 (fontified t)) . -439) (undo-tree-id173 . -1) (undo-tree-id174 . -1) 440 (432 . 440) (427 . 428) (423 . 427) (421 . 423) (416 . 421) (413 . 416) (t 26079 23011 102515 991000) 396) nil (26079 23060 565272 545000) 0 nil])
([nil nil ((435 . 436) (434 . 435) (426 . 434) (#("s" 0 1 (fontified t)) . -426) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("t" 0 1 (fontified t)) . -427) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("r" 0 1 (fontified t)) . -428) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("s" 0 1 (fontified t)) . -429) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#(";" 0 1 (fontified t)) . -430) (undo-tree-id183 . -1) 431 (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -395) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("4" 0 1 (fontified t)) . -396) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -397) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . 1) (undo-tree-id191 . -1) 398 (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -399) (undo-tree-id192 . -1) 400 (#("," 0 1 (fontified t)) . -405) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("\"" 0 1 (fontified t face font-lock-warning-face)) . -406) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (nil syntax-table nil 408 . 409) (nil syntax-table (1) 406 . 407) (#("q" 0 1 (fontified t face font-lock-string-face)) . -407) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (nil syntax-table nil 409 . 410) (nil syntax-table (1) 406 . 407) (#("q" 0 1 (fontified t face font-lock-string-face)) . -408) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (nil syntax-table nil 410 . 411) (nil syntax-table (1) 406 . 407) (#("q" 0 1 (fontified t face font-lock-string-face)) . -409) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (nil syntax-table nil 411 . 412) (nil syntax-table (1) 406 . 407) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -410) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 411 (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 411) (undo-tree-id217 . 1) (undo-tree-id218 . -1) (t 26079 23060 572514 779000)) nil (26079 23132 43098 376000) 0 nil])
([nil nil ((apply -3 437 497 undo--wrap-and-run-primitive-undo 437 497 ((439 . 442) 493))) nil (26079 23132 43062 338000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 393) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (t 26079 23132 45846 350000)) nil (26079 23171 185636 712000) 0 nil])
([nil nil ((450 . 451) (445 . 450) (443 . 444) (442 . 444) (439 . 442) (438 . 439) (435 . 438) (t 26079 23171 195845 383000) 430) nil (26079 23208 795490 292000) 0 nil])
([nil nil ((apply 3 452 508 undo--wrap-and-run-primitive-undo 452 508 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -454) 511))) nil (26079 23208 795485 666000) 0 nil])
([nil nil ((501 . 502) (#("mdzz" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 501) (undo-tree-id221 . -3) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (t 26079 23208 805844 464000)) nil (26079 23268 867533 407000) 0 nil])
([nil nil ((512 . 513) (507 . 512) (504 . 507) (t 26079 23268 879176 315000) 501) nil (26079 23304 410676 647000) 0 nil])
([nil nil ((apply -6 418 511 undo--wrap-and-run-primitive-undo 418 511 ((441 . 444) (420 . 423) 452)) (t 26079 23304 419175 437000)) nil (26079 23332 984751 170000) 0 nil])
([nil nil ((#("," 0 1 (fontified t c-type c-not-decl)) . 506) (t 26079 23333 5841 401000)) nil (26079 23357 127205 825000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 506)) nil (26079 23357 127201 210000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 505) (t 26079 23357 139174 146000)) nil (26079 23433 527781 867000) 0 nil])
([nil nil ((507 . 508) (506 . 507) (505 . 506) (t 26079 23433 549172 261000)) nil (26079 23577 104677 994000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 505) (t 26079 23577 112502 55000)) nil (26079 24057 220588 675000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 505) (undo-tree-id225 . -1)) nil (26079 24057 220587 602000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 505) (undo-tree-id224 . -1)) nil (26079 24057 220585 830000) 0 nil])
([nil nil ((506 . 509) (505 . 507)) nil (26079 27634 230787 136000) 0 nil])
([nil current ((#("e" 0 1 (fontified t face font-lock-constant-face)) . 475) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1)) nil (26079 27638 891695 149000) 0 nil] [nil nil ((#("e" 0 1 (fontified t)) . 503) (t 26079 24057 239156 870000)) ((503 . 504) (t 26079 27610 852402 645000)) (26079 27610 834412 381000) 0 nil])
nil
nil
