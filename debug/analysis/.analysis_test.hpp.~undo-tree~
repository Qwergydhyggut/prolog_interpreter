(undo-tree-save-format-version . 1)
"dc4a1a9d0695aa1ce4f69d70693cfb525e1d27e2"
[nil nil nil nil (26076 17219 435692 941000) 0 nil]
([nil nil ((60 . 61) (59 . 60) (#("f" 0 1 (fontified t)) . -59) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 60 (55 . 60) (52 . 55) (53 . 56) (#("  " 0 2 (fontified t)) . 53) (undo-tree-id92 . -2) (undo-tree-id93 . -2) 55 (53 . 55) (52 . 54) (51 . 53) (50 . 50) (50 . 51) (apply yas--snippet-revive 28 50 #s(yas--snippet nil (#s(yas--field 1 33 41 nil nil nil t #s(yas--field 2 43 49 nil nil nil t nil)) #s(yas--field 2 43 49 nil nil nil t nil)) nil 3 nil #s(yas--field 2 43 49 nil nil nil t nil) nil nil)) (46 . 49) (44 . 46) (#("test_name" 0 9 (fontified nil)) . 44) (43 . 44) (37 . 41) (34 . 37) (#("test_suite_name" 0 15 (fontified nil)) . 34) (33 . 34) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 33 41 nil nil nil t #s(yas--field 2 43 49 nil nil nil t nil)) #s(yas--field 2 43 49 nil nil nil t nil)) nil 3 nil #s(yas--field 2 43 49 nil nil nil t nil) nil nil)) (28 . 60) (#("TEST(${1:test_suite_name}, ${2:test_name})" 0 1 (fontified nil c-is-sws t) 1 42 (fontified nil)) . 28) (28 . 70) (#("T" 0 1 (fontified nil c-is-sws t)) . 28) (28 . 29) (#("TEST(test_suite_name, test_name)" 0 1 (fontified nil c-is-sws t) 1 32 (fontified nil)) . -28) (28 . 60) (#("T" 0 1 (fontified t c-is-sws t)) . -28) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 29 (28 . 29) (27 . 27) (27 . 28) (26 . 26) (26 . 27) (25 . 25) (25 . 26) (17 . 25) (#("g" 0 1 (fontified nil)) . 17) (undo-tree-id96 . -1) (17 . 18) (#("gtest.h>" 0 8 (fontified nil)) . -17) (undo-tree-id97 . -8) (17 . 25) (#("g" 0 1 (fontified t face font-lock-string-face)) . -17) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 18 (17 . 18) (11 . 17) (#("g>" 0 1 (fontified nil) 1 2 (fontified nil face (rainbow-delimiters-depth-1-face font-lock-string-face))) . 11) (undo-tree-id101 . -2) (11 . 12) (#("gtest/" 0 6 (fontified nil)) . -11) (11 . 17) (#("gt" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . -11) (undo-tree-id102 . -2) (undo-tree-id103 . -2) 13 (11 . 13) (apply yas--snippet-revive 2 12 #s(yas--snippet nil nil #s(yas--exit 11 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11 nil) 2 nil nil nil nil)) (2 . 12) (#("include <$0>" 0 12 (fontified nil)) . 2) (undo-tree-id104 . -12) (2 . 14) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id105 . -1) (2 . 3) (#("include <header>" 0 16 (fontified nil)) . -2) (undo-tree-id106 . -16) (2 . 18) (#("in" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) 4 (2 . 4) (1 . 2) (#("T" 0 1 (fontified t)) . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 2 (1 . 2) (t 26076 17068 96639 827000)) nil (26076 17219 435683 596000) 0 nil])
([nil nil ((67 . 68) 60) nil (26076 17219 434780 12000) 0 nil])
([nil nil ((36 . 46) (apply yas--snippet-revive 27 37 #s(yas--snippet nil nil #s(yas--exit 36 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 36 nil) 14 nil nil nil nil)) (27 . 37) (#("include \"$0\"" 0 12 (fontified nil)) . 27) (undo-tree-id114 . -12) (27 . 39) (#("i" 0 1 (c-in-sws t fontified nil)) . 27) (undo-tree-id115 . -1) (27 . 28) (#("include \"header\"" 0 16 (fontified nil)) . -27) (undo-tree-id116 . -16) (27 . 43) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -27) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) 29 (27 . 29) (26 . 27) (26 . 27) (t 26076 17219 459970 111000)) nil (26076 18123 5209 652000) 0 nil])
([nil nil ((74 . 77) (119 . 120) (nil face font-lock-type-face 117 . 119) (nil fontified t 117 . 119) (117 . 119) (106 . 117) (104 . 106) (77 . 104) (#("an" 0 2 (fontified nil)) . 77) (77 . 79) (#("analysis_mod::analysis_read" 0 27 (fontified nil)) . -77) (77 . 104) (#("ana" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -77) (undo-tree-id112 . -3) (undo-tree-id113 . -3) 80 (77 . 80) (74 . 77) 73) nil (26076 18123 5202 532000) 0 nil])
([nil nil ((nil rear-nonsticky nil 76 . 77) (#("
" 0 1 (fontified nil)) . -136) (75 . 137) (nil face (rainbow-delimiters-depth-1-face) 74 . 75) (nil fontified t 74 . 75) (74 . 75) 73) nil (26076 18123 5194 124000) 0 nil])
([nil nil ((107 . 108) (#("T" 0 1 (fontified t face font-lock-variable-name-face)) . 107)) nil (26076 18123 5193 48000) 0 nil])
([nil nil ((133 . 134) (#("T" 0 1 (fontified t)) . 133)) nil (26076 18123 5191 649000) 0 nil])
([nil nil ((183 . 184)) nil (26076 18123 5187 776000) 0 nil])
([nil nil ((186 . 187) (t 26076 18123 16618 554000)) nil (26076 18226 85569 898000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 186) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 187) nil (26076 18226 85566 333000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -198) (136 . 199) 123 (t 26076 18226 96616 476000)) nil (26076 52465 606085 827000) 0 nil])
([nil nil ((195 . 196) (#("S" 0 1 (fontified t)) . 195)) nil (26076 52465 606084 826000) 0 nil])
([nil nil ((196 . 197)) nil (26076 52465 607745 916000) 0 nil])
([nil nil ((169 . 171) (#("S" 0 1 (fontified t face font-lock-function-name-face)) . 169)) nil (26076 52474 390293 420000) 0 nil] [nil nil ((#("D);" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t)) . 196) (undo-tree-id147 . 2) (undo-tree-id148 . -2) (undo-tree-id149 . 2)) ((196 . 199)) (26076 52465 606080 763000) 0 nil])
([nil nil ((nil rear-nonsticky nil 252 . 253) (#("
" 0 1 (fontified nil)) . -297) (250 . 298) 237 (t 26076 52474 399253 908000)) nil (26076 52607 518737 535000) 0 nil])
nil
([nil nil ((294 . 296) (#("S" 0 1 (fontified t)) . 294)) nil (26076 52607 518735 997000) 0 nil])
([nil nil ((306 . 307) (301 . 306) (298 . 301) 295) nil (26076 52607 518732 105000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -264) (200 . 265) 144 (t 26076 52607 525917 870000)) nil (26076 52663 879616 68000) 0 nil])
([nil nil ((233 . 235) (#("ID" 0 1 (fontified t face font-lock-function-name-face) 1 2 (fontified t face font-lock-function-name-face)) . 233) (undo-tree-id305 . -1) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2)) nil (26076 52663 879614 873000) 0 nil])
([nil nil ((260 . 262) (#("I" 0 1 (fontified t face font-lock-type-face)) . -260) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 261 (260 . 261) (#("ID" 0 1 (fontified t) 1 2 (fontified t)) . 260) (undo-tree-id302 . -1) (undo-tree-id303 . -2) (undo-tree-id304 . -2)) nil (26076 52663 879603 156000) 0 nil])
([nil nil ((268 . 270) (268 . 269) 313 (t 26076 52663 889250 66000)) nil (26076 52728 49945 523000) 0 nil])
([nil nil ((270 . 274)) nil (26076 52728 49944 826000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -270) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -271) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -272) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -273) (undo-tree-id319 . -1) (undo-tree-id320 . -1) 274) nil (26076 52728 49943 522000) 0 nil])
([nil nil ((270 . 272)) nil (26076 52728 49937 779000) 0 nil])
([nil nil ((270 . 282) (#("a" 0 1 (fontified nil)) . 270) (270 . 271) (#("analysis_mod" 0 12 (fontified nil)) . -270) (270 . 282) (#("an" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -270) (undo-tree-id311 . -2) (undo-tree-id312 . -2) 272) nil (26076 52728 49936 672000) 0 nil])
([nil nil ((268 . 270) (#(" " 0 1 (fontified nil)) . 268) (282 . 283) (268 . 269) (#("  " 0 2 (fontified nil)) . 268) (282 . 283)) nil (26076 52728 49933 876000) 0 nil])
([nil nil ((284 . 287)) nil (26076 52728 49932 870000) 0 nil])
([nil nil ((284 . 293) (#("csz_stack" 0 9 (fontified nil)) . -284) (284 . 293) (#("csz" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -284) (undo-tree-id309 . -3) (undo-tree-id310 . -3) 287) nil (26076 52728 49931 737000) 0 nil])
([nil nil ((293 . 295)) nil (26076 52728 49924 535000) 0 nil])
([nil nil ((295 . 299)) nil (26076 52728 51809 944000) 0 nil])
([nil nil ((309 . 310) (306 . 308) (305 . 306) (#("," 0 1 (fontified t)) . -305) (undo-tree-id324 . -1) (undo-tree-id325 . -1) 306 (305 . 306) (#("m" 0 1 (fontified t)) . -305) (undo-tree-id326 . -1) (undo-tree-id327 . -1) 306 (305 . 306) (301 . 304) (300 . 302) (299 . 301)) nil (26076 52759 186932 487000) 0 nil] [nil nil ((299 . 301)) ((#("[]" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face))) . 299) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1)) (26076 52728 49919 628000) 0 nil])
([nil nil ((308 . 311) (307 . 309)) nil (26076 52762 147748 407000) 0 nil] [nil nil ((307 . 309)) ((#("''" 0 1 (fontified t face font-lock-warning-face) 1 2 (fontified t face font-lock-warning-face)) . 307) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -1)) (26076 52759 185230 206000) 0 nil])
nil
([nil nil ((apply -3 268 366 undo--wrap-and-run-primitive-undo 268 366 ((270 . 273) 316)) (t 26076 52762 155914 731000)) nil (26076 52878 301659 629000) 0 nil])
nil
([nil nil ((302 . 303) (289 . 302) (#("analysis_read" 0 13 (fontified nil)) . -289) (289 . 302) (#("an" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -289) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -2) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) 291 (289 . 291) (287 . 289) (275 . 287) (#("a" 0 1 (fontified nil)) . 275) (275 . 276) (#("analysis_mod" 0 12 (fontified nil)) . -275) (275 . 287) (#("ana" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -275) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -2) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) (undo-tree-id603 . -3) (undo-tree-id604 . -3) (undo-tree-id605 . -3) (undo-tree-id606 . -3) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -3) (undo-tree-id666 . -3) (undo-tree-id667 . -3) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (undo-tree-id698 . -3) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (undo-tree-id703 . -3) (undo-tree-id704 . -3) (undo-tree-id705 . -3) (undo-tree-id706 . -3) (undo-tree-id707 . -3) (undo-tree-id708 . -3) (undo-tree-id709 . -3) (undo-tree-id710 . -3) (undo-tree-id711 . -3) (undo-tree-id712 . -3) (undo-tree-id713 . -3) (undo-tree-id714 . -3) (undo-tree-id715 . -3) (undo-tree-id716 . -3) (undo-tree-id717 . -3) (undo-tree-id718 . -3) (undo-tree-id719 . -3) (undo-tree-id720 . -3) (undo-tree-id721 . -3) (undo-tree-id722 . -3) (undo-tree-id723 . -3) (undo-tree-id724 . -3) (undo-tree-id725 . -3) (undo-tree-id726 . -3) (undo-tree-id727 . -3) (undo-tree-id728 . -3) (undo-tree-id729 . -3) (undo-tree-id730 . -3) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -3) (undo-tree-id738 . -3) (undo-tree-id739 . -3) (undo-tree-id740 . -3) (undo-tree-id741 . -3) (undo-tree-id742 . -3) (undo-tree-id743 . -3) (undo-tree-id744 . -3) (undo-tree-id745 . -3) (undo-tree-id746 . -3) (undo-tree-id747 . -3) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) (undo-tree-id752 . -3) 278 (275 . 278) (274 . 275) (268 . 274) (#("sta" 0 3 (fontified nil)) . 268) (268 . 271) (#("static" 0 6 (fontified nil)) . -268) (268 . 274) (#("stat" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -268) (undo-tree-id753 . -4) (undo-tree-id754 . -4) 272 (270 . 272) (#("y" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -270) (undo-tree-id755 . -1) (undo-tree-id756 . -1) 271 (268 . 271) (265 . 268) (#("  " 0 2 (fontified t)) . 265) (undo-tree-id757 . -2) (undo-tree-id758 . -2) 267 (264 . 267) 246) nil (26076 52878 301646 907000) 0 nil])
([nil nil ((357 . 358) (352 . 355) (351 . 353) (350 . 352) (346 . 350) (345 . 346) (341 . 345) (338 . 341) (337 . 338) (333 . 336) (332 . 334) (325 . 332) (#("=" 0 1 (fontified t)) . -325) (undo-tree-id344 . -1) (undo-tree-id345 . -1) 326 (322 . 326) (319 . 322) (#("  " 0 2 (fontified t)) . 319) (undo-tree-id346 . -2) (undo-tree-id347 . -2) 321 (317 . 318) (313 . 317) (312 . 313) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -312) (undo-tree-id348 . -1) (undo-tree-id349 . -1) 313 (307 . 313) (304 . 307) (303 . 304) (302 . 303) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 302) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1)) nil (26076 52878 300771 484000) 0 nil])
([nil nil ((apply 3 359 407 undo--wrap-and-run-primitive-undo 359 407 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 2 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -361) 410))) nil (26076 52878 300717 533000) 0 nil])
([nil nil ((nil fontified nil 398 . 401) (nil face (rainbow-delimiters-depth-3-face) 398 . 401) (398 . 401) (#("sq" 0 2 (fontified nil)) . 398) (nil fontified nil 398 . 400) (nil face (rainbow-delimiters-depth-3-face) 398 . 400) (398 . 400) (#("sqs" 0 3 (fontified nil)) . -398) (nil fontified nil 398 . 401) (nil face (rainbow-delimiters-depth-3-face) 398 . 401) (398 . 401) (#("sq" 0 1 (fontified t) 1 2 (fontified t)) . -398) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) 400 (398 . 400) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -398) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (nil syntax-table nil 402 . 403) (nil syntax-table (1) 398 . 399) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 399) (#("l" 0 1 (fontified t face font-lock-string-face)) . -399) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -400) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -401) (undo-tree-id343 . -1) 402) nil (26076 52878 300712 922000) 0 nil])
([nil nil ((289 . 298) (#("cs" 0 2 (fontified nil)) . 289) (289 . 291) (#("csz_stack" 0 9 (fontified nil)) . -289) (289 . 298) (#("cs" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face)) . -289) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -2) (undo-tree-id908 . -2) (undo-tree-id909 . -2) (undo-tree-id910 . -2) (undo-tree-id911 . -2) (undo-tree-id912 . -2) (undo-tree-id913 . -2) (undo-tree-id914 . -2) (undo-tree-id915 . -2) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -2) (undo-tree-id919 . -2) (undo-tree-id920 . -2) (undo-tree-id921 . -2) (undo-tree-id922 . -2) (undo-tree-id923 . -2) (undo-tree-id924 . -2) (undo-tree-id925 . -2) (undo-tree-id926 . -2) (undo-tree-id927 . -2) (undo-tree-id928 . -2) (undo-tree-id929 . -2) (undo-tree-id930 . -2) (undo-tree-id931 . -2) (undo-tree-id932 . -2) (undo-tree-id933 . -2) (undo-tree-id934 . -2) (undo-tree-id935 . -2) (undo-tree-id936 . -2) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . -2) (undo-tree-id940 . -2) (undo-tree-id941 . -2) (undo-tree-id942 . -2) (undo-tree-id943 . -2) (undo-tree-id944 . -2) (undo-tree-id945 . -2) (undo-tree-id946 . -2) (undo-tree-id947 . -2) (undo-tree-id948 . -2) (undo-tree-id949 . -2) (undo-tree-id950 . -2) (undo-tree-id951 . -2) (undo-tree-id952 . -2) (undo-tree-id953 . -2) (undo-tree-id954 . -2) (undo-tree-id955 . -2) (undo-tree-id956 . -2) (undo-tree-id957 . -2) (undo-tree-id958 . -2) (undo-tree-id959 . -2) (undo-tree-id960 . -2) (undo-tree-id961 . -2) (undo-tree-id962 . -2) (undo-tree-id963 . -2) (undo-tree-id964 . -2) (undo-tree-id965 . -2) (undo-tree-id966 . -2) (undo-tree-id967 . -2) (undo-tree-id968 . -2) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) (undo-tree-id984 . -2) (undo-tree-id985 . -2) (undo-tree-id986 . -2) (undo-tree-id987 . -2) (undo-tree-id988 . -2) (undo-tree-id989 . -2) (undo-tree-id990 . -2) (undo-tree-id991 . -2) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id994 . -2) (undo-tree-id995 . -2) (undo-tree-id996 . -2) (undo-tree-id997 . -2) (undo-tree-id998 . -2) (undo-tree-id999 . -2) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -2) (undo-tree-id1003 . -2) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) 291 (290 . 291) (289 . 290) (#("analysis_read" 0 12 (fontified t face font-lock-constant-face) 12 13 (fontified t face font-lock-constant-face)) . 289) (undo-tree-id1053 . -12) (undo-tree-id1054 . -13) (undo-tree-id1055 . -13) (t 26076 52878 312579 40000)) nil (26076 52935 739188 635000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -396) (undo-tree-id1056 . -1) (undo-tree-id1057 . 1) (undo-tree-id1058 . -1) 397 (#("{" 0 1 (fontified t c-type c-not-decl face (rainbow-delimiters-depth-3-face))) . 393) (undo-tree-id1059 . 1) (undo-tree-id1060 . -1) (t 26076 52935 752577 878000)) nil (26076 52968 810047 697000) 0 nil])
([nil nil ((apply -9 316 455 undo--wrap-and-run-primitive-undo 316 455 ((363 . 366) (340 . 343) (318 . 321) 316)) (t 26076 52968 815910 543000)) nil (26076 53044 548471 581000) 0 nil])
([nil nil ((apply 6 316 355 undo--wrap-and-run-primitive-undo 316 355 ((#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -337) (#("// " 0 1 (c-is-sws t fontified t c-in-sws t face font-lock-comment-delimiter-face) 1 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -318) 361)) (t 26076 53044 555909 3000)) nil (26076 53059 845650 615000) 0 nil])
([nil nil ((apply 3 355 399 undo--wrap-and-run-primitive-undo 355 399 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -357) 402)) (t 26076 53059 855908 693000)) nil (26076 53127 9627 255000) 0 nil])
([nil nil ((398 . 407) (396 . 398) (393 . 396) (393 . 394) (403 . 404) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -403) (403 . 404) (#(")" 0 1 (fontified nil)) . -402) (402 . 403) (#(")" 0 1 (fontified nil)) . -402) (402 . 403) (402 . 403) (#(")" 0 1 (fontified nil)) . -402) (402 . 403) (#("}" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -402) (undo-tree-id1061 . 1) (undo-tree-id1062 . -1) (undo-tree-id1063 . 1) (undo-tree-id1064 . -1) 403 (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -393) (undo-tree-id1065 . -1) (undo-tree-id1066 . 1) (undo-tree-id1067 . -1) 394 (392 . 394) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -392) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) 393 (385 . 392) (#("=" 0 1 (fontified t)) . 385) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (t 26076 53127 29240 651000)) nil (26076 53261 476320 754000) 0 nil])
([nil nil ((368 . 369) (365 . 367) (364 . 366) (362 . 364) (357 . 362) (354 . 357) (t 26076 53261 489237 929000) 353) nil (26076 53333 192400 128000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -578) (530 . 579) 496 (t 26076 53333 202569 812000)) nil (26076 53351 416826 316000) 0 nil])
([nil nil ((574 . 576) (#("9" 0 1 (fontified t)) . -574) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("0" 0 1 (fontified t)) . -575) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) 576 (574 . 576) (#("ID" 0 1 (fontified t) 1 2 (fontified t)) . 574) (undo-tree-id1077 . -1) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2)) nil (26076 53351 416821 797000) 0 nil])
([nil nil ((384 . 385) (380 . 383) (379 . 381) (374 . 379) (372 . 374) (369 . 372) (t 26076 53351 425902 778000) 368) nil (26076 53364 804679 79000) 0 nil])
([nil nil ((390 . 391) (387 . 390) (#("y" 0 1 (fontified t)) . -387) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) 388 (383 . 388) (367 . 368) (363 . 367) (#("y" 0 1 (fontified t)) . -363) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) 364 (359 . 364) (#("." 0 1 (fontified t)) . 359) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (t 26076 53364 812569 173000)) nil (26076 53399 55551 591000) 0 nil])
([nil nil ((323 . 324) (318 . 323) (316 . 318) (316 . 317) 328 (t 26076 53399 75901 810000)) nil (26076 53477 141090 70000) 0 nil])
([nil nil ((418 . 419) (413 . 418) (410 . 413) (t 26076 53477 152566 894000) 394) nil (26076 53505 857239 37000) 0 nil])
([nil nil ((493 . 494) (488 . 493) (485 . 488) (t 26076 53505 869232 979000) 427) nil (26076 53545 887920 19000) 0 nil])
([nil nil ((398 . 399) (380 . 398) (#("tok" 0 3 (fontified nil)) . 380) (380 . 383) (#("token_class::token" 0 18 (fontified nil)) . -380) (380 . 398) (#("tok" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -380) (undo-tree-id1093 . -3) (undo-tree-id1094 . -3) 383 (375 . 383) (#("-" 0 1 (fontified t)) . -375) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#(">" 0 1 (fontified t)) . -376) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) 377 (376 . 377) (366 . 376) (363 . 366) 351) nil (26076 53545 887918 177000) 0 nil])
([nil nil ((nil rear-nonsticky nil 401 . 402) (#("
" 0 1 (fontified nil)) . -435) (399 . 436) 398) nil (26076 53545 887911 259000) 0 nil])
([nil nil ((403 . 404) (402 . 403) (#("I" 0 1 (fontified t)) . -402) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) 403 (402 . 403) (#("ID" 0 1 (fontified t) 1 2 (fontified t)) . 402) (undo-tree-id1090 . -1) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2)) nil (26076 53545 887907 573000) 0 nil])
([nil nil ((494 . 495) (485 . 494) (482 . 485) (t 26076 53545 932565 492000) 462) nil (26076 53778 832845 316000) 0 nil])
([nil nil ((490 . 494) (#("-" 0 1 (fontified t)) . -490) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) 491 (488 . 491) (#("u" 0 1 (fontified t)) . -488) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) 489 (488 . 489) (489 . 490) (488 . 489) (t 26076 53778 849227 441000)) nil (26076 53803 998917 660000) 0 nil])
([nil nil ((501 . 502) (#("1" 0 1 (fontified t)) . 501) (t 26076 53804 15893 597000)) nil (26076 53992 119477 824000) 0 nil])
([nil nil ((363 . 366) (362 . 364) (361 . 362) (#("m" 0 1 (fontified t)) . -361) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) 362 (361 . 362)) nil (26076 53992 119476 599000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -736) (688 . 737) 662) nil (26076 53992 416852 901000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -328) (264 . 329) 241 (t 26076 53994 349223 64000)) nil (26076 54175 120100 490000) 0 nil] [nil nil ((#("ID" 0 1 (fontified t) 1 2 (fontified t)) . 732) (undo-tree-id1103 . -1) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2)) ((732 . 734)) (26076 53992 121611 669000) 0 nil])
([nil nil ((299 . 300)) nil (26076 54175 120099 869000) 0 nil])
([nil nil ((732 . 733)) ((#("I" 0 1 (fontified t)) . 732) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1)) (26076 53992 119462 357000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -542) (506 . 543) 505) nil (26076 54175 120099 198000) 0 nil])
nil
([nil nil ((511 . 512)) nil (26076 54175 122859 717000) 0 nil])
([nil nil ((nil rear-nonsticky nil 613 . 614) (#("
" 0 1 (fontified nil)) . -632) (611 . 633) 595) nil (26076 54241 268267 215000) 0 nil] [nil nil ((#("
" 0 1 (fontified nil)) . -647) (611 . 648) 595) ((#("
  OP.is_ter=new token_class::token;
" 0 1 (fontified t) 1 2 (fontified nil) 2 3 (rear-nonsticky t fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil face font-lock-keyword-face) 14 15 (fontified nil face font-lock-keyword-face) 15 16 (fontified nil face font-lock-keyword-face) 16 17 (fontified nil) 17 28 (fontified nil face font-lock-constant-face) 28 30 (fontified nil) 30 35 (fontified nil face font-lock-type-face) 35 36 (fontified nil) 36 37 (fontified nil)) . 611) (undo-tree-id1112 . -1) (undo-tree-id1113 . -36) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -17) (undo-tree-id1120 . -28) (undo-tree-id1121 . -3) (647 . 648)) (26076 54175 120094 33000) 0 nil])
([nil nil ((616 . 617)) nil (26076 54241 268266 586000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 635 . 636) (#("
" 0 1 (fontified nil)) . -654) (633 . 655) 616) nil (26076 54241 268266 90000) 0 nil])
([nil nil ((638 . 639)) nil (26076 54241 268265 228000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -626) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (#("r" 0 1 (fontified t)) . -627) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#("g" 0 1 (fontified t)) . -628) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (#("s" 0 1 (fontified t)) . -629) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) 630) nil (26076 54241 268264 102000) 0 nil])
([nil nil ((626 . 629)) nil (26076 54241 268257 982000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -630) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) 631) nil (26076 54241 268257 227000) 0 nil])
([nil nil ((630 . 632)) nil (26076 54241 268255 524000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -652) (undo-tree-id1125 . -1) 653) nil (26076 54241 268254 812000) 0 nil])
([nil nil ((652 . 653)) nil (26076 54241 268253 227000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -652) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) 653) nil (26076 54241 268252 603000) 0 nil])
([nil nil ((652 . 653)) nil (26076 54241 268250 643000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -653) (undo-tree-id1122 . -1) 654) nil (26076 54241 268249 841000) 0 nil])
([nil nil ((653 . 654)) nil (26076 54241 268243 666000) 0 nil])
([nil nil ((631 . 634)) nil (26076 54241 268239 658000) 0 nil])
([nil nil ((nil rear-nonsticky nil 381 . 382) (#("
" 0 1 (fontified nil)) . -428) (379 . 429) 352 (t 26076 54241 299218 41000)) nil (26076 54357 734492 149000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t face font-lock-variable-name-face)) . -428) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) 429 (427 . 429) (#("q" 0 1 (fontified t face font-lock-variable-name-face)) . -427) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) 428 (427 . 428)) nil (26076 54357 734490 893000) 0 nil])
([nil nil ((nil rear-nonsticky nil 486 . 487) (#("
" 0 1 (fontified nil)) . -529) (484 . 530) 476) nil (26076 54357 734487 693000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t face font-lock-string-face)) . -519) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#("q" 0 1 (fontified t face font-lock-string-face)) . -520) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (#("q" 0 1 (fontified t face font-lock-string-face)) . -521) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) 522 (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -522) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (nil syntax-table nil 529 . 530) (nil syntax-table (1) 526 . 527) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 523) (#("," 0 1 (fontified t)) . -523) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) 524 (499 . 502) (#("l" 0 1 (fontified t face font-lock-string-face)) . -499) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -500) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -501) (undo-tree-id1154 . -1) 502 (510 . 511) (490 . 491)) nil (26076 54357 734484 452000) 0 nil])
([nil nil ((nil rear-nonsticky nil 826 . 827) (#("
" 0 1 (fontified nil)) . -890) (824 . 891) 780) nil (26076 54357 734473 574000) 0 nil])
([nil nil ((887 . 888) (879 . 882) (#("lll" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face)) . 879) (undo-tree-id1136 . -3) (undo-tree-id1137 . -2) (undo-tree-id1138 . -3) (undo-tree-id1139 . -3)) nil (26076 54357 734471 274000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1139) (1091 . 1140) 1090) nil (26076 54357 734458 946000) 0 nil])
([nil current ((1137 . 1138)) nil (26076 54357 734454 171000) 0 nil])
nil
