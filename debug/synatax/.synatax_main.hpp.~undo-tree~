(undo-tree-save-format-version . 1)
"6e84a385d884975350a2b77a52ba2fca47fa67e2"
[nil nil nil nil (26070 17869 102880 849000) 0 nil]
([nil nil ((86 . 87) (apply yas--snippet-revive 75 86 #s(yas--snippet nil nil nil 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 40 nil nil nil nil)) (75 . 86) (#("test_syna()" 0 11 (fontified nil)) . 75) (75 . 86) (#("tes" 0 3 (fontified nil)) . 75) (75 . 78) (#("test_syna()" 0 11 (fontified nil)) . -75) (75 . 86) (#("test_sy" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -75) (undo-tree-id0 . -7) (undo-tree-id1 . -7) 82 (80 . 82) (75 . 80) (73 . 75) (73 . 76) (#("  " 0 2 (fontified t)) . 73) (undo-tree-id2 . -2) (undo-tree-id3 . -2) 75 (73 . 75) (72 . 74) (71 . 73) (70 . 70) (70 . 71) (apply yas--snippet-revive 51 70 #s(yas--snippet nil (#s(yas--field 1 56 63 nil nil nil t #s(yas--field 2 65 69 nil nil nil t nil)) #s(yas--field 2 65 69 nil nil nil t nil)) nil 39 nil #s(yas--field 2 65 69 nil nil nil t nil) nil nil)) (#("r" 0 1 (fontified t)) . -69) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 70 (69 . 70) (66 . 69) (#("test_name" 0 9 (fontified nil)) . 66) (65 . 66) (58 . 63) (57 . 58) (#("test_suite_name" 0 15 (fontified nil)) . 57) (56 . 57) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 56 63 nil nil nil t #s(yas--field 2 65 69 nil nil nil t nil)) #s(yas--field 2 65 69 nil nil nil t nil)) nil 39 nil #s(yas--field 2 65 69 nil nil nil t nil) nil nil)) (51 . 83) (#("TEST(${1:test_suite_name}, ${2:test_name})" 0 1 (fontified nil c-is-sws t) 1 42 (fontified nil)) . 51) (51 . 93) (#("TES" 0 1 (fontified nil c-is-sws t) 1 3 (fontified nil)) . 51) (51 . 54) (#("TEST(test_suite_name, test_name)" 0 1 (fontified nil c-is-sws t) 1 32 (fontified nil)) . -51) (51 . 83) (#("TES" 0 1 (fontified t c-is-sws t) 1 2 (fontified t) 2 3 (fontified t)) . -51) (undo-tree-id6 . -3) (undo-tree-id7 . -3) 54 (51 . 54) (50 . 50) (50 . 51) (49 . 49) (49 . 50) (48 . 48) (48 . 49) (#("_" 0 1 (fontified t face font-lock-string-face)) . -43) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -44) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -45) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 46 (#("i" 0 1 (fontified t face font-lock-string-face)) . -46) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -47) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 48 (51 . 52) (#("p" 0 1 (fontified t face font-lock-string-face)) . -51) (undo-tree-id18 . -1) 52 (36 . 53) (nil syntax-table (1) 35 . 36) (#("sy\"" 0 2 (fontified nil) 2 3 (fontified nil face font-lock-string-face)) . 36) (undo-tree-id19 . -3) (36 . 38) (#("synatax_main.hpp\"" 0 17 (fontified nil)) . -36) (nil syntax-table (1) 53 . 54) (36 . 53) (#("synata" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face)) . -36) (undo-tree-id20 . -6) (undo-tree-id21 . -6) 42 (41 . 42) (38 . 41) (#("b" 0 1 (fontified t face font-lock-string-face)) . -38) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 39 (38 . 39) (#("b" 0 1 (fontified t face font-lock-string-face)) . -38) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -39) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 40 (36 . 40) (apply yas--snippet-revive 27 37 #s(yas--snippet nil nil #s(yas--exit 36 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 36 nil) 38 nil nil nil nil)) (27 . 37) (#("include \"$0\"" 0 12 (fontified nil)) . 27) (undo-tree-id28 . -12) (27 . 39) (#("i" 0 1 (fontified nil)) . 27) (undo-tree-id29 . -1) (27 . 28) (#("include \"header\"" 0 16 (fontified nil)) . -27) (undo-tree-id30 . -16) (27 . 43) (#("in" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -27) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) 29 (28 . 29) (#("b" 0 1 (fontified t face font-lock-preprocessor-face)) . -28) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) 29 (28 . 29) (#("b" 0 1 (fontified t face font-lock-preprocessor-face)) . -28) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . -29) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 30 (28 . 30) (#("m" 0 1 (fontified t face font-lock-preprocessor-face)) . -28) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 29 (27 . 29) (26 . 27) (25 . 25) (25 . 26) (17 . 25) (#("gtest.h>" 0 8 (fontified nil)) . -17) (undo-tree-id46 . -8) (17 . 25) (#("g" 0 1 (fontified t face font-lock-string-face)) . -17) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 18 (17 . 18) (#("t" 0 1 (fontified t face font-lock-string-face)) . -17) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 18 (17 . 18) (11 . 17) (#("g>" 0 1 (fontified nil) 1 2 (fontified nil face (rainbow-delimiters-depth-1-face font-lock-string-face))) . 11) (undo-tree-id53 . -2) (11 . 12) (#("gtest/" 0 6 (fontified nil)) . -11) (11 . 17) (#("gt" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . -11) (undo-tree-id54 . -2) (undo-tree-id55 . -2) 13 (11 . 13) (apply yas--snippet-revive 2 12 #s(yas--snippet nil nil #s(yas--exit 11 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11 nil) 37 nil nil nil nil)) (2 . 12) (#("include <$0>" 0 12 (fontified nil)) . 2) (undo-tree-id56 . -12) (2 . 14) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id57 . -1) (2 . 3) (#("include <header>" 0 16 (fontified nil)) . -2) (undo-tree-id58 . -16) (2 . 18) (#("in" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) 4 (2 . 4) (1 . 2) (t 26070 17453 276090 356000)) nil (26070 17869 102869 88000) 0 nil])
([nil current ((92 . 93) 86) nil (26070 17869 102766 588000) 0 nil])
nil
