(undo-tree-save-format-version . 1)
"c0099568c51f32670a5e9120947433922f008999"
[nil nil nil nil (26071 16380 986183 816000) 0 nil]
([nil nil ((598 . 599) (t 26071 16326 696542 965000)) nil (26071 16469 41788 248000) 0 nil] [nil nil ((605 . 608) (t 26071 16326 696542 965000) 604) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 605) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3)) (26071 16380 365256 616000) 0 nil] [nil nil ((apply -3 540 703 undo--wrap-and-run-primitive-undo 540 703 ((542 . 545) 606)) (t 26071 15706 329891 485000)) ((apply 3 540 700 undo--wrap-and-run-primitive-undo 540 700 ((#("// " 0 1 (fontified t face font-lock-comment-delimiter-face c-is-sws t) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 542) 1184)) (t 26071 15756 659890 263000)) (26071 15756 652188 949000) 0 nil] [nil nil ((apply -3 540 703 undo--wrap-and-run-primitive-undo 540 703 ((542 . 545) 606)) (t 26071 6692 786411 586000)) ((apply 3 540 700 undo--wrap-and-run-primitive-undo 540 700 ((#("// " 0 1 (fontified t face font-lock-comment-delimiter-face c-is-sws t) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 542) 540)) (t 26071 15694 293225 115000)) (26071 15694 285696 260000) 0 nil])
([nil nil ((580 . 581)) nil (26071 16469 41787 693000) 0 nil])
([nil nil ((608 . 612)) ((#("test" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 608) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4)) (26071 16380 362896 312000) 0 nil])
nil
nil
([nil nil ((580 . 583)) nil (26071 16469 41787 266000) 0 nil])
nil
([nil nil ((583 . 588)) nil (26071 16469 41786 843000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 605 605 nil nil nil t nil)) nil 17 nil #s(yas--field 1 605 605 nil nil nil t nil) nil nil)) (580 . 612) (#("meta_map_mod::stat_struct<${1:int N}>" 0 37 (fontified nil)) . 580) (nil fontified nil 580 . 617) (580 . 617) (#("sta" 0 3 (fontified nil)) . 580) (nil fontified nil 580 . 583) (580 . 583) (#("meta_map_mod::stat_struct<int N>" 0 25 (fontified nil) 25 26 (syntax-table (4 . 62) fontified nil) 26 31 (fontified nil) 31 32 (syntax-table (5 . 60) fontified nil)) . -580) (nil fontified nil 580 . 612) (580 . 612) (#("stat_str" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face)) . -580) (undo-tree-id207 . -8) (undo-tree-id208 . -8) 588) nil (26071 16469 41785 230000) 0 nil])
([nil nil ((#("int N" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 5 (fontified t face font-lock-variable-name-face)) . 606)) nil (26071 16469 41782 705000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -605) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . 1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 606) nil (26071 16469 41781 977000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face))) . -605) (undo-tree-id199 . -1) (undo-tree-id200 . 1) (undo-tree-id201 . -1) (apply yas--snippet-revive 580 606 #s(yas--snippet nil (#s(yas--field 1 605 605 nil nil nil t nil)) nil 17 nil #s(yas--field 1 605 605 nil nil nil t nil) nil nil))) nil (26071 16469 43893 492000) 0 nil])
([nil nil ((630 . 632) (#("+" 0 1 (fontified t)) . -630) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 631 (626 . 631) (#("S" 0 1 (fontified t)) . -626) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("t" 0 1 (fontified t)) . -627) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("a" 0 1 (fontified t)) . -628) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("t" 0 1 (fontified t)) . -629) (undo-tree-id220 . -1) (undo-tree-id221 . -1) 630 (627 . 630) (626 . 627) (624 . 626)) nil (26071 16499 284380 413000) 0 nil] [nil nil ((605 . 616)) ((#("lllllllllll" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face)) . 605) (undo-tree-id209 . -11) (undo-tree-id210 . -11) (undo-tree-id211 . -11)) (26071 16469 41754 205000) 0 nil])
([nil nil ((apply -3 540 738 undo--wrap-and-run-primitive-undo 540 738 ((542 . 545) 641)) (t 26071 16499 306538 715000)) nil (26071 16644 374882 730000) 0 nil])
nil
([nil nil ((#("  " 0 1 (fontified t c-is-sws t) 1 2 (fontified t c-in-sws t c-is-sws t)) . -644) (undo-tree-id226 . -2) (undo-tree-id227 . -2) 646 (643 . 646) 642) nil (26071 16644 374881 352000) 0 nil])
([nil current ((677 . 678) (672 . 677) (646 . 672) (#("m" 0 1 (c-is-sws t fontified nil)) . 646) (646 . 647) (#("meta_map_mod::meta_map_out" 0 1 (c-is-sws t fontified nil) 1 26 (fontified nil)) . -646) (646 . 672) (#("meta_" 0 1 (fontified t c-is-sws t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -646) (undo-tree-id222 . -5) (undo-tree-id223 . -5) 651 (646 . 651) (644 . 646) (#("A" 0 1 (fontified t c-is-sws t)) . -644) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 645 (644 . 645)) nil (26071 16644 374874 132000) 0 nil])
nil
