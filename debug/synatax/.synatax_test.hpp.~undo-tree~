(undo-tree-save-format-version . 1)
"9ee7b0abd8c6b04c068b3513a3448ea60371d948"
[nil nil nil nil (26070 18157 820132 345000) 0 nil]
([nil nil ((#("p" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -45) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("p" 0 1 (c-in-sws t face font-lock-string-face fontified t)) . -46) (undo-tree-id2 . -1) 47 (t 26070 17869 116082 39000)) nil (26070 18157 820128 263000) 0 nil])
([nil nil ((apply -3 71 92 undo--wrap-and-run-primitive-undo 71 92 ((73 . 76) 86)) (t 26070 18157 829409 617000)) nil (26070 62385 446696 946000) 0 nil])
([nil nil ((121 . 122) (119 . 121) (114 . 119) (104 . 114) (#("synax_read" 0 10 (fontified nil)) . -104) (104 . 114) (89 . 91) (#(" " 0 1 (fontified nil c-is-sws t)) . 89) (102 . 103) (89 . 90) (#("  " 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil c-is-sws t)) . 89) (102 . 103) (91 . 102) (#("sy" 0 1 (c-is-sws t fontified nil) 1 2 (fontified nil)) . 91) (91 . 93) (#("synatax_mod" 0 1 (c-is-sws t fontified nil) 1 11 (fontified nil)) . -91) (91 . 102) (#("sy" 0 1 (fontified t c-is-sws t) 1 2 (fontified t)) . -91) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 93 (91 . 93) (88 . 91) 71) nil (26070 62385 446692 972000) 0 nil])
([nil nil ((108 . 110) (t 26070 62385 599984 359000)) nil (26070 62465 167676 920000) 0 nil])
([nil nil ((#("()" 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face))) . 121) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) (undo-tree-id65 . -2) (undo-tree-id66 . -2) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) (undo-tree-id76 . -2) (undo-tree-id77 . -2) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (undo-tree-id80 . -2) (undo-tree-id81 . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -2) (undo-tree-id225 . -2) (undo-tree-id226 . -2) (undo-tree-id227 . -2) (undo-tree-id228 . -2) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . 1) (undo-tree-id297 . -2) (undo-tree-id298 . 2) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -2) (undo-tree-id410 . -1) 122 (t 26070 62465 176649 86000)) nil (26070 62541 530596 524000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 121) (undo-tree-id411 . -1) (undo-tree-id412 . -1) 122 (121 . 122) (t 26070 62541 536647 222000)) nil (26070 62563 71069 118000) 0 nil])
([nil nil ((130 . 131) (129 . 130) (#("f" 0 1 (fontified t)) . -129) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) 130 (125 . 130) (122 . 125) (t 26070 62563 79980 29000) 120) nil (26070 62594 904626 622000) 0 nil])
([nil nil ((63 . 64) (nil syntax-table nil 63 . 64) (nil syntax-table (1) 56 . 57) (62 . 63) (nil syntax-table nil 62 . 63) (nil syntax-table (1) 56 . 57) (#("/" 0 1 (fontified t face font-lock-string-face)) . -62) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (nil syntax-table nil 63 . 64) (nil syntax-table (1) 56 . 57) (57 . 63) (nil syntax-table nil 57 . 58) (nil syntax-table (1) 56 . 57) (#("d\"" 0 1 (c-in-sws t fontified nil) 1 2 (fontified nil face font-lock-string-face c-in-sws t)) . 57) (undo-tree-id416 . -2) (undo-tree-id417 . 1) (57 . 58) (#("debug/" 0 6 (c-in-sws t fontified nil)) . -57) (57 . 63) (#("de" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face)) . -57) (undo-tree-id418 . -2) (undo-tree-id419 . -2) 59 (57 . 59) (apply yas--snippet-revive 48 58 #s(yas--snippet nil nil #s(yas--exit 57 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 57 nil) 3 nil nil nil nil)) (48 . 58) (#("include \"$0\"" 0 12 (fontified nil)) . 48) (undo-tree-id420 . -12) (48 . 60) (#("i" 0 1 (c-in-sws t fontified nil)) . 48) (undo-tree-id421 . -1) (48 . 49) (#("include \"header\"" 0 16 (fontified nil)) . -48) (undo-tree-id422 . -16) (48 . 64) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -48) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) 49 (48 . 49) (47 . 48) (46 . 47) 33) nil (26070 62594 904621 814000) 0 nil])
([nil nil ((64 . 65) (nil syntax-table nil 64 . 65) (nil syntax-table (1) 56 . 57) (#("\"" 0 1 (fontified nil face font-lock-string-face c-in-sws t)) . -64) (undo-tree-id413 . -1) (64 . 65) (nil syntax-table nil 64 . 65) (nil syntax-table (1) 56 . 57)) nil (26070 62594 904609 872000) 0 nil])
([nil nil ((141 . 144) (t 26070 62594 909979 251000) 125) nil (26070 65472 497209 150000) 0 nil])
([nil nil ((144 . 146)) nil (26070 65472 497208 371000) 0 nil])
([nil nil ((144 . 155) (#("sy" 0 2 (fontified nil)) . 144) (144 . 146) (#("synatax_mod" 0 11 (fontified nil)) . -144) (144 . 155) (#("sy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -144) (undo-tree-id431 . -2) (undo-tree-id432 . -2) 146) nil (26070 65472 497207 524000) 0 nil])
([nil nil ((142 . 144) (#(" " 0 1 (fontified nil)) . 142) (155 . 156) (142 . 143) (#("  " 0 2 (fontified nil)) . 142) (155 . 156)) nil (26070 65472 497204 923000) 0 nil])
([nil nil ((157 . 169) (#("synatax_read" 0 12 (fontified nil)) . -157) (157 . 169)) nil (26070 65472 497203 663000) 0 nil])
([nil nil ((169 . 171)) nil (26070 65472 497202 988000) 0 nil])
([nil nil ((171 . 174)) nil (26070 65472 497202 403000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -173) (undo-tree-id429 . -1) (undo-tree-id430 . -1) 174) nil (26070 65472 497201 48000) 0 nil])
([nil nil ((173 . 179)) nil (26070 65472 497193 637000) 0 nil])
([nil nil ((179 . 182)) nil (26070 65472 497192 906000) 0 nil])
([nil nil ((182 . 183)) nil (26070 65472 497189 509000) 0 nil])
([nil nil ((76 . 79) (apply yas--snippet-revive 67 77 #s(yas--snippet nil nil #s(yas--exit 76 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 76 nil) 22 nil nil nil nil)) (67 . 77) (#("include <$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 67) (undo-tree-id446 . -12) (67 . 79) (#("i" 0 1 (c-in-sws t fontified nil)) . 67) (undo-tree-id447 . -1) (67 . 68) (#("include <header>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 15 (fontified nil) 15 16 (syntax-table (5 . 60) fontified nil)) . -67) (undo-tree-id448 . -16) (67 . 83) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -67) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) 68 (67 . 68) (66 . 67) (65 . 66) (t 26070 65472 513242 397000) 64) nil (26071 253 652035 921000) 0 nil])
([nil nil ((197 . 198)) nil (26071 253 652031 381000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -197) (undo-tree-id444 . -1) (undo-tree-id445 . -1) 198) nil (26071 253 652030 654000) 0 nil])
([nil nil ((197 . 199)) nil (26071 253 652028 866000) 0 nil])
([nil nil ((198 . 200)) nil (26071 253 652028 425000) 0 nil])
([nil nil ((198 . 201) (#("st" 0 2 (fontified nil)) . 198) (198 . 200) (#("std" 0 3 (fontified nil)) . -198) (198 . 201) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -198) (undo-tree-id442 . -2) (undo-tree-id443 . -2) 200) nil (26071 253 652027 730000) 0 nil])
([nil nil ((201 . 203)) nil (26071 253 652025 527000) 0 nil])
([nil nil ((203 . 206)) nil (26071 253 652025 280000) 0 nil])
([nil nil ((206 . 210)) nil (26071 271 177605 766000) 0 nil])
([nil nil ((200 . 201) (196 . 199) (195 . 197) (191 . 195) (190 . 191) (189 . 190) (#("=" 0 1 (fontified t)) . -189) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) 190 (187 . 190) (184 . 187) (183 . 184) (181 . 183) (180 . 181) (179 . 180) (#("q" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -179) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (#("," 0 1 (fontified t c-type c-decl-id-start)) . -180) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) 181 (180 . 181) (178 . 180) (#("y" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -178) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) 179 (178 . 179) (177 . 178) (159 . 177) (#("to" 0 2 (fontified nil)) . 159) (159 . 161) (#("token_class::token" 0 18 (fontified nil)) . -159) (159 . 177) (#("to" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -159) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) 161 (159 . 161) (156 . 159)) nil (26071 328 390166 163000) 0 nil] [nil nil ((81 . 100) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 213 219 nil nil nil t #s(yas--field 2 221 227 nil nil nil nil nil)) #s(yas--field 2 221 227 nil nil nil nil nil)) nil 23 nil #s(yas--field 1 213 219 nil nil nil t #s(yas--field 2 221 227 nil nil nil nil nil)) nil nil)) (203 . 228) (#("make_pair(${1:T1 &&x}, ${2:T2 &&y})" 0 35 (fontified nil)) . 203) (203 . 238) (#("ma" 0 2 (fontified nil)) . 203) (203 . 205) (#("make_pair(T1 &&x, T2 &&y)" 0 25 (fontified nil)) . -203) (203 . 228) (#("make_pa" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -203) (undo-tree-id440 . -7) (undo-tree-id441 . -7) 210) ((203 . 210) (#("make_pair(T1 &&x, T2 &&y)" 0 25 (fontified nil)) . 203) (203 . 228) (#("ma" 0 2 (fontified nil)) . 203) (203 . 205) (#("make_pair(${1:T1 &&x}, ${2:T2 &&y})" 0 35 (fontified nil)) . 203) (203 . 238) (#("make_pair(T1 &&x, T2 &&y)" 0 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 12 (fontified t face font-lock-type-face) 12 15 (fontified t) 15 16 (fontified t face font-lock-variable-name-face) 16 18 (fontified t) 18 20 (fontified t face font-lock-type-face) 20 23 (fontified t) 23 24 (fontified t face font-lock-variable-name-face) 24 25 (fontified t face (rainbow-delimiters-depth-3-face))) . 203) (undo-tree-id975 . -10) (undo-tree-id976 . -10) (undo-tree-id977 . -10) (undo-tree-id978 . -10) (undo-tree-id979 . -10) (undo-tree-id980 . -18) (undo-tree-id981 . -20) (undo-tree-id982 . -23) (undo-tree-id983 . -24) (undo-tree-id984 . -10) (undo-tree-id985 . -10) (undo-tree-id986 . -10) (undo-tree-id987 . -10) (undo-tree-id988 . -10) (undo-tree-id989 . -10) (undo-tree-id990 . -10) (undo-tree-id991 . -10) (undo-tree-id992 . -10) (undo-tree-id993 . -10) (undo-tree-id994 . -10) (undo-tree-id995 . -10) (undo-tree-id996 . -10) (undo-tree-id997 . -10) (undo-tree-id998 . -10) (undo-tree-id999 . -10) (undo-tree-id1000 . -10) (undo-tree-id1001 . -10) (undo-tree-id1002 . -10) (undo-tree-id1003 . -10) (undo-tree-id1004 . -10) (undo-tree-id1005 . -10) (undo-tree-id1006 . -10) (undo-tree-id1007 . -10) (undo-tree-id1008 . -10) (undo-tree-id1009 . -10) (undo-tree-id1010 . -10) (undo-tree-id1011 . -10) (undo-tree-id1012 . -10) (undo-tree-id1013 . -10) (undo-tree-id1014 . -10) (undo-tree-id1015 . -10) (undo-tree-id1016 . -10) (undo-tree-id1017 . -10) (undo-tree-id1018 . -10) (undo-tree-id1019 . -10) (undo-tree-id1020 . -10) (undo-tree-id1021 . -10) (undo-tree-id1022 . -10) (undo-tree-id1023 . -10) (undo-tree-id1024 . -10) (undo-tree-id1025 . -10) (undo-tree-id1026 . -10) (undo-tree-id1027 . -10) (undo-tree-id1028 . -10) (undo-tree-id1029 . -10) (undo-tree-id1030 . -10) (undo-tree-id1031 . -10) (undo-tree-id1032 . -10) (undo-tree-id1033 . -10) (undo-tree-id1034 . -10) (undo-tree-id1035 . -10) (undo-tree-id1036 . -10) (undo-tree-id1037 . -10) (undo-tree-id1038 . -10) (undo-tree-id1039 . -10) (undo-tree-id1040 . -10) (undo-tree-id1041 . -10) (undo-tree-id1042 . -10) (undo-tree-id1043 . -10) (undo-tree-id1044 . -10) (undo-tree-id1045 . -10) (undo-tree-id1046 . -10) (undo-tree-id1047 . -10) (undo-tree-id1048 . -10) (undo-tree-id1049 . -10) (undo-tree-id1050 . -10) (undo-tree-id1051 . -10) (undo-tree-id1052 . -10) (undo-tree-id1053 . -10) (undo-tree-id1054 . -10) (undo-tree-id1055 . -10) (undo-tree-id1056 . -10) (undo-tree-id1057 . -10) (undo-tree-id1058 . -10) (undo-tree-id1059 . -10) (undo-tree-id1060 . -10) (undo-tree-id1061 . -10) (undo-tree-id1062 . -10) (undo-tree-id1063 . -10) (undo-tree-id1064 . -10) (undo-tree-id1065 . -10) (undo-tree-id1066 . -10) (undo-tree-id1067 . -10) (undo-tree-id1068 . -10) (undo-tree-id1069 . -10) (undo-tree-id1070 . -10) (undo-tree-id1071 . -10) (undo-tree-id1072 . -10) (undo-tree-id1073 . -10) (undo-tree-id1074 . -10) (undo-tree-id1075 . -10) (undo-tree-id1076 . -10) (undo-tree-id1077 . -10) (undo-tree-id1078 . -10) (undo-tree-id1079 . -10) (undo-tree-id1080 . -10) (undo-tree-id1081 . -10) (undo-tree-id1082 . -10) (undo-tree-id1083 . -10) (undo-tree-id1084 . -10) (undo-tree-id1085 . -10) (undo-tree-id1086 . -10) (undo-tree-id1087 . -10) (undo-tree-id1088 . -10) (undo-tree-id1089 . -10) (undo-tree-id1090 . -10) (undo-tree-id1091 . -10) (undo-tree-id1092 . -10) (undo-tree-id1093 . -10) (undo-tree-id1094 . -10) (undo-tree-id1095 . -10) (undo-tree-id1096 . -10) (undo-tree-id1097 . -10) (undo-tree-id1098 . -10) (undo-tree-id1099 . -10) (undo-tree-id1100 . -10) (undo-tree-id1101 . -10) (undo-tree-id1102 . -10) (undo-tree-id1103 . -10) (undo-tree-id1104 . -10) (undo-tree-id1105 . -10) (undo-tree-id1106 . -10) (undo-tree-id1107 . -10) (undo-tree-id1108 . -10) (undo-tree-id1109 . -10) (undo-tree-id1110 . -10) (undo-tree-id1111 . -10) (undo-tree-id1112 . -10) (undo-tree-id1113 . -10) (undo-tree-id1114 . -10) (undo-tree-id1115 . -10) (undo-tree-id1116 . -10) (undo-tree-id1117 . -10) (undo-tree-id1118 . -10) (undo-tree-id1119 . -10) (undo-tree-id1120 . -10) (undo-tree-id1121 . -10) (undo-tree-id1122 . -10) (undo-tree-id1123 . -10) (undo-tree-id1124 . -10) (undo-tree-id1125 . -10) (undo-tree-id1126 . -10) (undo-tree-id1127 . -10) (undo-tree-id1128 . -10) (undo-tree-id1129 . -10) (undo-tree-id1130 . -10) (undo-tree-id1131 . -10) (undo-tree-id1132 . -10) (undo-tree-id1133 . -10) (undo-tree-id1134 . -10) (undo-tree-id1135 . -10) (undo-tree-id1136 . -10) (undo-tree-id1137 . -10) (undo-tree-id1138 . -10) (undo-tree-id1139 . -10) (undo-tree-id1140 . -10) (undo-tree-id1141 . -10) (undo-tree-id1142 . -10) (undo-tree-id1143 . -10) (undo-tree-id1144 . -10) (undo-tree-id1145 . -10) (undo-tree-id1146 . -10) (undo-tree-id1147 . -10) (undo-tree-id1148 . -10) (undo-tree-id1149 . -10) (undo-tree-id1150 . -10) (undo-tree-id1151 . -10) (undo-tree-id1152 . -10) (undo-tree-id1153 . -10) (undo-tree-id1154 . -10) (undo-tree-id1155 . -10) (undo-tree-id1156 . -10) (undo-tree-id1157 . -10) (undo-tree-id1158 . -10) (undo-tree-id1159 . -10) (undo-tree-id1160 . -10) (undo-tree-id1161 . -10) (undo-tree-id1162 . -10) (undo-tree-id1163 . -10) (undo-tree-id1164 . -10) (undo-tree-id1165 . -10) (undo-tree-id1166 . -10) (undo-tree-id1167 . -10) (undo-tree-id1168 . -10) (undo-tree-id1169 . -10) (undo-tree-id1170 . -10) (undo-tree-id1171 . -10) (undo-tree-id1172 . -10) (undo-tree-id1173 . -10) (undo-tree-id1174 . -10) (undo-tree-id1175 . -10) (undo-tree-id1176 . -10) (undo-tree-id1177 . -10) (undo-tree-id1178 . -10) (undo-tree-id1179 . -10) (undo-tree-id1180 . -10) (undo-tree-id1181 . -10) (undo-tree-id1182 . -10) (undo-tree-id1183 . -10) (undo-tree-id1184 . -10) (undo-tree-id1185 . -10) (undo-tree-id1186 . -10) (undo-tree-id1187 . -10) (undo-tree-id1188 . -10) (undo-tree-id1189 . -10) (undo-tree-id1190 . -10) (undo-tree-id1191 . -10) (undo-tree-id1192 . -10) (undo-tree-id1193 . -10) (undo-tree-id1194 . -10) (undo-tree-id1195 . -10) (undo-tree-id1196 . -10) (undo-tree-id1197 . -10) (undo-tree-id1198 . -10) (undo-tree-id1199 . -10) (undo-tree-id1200 . -10) (undo-tree-id1201 . -10) (undo-tree-id1202 . -10) (undo-tree-id1203 . -10) (undo-tree-id1204 . -10) (undo-tree-id1205 . -10) (undo-tree-id1206 . -10) (undo-tree-id1207 . -10) (undo-tree-id1208 . -10) (undo-tree-id1209 . -10) (undo-tree-id1210 . -10) (undo-tree-id1211 . -10) (undo-tree-id1212 . -10) (undo-tree-id1213 . -10) (undo-tree-id1214 . -10) (undo-tree-id1215 . -10) (undo-tree-id1216 . -10) (undo-tree-id1217 . -10) (undo-tree-id1218 . -10) (undo-tree-id1219 . -10) (undo-tree-id1220 . -10) (undo-tree-id1221 . -10) (undo-tree-id1222 . -10) (undo-tree-id1223 . -10) (undo-tree-id1224 . -10) (undo-tree-id1225 . -10) (undo-tree-id1226 . -10) (undo-tree-id1227 . -10) (undo-tree-id1228 . -10) (undo-tree-id1229 . -10) (undo-tree-id1230 . -10) (undo-tree-id1231 . -10) (undo-tree-id1232 . -10) (undo-tree-id1233 . -10) (undo-tree-id1234 . -10) (undo-tree-id1235 . -10) (undo-tree-id1236 . -10) (undo-tree-id1237 . -10) (undo-tree-id1238 . -10) (undo-tree-id1239 . -10) (undo-tree-id1240 . -10) (undo-tree-id1241 . -10) (undo-tree-id1242 . -10) (undo-tree-id1243 . -10) (undo-tree-id1244 . -10) (undo-tree-id1245 . -10) (undo-tree-id1246 . -10) (undo-tree-id1247 . -10) (undo-tree-id1248 . -10) (undo-tree-id1249 . -10) (undo-tree-id1250 . -10) (undo-tree-id1251 . -10) (undo-tree-id1252 . -10) (undo-tree-id1253 . -10) (undo-tree-id1254 . -10) (undo-tree-id1255 . -10) (undo-tree-id1256 . -10) (undo-tree-id1257 . -10) (undo-tree-id1258 . -10) (undo-tree-id1259 . -10) (undo-tree-id1260 . -10) (undo-tree-id1261 . -10) (undo-tree-id1262 . -10) (undo-tree-id1263 . -10) (undo-tree-id1264 . -10) (undo-tree-id1265 . -10) (undo-tree-id1266 . -10) (undo-tree-id1267 . -10) (undo-tree-id1268 . -10) (undo-tree-id1269 . -10) (undo-tree-id1270 . -10) (undo-tree-id1271 . -10) (undo-tree-id1272 . -10) (undo-tree-id1273 . -10) (undo-tree-id1274 . -10) (undo-tree-id1275 . -10) (undo-tree-id1276 . -10) (undo-tree-id1277 . -10) (undo-tree-id1278 . -10) (undo-tree-id1279 . -10) (undo-tree-id1280 . -10) (undo-tree-id1281 . -10) (undo-tree-id1282 . -10) (undo-tree-id1283 . -10) (undo-tree-id1284 . -10) (undo-tree-id1285 . -10) (undo-tree-id1286 . -10) (undo-tree-id1287 . -10) (undo-tree-id1288 . -10) (undo-tree-id1289 . -10) (undo-tree-id1290 . -10) (undo-tree-id1291 . -10) (undo-tree-id1292 . -10) (undo-tree-id1293 . -10) (undo-tree-id1294 . -10) (undo-tree-id1295 . -10) (undo-tree-id1296 . -10) (undo-tree-id1297 . -10) (undo-tree-id1298 . -10) (undo-tree-id1299 . -10) (undo-tree-id1300 . -10) (undo-tree-id1301 . -10) (undo-tree-id1302 . -10) (undo-tree-id1303 . -10) (undo-tree-id1304 . -10) (apply yas--snippet-revive 203 228 #s(yas--snippet nil (#s(yas--field 1 213 219 nil nil nil t #s(yas--field 2 221 227 nil nil nil nil nil)) #s(yas--field 2 221 227 nil nil nil nil nil)) nil 23 nil #s(yas--field 1 213 219 nil nil nil t #s(yas--field 2 221 227 nil nil nil nil nil)) nil nil)) (#("#include <utility>
" 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-preprocessor-face) 1 8 (c-in-sws t fontified t face font-lock-preprocessor-face) 8 9 (c-in-sws t fontified t) 9 10 (c-in-sws t syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face)) 10 17 (c-in-sws t fontified t face font-lock-string-face) 17 18 (c-in-sws t syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face)) 18 19 (c-in-sws t fontified t)) . 81) (undo-tree-id1305 . -18) (undo-tree-id1306 . -19) (undo-tree-id1307 . -19) (undo-tree-id1308 . 10) (undo-tree-id1309 . -18)) (26071 270 775396 826000) 0 nil])
([nil nil ((217 . 218) (213 . 216) (212 . 214) (208 . 212) (207 . 208) (204 . 207) (201 . 204) 187) nil (26071 328 390157 185000) 0 nil])
([nil nil ((233 . 234) (#("T1 &&x" 0 2 (fontified nil face font-lock-type-face) 2 5 (fontified nil) 5 6 (fontified nil face font-lock-variable-name-face)) . 233) (undo-tree-id439 . -6) (232 . 233)) ((#("t" 0 1 (fontified nil)) . 232) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (233 . 239) (#("o" 0 1 (fontified t)) . 233) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1)) (26071 270 396694 457000) 0 nil])
([nil nil ((272 . 273)) nil (26071 328 390156 435000) 0 nil])
([nil nil ((234 . 235)) ((#("k" 0 1 (fontified t)) . 234) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1)) (26071 269 971765 653000) 0 nil] [nil nil ((1 . 19) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 245 250 nil nil nil nil #s(yas--field 2 252 266 nil nil nil nil nil)) #s(yas--field 2 252 266 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 245 250 nil nil nil nil #s(yas--field 2 252 266 nil nil nil nil nil)) #s(yas--field 1 213 219 nil nil nil t #s(yas--field 2 221 227 nil nil nil nil nil)) nil)) (232 . 267) (#("std::tolower(${1:CharT}, ${2:const locale &})" 0 45 (fontified nil)) . 232) (undo-tree-id433 . -45) (232 . 277) (#("to" 0 2 (fontified nil)) . 232) (undo-tree-id434 . -2) (232 . 234) (#("std::tolower(CharT, const locale &)" 0 35 (fontified nil)) . -232) (undo-tree-id435 . -35) (232 . 267) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -232) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) 234) ((232 . 234) (#("std::tolower(CharT, const locale &)" 0 35 (fontified nil)) . 232) (undo-tree-id452 . -35) (232 . 267) (#("to" 0 2 (fontified nil)) . 232) (undo-tree-id453 . -2) (232 . 234) (#("std::tolower(${1:CharT}, ${2:const locale &})" 0 45 (fontified nil)) . 232) (undo-tree-id454 . -45) (232 . 277) (#("std::tolower(CharT, const locale &)" 0 3 (fontified t face font-lock-constant-face) 3 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-4-face)) 13 20 (fontified t) 20 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 32 (fontified t face font-lock-type-face) 32 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-4-face))) . 232) (undo-tree-id455 . -13) (undo-tree-id456 . -13) (undo-tree-id457 . -35) (undo-tree-id458 . -20) (undo-tree-id459 . -25) (undo-tree-id460 . -13) (undo-tree-id461 . -18) (undo-tree-id462 . -13) (apply yas--snippet-revive 232 267 #s(yas--snippet nil (#s(yas--field 1 245 250 nil nil nil nil #s(yas--field 2 252 266 nil nil nil nil nil)) #s(yas--field 2 252 266 nil nil nil nil nil)) nil 24 nil #s(yas--field 1 245 250 nil nil nil nil #s(yas--field 2 252 266 nil nil nil nil nil)) #s(yas--field 1 213 219 nil nil nil t #s(yas--field 2 221 227 nil nil nil nil nil)) nil)) (#("#include <cctype>
" 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-preprocessor-face) 1 8 (c-in-sws t fontified t face font-lock-preprocessor-face) 8 9 (c-in-sws t fontified t) 9 10 (c-in-sws t fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62)) 10 16 (c-in-sws t fontified t face font-lock-string-face) 16 17 (c-in-sws t fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60)) 17 18 (c-in-sws t fontified t)) . 1) (undo-tree-id463 . -17) (undo-tree-id464 . -18) (undo-tree-id465 . -18) (undo-tree-id466 . 9) (undo-tree-id467 . -17)) (26071 253 652017 384000) 0 nil])
([nil nil ((81 . 100) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 294 296 nil nil nil t #s(yas--field 2 298 300 nil nil nil t nil)) #s(yas--field 2 298 300 nil nil nil t nil)) nil 25 nil #s(yas--field 2 298 300 nil nil nil t nil) nil nil)) (265 . 290) (#("make_pair(${1:T1 &&x}, ${2:T2 &&y})" 0 35 (fontified nil)) . 265) (265 . 300) (#("make_pai" 0 8 (fontified nil)) . 265) (265 . 273) (#("make_pair(T1 &&x, T2 &&y)" 0 25 (fontified nil)) . -265) (265 . 290) (#("make_pai" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -265) (undo-tree-id1318 . -8) (undo-tree-id1319 . -8) 273) nil (26071 328 390155 393000) 0 nil])
([nil nil ((232 . 250) (#("tok" 0 3 (fontified nil)) . 232) (undo-tree-id468 . -3) (232 . 235) (#("token_class::token" 0 18 (fontified nil)) . -232) (undo-tree-id469 . -18) (232 . 250) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -232) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) 235) ((232 . 235) (#("token_class::token" 0 18 (fontified nil)) . 232) (undo-tree-id477 . -18) (232 . 250) (#("tok" 0 3 (fontified nil)) . 232) (undo-tree-id478 . -3) (232 . 235) (#("token_class::token" 0 11 (fontified t face font-lock-constant-face) 11 18 (fontified t)) . 232) (undo-tree-id479 . -18) (undo-tree-id480 . -18) (undo-tree-id481 . -18) (undo-tree-id482 . -11) (undo-tree-id483 . -18) (undo-tree-id484 . -18) (undo-tree-id485 . -18) (undo-tree-id486 . -18) (undo-tree-id487 . -18) (undo-tree-id488 . -18) (undo-tree-id489 . -18) (undo-tree-id490 . -18) (undo-tree-id491 . -18) (undo-tree-id492 . -18) (undo-tree-id493 . -18) (undo-tree-id494 . -18) (undo-tree-id495 . -18) (undo-tree-id496 . -18) (undo-tree-id497 . -18) (undo-tree-id498 . -18) (undo-tree-id499 . -18) (undo-tree-id500 . -18) (undo-tree-id501 . -18) (undo-tree-id502 . -18) (undo-tree-id503 . -18) (undo-tree-id504 . -18) (undo-tree-id505 . -18) (undo-tree-id506 . -18) (undo-tree-id507 . -18) (undo-tree-id508 . -18) (undo-tree-id509 . -18) (undo-tree-id510 . -18) (undo-tree-id511 . -18) (undo-tree-id512 . -18) (undo-tree-id513 . -18) (undo-tree-id514 . -18) (undo-tree-id515 . -18) (undo-tree-id516 . -18) (undo-tree-id517 . -18) (undo-tree-id518 . -18) (undo-tree-id519 . -18) (undo-tree-id520 . -18) (undo-tree-id521 . -18) (undo-tree-id522 . -18) (undo-tree-id523 . -18) (undo-tree-id524 . -18) (undo-tree-id525 . -18) (undo-tree-id526 . -18) (undo-tree-id527 . -18) (undo-tree-id528 . -18) (undo-tree-id529 . -18) (undo-tree-id530 . -18) (undo-tree-id531 . -18) (undo-tree-id532 . -18) (undo-tree-id533 . -18) (undo-tree-id534 . -18) (undo-tree-id535 . -18) (undo-tree-id536 . -18) (undo-tree-id537 . -18) (undo-tree-id538 . -18) (undo-tree-id539 . -18) (undo-tree-id540 . -18) (undo-tree-id541 . -18) (undo-tree-id542 . -18) (undo-tree-id543 . -18) (undo-tree-id544 . -18) (undo-tree-id545 . -18) (undo-tree-id546 . -18) (undo-tree-id547 . -18) (undo-tree-id548 . -18) (undo-tree-id549 . -18) (undo-tree-id550 . -18) (undo-tree-id551 . -18) (undo-tree-id552 . -18) (undo-tree-id553 . -18) (undo-tree-id554 . -18) (undo-tree-id555 . -18) (undo-tree-id556 . -18) (undo-tree-id557 . -18) (undo-tree-id558 . -18) (undo-tree-id559 . -18) (undo-tree-id560 . -18) (undo-tree-id561 . -18) (undo-tree-id562 . -18) (undo-tree-id563 . -18)) (26071 269 667190 563000) 0 nil])
nil
([nil nil ((295 . 296) (#("T1 &&x" 0 2 (fontified nil face font-lock-type-face) 2 5 (fontified nil) 5 6 (fontified nil face font-lock-variable-name-face)) . 295) (undo-tree-id1317 . -6) (294 . 295)) nil (26071 328 390153 211000) 0 nil])
([nil nil ((250 . 252)) ((#("()" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 250) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -2) (undo-tree-id476 . -1)) (26071 269 665332 154000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -295) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) 296) nil (26071 328 390151 809000) 0 nil])
nil
([nil nil ((295 . 296)) nil (26071 328 390149 510000) 0 nil])
([nil nil ((299 . 300) (#("T2 &&y" 0 2 (fontified nil face font-lock-type-face) 2 5 (fontified nil) 5 6 (fontified nil face font-lock-variable-name-face)) . 299) (undo-tree-id1313 . -6) (298 . 299)) nil (26071 328 390148 923000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -299) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) 300) nil (26071 328 390147 55000) 0 nil])
([nil nil ((299 . 300)) nil (26071 328 390139 4000) 0 nil])
([nil nil ((apply yas--snippet-revive 284 301 #s(yas--snippet nil (#s(yas--field 1 294 296 nil nil nil t #s(yas--field 2 298 300 nil nil nil t nil)) #s(yas--field 2 298 300 nil nil nil t nil)) nil 25 nil #s(yas--field 2 298 300 nil nil nil t nil) nil nil))) nil (26071 328 390134 978000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 208) (t 26071 328 403232 845000)) nil (26071 356 112001 510000) 0 nil])
([nil nil ((208 . 209) (#(">" 0 1 (fontified t)) . 208)) nil (26071 356 112000 718000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 224)) nil (26071 356 111999 643000) 0 nil])
([nil nil ((224 . 225) (#(">" 0 1 (fontified t)) . 224) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1)) nil (26071 356 111996 986000) 0 nil])
([nil nil ((294 . 295) (#(")" 0 1 (fontified nil)) . -294) (294 . 295) (t 26071 356 133232 168000)) nil (26071 468 547743 908000) 0 nil])
([nil nil ((292 . 293)) nil (26071 468 547743 321000) 0 nil])
([nil nil ((292 . 295)) nil (26071 468 547742 806000) 0 nil])
([nil nil ((100 . 118) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 322 340 nil nil nil t nil)) nil 26 nil #s(yas--field 1 322 340 nil nil nil t nil) nil nil)) (292 . 316) (#("std::vector<${1:typename Tp}>" 0 29 (fontified nil)) . 292) (292 . 321) (#("v" 0 1 (fontified nil)) . 292) (292 . 293) (#("std::vector<typename Tp, typename Alloc>" 0 11 (fontified nil) 11 12 (syntax-table (4 . 62) fontified nil) 12 23 (fontified nil) 23 24 (c-type c-<>-arg-sep fontified nil) 24 39 (fontified nil) 39 40 (syntax-table (5 . 60) fontified nil)) . -292) (292 . 332) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -292) (undo-tree-id1339 . -3) (undo-tree-id1340 . -3) 295) nil (26071 468 547741 518000) 0 nil])
([nil nil ((323 . 324) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 323) (undo-tree-id1338 . -11) (322 . 323)) nil (26071 468 547739 5000) 0 nil])
([nil nil ((nil fontified nil 322 . 333) (nil face (rainbow-delimiters-depth-4-face) 322 . 333) (322 . 333) (#("to" 0 2 (fontified nil)) . 322) (undo-tree-id1333 . -2) (nil fontified nil 322 . 324) (nil face (rainbow-delimiters-depth-4-face) 322 . 324) (322 . 324) (#("token_class" 0 11 (fontified nil)) . -322) (undo-tree-id1334 . -11) (nil fontified nil 322 . 333) (nil face (rainbow-delimiters-depth-4-face) 322 . 333) (322 . 333) (#("to" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -322) (undo-tree-id1335 . -2) (undo-tree-id1336 . -2) (undo-tree-id1337 . -2) 324) nil (26071 468 547736 850000) 0 nil])
([nil nil ((333 . 335)) nil (26071 468 547732 635000) 0 nil])
([nil nil ((335 . 340) (#("token" 0 5 (fontified nil)) . -335) (undo-tree-id1332 . -5) (335 . 340)) nil (26071 468 547731 319000) 0 nil])
([nil nil ((apply yas--snippet-revive 310 341 #s(yas--snippet nil (#s(yas--field 1 322 340 nil nil nil t nil)) nil 26 nil #s(yas--field 1 322 340 nil nil nil t nil) nil nil))) nil (26071 468 547722 773000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 345) (t 26071 468 559896 82000)) nil (26071 651 619662 964000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 345)) nil (26071 651 619662 360000) 0 nil])
([nil nil ((#("t2" 0 1 (fontified t) 1 2 (fontified t)) . 345) (undo-tree-id1343 . -1)) nil (26071 651 619661 586000) 0 nil])
([nil nil ((nil rear-nonsticky nil 311 . 312) (nil fontified nil 310 . 312) (310 . 312) 309) nil (26071 651 619660 149000) 0 nil])
([nil nil ((312 . 313) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -312) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) 313 (312 . 313)) nil (26071 651 619657 128000) 0 nil])
([nil nil ((349 . 350) (348 . 349) (347 . 348) (t 26071 651 643224 947000)) nil (26071 678 963894 889000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-constant-face)) . -364) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (#("g" 0 1 (fontified t face font-lock-constant-face)) . -365) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) 366 (364 . 366) (315 . 317) (314 . 315) (313 . 314) (#("," 0 1 (fontified t c-type c-not-decl)) . -313) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) 314 (313 . 314) (312 . 313) (311 . 313) (128 . 135) (127 . 129) (#(">" 0 1 (fontified t c-in-sws t)) . -127) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) 128 (#("<" 0 1 (fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . -127) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) 128 (apply yas--snippet-revive 119 129 #s(yas--snippet nil nil #s(yas--exit 128 nil) 28 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 128 nil) 28 nil nil nil nil)) (119 . 129) (#("include <$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 119) (undo-tree-id1859 . -12) (119 . 131) (#("i" 0 1 (c-in-sws t fontified nil)) . 119) (undo-tree-id1860 . -1) (119 . 120) (#("include <header>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 15 (fontified nil) 15 16 (syntax-table (5 . 60) fontified nil)) . -119) (undo-tree-id1861 . -16) (119 . 135) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -119) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) (undo-tree-id1864 . -2) 121 (120 . 121) (#("m" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -120) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) 121 (119 . 121) (118 . 119) (117 . 117) (117 . 118) (292 . 293) (#("'" 0 1 (fontified nil face font-lock-warning-face)) . -292) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (#("'" 0 1 (fontified t face font-lock-warning-face)) . 293) (292 . 294) (#("'" 0 1 (fontified nil face font-lock-variable-name-face)) . -292) (288 . 293) (287 . 288) (apply yas--snippet-revive 261 287 #s(yas--snippet nil (#s(yas--field 1 268 286 nil nil nil t nil)) nil 27 nil #s(yas--field 1 268 286 nil nil nil t nil) nil nil)) (281 . 286) (#("token" 0 5 (fontified nil)) . -281) (281 . 286) (279 . 281) (nil fontified nil 268 . 279) (nil face (rainbow-delimiters-depth-2-face) 268 . 279) (268 . 279) (#("to" 0 2 (fontified nil)) . 268) (nil fontified nil 268 . 270) (nil face (rainbow-delimiters-depth-2-face) 268 . 270) (268 . 270) (#("token_class" 0 11 (fontified nil)) . -268) (nil fontified nil 268 . 279) (nil face (rainbow-delimiters-depth-2-face) 268 . 279) (268 . 279) (#("to" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -268) (undo-tree-id1870 . -2) (undo-tree-id1871 . -2) 270 (269 . 270) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 269) (268 . 269) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 268 286 nil nil nil t nil)) nil 27 nil #s(yas--field 1 268 286 nil nil nil t nil) nil nil)) (261 . 280) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 261) (261 . 285) (#("v" 0 1 (fontified nil)) . 261) (261 . 262) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -261) (261 . 296) (#("ve" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -261) (undo-tree-id1872 . -2) (undo-tree-id1873 . -2) 263 (261 . 263) (254 . 256) (#(" " 0 1 (fontified nil)) . 254) (259 . 260) (254 . 255) (#("  " 0 2 (fontified nil)) . 254) (259 . 260) (256 . 259) (#("st" 0 2 (fontified nil)) . 256) (256 . 258) (#("std" 0 3 (fontified nil)) . -256) (256 . 259) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -256) (undo-tree-id1874 . -2) (undo-tree-id1875 . -2) 258 (256 . 258) (253 . 256) (t 26071 678 986557 613000) 252) nil (26071 807 224186 351000) 0 nil])
([nil nil ((#("std::vector<token_class::token>(t1,t2" 0 3 (fontified t face font-lock-constant-face) 3 11 (fontified t) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-4-face)) 12 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 25 (fontified t) 25 30 (fontified t face font-lock-type-face) 30 31 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-4-face)) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 379) (undo-tree-id1800 . -36) (undo-tree-id1801 . -12) (undo-tree-id1802 . -23) (undo-tree-id1803 . -35) (undo-tree-id1804 . -37) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -37)) nil (26071 807 224164 21000) 0 nil])
([nil nil ((376 . 380) (#("m" 0 1 (fontified nil)) . 376) (376 . 377) (#("mdzz" 0 4 (fontified nil)) . -376) (376 . 380) (#("md" 0 1 (fontified t) 1 2 (fontified t)) . -376) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -2) (undo-tree-id1606 . -2) (undo-tree-id1607 . -2) (undo-tree-id1608 . -2) (undo-tree-id1609 . -2) (undo-tree-id1610 . -2) (undo-tree-id1611 . -2) (undo-tree-id1612 . -2) (undo-tree-id1613 . -2) (undo-tree-id1614 . -2) (undo-tree-id1615 . -2) (undo-tree-id1616 . -2) (undo-tree-id1617 . -2) (undo-tree-id1618 . -2) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -2) (undo-tree-id1627 . -2) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2) (undo-tree-id1630 . -2) (undo-tree-id1631 . -2) (undo-tree-id1632 . -2) (undo-tree-id1633 . -2) (undo-tree-id1634 . -2) (undo-tree-id1635 . -2) (undo-tree-id1636 . -2) (undo-tree-id1637 . -2) (undo-tree-id1638 . -2) (undo-tree-id1639 . -2) (undo-tree-id1640 . -2) (undo-tree-id1641 . -2) (undo-tree-id1642 . -2) (undo-tree-id1643 . -2) (undo-tree-id1644 . -2) (undo-tree-id1645 . -2) (undo-tree-id1646 . -2) (undo-tree-id1647 . -2) (undo-tree-id1648 . -2) (undo-tree-id1649 . -2) (undo-tree-id1650 . -2) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2) (undo-tree-id1653 . -2) (undo-tree-id1654 . -2) (undo-tree-id1655 . -2) (undo-tree-id1656 . -2) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) (undo-tree-id1659 . -2) (undo-tree-id1660 . -2) (undo-tree-id1661 . -2) (undo-tree-id1662 . -2) (undo-tree-id1663 . -2) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) (undo-tree-id1667 . -2) (undo-tree-id1668 . -2) (undo-tree-id1669 . -2) (undo-tree-id1670 . -2) (undo-tree-id1671 . -2) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) (undo-tree-id1674 . -2) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) (undo-tree-id1679 . -2) (undo-tree-id1680 . -2) (undo-tree-id1681 . -2) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) (undo-tree-id1684 . -2) (undo-tree-id1685 . -2) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (undo-tree-id1693 . -2) (undo-tree-id1694 . -2) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) (undo-tree-id1714 . -2) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) (undo-tree-id1720 . -2) (undo-tree-id1721 . -2) (undo-tree-id1722 . -2) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -2) (undo-tree-id1726 . -2) (undo-tree-id1727 . -2) (undo-tree-id1728 . -2) (undo-tree-id1729 . -2) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -2) (undo-tree-id1747 . -2) (undo-tree-id1748 . -2) (undo-tree-id1749 . -2) (undo-tree-id1750 . -2) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -2) (undo-tree-id1761 . -2) (undo-tree-id1762 . -2) (undo-tree-id1763 . -2) (undo-tree-id1764 . -2) (undo-tree-id1765 . -2) (undo-tree-id1766 . -2) (undo-tree-id1767 . -2) (undo-tree-id1768 . -2) (undo-tree-id1769 . -2) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -2) (undo-tree-id1773 . -2) (undo-tree-id1774 . -2) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) (undo-tree-id1777 . -2) (undo-tree-id1778 . -2) (undo-tree-id1779 . -2) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -2) (undo-tree-id1788 . -2) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) 378 (376 . 378) (#("t" 0 1 (fontified t)) . -376) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (#("2" 0 1 (rear-nonsticky t fontified t)) . -377) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) 378 (379 . 381) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -379) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . 1) (undo-tree-id1799 . -1) 380) nil (26071 807 224122 320000) 0 nil])
([nil nil ((#("," 0 1 (fontified t c-type c-not-decl)) . 314) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (t 26071 807 236554 483000)) nil (26071 849 840548 750000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 314) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1)) nil (26071 849 840541 892000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 314) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1)) nil (26071 849 840531 932000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 311) (undo-tree-id1891 . 1) (undo-tree-id1892 . -1) (t 26071 849 853220 121000)) nil (26071 964 49812 117000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-variable-name-face)) . 311)) nil (26071 964 49810 430000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face font-lock-variable-name-face)) . 311)) nil (26071 964 49809 752000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 311) (undo-tree-id1888 . 1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1)) nil (26071 964 49809 10000) 0 nil])
([nil nil ((315 . 317) (314 . 315) (313 . 314) (#("q" 0 1 (fontified t)) . -313) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (#("," 0 1 (fontified t c-type c-not-decl)) . -314) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) 315 (314 . 315) (312 . 314) (311 . 313)) nil (26071 964 49804 486000) 0 nil])
([nil nil ((#(",t2)" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-3-face))) . 380) (undo-tree-id1893 . -3) (undo-tree-id1894 . -1) (undo-tree-id1895 . -3) (undo-tree-id1896 . -4) (t 26071 964 63217 329000)) nil (26071 1018 98088 674000) 0 nil])
([nil nil ((376 . 378) (376 . 377)) nil (26071 1024 549294 327000) 0 nil] [nil nil ((382 . 389) 376) ((#("
					 " 0 7 (fontified t)) . 382) (undo-tree-id1897 . -7) (undo-tree-id1898 . -7) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -7)) (26071 1018 96037 373000) 0 nil])
([nil nil ((384 . 385) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -384) (384 . 385) (t 26071 1024 559882 521000)) nil (26071 1041 940668 24000) 0 nil])
nil
([nil nil ((362 . 367) (#("m" 0 1 (fontified t)) . -362) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) 363 (360 . 363) (t 26071 1041 986548 763000)) nil (26071 1285 483530 854000) 0 nil])
([nil nil ((#(":make_" 0 1 (fontified t) 1 6 (fontified t)) . 372) (undo-tree-id1921 . -6) (undo-tree-id1922 . -6) (undo-tree-id1923 . -5) (undo-tree-id1924 . -6) (undo-tree-id1925 . -6) (undo-tree-id1926 . -6) (undo-tree-id1927 . -6) (undo-tree-id1928 . -6) (undo-tree-id1929 . -6) (undo-tree-id1930 . -6) (undo-tree-id1931 . -6) (undo-tree-id1932 . -6) (undo-tree-id1933 . -6) (undo-tree-id1934 . -6) (undo-tree-id1935 . -6) (undo-tree-id1936 . -6) (undo-tree-id1937 . -6) (undo-tree-id1938 . -6) (undo-tree-id1939 . -6) (undo-tree-id1940 . -6) (undo-tree-id1941 . -6) (undo-tree-id1942 . -6) (undo-tree-id1943 . -6) (undo-tree-id1944 . -6) (undo-tree-id1945 . -6) (undo-tree-id1946 . -6) (undo-tree-id1947 . -6) (undo-tree-id1948 . -6) (undo-tree-id1949 . -6) (undo-tree-id1950 . -5) (undo-tree-id1951 . -5) (undo-tree-id1952 . -5) (undo-tree-id1953 . -5) (undo-tree-id1954 . -5) (undo-tree-id1955 . -5) (undo-tree-id1956 . -5) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) (undo-tree-id1961 . -5) (undo-tree-id1962 . -5) (undo-tree-id1963 . -5) (undo-tree-id1964 . -5) (undo-tree-id1965 . -5) (undo-tree-id1966 . -5) (undo-tree-id1967 . -5) (undo-tree-id1968 . -5) (undo-tree-id1969 . -5) (undo-tree-id1970 . -5) (undo-tree-id1971 . -5) (undo-tree-id1972 . -5) (undo-tree-id1973 . -5) (undo-tree-id1974 . -5) (undo-tree-id1975 . -5) (undo-tree-id1976 . -5) (undo-tree-id1977 . -5) (undo-tree-id1978 . -5) (undo-tree-id1979 . -5) (undo-tree-id1980 . -5) (undo-tree-id1981 . -5) (undo-tree-id1982 . -5) (undo-tree-id1983 . -5) (undo-tree-id1984 . -5) (undo-tree-id1985 . -5) (undo-tree-id1986 . -5) (undo-tree-id1987 . -5) (undo-tree-id1988 . -5) (undo-tree-id1989 . -5) (undo-tree-id1990 . -5) (undo-tree-id1991 . -5) (undo-tree-id1992 . -5) (undo-tree-id1993 . -5) (undo-tree-id1994 . -5) (undo-tree-id1995 . -5) (undo-tree-id1996 . -5) (undo-tree-id1997 . -5) (undo-tree-id1998 . -5) (undo-tree-id1999 . -5) (undo-tree-id2000 . -5) (undo-tree-id2001 . -5) (undo-tree-id2002 . -5) (undo-tree-id2003 . -5) (undo-tree-id2004 . -5) (undo-tree-id2005 . -5) (undo-tree-id2006 . -5) (undo-tree-id2007 . -5) (undo-tree-id2008 . -5) (undo-tree-id2009 . -5) (undo-tree-id2010 . -5) (undo-tree-id2011 . -5) (undo-tree-id2012 . -5) (undo-tree-id2013 . -5) (undo-tree-id2014 . -5) (undo-tree-id2015 . -5) (undo-tree-id2016 . -5) (undo-tree-id2017 . -5) (undo-tree-id2018 . -5) (undo-tree-id2019 . -5) (undo-tree-id2020 . -5) (undo-tree-id2021 . -5) (undo-tree-id2022 . -5) (undo-tree-id2023 . -5) (undo-tree-id2024 . -5) (undo-tree-id2025 . -5) (undo-tree-id2026 . -5) (undo-tree-id2027 . -5) (undo-tree-id2028 . -5) (undo-tree-id2029 . -5) (undo-tree-id2030 . -5) (undo-tree-id2031 . -5) (undo-tree-id2032 . -5) (undo-tree-id2033 . -5) (undo-tree-id2034 . -5) (undo-tree-id2035 . -5) (undo-tree-id2036 . -5) (undo-tree-id2037 . -5) (undo-tree-id2038 . -5) (undo-tree-id2039 . -5) (undo-tree-id2040 . -5) (undo-tree-id2041 . -5) (undo-tree-id2042 . -5) (undo-tree-id2043 . -5) (undo-tree-id2044 . -5) (undo-tree-id2045 . -5) (undo-tree-id2046 . -5) (undo-tree-id2047 . -5) (undo-tree-id2048 . -5) (undo-tree-id2049 . -5) (undo-tree-id2050 . -5) (undo-tree-id2051 . -5) (undo-tree-id2052 . -5) (undo-tree-id2053 . -5) (undo-tree-id2054 . -5) (undo-tree-id2055 . -5) (undo-tree-id2056 . -5) (undo-tree-id2057 . -5) (undo-tree-id2058 . -5) (undo-tree-id2059 . -5) (undo-tree-id2060 . -5) (undo-tree-id2061 . -5) (undo-tree-id2062 . -5) (undo-tree-id2063 . -5) (undo-tree-id2064 . -5) (undo-tree-id2065 . -5) (undo-tree-id2066 . -5) (undo-tree-id2067 . -5) (undo-tree-id2068 . -5) (undo-tree-id2069 . -5) (undo-tree-id2070 . -5) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (undo-tree-id2073 . -5) (undo-tree-id2074 . -5) (undo-tree-id2075 . -5) (undo-tree-id2076 . -5) (undo-tree-id2077 . -5) (undo-tree-id2078 . -5) (undo-tree-id2079 . -5) (undo-tree-id2080 . -5) (undo-tree-id2081 . -5) (undo-tree-id2082 . -6) (undo-tree-id2083 . -6) (undo-tree-id2084 . -6) (undo-tree-id2085 . -6) (undo-tree-id2086 . -6) (undo-tree-id2087 . -6) (undo-tree-id2088 . -6) (undo-tree-id2089 . -6) (undo-tree-id2090 . -6) (undo-tree-id2091 . -6) (undo-tree-id2092 . -6) (undo-tree-id2093 . -6) (undo-tree-id2094 . -6) (undo-tree-id2095 . -6) (undo-tree-id2096 . -6) (undo-tree-id2097 . -6) (undo-tree-id2098 . -6) (undo-tree-id2099 . -6) (undo-tree-id2100 . -6) (undo-tree-id2101 . -6) (undo-tree-id2102 . -6) (undo-tree-id2103 . -6) (undo-tree-id2104 . -6) (undo-tree-id2105 . -6) (undo-tree-id2106 . -6) (undo-tree-id2107 . -6) (undo-tree-id2108 . -6) (undo-tree-id2109 . -6) (undo-tree-id2110 . -6) (undo-tree-id2111 . -6) (undo-tree-id2112 . -6) (undo-tree-id2113 . -6) (undo-tree-id2114 . -6) (undo-tree-id2115 . -6) (undo-tree-id2116 . -6) (undo-tree-id2117 . -6) (undo-tree-id2118 . -6) (undo-tree-id2119 . -6) (undo-tree-id2120 . -6) (undo-tree-id2121 . -6) (undo-tree-id2122 . -6) (undo-tree-id2123 . -6) (undo-tree-id2124 . -6) (undo-tree-id2125 . -6) (undo-tree-id2126 . -6) (undo-tree-id2127 . -6) (undo-tree-id2128 . -6) (undo-tree-id2129 . -6) (undo-tree-id2130 . -6) (undo-tree-id2131 . -6) (undo-tree-id2132 . -6) (undo-tree-id2133 . -6) (undo-tree-id2134 . -6) (undo-tree-id2135 . -6) (undo-tree-id2136 . -6) (undo-tree-id2137 . -6) (undo-tree-id2138 . -6) (undo-tree-id2139 . -6) (undo-tree-id2140 . -6) (undo-tree-id2141 . -6) (undo-tree-id2142 . -6) (undo-tree-id2143 . -6) (undo-tree-id2144 . -6) (undo-tree-id2145 . -6) (undo-tree-id2146 . -6) (undo-tree-id2147 . -6) (undo-tree-id2148 . -6) (undo-tree-id2149 . -6) (undo-tree-id2150 . -6) (undo-tree-id2151 . -6) (undo-tree-id2152 . -6) (undo-tree-id2153 . -6) (undo-tree-id2154 . -6) (undo-tree-id2155 . -6) (undo-tree-id2156 . -6) (undo-tree-id2157 . -6) (undo-tree-id2158 . -6) (undo-tree-id2159 . -6) (undo-tree-id2160 . -6) (undo-tree-id2161 . -6) (undo-tree-id2162 . -6) (undo-tree-id2163 . -6) (undo-tree-id2164 . -6) (undo-tree-id2165 . -6) (undo-tree-id2166 . -6) (undo-tree-id2167 . -6) (undo-tree-id2168 . -6) (undo-tree-id2169 . -6) (undo-tree-id2170 . -6) (undo-tree-id2171 . -6) (undo-tree-id2172 . -6) (undo-tree-id2173 . -6) (undo-tree-id2174 . -6) (undo-tree-id2175 . -6) (undo-tree-id2176 . -6) (undo-tree-id2177 . -6) (undo-tree-id2178 . -6) (undo-tree-id2179 . -6) (undo-tree-id2180 . -6) (undo-tree-id2181 . -6) (undo-tree-id2182 . -6) (undo-tree-id2183 . -6) (undo-tree-id2184 . -6) (undo-tree-id2185 . -6) (undo-tree-id2186 . -6) (undo-tree-id2187 . -6) (undo-tree-id2188 . -6) (undo-tree-id2189 . -6) (undo-tree-id2190 . -6) (undo-tree-id2191 . -6) (undo-tree-id2192 . -6) (undo-tree-id2193 . -6) (undo-tree-id2194 . -6) (undo-tree-id2195 . -6) (undo-tree-id2196 . -6) (undo-tree-id2197 . -6) (undo-tree-id2198 . -6) (undo-tree-id2199 . -6) (undo-tree-id2200 . -6) (undo-tree-id2201 . -6) (undo-tree-id2202 . -6) (undo-tree-id2203 . -6) (undo-tree-id2204 . -6) (undo-tree-id2205 . -6) (undo-tree-id2206 . -6) (undo-tree-id2207 . -6) (undo-tree-id2208 . -6) (undo-tree-id2209 . -6) (undo-tree-id2210 . -6) (undo-tree-id2211 . -6) (undo-tree-id2212 . -6) (undo-tree-id2213 . -6) (undo-tree-id2214 . -6) (undo-tree-id2215 . -6) (undo-tree-id2216 . -6) (undo-tree-id2217 . -6) (undo-tree-id2218 . -6) (undo-tree-id2219 . -6) (undo-tree-id2220 . -6) (undo-tree-id2221 . -6) (undo-tree-id2222 . -6) (undo-tree-id2223 . -6) (undo-tree-id2224 . -6) (undo-tree-id2225 . -6) (undo-tree-id2226 . -6) (undo-tree-id2227 . -6) (undo-tree-id2228 . -6) (undo-tree-id2229 . -6) (undo-tree-id2230 . -6) (undo-tree-id2231 . -6) (undo-tree-id2232 . -6) (undo-tree-id2233 . -6) (undo-tree-id2234 . -6) (undo-tree-id2235 . -6) (undo-tree-id2236 . -6) (undo-tree-id2237 . -6) (undo-tree-id2238 . -6) (undo-tree-id2239 . -6) (undo-tree-id2240 . -6) (undo-tree-id2241 . -6) (undo-tree-id2242 . -6) 378 (t 26071 1285 493209 522000)) nil (26071 1592 967698 861000) 0 nil])
([nil nil ((372 . 373)) nil (26071 1592 966729 357000) 0 nil])
([nil nil ((377 . 379)) nil (26071 1592 966728 640000) 0 nil])
([nil nil ((378 . 381)) nil (26071 1592 966728 151000) 0 nil])
([nil nil ((381 . 383)) nil (26071 1592 966727 607000) 0 nil])
([nil nil ((383 . 384)) nil (26071 1592 966727 37000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -378) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (#("t" 0 1 (fontified t)) . -379) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("d" 0 1 (fontified t)) . -380) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (#(":" 0 1 (fontified t)) . -381) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (#(":" 0 1 (fontified t)) . -382) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (#("t" 0 1 (fontified t)) . -383) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) 384) nil (26071 1592 966724 414000) 0 nil])
([nil nil ((378 . 379)) nil (26071 1592 966705 908000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-type-face)) . -378) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) 379) nil (26071 1592 966705 286000) 0 nil])
([nil nil ((378 . 380)) nil (26071 1592 966702 553000) 0 nil])
([nil nil ((nil fontified nil 378 . 396) (nil face (rainbow-delimiters-depth-3-face) 378 . 396) (378 . 396) (#("to" 0 2 (fontified nil)) . 378) (nil fontified nil 378 . 380) (nil face (rainbow-delimiters-depth-3-face) 378 . 380) (378 . 380) (#("token_class::token" 0 18 (fontified nil)) . -378) (nil fontified nil 378 . 396) (nil face (rainbow-delimiters-depth-3-face) 378 . 396) (378 . 396) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -378) (undo-tree-id1905 . -2) (undo-tree-id1906 . -2) 380) nil (26071 1592 966700 803000) 0 nil])
([nil nil ((396 . 397)) nil (26071 1592 966692 793000) 0 nil])
([nil nil ((397 . 400)) nil (26071 1592 966692 354000) 0 nil])
([nil nil ((400 . 402)) nil (26071 1592 966692 25000) 0 nil])
([nil nil ((402 . 408)) nil (26071 1592 966691 621000) 0 nil])
([nil nil ((408 . 410)) nil (26071 1592 966691 201000) 0 nil])
([nil nil ((409 . 420)) nil (26071 1592 966690 778000) 0 nil])
([nil nil ((420 . 422)) nil (26071 1592 966690 151000) 0 nil])
([nil nil ((422 . 427)) nil (26071 1592 966686 168000) 0 nil])
([nil nil ((apply -3 320 453 undo--wrap-and-run-primitive-undo 320 453 ((322 . 325) 441)) (t 26071 1592 973202 41000)) nil (26071 1787 147365 390000) 0 nil])
([nil nil ((491 . 492) (489 . 491) (487 . 488) (#("2" 0 1 (fontified t)) . -487) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) 488 (487 . 488) (nil face font-lock-type-face 486 . 488) (nil fontified t 486 . 488) (486 . 488) (483 . 486) (480 . 483) (479 . 480) (477 . 479) (475 . 476) (nil face font-lock-type-face 474 . 476) (nil fontified t 474 . 476) (474 . 476) (471 . 474) (468 . 471) (467 . 468) (463 . 467) (461 . 462) (459 . 461) (458 . 459) (455 . 458) (454 . 456) (451 . 454) (444 . 446) (#(" " 0 1 (fontified nil c-is-sws t)) . 444) (449 . 450) (444 . 445) (#("  " 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil c-is-sws t)) . 444) (449 . 450) (446 . 449) (443 . 446) 429) nil (26071 1787 147361 429000) 0 nil])
([nil nil ((apply -9 444 511 undo--wrap-and-run-primitive-undo 444 511 ((489 . 492) (474 . 477) (446 . 449) 444)) (t 26071 1787 163197 303000)) nil (26071 1826 771621 980000) 0 nil])
([nil nil ((apply 3 320 441 undo--wrap-and-run-primitive-undo 320 441 ((#("// " 0 1 (c-is-sws t fontified t c-in-sws t face font-lock-comment-delimiter-face) 1 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . -322) 444))) nil (26071 1826 771621 256000) 0 nil])
([nil nil ((#(".insert(std::pair<token_class::token,std::vector<token_class::token>>(t1,mdzz));" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 11 (fontified t face font-lock-constant-face) 11 12 (fontified t) 12 13 (fontified t) 13 17 (fontified t) 17 18 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-3-face)) 18 29 (fontified t face font-lock-constant-face) 29 31 (fontified t) 31 36 (fontified t face font-lock-type-face) 36 37 (fontified t c-type c-<>-arg-sep) 37 38 (fontified t face font-lock-constant-face) 38 39 (fontified t face font-lock-constant-face) 39 40 (fontified t face font-lock-constant-face) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t face font-lock-type-face) 43 44 (fontified t face font-lock-type-face) 44 45 (fontified t face font-lock-type-face) 45 46 (fontified t face font-lock-type-face) 46 47 (fontified t face font-lock-type-face) 47 48 (fontified t face font-lock-type-face) 48 49 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-4-face)) 49 50 (fontified t face font-lock-constant-face) 50 51 (fontified t face font-lock-constant-face) 51 52 (fontified t face font-lock-constant-face) 52 53 (fontified t face font-lock-constant-face) 53 54 (fontified t face font-lock-constant-face) 54 55 (fontified t face font-lock-constant-face) 55 56 (fontified t face font-lock-constant-face) 56 57 (fontified t face font-lock-constant-face) 57 58 (fontified t face font-lock-constant-face) 58 59 (fontified t face font-lock-constant-face) 59 60 (fontified t face font-lock-constant-face) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t face font-lock-type-face) 63 64 (fontified t face font-lock-type-face) 64 65 (fontified t face font-lock-type-face) 65 66 (fontified t face font-lock-type-face) 66 67 (fontified t face font-lock-type-face) 67 68 (fontified t syntax-table (5 . 60) face (rainbow-delimiters-depth-4-face)) 68 69 (fontified t syntax-table (5 . 60) face (rainbow-delimiters-depth-3-face)) 69 70 (fontified t face (rainbow-delimiters-depth-3-face)) 70 71 (fontified t) 71 72 (fontified t) 72 73 (fontified t) 73 77 (fontified t) 77 78 (fontified t face (rainbow-delimiters-depth-3-face)) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 80 (fontified t)) . 360) (undo-tree-id2245 . -79) (undo-tree-id2246 . -70) (undo-tree-id2247 . -70) (undo-tree-id2248 . -78) (undo-tree-id2249 . -78) (undo-tree-id2250 . -18) (undo-tree-id2251 . -29) (undo-tree-id2252 . -68) (undo-tree-id2253 . -69)) nil (26071 1826 771620 82000) 0 nil])
([nil nil ((369 . 370) (365 . 369) (364 . 365) (361 . 363) (nil face font-lock-type-face 360 . 362) (nil fontified t 360 . 362) (360 . 362)) nil (26071 1826 771606 119000) 0 nil])
([nil nil ((238 . 241) (#("w" 0 1 (fontified t)) . -238) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) 239 (237 . 239) (227 . 237) (226 . 227) (221 . 226) (#("w" 0 1 (fontified t)) . -221) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) 222 (220 . 222) (217 . 220) (216 . 217) (#("k" 0 1 (fontified t)) . -216) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) 217 (213 . 217) (apply yas--snippet-revive 206 214 #s(yas--snippet nil nil #s(yas--exit 213 nil) 29 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 213 nil) 29 nil nil nil nil)) (206 . 214) (#("return $0;" 0 10 (fontified nil)) . 206) (206 . 216) (#("re" 0 2 (fontified nil)) . 206) (206 . 208) (#("return expression;" 0 18 (fontified nil)) . -206) (206 . 224) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -206) (undo-tree-id2260 . -3) (undo-tree-id2261 . -3) 209 (206 . 209) (203 . 206) (203 . 206) (204 . 206) (203 . 205) (202 . 204) (202 . 205) (#("  " 0 2 (fontified t)) . 202) (undo-tree-id2262 . -2) (undo-tree-id2263 . -2) 204 (201 . 204) (195 . 200) (nil fontified nil 177 . 195) (177 . 195) (#("t" 0 1 (fontified nil)) . 177) (nil fontified nil 177 . 178) (177 . 178) (#("token_class::token" 0 18 (fontified nil)) . -177) (nil fontified nil 177 . 195) (177 . 195) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -177) (undo-tree-id2264 . -2) (undo-tree-id2265 . -2) 179 (177 . 179) (176 . 177) (172 . 176) (nil fontified nil 154 . 172) (nil face (rainbow-delimiters-depth-1-face) 154 . 172) (154 . 172) (#("to" 0 2 (fontified nil)) . 154) (nil fontified nil 154 . 156) (nil face (rainbow-delimiters-depth-1-face) 154 . 156) (154 . 156) (#("token_class::token" 0 18 (fontified nil)) . -154) (nil fontified nil 154 . 172) (nil face (rainbow-delimiters-depth-1-face) 154 . 172) (154 . 172) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -154) (undo-tree-id2266 . -2) (undo-tree-id2267 . -2) 156 (154 . 156) (153 . 155) (152 . 153) (144 . 152) (#("o" 0 1 (fontified nil)) . 144) (144 . 145) (#("operator" 0 8 (fontified nil)) . -144) (144 . 152) (#("op" 0 1 (fontified t face font-lock-function-name-face) 1 2 (fontified t face font-lock-function-name-face)) . -144) (undo-tree-id2268 . -2) (undo-tree-id2269 . -2) 146 (142 . 146) (139 . 142) (138 . 139) (t 26071 1826 783196 344000) 138) nil (26071 2032 635929 453000) 0 nil])
([nil nil ((apply -3 435 517 undo--wrap-and-run-primitive-undo 435 517 ((437 . 440) 486)) (t 26071 2032 643191 348000)) nil (26071 2073 475545 371000) 0 nil])
([nil nil ((442 . 443) (440 . 442) (439 . 440) (437 . 439) (434 . 437) (t 26071 2073 573190 354000) 427) nil (26071 2092 74271 937000) 0 nil])
([nil nil ((482 . 483) (479 . 482) (#("l" 0 1 (fontified t)) . -479) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (#("l" 0 1 (fontified t)) . -480) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -481) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) 482 (478 . 482) (474 . 477) (#("t" 0 1 (fontified t)) . -474) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) 475 (474 . 475) (#("t" 0 1 (fontified t)) . -474) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) 475 (474 . 475) (#("t" 0 1 (fontified t)) . -474) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) 475 (474 . 475) (473 . 474) (nil fontified nil 455 . 473) (nil face (rainbow-delimiters-depth-2-face) 455 . 473) (455 . 473) (#("to" 0 2 (fontified nil)) . 455) (nil fontified nil 455 . 457) (nil face (rainbow-delimiters-depth-2-face) 455 . 457) (455 . 457) (#("token_class::token" 0 18 (fontified nil)) . -455) (nil fontified nil 455 . 473) (nil face (rainbow-delimiters-depth-2-face) 455 . 473) (455 . 473) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -455) (undo-tree-id2282 . -3) (undo-tree-id2283 . -3) 458 (455 . 458) (454 . 456) (451 . 454) (444 . 446) (#(" " 0 1 (fontified nil)) . 444) (449 . 450) (444 . 445) (#("  " 0 2 (fontified nil)) . 444) (449 . 450) (446 . 449) (#("st" 0 2 (fontified nil)) . 446) (446 . 448) (#("std" 0 3 (fontified nil)) . -446) (446 . 449) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -446) (undo-tree-id2284 . -2) (undo-tree-id2285 . -2) 448 (446 . 448) (443 . 446) (t 26071 2092 83189 905000) 442) nil (26071 2148 499839 340000) 0 nil])
([nil nil ((495 . 496) (493 . 495) (490 . 492) (#("y" 0 1 (fontified t)) . -490) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) 491 (490 . 491) (nil face font-lock-type-face 489 . 491) (nil fontified t 489 . 491) (489 . 491) (#("=" 0 1 (fontified t)) . -489) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) 490 (486 . 490) (483 . 486) (t 26071 2148 513188 541000) 482) nil (26071 2167 895653 79000) 0 nil])
([nil nil ((183 . 188) (#("co" 0 2 (fontified nil)) . 183) (183 . 185) (#("const" 0 5 (fontified nil)) . -183) (183 . 188) (#("co" 0 1 (fontified t) 1 2 (fontified t)) . -183) (undo-tree-id2290 . -2) (undo-tree-id2291 . -2) (undo-tree-id2292 . -1) (undo-tree-id2293 . -2) 185 (184 . 185) (183 . 184) (#("x" 0 1 (fontified t)) . -183) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) 184 (183 . 184) (183 . 184) (nil face (rainbow-delimiters-depth-1-face) 154 . 159) (nil fontified nil 154 . 159) (154 . 159) (#("co" 0 2 (fontified nil)) . 154) (nil face (rainbow-delimiters-depth-1-face) 154 . 156) (nil fontified nil 154 . 156) (154 . 156) (#("const" 0 5 (fontified nil)) . -154) (nil face (rainbow-delimiters-depth-1-face) 154 . 159) (nil fontified nil 154 . 159) (154 . 159) (#("co" 0 1 (fontified t) 1 2 (fontified t)) . -154) (undo-tree-id2296 . -2) (undo-tree-id2297 . -2) 156 (154 . 156) (154 . 155) (t 26071 2167 913188 67000)) nil (26071 2461 881872 962000) 0 nil])
([nil nil ((209 . 210) (179 . 180)) nil (26071 2682 837976 938000) 0 nil] [nil nil ((#(",const token_class::token tok1)" 0 1 (fontified t c-type c-decl-arg-start) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 18 (fontified t face font-lock-constant-face) 18 20 (fontified t) 20 25 (fontified t face font-lock-type-face) 25 26 (fontified t) 26 27 (fontified t face font-lock-variable-name-face) 27 28 (fontified t face font-lock-variable-name-face) 28 29 (fontified t face font-lock-variable-name-face) 29 30 (fontified t face font-lock-variable-name-face) 30 31 (fontified t face (rainbow-delimiters-depth-1-face))) . 182) (undo-tree-id2608 . 25) (undo-tree-id2609 . -30) (undo-tree-id2611 . -18) (undo-tree-id2613 . -5) (undo-tree-id2615 . -5) (undo-tree-id2617 . -5) (undo-tree-id2619 . -5) (undo-tree-id2621 . -5) (undo-tree-id2623 . -5) (undo-tree-id2625 . -5) (undo-tree-id2627 . -5) (undo-tree-id2629 . -5) (undo-tree-id2631 . -5) (undo-tree-id2633 . -5) (undo-tree-id2635 . -5) (undo-tree-id2637 . -5) (undo-tree-id2639 . -5) (undo-tree-id2641 . -5) (undo-tree-id2643 . -5) (undo-tree-id2645 . -5) (undo-tree-id2647 . -5) (undo-tree-id2649 . -5) (undo-tree-id2651 . -5) (undo-tree-id2653 . -5) (undo-tree-id2655 . -5) (undo-tree-id2657 . -5) (undo-tree-id2659 . -5) (undo-tree-id2661 . -5) (undo-tree-id2663 . -5) (undo-tree-id2665 . -5) (undo-tree-id2667 . -5) (undo-tree-id2669 . -5) (undo-tree-id2671 . -5) (undo-tree-id2673 . -5) (undo-tree-id2675 . -5) (undo-tree-id2677 . -5) (undo-tree-id2679 . -5) (undo-tree-id2681 . -5) (undo-tree-id2683 . -5) (undo-tree-id2685 . -5) (undo-tree-id2687 . -5) (undo-tree-id2689 . -5) (undo-tree-id2691 . -5) (undo-tree-id2693 . -5) (undo-tree-id2695 . -5) (undo-tree-id2697 . -5) (undo-tree-id2699 . -5) (undo-tree-id2701 . -5) (undo-tree-id2703 . -5) (undo-tree-id2705 . -5) (undo-tree-id2707 . -5) (undo-tree-id2709 . -5) (undo-tree-id2711 . -5) (undo-tree-id2713 . -5) (undo-tree-id2715 . -5) (undo-tree-id2717 . -5) (undo-tree-id2719 . -5) (undo-tree-id2721 . -5) (undo-tree-id2723 . -5) (undo-tree-id2725 . -5) (undo-tree-id2727 . -5) (undo-tree-id2729 . -5) (undo-tree-id2731 . -5) (undo-tree-id2733 . -5) (undo-tree-id2735 . -5) (undo-tree-id2737 . -5) (undo-tree-id2739 . -5) (undo-tree-id2741 . -5) (undo-tree-id2743 . -5) (undo-tree-id2745 . -5) (undo-tree-id2747 . -5) (undo-tree-id2749 . -5) (undo-tree-id2751 . -5) (undo-tree-id2753 . -5) (undo-tree-id2755 . -5) (undo-tree-id2757 . -5) (undo-tree-id2759 . -5) (undo-tree-id2761 . -5) (undo-tree-id2763 . -5) (undo-tree-id2765 . -5) (undo-tree-id2767 . -5) (undo-tree-id2769 . -4) (undo-tree-id2771 . -4) (undo-tree-id2773 . -4) (undo-tree-id2775 . -4) (undo-tree-id2777 . -4) (undo-tree-id2779 . -4) (undo-tree-id2781 . -4) (undo-tree-id2783 . -4) (undo-tree-id2785 . -4) (undo-tree-id2787 . -4) (undo-tree-id2789 . -4) (undo-tree-id2791 . -4) (undo-tree-id2793 . -4) (undo-tree-id2795 . -3) (undo-tree-id2797 . -3) (undo-tree-id2799 . -3) (undo-tree-id2801 . -3) (undo-tree-id2803 . -3) (undo-tree-id2805 . -3) (undo-tree-id2807 . -3) (undo-tree-id2809 . -3) (undo-tree-id2811 . -3) (undo-tree-id2813 . -3) (undo-tree-id2815 . -3) (undo-tree-id2817 . -3) (undo-tree-id2819 . -3) (undo-tree-id2821 . -2) (undo-tree-id2823 . -2) (undo-tree-id2825 . -2) (undo-tree-id2827 . -2) (undo-tree-id2829 . -2) (undo-tree-id2831 . -2) (undo-tree-id2833 . -2) (undo-tree-id2835 . -2) (undo-tree-id2837 . -2) (undo-tree-id2839 . -2) (undo-tree-id2841 . -2) (undo-tree-id2843 . -2) (undo-tree-id2845 . -2) (undo-tree-id2847 . -1) (undo-tree-id2849 . -1) (undo-tree-id2851 . -1) (undo-tree-id2853 . -1) (undo-tree-id2855 . -1) (undo-tree-id2857 . -1) (undo-tree-id2859 . -1) (undo-tree-id2861 . -1) (undo-tree-id2863 . -1) (undo-tree-id2865 . -1) (undo-tree-id2867 . -1) (undo-tree-id2869 . -1) (undo-tree-id2871 . -1) (undo-tree-id2873 . -31) (t 26071 2238 869853 15000)) ((182 . 213)) (26071 2461 463639 488000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -536) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) 537 (536 . 537) (534 . 536) (297 . 298) (290 . 291) (283 . 290) (281 . 283) (280 . 282) (279 . 281) (279 . 283) (278 . 278) (278 . 279) (273 . 278) (266 . 273) (265 . 265) (265 . 266) (nil face (rainbow-delimiters-depth-1-face) 264 . 265) (nil fontified t 264 . 265) (264 . 265) (t 26071 2684 893175 495000) 263) nil (26071 2758 186521 808000) 0 nil] [nil nil ((nil rear-nonsticky nil 457 . 458) (#("
" 0 1 (fontified nil)) . -583) (457 . 584) 456 (t 26071 2475 609847 267000)) ((#("
bool operator<(const token_class::token &tok,const token_class::token &tok1)
{
  return tok.token_exp<tok1.token_exp;
  
  
}
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil c-type c-decl-id-start face font-lock-type-face) 5 6 (fontified nil) 6 14 (fontified nil face font-lock-keyword-face) 14 15 (fontified nil face font-lock-function-name-face) 15 16 (fontified nil c-type c-decl-arg-start face (rainbow-delimiters-depth-2-face)) 16 21 (fontified nil face font-lock-keyword-face) 21 22 (fontified nil) 22 33 (fontified nil face font-lock-constant-face) 33 35 (fontified nil) 35 39 (fontified nil face font-lock-type-face) 39 40 (fontified nil face font-lock-type-face) 40 41 (fontified nil) 41 42 (fontified nil) 42 43 (fontified nil face font-lock-variable-name-face) 43 44 (fontified nil face font-lock-variable-name-face) 44 45 (fontified nil face font-lock-variable-name-face) 45 46 (fontified nil c-type c-decl-arg-start) 46 51 (fontified nil face font-lock-keyword-face) 51 52 (fontified nil) 52 63 (fontified nil face font-lock-constant-face) 63 65 (fontified nil) 65 70 (fontified nil face font-lock-type-face) 70 71 (fontified nil) 71 72 (fontified nil) 72 73 (fontified nil face font-lock-variable-name-face) 73 74 (fontified nil face font-lock-variable-name-face) 74 75 (fontified nil face font-lock-variable-name-face) 75 76 (fontified nil face font-lock-variable-name-face) 76 77 (fontified nil face (rainbow-delimiters-depth-2-face)) 77 78 (fontified nil) 78 79 (fontified t face (rainbow-delimiters-depth-2-face)) 79 80 (fontified t) 80 82 (fontified t) 82 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 90 (fontified t) 90 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t) 96 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 108 (fontified t) 108 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 114 (fontified t) 114 115 (fontified t) 115 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 119 (fontified t) 119 121 (fontified t) 121 122 (fontified t) 122 125 (fontified t) 125 126 (fontified nil face (rainbow-delimiters-depth-2-face)) 126 127 (fontified nil)) . 457) (undo-tree-id3409 . -80) (undo-tree-id3410 . -80) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -126) (undo-tree-id3415 . -119) (undo-tree-id3416 . -119) (undo-tree-id3417 . -78) (undo-tree-id3418 . -78) (undo-tree-id3419 . -122) (undo-tree-id3420 . -122) (undo-tree-id3421 . -125) (undo-tree-id3422 . -125) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -22) (undo-tree-id3426 . -33) (undo-tree-id3427 . -52) (undo-tree-id3428 . -63) (undo-tree-id3429 . -78) (undo-tree-id3430 . -79) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (583 . 584) (nil rear-nonsticky t 457 . 458) (t 26071 2665 506509 302000)) (26071 2665 475118 369000) 0 nil])
([nil nil ((179 . 180)) ((#("&" 0 1 (fontified t)) . 179)) (26071 2460 995512 477000) 0 nil])
([nil nil ((546 . 549) 535) nil (26071 2758 186308 969000) 0 nil])
nil
([nil nil ((183 . 184) (#(")" 0 1 (fontified nil face font-lock-variable-name-face)) . -183) (183 . 184)) ((#(")" 0 1 (fontified nil face font-lock-variable-name-face)) . 183) (undo-tree-id3267 . 1) (183 . 184) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 183) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . 1) (undo-tree-id3408 . -1)) (26071 2460 611012 101000) 0 nil])
([nil nil ((549 . 552)) nil (26071 2758 186308 241000) 0 nil])
([nil nil ((184 . 188)) ((#(" con" 0 1 (fontified t) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . 184) (undo-tree-id3126 . -3) (undo-tree-id3127 . -3) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -4) (undo-tree-id3186 . -3) (undo-tree-id3187 . -3) (undo-tree-id3188 . -3) (undo-tree-id3189 . -3) (undo-tree-id3190 . -3) (undo-tree-id3191 . -3) (undo-tree-id3192 . -3) (undo-tree-id3193 . -3) (undo-tree-id3194 . -3) (undo-tree-id3195 . -3) (undo-tree-id3196 . -3) (undo-tree-id3197 . -3) (undo-tree-id3198 . -3) (undo-tree-id3199 . -3) (undo-tree-id3200 . -3) (undo-tree-id3201 . -3) (undo-tree-id3202 . -3) (undo-tree-id3203 . -3) (undo-tree-id3204 . -3) (undo-tree-id3205 . -3) (undo-tree-id3206 . -3) (undo-tree-id3207 . -3) (undo-tree-id3208 . -3) (undo-tree-id3209 . -3) (undo-tree-id3210 . -3) (undo-tree-id3211 . -3) (undo-tree-id3212 . -3) (undo-tree-id3213 . -3) (undo-tree-id3214 . -3) (undo-tree-id3215 . -3) (undo-tree-id3216 . -3) (undo-tree-id3217 . -3) (undo-tree-id3218 . -3) (undo-tree-id3219 . -3) (undo-tree-id3220 . -3) (undo-tree-id3221 . -3) (undo-tree-id3222 . -3) (undo-tree-id3223 . -3) (undo-tree-id3224 . -3) (undo-tree-id3225 . -3) (undo-tree-id3226 . -3) (undo-tree-id3227 . -3) (undo-tree-id3228 . -3) (undo-tree-id3229 . -3) (undo-tree-id3230 . -3) (undo-tree-id3231 . -3) (undo-tree-id3232 . -3) (undo-tree-id3233 . -3) (undo-tree-id3234 . -3) (undo-tree-id3235 . -3) (undo-tree-id3236 . -3) (undo-tree-id3237 . -3) (undo-tree-id3238 . -3) (undo-tree-id3239 . -3) (undo-tree-id3240 . -3) (undo-tree-id3241 . -3) (undo-tree-id3242 . -3) (undo-tree-id3243 . -3) (undo-tree-id3244 . -3) (undo-tree-id3245 . -3) (undo-tree-id3246 . -3) (undo-tree-id3247 . -3) (undo-tree-id3248 . -3) (undo-tree-id3249 . -3) (undo-tree-id3250 . -3) (undo-tree-id3251 . -3) (undo-tree-id3252 . -3) (undo-tree-id3253 . -3) (undo-tree-id3254 . -3) (undo-tree-id3255 . -3) (undo-tree-id3256 . -3) (undo-tree-id3257 . -3) (undo-tree-id3258 . -3) (undo-tree-id3259 . -3) (undo-tree-id3260 . -3) (undo-tree-id3261 . -3) (undo-tree-id3262 . -3) (undo-tree-id3263 . -3) (undo-tree-id3264 . -3) (undo-tree-id3265 . -3) (undo-tree-id3266 . -3)) (26071 2460 280557 943000) 0 nil])
([nil nil ((549 . 552) (#("std" 0 1 (c-is-sws t fontified nil) 1 3 (fontified nil)) . 549) (549 . 552) (#("std" 0 1 (fontified t c-is-sws t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -549) (undo-tree-id3763 . -3) (undo-tree-id3764 . -3) 552) nil (26071 2758 186306 941000) 0 nil])
([nil nil ((185 . 190) (#("c" 0 1 (fontified nil)) . 185) (185 . 186) (#("const" 0 5 (fontified nil)) . -185) (185 . 190) (#("con" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -185) (undo-tree-id2298 . -3) (undo-tree-id2299 . -3) (undo-tree-id2301 . -1) (undo-tree-id2303 . -1) (undo-tree-id2305 . -1) (undo-tree-id2307 . -1) (undo-tree-id2309 . -1) (undo-tree-id2311 . -1) (undo-tree-id2313 . -1) (undo-tree-id2315 . -1) (undo-tree-id2317 . -1) (undo-tree-id2319 . -1) (undo-tree-id2321 . -1) (undo-tree-id2323 . -1) (undo-tree-id2325 . -1) (undo-tree-id2327 . -1) (undo-tree-id2329 . -1) (undo-tree-id2331 . -1) (undo-tree-id2333 . -1) (undo-tree-id2335 . -1) (undo-tree-id2337 . -1) (undo-tree-id2339 . -1) (undo-tree-id2341 . -1) (undo-tree-id2343 . -1) (undo-tree-id2345 . -1) (undo-tree-id2347 . -1) (undo-tree-id2349 . -1) (undo-tree-id2351 . -1) (undo-tree-id2353 . -1) (undo-tree-id2355 . -1) (undo-tree-id2357 . -1) (undo-tree-id2359 . -1) (undo-tree-id2361 . -1) (undo-tree-id2363 . -1) (undo-tree-id2365 . -1) (undo-tree-id2367 . -1) (undo-tree-id2369 . -2) (undo-tree-id2371 . -2) (undo-tree-id2373 . -2) (undo-tree-id2375 . -2) (undo-tree-id2377 . -2) (undo-tree-id2379 . -2) (undo-tree-id2381 . -2) (undo-tree-id2383 . -2) (undo-tree-id2385 . -2) (undo-tree-id2387 . -2) (undo-tree-id2389 . -2) (undo-tree-id2391 . -2) (undo-tree-id2393 . -2) (undo-tree-id2395 . -2) (undo-tree-id2397 . -2) (undo-tree-id2399 . -2) (undo-tree-id2401 . -2) (undo-tree-id2403 . -2) (undo-tree-id2405 . -2) (undo-tree-id2407 . -2) (undo-tree-id2409 . -2) (undo-tree-id2411 . -2) (undo-tree-id2413 . -2) (undo-tree-id2415 . -2) (undo-tree-id2417 . -2) (undo-tree-id2419 . -2) (undo-tree-id2421 . -2) (undo-tree-id2423 . -2) (undo-tree-id2425 . -2) (undo-tree-id2427 . -2) (undo-tree-id2429 . -2) (undo-tree-id2431 . -2) (undo-tree-id2433 . -2) (undo-tree-id2435 . -2) (undo-tree-id2437 . -2) (undo-tree-id2439 . -2) (undo-tree-id2441 . -2) (undo-tree-id2443 . -2) (undo-tree-id2445 . -2) (undo-tree-id2447 . -2) (undo-tree-id2449 . -3) (undo-tree-id2451 . -3) (undo-tree-id2453 . -3) (undo-tree-id2455 . -3) (undo-tree-id2457 . -3) (undo-tree-id2459 . -3) (undo-tree-id2461 . -3) (undo-tree-id2463 . -3) (undo-tree-id2465 . -3) (undo-tree-id2467 . -3) (undo-tree-id2469 . -3) (undo-tree-id2471 . -3) (undo-tree-id2473 . -3) (undo-tree-id2475 . -3) (undo-tree-id2477 . -3) (undo-tree-id2479 . -3) (undo-tree-id2481 . -3) (undo-tree-id2483 . -3) (undo-tree-id2485 . -3) (undo-tree-id2487 . -3) (undo-tree-id2489 . -3) (undo-tree-id2491 . -3) (undo-tree-id2493 . -3) (undo-tree-id2495 . -3) (undo-tree-id2497 . -3) (undo-tree-id2499 . -3) (undo-tree-id2501 . -3) (undo-tree-id2503 . -3) (undo-tree-id2505 . -3) (undo-tree-id2507 . -3) (undo-tree-id2509 . -3) (undo-tree-id2511 . -3) (undo-tree-id2513 . -3) (undo-tree-id2515 . -3) (undo-tree-id2517 . -3) (undo-tree-id2519 . -3) (undo-tree-id2521 . -3) (undo-tree-id2523 . -3) (undo-tree-id2525 . -3) (undo-tree-id2527 . -3) (undo-tree-id2529 . -3) (undo-tree-id2531 . -3) (undo-tree-id2533 . -3) (undo-tree-id2535 . -3) (undo-tree-id2537 . -3) (undo-tree-id2539 . -3) (undo-tree-id2541 . -3) (undo-tree-id2543 . -3) (undo-tree-id2545 . -3) (undo-tree-id2547 . -3) (undo-tree-id2549 . -3) (undo-tree-id2551 . -3) (undo-tree-id2553 . -3) (undo-tree-id2555 . -3) (undo-tree-id2557 . -3) (undo-tree-id2559 . -3) (undo-tree-id2561 . -3) (undo-tree-id2563 . -3) (undo-tree-id2565 . -3) (undo-tree-id2567 . -3) (undo-tree-id2569 . -3) (undo-tree-id2571 . -3) (undo-tree-id2573 . -3) (undo-tree-id2575 . -3) (undo-tree-id2577 . -3) (undo-tree-id2579 . -3) (undo-tree-id2581 . -3) (undo-tree-id2583 . -3) (undo-tree-id2585 . -3) (undo-tree-id2587 . -3) (undo-tree-id2589 . -3) (undo-tree-id2591 . -3) (undo-tree-id2593 . -3) (undo-tree-id2595 . -3) (undo-tree-id2597 . -3) (undo-tree-id2599 . -3) (undo-tree-id2601 . -3) (undo-tree-id2603 . -3) (undo-tree-id2605 . -3) (undo-tree-id2607 . -3) 188) ((185 . 188) (#("const" 0 5 (fontified nil)) . 185) (185 . 190) (#("c" 0 1 (fontified nil)) . 185) (185 . 186) (#("const" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face c-type c-decl-id-start)) . 185) (undo-tree-id3068 . -4) (undo-tree-id3069 . -4) (undo-tree-id3070 . -3) (undo-tree-id3071 . -5) (undo-tree-id3072 . -4) (undo-tree-id3073 . -4) (undo-tree-id3074 . -4) (undo-tree-id3075 . -4) (undo-tree-id3076 . -4) (undo-tree-id3077 . -4) (undo-tree-id3078 . -4) (undo-tree-id3079 . -4) (undo-tree-id3080 . -4) (undo-tree-id3081 . -4) (undo-tree-id3082 . -4) (undo-tree-id3083 . -4) (undo-tree-id3084 . -4) (undo-tree-id3085 . -4) (undo-tree-id3086 . -4) (undo-tree-id3087 . -4) (undo-tree-id3088 . -4) (undo-tree-id3089 . -4) (undo-tree-id3090 . -4) (undo-tree-id3091 . -4) (undo-tree-id3092 . -4) (undo-tree-id3093 . -4) (undo-tree-id3094 . -4) (undo-tree-id3095 . -4) (undo-tree-id3096 . -4) (undo-tree-id3097 . -4) (undo-tree-id3098 . -4) (undo-tree-id3099 . -4) (undo-tree-id3100 . -4) (undo-tree-id3101 . -4) (undo-tree-id3102 . -4) (undo-tree-id3103 . -4) (undo-tree-id3104 . -4) (undo-tree-id3105 . -4) (undo-tree-id3106 . -4) (undo-tree-id3107 . -4) (undo-tree-id3108 . -4) (undo-tree-id3109 . -4) (undo-tree-id3110 . -4) (undo-tree-id3111 . -4) (undo-tree-id3112 . -4) (undo-tree-id3113 . -4) (undo-tree-id3114 . -4) (undo-tree-id3115 . -4) (undo-tree-id3116 . -4) (undo-tree-id3117 . -4) (undo-tree-id3118 . -4) (undo-tree-id3119 . -4) (undo-tree-id3120 . -4) (undo-tree-id3121 . -4) (undo-tree-id3122 . -4) (undo-tree-id3123 . -4) (undo-tree-id3124 . -4) (undo-tree-id3125 . -4)) (26071 2459 877689 756000) 0 nil])
([nil nil ((547 . 549) (#(" " 0 1 (fontified nil c-is-sws t)) . 547) (552 . 553) (547 . 548) (#("  " 0 1 (fontified nil c-is-sws t c-in-sws t) 1 2 (fontified nil c-is-sws t c-in-sws t)) . 547) (552 . 553)) nil (26071 2758 186304 571000) 0 nil])
([nil nil ((#("cons" 0 4 (fontified t face font-lock-keyword-face)) . 185) (undo-tree-id2877 . -4) (undo-tree-id2878 . -4) (undo-tree-id2879 . -3) (undo-tree-id2881 . -4) (undo-tree-id2883 . -4) (undo-tree-id2885 . -4) (undo-tree-id2887 . -4) (undo-tree-id2889 . -4) (undo-tree-id2891 . -4) (undo-tree-id2893 . -4) (undo-tree-id2895 . -4) (undo-tree-id2897 . -4) (undo-tree-id2899 . -4) (undo-tree-id2901 . -4) (undo-tree-id2903 . -4) (undo-tree-id2905 . -4) (undo-tree-id2907 . -4) (undo-tree-id2909 . -4) (undo-tree-id2911 . -4) (undo-tree-id2913 . -4) (undo-tree-id2915 . -4) (undo-tree-id2917 . -4) (undo-tree-id2919 . -4) (undo-tree-id2921 . -4) (undo-tree-id2923 . -4) (undo-tree-id2925 . -4) (undo-tree-id2927 . -4) (undo-tree-id2929 . -4) (undo-tree-id2931 . -4) (undo-tree-id2933 . -4) (undo-tree-id2935 . -4) (undo-tree-id2937 . -4) (undo-tree-id2939 . -4) (undo-tree-id2941 . -4) (undo-tree-id2943 . -4) (undo-tree-id2945 . -4) (undo-tree-id2947 . -4) (undo-tree-id2949 . -4) (undo-tree-id2951 . -4) (undo-tree-id2953 . -4) (undo-tree-id2955 . -4) (undo-tree-id2957 . -4) (undo-tree-id2959 . -4) (undo-tree-id2961 . -4) (undo-tree-id2963 . -4) (undo-tree-id2965 . -4) (undo-tree-id2967 . -4) (undo-tree-id2969 . -4) (undo-tree-id2971 . -4) (undo-tree-id2973 . -4) (undo-tree-id2975 . -4) (undo-tree-id2977 . -4) (undo-tree-id2979 . -4) (undo-tree-id2981 . -4) (undo-tree-id2983 . -4) (undo-tree-id2985 . -4) (undo-tree-id2987 . -4) (undo-tree-id2989 . -4) (undo-tree-id2991 . -4) (undo-tree-id2993 . -4) (undo-tree-id2995 . -4) (undo-tree-id2997 . -4) (undo-tree-id2999 . -4) (undo-tree-id3001 . -4) (undo-tree-id3003 . -4) (undo-tree-id3005 . -4) (undo-tree-id3007 . -4) (undo-tree-id3009 . -4) (undo-tree-id3011 . -4) (undo-tree-id3013 . -4) (undo-tree-id3015 . -4) (undo-tree-id3017 . -4) (undo-tree-id3019 . -4) (undo-tree-id3021 . -4) (undo-tree-id3023 . -4) (undo-tree-id3025 . -4) (undo-tree-id3027 . -4) (undo-tree-id3029 . -4) (undo-tree-id3031 . -4) (undo-tree-id3033 . -4) (undo-tree-id3035 . -4) (undo-tree-id3037 . -4) (undo-tree-id3039 . -4) (undo-tree-id3041 . -4) (undo-tree-id3043 . -4) (undo-tree-id3045 . -4) (undo-tree-id3047 . -4) (undo-tree-id3049 . -4) (undo-tree-id3051 . -4) (undo-tree-id3053 . -4) (undo-tree-id3055 . -4) (undo-tree-id3057 . -4) (undo-tree-id3059 . -4) (undo-tree-id3061 . -4) (undo-tree-id3063 . -4) (undo-tree-id3065 . -4) (undo-tree-id3067 . -4) 189 (t 26071 2378 756516 278000)) ((185 . 189)) (26071 2459 301796 562000) 0 nil])
([nil nil ((554 . 557)) nil (26071 2758 186303 297000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-type-face)) . 185) (undo-tree-id2875 . -1)) ((185 . 186) (t 26071 2412 586515 457000)) (26071 2412 574315 829000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -556) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) 557) nil (26071 2758 186302 227000) 0 nil])
nil
([nil nil ((556 . 557)) nil (26071 2758 186300 196000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 558 563 nil nil nil t #s(yas--field 2 565 568 nil nil nil t nil)) #s(yas--field 2 565 568 nil nil nil t nil)) nil 30 nil #s(yas--field 2 565 568 nil nil nil t nil) nil nil)) (554 . 584) (#("map<${1:typename Key}, ${2:typename Tp}>" 0 40 (fontified nil)) . 554) (554 . 594) (#("ma" 0 2 (fontified nil)) . 554) (554 . 556) (#("map<typename Key, typename Tp, typename Compare, typename Alloc>" 0 3 (fontified nil) 3 4 (syntax-table (4 . 62) fontified nil) 4 16 (fontified nil) 16 17 (c-type c-<>-arg-sep fontified nil) 17 29 (fontified nil) 29 30 (c-type c-<>-arg-sep fontified nil) 30 47 (fontified nil) 47 48 (c-type c-<>-arg-sep fontified nil) 48 63 (fontified nil) 63 64 (syntax-table (5 . 60) fontified nil)) . -554) (554 . 618) (#("map" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -554) (undo-tree-id3759 . -3) (undo-tree-id3760 . -3) 557) nil (26071 2758 186298 963000) 0 nil])
([nil nil ((559 . 561) (#("typename Key" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 12 (fontified nil face font-lock-type-face)) . 559) (558 . 559)) nil (26071 2758 186296 95000) 0 nil])
([nil nil ((561 . 563)) nil (26071 2758 186295 596000) 0 nil])
([nil nil ((566 . 568) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 566) (565 . 566)) nil (26071 2758 186294 827000) 0 nil])
([nil nil ((565 . 568) (#("i" 0 1 (fontified nil)) . 565) (565 . 566) (#("int" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -565) (undo-tree-id3757 . -3) (undo-tree-id3758 . -3) 568) nil (26071 2758 186293 243000) 0 nil])
([nil nil ((apply yas--snippet-revive 554 569 #s(yas--snippet nil (#s(yas--field 1 558 563 nil nil nil t #s(yas--field 2 565 568 nil nil nil t nil)) #s(yas--field 2 565 568 nil nil nil t nil)) nil 30 nil #s(yas--field 2 565 568 nil nil nil t nil) nil nil))) nil (26071 2758 186290 506000) 0 nil])
([nil nil ((569 . 574)) nil (26071 2758 186289 952000) 0 nil])
([nil nil ((574 . 575)) nil (26071 2758 186289 316000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -569) (undo-tree-id3756 . -1) 570) nil (26071 2758 186288 540000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -569) (undo-tree-id3755 . -1) 570) nil (26071 2758 186286 72000) 0 nil])
([nil nil ((569 . 574)) nil (26071 2758 186275 863000) 0 nil])
([nil nil ((nil face font-lock-type-face 588 . 590) (nil fontified t 588 . 590) (588 . 590) (581 . 588) (#("m" 0 1 (fontified nil)) . 581) (581 . 582) (#("mdzzmap" 0 7 (fontified nil)) . -581) (581 . 588) (#("md" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -581) (undo-tree-id3985 . -2) (undo-tree-id3986 . -2) 583 (581 . 583) (578 . 581) (t 26071 2758 203173 703000) 573) nil (26071 2794 222511 868000) 0 nil])
([nil nil ((616 . 617) (614 . 616) (606 . 613) (#("yo" 0 2 (fontified nil)) . 606) (606 . 608) (#("youbing" 0 7 (fontified nil)) . -606) (606 . 613) (#("you" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -606) (undo-tree-id3981 . -3) (undo-tree-id3982 . -3) 609 (606 . 609) (594 . 595) (591 . 594) (586 . 591) (581 . 586) (#("sbm" 0 3 (fontified nil)) . 581) (581 . 584) (#("sbmap" 0 5 (fontified nil)) . -581) (581 . 586) (#("sbm" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -581) (undo-tree-id3983 . -3) (undo-tree-id3984 . -3) 584 (581 . 584) (578 . 581) 556) nil (26071 2794 222504 674000) 0 nil])
([nil nil ((apply yas--snippet-revive 348 360 #s(yas--snippet nil nil nil 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 31 nil nil nil nil)) (348 . 360) (#("return true;" 0 12 (fontified nil)) . 348) (348 . 360) (#("re" 0 2 (fontified nil)) . 348) (348 . 350) (#("return true;" 0 12 (fontified nil)) . -348) (348 . 360) (#("ret" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -348) (undo-tree-id3987 . -3) (undo-tree-id3988 . -3) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -2) (undo-tree-id4016 . -2) (undo-tree-id4017 . -2) (undo-tree-id4018 . -2) (undo-tree-id4019 . -2) (undo-tree-id4020 . -2) (undo-tree-id4021 . -2) (undo-tree-id4022 . -2) (undo-tree-id4023 . -2) (undo-tree-id4024 . -2) (undo-tree-id4025 . -2) (undo-tree-id4026 . -2) (undo-tree-id4027 . -2) (undo-tree-id4028 . -2) (undo-tree-id4029 . -2) (undo-tree-id4030 . -2) (undo-tree-id4031 . -2) (undo-tree-id4032 . -2) (undo-tree-id4033 . -2) (undo-tree-id4034 . -2) (undo-tree-id4035 . -2) (undo-tree-id4036 . -2) (undo-tree-id4037 . -2) (undo-tree-id4038 . -2) (undo-tree-id4039 . -2) (undo-tree-id4040 . -2) (undo-tree-id4041 . -2) (undo-tree-id4042 . -2) (undo-tree-id4043 . -2) (undo-tree-id4044 . -2) (undo-tree-id4045 . -2) (undo-tree-id4046 . -2) (undo-tree-id4047 . -2) (undo-tree-id4048 . -2) (undo-tree-id4049 . -2) (undo-tree-id4050 . -2) (undo-tree-id4051 . -2) (undo-tree-id4052 . -2) (undo-tree-id4053 . -2) (undo-tree-id4054 . -2) (undo-tree-id4055 . -2) (undo-tree-id4056 . -2) (undo-tree-id4057 . -2) (undo-tree-id4058 . -2) (undo-tree-id4059 . -2) (undo-tree-id4060 . -2) (undo-tree-id4061 . -2) (undo-tree-id4062 . -2) (undo-tree-id4063 . -2) (undo-tree-id4064 . -2) (undo-tree-id4065 . -2) (undo-tree-id4066 . -2) (undo-tree-id4067 . -2) (undo-tree-id4068 . -2) (undo-tree-id4069 . -2) (undo-tree-id4070 . -2) (undo-tree-id4071 . -2) (undo-tree-id4072 . -2) (undo-tree-id4073 . -2) (undo-tree-id4074 . -2) (undo-tree-id4075 . -2) (undo-tree-id4076 . -2) (undo-tree-id4077 . -2) (undo-tree-id4078 . -2) (undo-tree-id4079 . -2) (undo-tree-id4080 . -2) (undo-tree-id4081 . -2) (undo-tree-id4082 . -2) (undo-tree-id4083 . -2) (undo-tree-id4084 . -2) (undo-tree-id4085 . -2) (undo-tree-id4086 . -2) (undo-tree-id4087 . -2) (undo-tree-id4088 . -2) (undo-tree-id4089 . -2) (undo-tree-id4090 . -2) (undo-tree-id4091 . -2) (undo-tree-id4092 . -2) (undo-tree-id4093 . -2) (undo-tree-id4094 . -2) (undo-tree-id4095 . -2) (undo-tree-id4096 . -2) (undo-tree-id4097 . -2) (undo-tree-id4098 . -2) (undo-tree-id4099 . -2) (undo-tree-id4100 . -2) (undo-tree-id4101 . -2) (undo-tree-id4102 . -2) (undo-tree-id4103 . -2) (undo-tree-id4104 . -2) (undo-tree-id4105 . -2) (undo-tree-id4106 . -2) (undo-tree-id4107 . -2) (undo-tree-id4108 . -2) (undo-tree-id4109 . -2) (undo-tree-id4110 . -2) (undo-tree-id4111 . -2) (undo-tree-id4112 . -2) (undo-tree-id4113 . -2) (undo-tree-id4114 . -2) (undo-tree-id4115 . -2) (undo-tree-id4116 . -2) (undo-tree-id4117 . -2) (undo-tree-id4118 . -2) (undo-tree-id4119 . -2) (undo-tree-id4120 . -2) (undo-tree-id4121 . -2) (undo-tree-id4122 . -2) (undo-tree-id4123 . -2) (undo-tree-id4124 . -2) (undo-tree-id4125 . -2) (undo-tree-id4126 . -2) (undo-tree-id4127 . -2) (undo-tree-id4128 . -2) (undo-tree-id4129 . -2) (undo-tree-id4130 . -2) (undo-tree-id4131 . -2) (undo-tree-id4132 . -2) (undo-tree-id4133 . -2) (undo-tree-id4134 . -2) (undo-tree-id4135 . -2) (undo-tree-id4136 . -2) (undo-tree-id4137 . -2) (undo-tree-id4138 . -2) (undo-tree-id4139 . -2) (undo-tree-id4140 . -2) (undo-tree-id4141 . -2) (undo-tree-id4142 . -2) (undo-tree-id4143 . -2) (undo-tree-id4144 . -2) (undo-tree-id4145 . -2) (undo-tree-id4146 . -2) (undo-tree-id4147 . -2) (undo-tree-id4148 . -2) (undo-tree-id4149 . -2) (undo-tree-id4150 . -2) (undo-tree-id4151 . -2) (undo-tree-id4152 . -2) (undo-tree-id4153 . -2) (undo-tree-id4154 . -2) (undo-tree-id4155 . -2) (undo-tree-id4156 . -2) (undo-tree-id4157 . -2) (undo-tree-id4158 . -2) (undo-tree-id4159 . -2) (undo-tree-id4160 . -2) (undo-tree-id4161 . -2) (undo-tree-id4162 . -2) (undo-tree-id4163 . -2) (undo-tree-id4164 . -2) (undo-tree-id4165 . -2) (undo-tree-id4166 . -2) (undo-tree-id4167 . -2) (undo-tree-id4168 . -2) (undo-tree-id4169 . -2) (undo-tree-id4170 . -2) (undo-tree-id4171 . -2) (undo-tree-id4172 . -2) (undo-tree-id4173 . -2) (undo-tree-id4174 . -2) (undo-tree-id4175 . -2) (undo-tree-id4176 . -2) (undo-tree-id4177 . -2) (undo-tree-id4178 . -2) (undo-tree-id4179 . -2) (undo-tree-id4180 . -2) (undo-tree-id4181 . -2) (undo-tree-id4182 . -2) (undo-tree-id4183 . -2) (undo-tree-id4184 . -2) (undo-tree-id4185 . -2) (undo-tree-id4186 . -2) (undo-tree-id4187 . -2) (undo-tree-id4188 . -2) (undo-tree-id4189 . -2) (undo-tree-id4190 . -2) (undo-tree-id4191 . -2) (undo-tree-id4192 . -2) (undo-tree-id4193 . -2) (undo-tree-id4194 . -2) (undo-tree-id4195 . -2) (undo-tree-id4196 . -2) (undo-tree-id4197 . -3) (undo-tree-id4198 . -3) (undo-tree-id4199 . -3) (undo-tree-id4200 . -3) (undo-tree-id4201 . -3) (undo-tree-id4202 . -3) (undo-tree-id4203 . -3) (undo-tree-id4204 . -3) (undo-tree-id4205 . -3) (undo-tree-id4206 . -3) (undo-tree-id4207 . -3) (undo-tree-id4208 . -3) (undo-tree-id4209 . -3) (undo-tree-id4210 . -3) (undo-tree-id4211 . -3) (undo-tree-id4212 . -3) (undo-tree-id4213 . -3) (undo-tree-id4214 . -3) (undo-tree-id4215 . -3) (undo-tree-id4216 . -3) (undo-tree-id4217 . -3) (undo-tree-id4218 . -3) (undo-tree-id4219 . -3) (undo-tree-id4220 . -3) (undo-tree-id4221 . -3) (undo-tree-id4222 . -3) (undo-tree-id4223 . -3) (undo-tree-id4224 . -3) (undo-tree-id4225 . -3) (undo-tree-id4226 . -3) (undo-tree-id4227 . -3) (undo-tree-id4228 . -3) (undo-tree-id4229 . -3) (undo-tree-id4230 . -3) (undo-tree-id4231 . -3) (undo-tree-id4232 . -3) (undo-tree-id4233 . -3) (undo-tree-id4234 . -3) (undo-tree-id4235 . -3) (undo-tree-id4236 . -3) (undo-tree-id4237 . -3) (undo-tree-id4238 . -3) (undo-tree-id4239 . -3) (undo-tree-id4240 . -3) (undo-tree-id4241 . -3) (undo-tree-id4242 . -3) (undo-tree-id4243 . -3) (undo-tree-id4244 . -3) (undo-tree-id4245 . -3) (undo-tree-id4246 . -3) (undo-tree-id4247 . -3) (undo-tree-id4248 . -3) (undo-tree-id4249 . -3) (undo-tree-id4250 . -3) (undo-tree-id4251 . -3) (undo-tree-id4252 . -3) (undo-tree-id4253 . -3) (undo-tree-id4254 . -3) (undo-tree-id4255 . -3) (undo-tree-id4256 . -3) (undo-tree-id4257 . -3) (undo-tree-id4258 . -3) (undo-tree-id4259 . -3) (undo-tree-id4260 . -3) (undo-tree-id4261 . -3) (undo-tree-id4262 . -3) (undo-tree-id4263 . -3) (undo-tree-id4264 . -3) (undo-tree-id4265 . -3) (undo-tree-id4266 . -3) (undo-tree-id4267 . -3) (undo-tree-id4268 . -3) (undo-tree-id4269 . -3) (undo-tree-id4270 . -3) (undo-tree-id4271 . -3) (undo-tree-id4272 . -3) (undo-tree-id4273 . -3) (undo-tree-id4274 . -3) (undo-tree-id4275 . -3) (undo-tree-id4276 . -3) (undo-tree-id4277 . -3) (undo-tree-id4278 . -3) (undo-tree-id4279 . -3) (undo-tree-id4280 . -3) (undo-tree-id4281 . -3) (undo-tree-id4282 . -3) (undo-tree-id4283 . -3) (undo-tree-id4284 . -3) (undo-tree-id4285 . -3) (undo-tree-id4286 . -3) (undo-tree-id4287 . -3) (undo-tree-id4288 . -3) (undo-tree-id4289 . -3) (undo-tree-id4290 . -3) (undo-tree-id4291 . -3) (undo-tree-id4292 . -3) (undo-tree-id4293 . -3) (undo-tree-id4294 . -3) (undo-tree-id4295 . -3) (undo-tree-id4296 . -3) (undo-tree-id4297 . -3) (undo-tree-id4298 . -3) (undo-tree-id4299 . -3) (undo-tree-id4300 . -3) (undo-tree-id4301 . -3) (undo-tree-id4302 . -3) (undo-tree-id4303 . -3) (undo-tree-id4304 . -3) (undo-tree-id4305 . -3) (undo-tree-id4306 . -3) (undo-tree-id4307 . -3) (undo-tree-id4308 . -3) (undo-tree-id4309 . -3) (undo-tree-id4310 . -3) (undo-tree-id4311 . -3) (undo-tree-id4312 . -3) (undo-tree-id4313 . -3) (undo-tree-id4314 . -3) (undo-tree-id4315 . -3) (undo-tree-id4316 . -3) (undo-tree-id4317 . -3) (undo-tree-id4318 . -3) (undo-tree-id4319 . -3) (undo-tree-id4320 . -3) (undo-tree-id4321 . -3) (undo-tree-id4322 . -3) (undo-tree-id4323 . -3) (undo-tree-id4324 . -3) (undo-tree-id4325 . -3) (undo-tree-id4326 . -3) (undo-tree-id4327 . -3) (undo-tree-id4328 . -3) (undo-tree-id4329 . -3) (undo-tree-id4330 . -3) (undo-tree-id4331 . -3) (undo-tree-id4332 . -3) (undo-tree-id4333 . -3) (undo-tree-id4334 . -3) (undo-tree-id4335 . -3) (undo-tree-id4336 . -3) (undo-tree-id4337 . -3) (undo-tree-id4338 . -3) (undo-tree-id4339 . -3) (undo-tree-id4340 . -3) (undo-tree-id4341 . -3) (undo-tree-id4342 . -3) (undo-tree-id4343 . -3) (undo-tree-id4344 . -3) (undo-tree-id4345 . -3) (undo-tree-id4346 . -3) (undo-tree-id4347 . -3) (undo-tree-id4348 . -3) (undo-tree-id4349 . -3) (undo-tree-id4350 . -3) (undo-tree-id4351 . -3) (undo-tree-id4352 . -3) (undo-tree-id4353 . -3) (undo-tree-id4354 . -3) (undo-tree-id4355 . -3) (undo-tree-id4356 . -3) (undo-tree-id4357 . -3) (undo-tree-id4358 . -3) (undo-tree-id4359 . -3) (undo-tree-id4360 . -3) (undo-tree-id4361 . -3) (undo-tree-id4362 . -3) (undo-tree-id4363 . -3) (undo-tree-id4364 . -3) (undo-tree-id4365 . -3) (undo-tree-id4366 . -3) (undo-tree-id4367 . -3) (undo-tree-id4368 . -3) (undo-tree-id4369 . -3) (undo-tree-id4370 . -3) (undo-tree-id4371 . -3) (undo-tree-id4372 . -3) (undo-tree-id4373 . -3) (undo-tree-id4374 . -3) (undo-tree-id4375 . -3) (undo-tree-id4376 . -3) (undo-tree-id4377 . -3) (undo-tree-id4378 . -3) (undo-tree-id4379 . -3) (undo-tree-id4380 . -3) (undo-tree-id4381 . -3) (undo-tree-id4382 . -3) (undo-tree-id4383 . -3) (undo-tree-id4384 . -3) (undo-tree-id4385 . -3) (undo-tree-id4386 . -3) (undo-tree-id4387 . -3) (undo-tree-id4388 . -3) (undo-tree-id4389 . -3) (undo-tree-id4390 . -3) (undo-tree-id4391 . -3) (undo-tree-id4392 . -3) (undo-tree-id4393 . -3) (undo-tree-id4394 . -3) (undo-tree-id4395 . -3) (undo-tree-id4396 . -3) (undo-tree-id4397 . -3) (undo-tree-id4398 . -3) (undo-tree-id4399 . -3) (undo-tree-id4400 . -3) (undo-tree-id4401 . -3) (undo-tree-id4402 . -3) (undo-tree-id4403 . -3) (undo-tree-id4404 . -3) (undo-tree-id4405 . -3) (undo-tree-id4406 . -3) (undo-tree-id4407 . -3) (undo-tree-id4408 . -3) (undo-tree-id4409 . -3) (undo-tree-id4410 . -3) (undo-tree-id4411 . -3) (undo-tree-id4412 . -3) (undo-tree-id4413 . -3) (undo-tree-id4414 . -3) (undo-tree-id4415 . -3) (undo-tree-id4416 . -3) (undo-tree-id4417 . -3) (undo-tree-id4418 . -3) (undo-tree-id4419 . -3) (undo-tree-id4420 . -3) (undo-tree-id4421 . -3) (undo-tree-id4422 . -3) (undo-tree-id4423 . -3) (undo-tree-id4424 . -3) (undo-tree-id4425 . -3) (undo-tree-id4426 . -3) (undo-tree-id4427 . -3) (undo-tree-id4428 . -3) (undo-tree-id4429 . -3) (undo-tree-id4430 . -3) (undo-tree-id4431 . -3) (undo-tree-id4432 . -3) (undo-tree-id4433 . -3) (undo-tree-id4434 . -3) (undo-tree-id4435 . -3) (undo-tree-id4436 . -3) 351 (348 . 351) (#("  " 0 2 (fontified nil)) . 347) (undo-tree-id4437 . -2) (undo-tree-id4438 . -2) (undo-tree-id4439 . -2) (undo-tree-id4440 . -2) (undo-tree-id4441 . -2) (undo-tree-id4442 . -2) (undo-tree-id4443 . -2) (undo-tree-id4444 . -2) (undo-tree-id4445 . -2) (undo-tree-id4446 . -2) (undo-tree-id4447 . -2) (undo-tree-id4448 . -2) (undo-tree-id4449 . -2) (undo-tree-id4450 . -2) (undo-tree-id4451 . -2) (undo-tree-id4452 . -2) (undo-tree-id4453 . -2) (undo-tree-id4454 . -2) (undo-tree-id4455 . -2) (undo-tree-id4456 . -2) (undo-tree-id4457 . -2) (undo-tree-id4458 . -2) (undo-tree-id4459 . -2) (undo-tree-id4460 . -2) (undo-tree-id4461 . -2) (undo-tree-id4462 . -2) (undo-tree-id4463 . -2) (undo-tree-id4464 . -2) (undo-tree-id4465 . -2) (undo-tree-id4466 . -2) (undo-tree-id4467 . -2) (undo-tree-id4468 . -2) (undo-tree-id4469 . -2) (undo-tree-id4470 . -2) (undo-tree-id4471 . -2) (undo-tree-id4472 . -2) (undo-tree-id4473 . -2) (undo-tree-id4474 . -2) (undo-tree-id4475 . -2) (undo-tree-id4476 . -2) (undo-tree-id4477 . -2) (undo-tree-id4478 . -2) (undo-tree-id4479 . -2) (undo-tree-id4480 . -2) (undo-tree-id4481 . -2) (undo-tree-id4482 . -2) (undo-tree-id4483 . -2) (undo-tree-id4484 . -2) (undo-tree-id4485 . -2) (undo-tree-id4486 . -2) (undo-tree-id4487 . -2) (undo-tree-id4488 . -2) (undo-tree-id4489 . -2) (undo-tree-id4490 . -2) (undo-tree-id4491 . -2) (undo-tree-id4492 . -2) (undo-tree-id4493 . -2) (undo-tree-id4494 . -2) (undo-tree-id4495 . -2) (undo-tree-id4496 . -2) (undo-tree-id4497 . -2) (undo-tree-id4498 . -2) (undo-tree-id4499 . -2) (undo-tree-id4500 . -2) (undo-tree-id4501 . -2) (undo-tree-id4502 . -2) (undo-tree-id4503 . -2) (undo-tree-id4504 . -2) (undo-tree-id4505 . -2) (undo-tree-id4506 . -2) (undo-tree-id4507 . -2) (undo-tree-id4508 . -2) (undo-tree-id4509 . -2) (undo-tree-id4510 . -2) (undo-tree-id4511 . -2) (undo-tree-id4512 . -2) (undo-tree-id4513 . -2) (undo-tree-id4514 . -2) (undo-tree-id4515 . -2) (undo-tree-id4516 . -2) (undo-tree-id4517 . -2) (undo-tree-id4518 . -2) (undo-tree-id4519 . -2) (undo-tree-id4520 . -2) (undo-tree-id4521 . -2) (undo-tree-id4522 . -2) (undo-tree-id4523 . -2) (undo-tree-id4524 . -2) (undo-tree-id4525 . -2) (undo-tree-id4526 . -2) (undo-tree-id4527 . -2) (undo-tree-id4528 . -2) (undo-tree-id4529 . -2) (undo-tree-id4530 . -2) (undo-tree-id4531 . -2) (undo-tree-id4532 . -2) (undo-tree-id4533 . -2) (undo-tree-id4534 . -2) (undo-tree-id4535 . -2) (undo-tree-id4536 . -2) (undo-tree-id4537 . -2) (undo-tree-id4538 . -2) (undo-tree-id4539 . -2) (undo-tree-id4540 . -2) (undo-tree-id4541 . -2) (undo-tree-id4542 . -2) (undo-tree-id4543 . -2) (undo-tree-id4544 . -2) (undo-tree-id4545 . -2) (undo-tree-id4546 . -2) (undo-tree-id4547 . -2) (undo-tree-id4548 . -2) (undo-tree-id4549 . -2) (undo-tree-id4550 . -2) (undo-tree-id4551 . -2) (undo-tree-id4552 . -2) (undo-tree-id4553 . -2) (undo-tree-id4554 . -2) (undo-tree-id4555 . -2) (undo-tree-id4556 . -2) (undo-tree-id4557 . -2) (undo-tree-id4558 . -2) (undo-tree-id4559 . -2) (undo-tree-id4560 . -2) (undo-tree-id4561 . -2) (undo-tree-id4562 . -2) (undo-tree-id4563 . -2) (undo-tree-id4564 . -2) (undo-tree-id4565 . -2) (undo-tree-id4566 . -2) (undo-tree-id4567 . -2) (undo-tree-id4568 . -2) (undo-tree-id4569 . -2) (undo-tree-id4570 . -2) (undo-tree-id4571 . -2) (undo-tree-id4572 . -2) (undo-tree-id4573 . -2) (undo-tree-id4574 . -2) (undo-tree-id4575 . -2) (undo-tree-id4576 . -2) (undo-tree-id4577 . -2) (undo-tree-id4578 . -2) (undo-tree-id4579 . -2) (undo-tree-id4580 . -2) (undo-tree-id4581 . -2) (undo-tree-id4582 . -2) (undo-tree-id4583 . -2) (undo-tree-id4584 . -2) (undo-tree-id4585 . -2) (undo-tree-id4586 . -2) (undo-tree-id4587 . -2) (undo-tree-id4588 . -2) (undo-tree-id4589 . -2) (undo-tree-id4590 . -2) (undo-tree-id4591 . -2) (undo-tree-id4592 . -2) (undo-tree-id4593 . -2) (undo-tree-id4594 . -2) (undo-tree-id4595 . -2) (undo-tree-id4596 . -2) (undo-tree-id4597 . -2) (undo-tree-id4598 . -2) (undo-tree-id4599 . -2) (undo-tree-id4600 . -2) (undo-tree-id4601 . -2) (undo-tree-id4602 . -2) (undo-tree-id4603 . -2) (undo-tree-id4604 . -2) (undo-tree-id4605 . -2) (undo-tree-id4606 . -2) (undo-tree-id4607 . -2) (undo-tree-id4608 . -2) (undo-tree-id4609 . -2) (undo-tree-id4610 . -2) (undo-tree-id4611 . -2) (undo-tree-id4612 . -2) (undo-tree-id4613 . -2) (undo-tree-id4614 . -2) (undo-tree-id4615 . -2) (undo-tree-id4616 . -2) (undo-tree-id4617 . -2) (undo-tree-id4618 . -2) (undo-tree-id4619 . -2) (undo-tree-id4620 . -2) (undo-tree-id4621 . -2) (undo-tree-id4622 . -2) (undo-tree-id4623 . -2) (undo-tree-id4624 . -2) (undo-tree-id4625 . -2) (undo-tree-id4626 . -2) (undo-tree-id4627 . -2) (undo-tree-id4628 . -2) (undo-tree-id4629 . -2) (undo-tree-id4630 . -2) (undo-tree-id4631 . -2) (undo-tree-id4632 . -2) (undo-tree-id4633 . -2) (undo-tree-id4634 . -2) (undo-tree-id4635 . -2) (undo-tree-id4636 . -2) (undo-tree-id4637 . -2) (undo-tree-id4638 . -2) (undo-tree-id4639 . -2) (undo-tree-id4640 . -2) (undo-tree-id4641 . -2) (undo-tree-id4642 . -2) (undo-tree-id4643 . -2) (undo-tree-id4644 . -2) (undo-tree-id4645 . -2) (undo-tree-id4646 . -2) (undo-tree-id4647 . -2) (undo-tree-id4648 . -2) (undo-tree-id4649 . -2) (undo-tree-id4650 . -2) (undo-tree-id4651 . -2) (349 . 351) (346 . 349) (341 . 345) (336 . 341) (#("sb" 0 2 (fontified nil)) . 336) (336 . 338) (#("sbmap" 0 5 (fontified nil)) . -336) (336 . 341) (#("sb" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -336) (undo-tree-id4652 . -2) (undo-tree-id4653 . -2) 338 (335 . 338) (nil fontified nil 330 . 335) (330 . 335) (#("co" 0 2 (fontified nil)) . 330) (nil fontified nil 330 . 332) (330 . 332) (#("const" 0 5 (fontified nil)) . -330) (nil fontified nil 330 . 335) (330 . 335) (#("co" 0 1 (fontified t) 1 2 (fontified t)) . -330) (undo-tree-id4654 . -2) (undo-tree-id4655 . -2) 332 (330 . 332) (329 . 330) (327 . 329) (326 . 327) (321 . 326) (#("sb" 0 2 (fontified nil)) . 321) (321 . 323) (#("sbmap" 0 5 (fontified nil)) . -321) (321 . 326) (#("sb" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -321) (undo-tree-id4656 . -2) (undo-tree-id4657 . -2) 323 (320 . 323) (nil fontified nil 315 . 320) (nil face (rainbow-delimiters-depth-1-face) 315 . 320) (315 . 320) (#("co" 0 2 (fontified nil)) . 315) (nil fontified nil 315 . 317) (nil face (rainbow-delimiters-depth-1-face) 315 . 317) (315 . 317) (#("const" 0 5 (fontified nil)) . -315) (nil fontified nil 315 . 320) (nil face (rainbow-delimiters-depth-1-face) 315 . 320) (315 . 320) (#("con" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -315) (undo-tree-id4658 . -3) (undo-tree-id4659 . -3) 318 (315 . 318) (314 . 316) (313 . 314) (305 . 313) (#("o" 0 1 (fontified nil)) . 305) (305 . 306) (#("operator" 0 8 (fontified nil)) . -305) (305 . 313) (#("op" 0 1 (fontified t face font-lock-function-name-face) 1 2 (fontified t face font-lock-function-name-face)) . -305) (undo-tree-id4660 . -2) (undo-tree-id4661 . -2) 307 (304 . 307) (300 . 304) (#("boo" 0 3 (fontified nil)) . 300) (300 . 303) (#("bool" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -300) (undo-tree-id4662 . -4) (undo-tree-id4663 . -4) 304 (300 . 304) (299 . 299) (299 . 300) (298 . 299) (t 26071 2794 236506 166000) 297) nil (26071 2846 197710 129000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 179) (t 26071 2846 213171 557000)) nil (26071 2902 654674 834000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 208)) nil (26071 2913 511862 35000) 0 nil])
([nil nil ((apply 2 593 606 undo--wrap-and-run-primitive-undo 593 606 ((#("//" 0 1 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 1 2 (fontified t face font-lock-comment-delimiter-face c-in-sws t)) . -595) 608)) (t 26071 2902 669836 851000)) nil (26071 2917 165551 699000) 0 nil] [nil nil ((apply -54 262 662 undo--wrap-and-run-primitive-undo 262 662 ((641 . 644) (598 . 601) (586 . 589) (536 . 539) (517 . 520) (498 . 501) (467 . 470) (430 . 433) (409 . 412) (404 . 407) (381 . 384) (360 . 363) (310 . 313) (299 . 302) (285 . 288) (280 . 283) (264 . 267) (606 . 609))) (t 26071 2902 669836 851000)) ((apply 54 262 608 undo--wrap-and-run-primitive-undo 262 608 ((#("
  " 0 1 (fontified t face font-lock-comment-face c-in-sws t) 1 2 (fontified t) 2 3 (fontified t)) . 606) (#<marker in no buffer> . -1) (#<marker in no buffer> . -1) (#("// " 0 1 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 1 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 264) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 280) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 285) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 299) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 310) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 360) (#("// " 0 1 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 1 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 381) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 404) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 409) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 430) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 467) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 498) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 517) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 536) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 586) (#("// " 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face)) . 598) (#("// " 0 1 (fontified t face font-lock-comment-delimiter-face c-is-sws t) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 641) 656))) (26071 2913 508954 724000) 0 nil])
([nil nil ((apply -30 437 761 undo--wrap-and-run-primitive-undo 437 761 ((684 . 687) (664 . 667) (629 . 632) (613 . 616) (570 . 573) (558 . 561) (508 . 511) (489 . 492) (470 . 473) (439 . 442) 437)) (t 26071 2917 179836 499000)) nil (26071 2987 7748 306000) 0 nil])
nil
([nil nil ((apply -30 139 393 undo--wrap-and-run-primitive-undo 139 393 ((372 . 375) (322 . 325) (311 . 314) (297 . 300) (292 . 295) (276 . 279) (270 . 273) (222 . 225) (217 . 220) (139 . 142))) (t 26071 2987 19834 796000)) nil (26071 3002 500407 226000) 0 nil])
([nil nil ((474 . 475) (470 . 474) (469 . 470) (apply yas--snippet-revive 425 469 #s(yas--snippet nil (#s(yas--field 1 430 448 nil nil nil t #s(yas--field 2 450 468 nil nil nil t nil)) #s(yas--field 2 450 468 nil nil nil t nil)) nil 49 nil #s(yas--field 2 450 468 nil nil nil t nil) nil nil)) (450 . 468) (#("to" 0 2 (fontified nil)) . 450) (450 . 452) (#("token_class::token" 0 18 (fontified nil)) . -450) (450 . 468) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -450) (undo-tree-id4664 . -2) (undo-tree-id4665 . -2) 452 (451 . 452) (#("int Tok1" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil) 4 8 (fontified nil face font-lock-variable-name-face)) . 451) (450 . 451) (443 . 448) (#("token" 0 5 (fontified nil)) . -443) (443 . 448) (441 . 443) (nil face (rainbow-delimiters-depth-2-face) 430 . 441) (nil fontified nil 430 . 441) (430 . 441) (#("to" 0 2 (fontified nil)) . 430) (nil face (rainbow-delimiters-depth-2-face) 430 . 432) (nil fontified nil 430 . 432) (430 . 432) (#("token_class" 0 11 (fontified nil)) . -430) (nil face (rainbow-delimiters-depth-2-face) 430 . 441) (nil fontified nil 430 . 441) (430 . 441) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -430) (undo-tree-id4666 . -2) (undo-tree-id4667 . -2) 432 (430 . 432) (#("y" 0 1 (fontified t)) . -430) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (#("o" 0 1 (fontified t)) . -431) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) 432 (431 . 432) (#("int Tok" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil) 4 7 (fontified nil face font-lock-variable-name-face)) . 431) (430 . 431) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 430 448 nil nil nil t #s(yas--field 2 450 468 nil nil nil t nil)) #s(yas--field 2 450 468 nil nil nil t nil)) nil 49 nil #s(yas--field 2 450 468 nil nil nil t nil) nil nil)) (425 . 448) (#("cons<${1:int Tok}, ${2:int Tok1}>" 0 33 (fontified nil)) . 425) (425 . 458) (#("cons<int Tok, int Tok1>" 0 4 (fontified nil) 4 5 (syntax-table (4 . 62) fontified nil) 5 12 (fontified nil) 12 13 (c-type c-<>-arg-sep fontified nil) 13 22 (fontified nil) 22 23 (syntax-table (5 . 60) fontified nil)) . -425) (425 . 448) (409 . 411) (#(" " 0 1 (fontified nil)) . 409) (423 . 424) (409 . 410) (#("  " 0 2 (fontified nil)) . 409) (423 . 424) (411 . 423) (#("m" 0 1 (fontified nil)) . 411) (411 . 412) (#("meta_map_mod" 0 12 (fontified nil)) . -411) (411 . 423) (#("me" 0 1 (fontified t) 1 2 (fontified t)) . -411) (undo-tree-id4672 . -2) (undo-tree-id4673 . -2) 413 (411 . 413) (408 . 411) (408 . 411) (409 . 411) (408 . 410) (#("  " 0 2 (fontified nil)) . 407) (undo-tree-id4674 . -2) (undo-tree-id4675 . -2) (409 . 411) (406 . 409) (apply yas--snippet-revive 390 406 #s(yas--snippet nil (#s(yas--field 1 395 399 nil nil nil t #s(yas--field 2 401 405 nil nil nil t nil)) #s(yas--field 2 401 405 nil nil nil t nil)) nil 48 nil #s(yas--field 2 401 405 nil nil nil t nil) nil nil)) (402 . 405) (#("test_name" 0 9 (fontified nil)) . 402) (401 . 402) (396 . 399) (#("test_suite_name" 0 15 (fontified nil)) . 396) (395 . 396) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 395 399 nil nil nil t #s(yas--field 2 401 405 nil nil nil t nil)) #s(yas--field 2 401 405 nil nil nil t nil)) nil 48 nil #s(yas--field 2 401 405 nil nil nil t nil) nil nil)) (390 . 422) (#("TEST(${1:test_suite_name}, ${2:test_name})" 0 1 (c-is-sws t fontified nil) 1 42 (fontified nil)) . 390) (390 . 432) (#("T" 0 1 (c-is-sws t fontified nil)) . 390) (390 . 391) (#("TEST(test_suite_name, test_name)" 0 1 (c-is-sws t fontified nil) 1 32 (fontified nil)) . -390) (390 . 422) (#("T" 0 1 (fontified t c-is-sws t c-type c-decl-id-start face font-lock-type-face)) . -390) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) 391 (390 . 391) (389 . 390) (t 26071 3002 516501 85000) 373) nil (26071 5381 776344 326000) 0 nil])
([nil nil ((155 . 167) (154 . 155) (152 . 154) (#("t" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -152) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) 153 (151 . 153) (147 . 151) (apply yas--snippet-revive 138 148 #s(yas--snippet nil nil #s(yas--exit 147 nil) 50 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 147 nil) 50 nil nil nil nil)) (138 . 148) (#("include \"$0\"" 0 12 (fontified nil)) . 138) (undo-tree-id4680 . -12) (138 . 150) (#("i" 0 1 (c-in-sws t fontified nil)) . 138) (undo-tree-id4681 . -1) (138 . 139) (#("include \"header\"" 0 16 (fontified nil)) . -138) (undo-tree-id4682 . -16) (138 . 154) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -138) (undo-tree-id4683 . -2) (undo-tree-id4684 . -2) (undo-tree-id4685 . -2) 140 (138 . 140) (137 . 138) (136 . 137) (t 26071 5381 799776 679000) 135) nil (26071 5431 173285 88000) 0 nil])
([nil nil ((apply -3 441 514 undo--wrap-and-run-primitive-undo 441 514 ((443 . 446) 508)) (t 26071 5432 769775 442000)) nil (26071 5656 225228 800000) 0 nil])
([nil nil ((610 . 611) (nil fontified nil 591 . 609) (591 . 609) (#("to" 0 2 (fontified nil)) . 591) (nil fontified nil 591 . 593) (591 . 593) (#("token_class::token" 0 18 (fontified nil)) . -591) (nil fontified nil 591 . 609) (591 . 609) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -591) (undo-tree-id4686 . -2) (undo-tree-id4687 . -2) (undo-tree-id4688 . -2) (undo-tree-id4689 . -2) (undo-tree-id4690 . -2) (undo-tree-id4691 . -2) (undo-tree-id4692 . -2) (undo-tree-id4693 . -2) (undo-tree-id4694 . -2) (undo-tree-id4695 . -2) (undo-tree-id4696 . -2) (undo-tree-id4697 . -2) (undo-tree-id4698 . -2) (undo-tree-id4699 . -2) (undo-tree-id4700 . -2) (undo-tree-id4701 . -2) (undo-tree-id4702 . -2) (undo-tree-id4703 . -2) (undo-tree-id4704 . -2) (undo-tree-id4705 . -2) (undo-tree-id4706 . -2) (undo-tree-id4707 . -2) (undo-tree-id4708 . -2) (undo-tree-id4709 . -2) (undo-tree-id4710 . -2) (undo-tree-id4711 . -2) (undo-tree-id4712 . -2) (undo-tree-id4713 . -2) (undo-tree-id4714 . -2) (undo-tree-id4715 . -2) (undo-tree-id4716 . -2) (undo-tree-id4717 . -2) (undo-tree-id4718 . -2) (undo-tree-id4719 . -2) (undo-tree-id4720 . -2) (undo-tree-id4721 . -2) (undo-tree-id4722 . -2) (undo-tree-id4723 . -2) (undo-tree-id4724 . -2) (undo-tree-id4725 . -2) (undo-tree-id4726 . -2) (undo-tree-id4727 . -2) (undo-tree-id4728 . -2) (undo-tree-id4729 . -2) (undo-tree-id4730 . -2) (undo-tree-id4731 . -2) (undo-tree-id4732 . -2) (undo-tree-id4733 . -2) (undo-tree-id4734 . -2) (undo-tree-id4735 . -2) (undo-tree-id4736 . -2) (undo-tree-id4737 . -2) (undo-tree-id4738 . -2) (undo-tree-id4739 . -2) (undo-tree-id4740 . -2) 593 (591 . 593) (590 . 591) (nil fontified nil 572 . 590) (nil face (rainbow-delimiters-depth-2-face) 572 . 590) (572 . 590) (#("to" 0 2 (fontified nil)) . 572) (nil fontified nil 572 . 574) (nil face (rainbow-delimiters-depth-2-face) 572 . 574) (572 . 574) (#("token_class::token" 0 18 (fontified nil)) . -572) (nil fontified nil 572 . 590) (nil face (rainbow-delimiters-depth-2-face) 572 . 590) (572 . 590) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -572) (undo-tree-id4741 . -2) (undo-tree-id4742 . -2) (undo-tree-id4743 . -2) (undo-tree-id4744 . -2) (undo-tree-id4745 . -2) (undo-tree-id4746 . -2) (undo-tree-id4747 . -2) (undo-tree-id4748 . -2) (undo-tree-id4749 . -2) (undo-tree-id4750 . -2) (undo-tree-id4751 . -2) (undo-tree-id4752 . -2) (undo-tree-id4753 . -2) (undo-tree-id4754 . -2) (undo-tree-id4755 . -2) (undo-tree-id4756 . -2) (undo-tree-id4757 . -2) (undo-tree-id4758 . -2) (undo-tree-id4759 . -2) (undo-tree-id4760 . -2) (undo-tree-id4761 . -2) (undo-tree-id4762 . -2) (undo-tree-id4763 . -2) (undo-tree-id4764 . -2) (undo-tree-id4765 . -2) (undo-tree-id4766 . -2) (undo-tree-id4767 . -2) (undo-tree-id4768 . -2) (undo-tree-id4769 . -2) (undo-tree-id4770 . -2) 574 (572 . 574) (572 . 573) (571 . 572) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -571) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 572) (571 . 573) (569 . 571) (#("b" 0 1 (fontified t)) . -569) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (#("n" 0 1 (fontified t)) . -570) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) 571 (563 . 571) (560 . 563) (559 . 560) (555 . 559) (apply yas--snippet-revive 527 555 #s(yas--snippet nil (#s(yas--field 1 536 554 nil nil nil t nil)) nil 53 nil #s(yas--field 1 536 554 nil nil nil t nil) nil nil)) (nil fontified nil 536 . 554) (nil face (rainbow-delimiters-depth-2-face) 536 . 554) (536 . 554) (#("to" 0 2 (fontified nil)) . 536) (nil fontified nil 536 . 538) (nil face (rainbow-delimiters-depth-2-face) 536 . 538) (536 . 538) (#("token_class::token" 0 18 (fontified nil)) . -536) (nil fontified nil 536 . 554) (nil face (rainbow-delimiters-depth-2-face) 536 . 554) (536 . 554) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -536) (undo-tree-id4777 . -2) (undo-tree-id4778 . -2) 538 (537 . 538) (#("typename T" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 10 (fontified nil face font-lock-type-face)) . 537) (536 . 537) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 536 554 nil nil nil t nil)) nil 53 nil #s(yas--field 1 536 554 nil nil nil t nil) nil nil)) (527 . 547) (#("testmdzz<${1:typename T}>" 0 25 (fontified nil)) . 527) (527 . 552) (#("testmdzz<typename T>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -527) (527 . 547) (#("t" 0 1 (fontified t)) . -527) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) 528 (527 . 528) (511 . 513) (#(" " 0 1 (fontified nil c-is-sws t)) . 511) (525 . 526) (511 . 512) (#("  " 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil c-is-sws t)) . 511) (525 . 526) (513 . 525) (#("m" 0 1 (c-is-sws t fontified nil)) . 513) (513 . 514) (#("meta_map_mod" 0 1 (c-is-sws t fontified nil) 1 12 (fontified nil)) . -513) (513 . 525) (#("me" 0 1 (fontified t c-is-sws t) 1 2 (fontified t)) . -513) (undo-tree-id4781 . -2) (undo-tree-id4782 . -2) 515 (513 . 515) (510 . 513) 473) nil (26071 5656 225220 713000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -563) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (#("l" 0 1 (fontified t)) . -564) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (#("l" 0 1 (fontified t)) . -565) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) 566 (t 26071 5656 239770 29000)) nil (26071 5703 995699 32000) 0 nil])
([nil nil ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 560) (undo-tree-id4851 . -3) (undo-tree-id4852 . -3) 563) nil (26071 5703 995694 773000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -559) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) 560) nil (26071 5703 995692 798000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -556) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -557) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -558) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) 559) nil (26071 5703 995690 663000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 555) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) 556) nil (26071 5703 995686 571000) 0 nil])
([nil nil ((555 . 557)) nil (26071 5703 995684 426000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -557) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . 1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) 558) nil (26071 5703 995680 494000) 0 nil])
([nil nil ((apply -3 511 608 undo--wrap-and-run-primitive-undo 511 608 ((513 . 516) 602)) (t 26071 5704 23102 217000)) nil (26071 5852 25994 853000) 0 nil])
([nil nil ((apply 3 441 508 undo--wrap-and-run-primitive-undo 441 508 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -443) 511))) nil (26071 5852 25991 205000) 0 nil])
([nil nil ((apply -3 441 605 undo--wrap-and-run-primitive-undo 441 605 ((443 . 446) 508)) (t 26071 5852 39765 296000)) nil (26071 6331 111420 864000) 0 nil])
([nil nil ((543 . 544) (538 . 543) (537 . 538) (536 . 537) (535 . 536) (533 . 535) (532 . 533) (531 . 532) (527 . 531) (511 . 513) (#(" " 0 1 (fontified nil c-is-sws t)) . 511) (525 . 526) (511 . 512) (#("  " 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil c-is-sws t)) . 511) (525 . 526) (513 . 525) (#("m" 0 1 (c-is-sws t fontified nil)) . 513) (513 . 514) (#("meta_map_mod" 0 1 (c-is-sws t fontified nil) 1 12 (fontified nil)) . -513) (513 . 525) (#("m" 0 1 (fontified t c-is-sws t)) . -513) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) 514 (513 . 514) (510 . 513) 489) nil (26071 6331 111417 48000) 0 nil])
([nil nil ((nil fontified nil 551 . 569) (551 . 569) (#("to" 0 2 (fontified nil)) . 551) (nil fontified nil 551 . 553) (551 . 553) (#("token_class::token" 0 18 (fontified nil)) . -551) (nil fontified nil 551 . 569) (551 . 569) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -551) (undo-tree-id4861 . -2) (undo-tree-id4862 . -2) (undo-tree-id4863 . -2) (undo-tree-id4864 . -2) (undo-tree-id4865 . -2) (undo-tree-id4866 . -2) (undo-tree-id4867 . -2) (undo-tree-id4868 . -2) (undo-tree-id4869 . -2) (undo-tree-id4870 . -2) (undo-tree-id4871 . -2) (undo-tree-id4872 . -2) (undo-tree-id4873 . -2) (undo-tree-id4874 . -2) (undo-tree-id4875 . -2) (undo-tree-id4876 . -2) (undo-tree-id4877 . -2) (undo-tree-id4878 . -2) (undo-tree-id4879 . -2) (undo-tree-id4880 . -2) (undo-tree-id4881 . -2) (undo-tree-id4882 . -2) (undo-tree-id4883 . -2) (undo-tree-id4884 . -2) (undo-tree-id4885 . -2) (undo-tree-id4886 . -2) (undo-tree-id4887 . -2) (undo-tree-id4888 . -2) (undo-tree-id4889 . -2) (undo-tree-id4890 . -2) (undo-tree-id4891 . -2) (undo-tree-id4892 . -2) (undo-tree-id4893 . -2) (undo-tree-id4894 . -2) (undo-tree-id4895 . -2) (undo-tree-id4896 . -2) (undo-tree-id4897 . -2) (undo-tree-id4898 . -2) (undo-tree-id4899 . -2) (undo-tree-id4900 . -2) (undo-tree-id4901 . -2) (undo-tree-id4902 . -2) (undo-tree-id4903 . -2) (undo-tree-id4904 . -2) (undo-tree-id4905 . -2) (undo-tree-id4906 . -2) (undo-tree-id4907 . -2) (undo-tree-id4908 . -2) (undo-tree-id4909 . -2) (undo-tree-id4910 . -2) (undo-tree-id4911 . -2) (undo-tree-id4912 . -2) (undo-tree-id4913 . -2) (undo-tree-id4914 . -2) (undo-tree-id4915 . -2) (undo-tree-id4916 . -2) (undo-tree-id4917 . -2) (undo-tree-id4918 . -2) (undo-tree-id4919 . -2) (undo-tree-id4920 . -2) (undo-tree-id4921 . -2) (undo-tree-id4922 . -2) (undo-tree-id4923 . -2) (undo-tree-id4924 . -2) (undo-tree-id4925 . -2) (undo-tree-id4926 . -2) (undo-tree-id4927 . -2) (undo-tree-id4928 . -2) (undo-tree-id4929 . -2) (undo-tree-id4930 . -2) (undo-tree-id4931 . -2) (undo-tree-id4932 . -2) (undo-tree-id4933 . -2) (undo-tree-id4934 . -2) (undo-tree-id4935 . -2) (undo-tree-id4936 . -2) (undo-tree-id4937 . -2) (undo-tree-id4938 . -2) (undo-tree-id4939 . -2) (undo-tree-id4940 . -2) (undo-tree-id4941 . -2) (undo-tree-id4942 . -2) (undo-tree-id4943 . -2) (undo-tree-id4944 . -2) (undo-tree-id4945 . -2) (undo-tree-id4946 . -2) (undo-tree-id4947 . -2) (undo-tree-id4948 . -2) (undo-tree-id4949 . -2) (undo-tree-id4950 . -2) (undo-tree-id4951 . -2) (undo-tree-id4952 . -2) (undo-tree-id4953 . -2) (undo-tree-id4954 . -2) (undo-tree-id4955 . -2) (undo-tree-id4956 . -2) (undo-tree-id4957 . -2) (undo-tree-id4958 . -2) (undo-tree-id4959 . -2) (undo-tree-id4960 . -2) (undo-tree-id4961 . -2) (undo-tree-id4962 . -2) (undo-tree-id4963 . -2) (undo-tree-id4964 . -2) (undo-tree-id4965 . -2) (undo-tree-id4966 . -2) (undo-tree-id4967 . -2) (undo-tree-id4968 . -2) (undo-tree-id4969 . -2) (undo-tree-id4970 . -2) (undo-tree-id4971 . -2) (undo-tree-id4972 . -2) (undo-tree-id4973 . -2) (undo-tree-id4974 . -2) (undo-tree-id4975 . -2) (undo-tree-id4976 . -2) (undo-tree-id4977 . -2) (undo-tree-id4978 . -2) (undo-tree-id4979 . -2) (undo-tree-id4980 . -2) (undo-tree-id4981 . -2) (undo-tree-id4982 . -2) (undo-tree-id4983 . -2) (undo-tree-id4984 . -2) (undo-tree-id4985 . -2) (undo-tree-id4986 . -2) (undo-tree-id4987 . -2) (undo-tree-id4988 . -2) (undo-tree-id4989 . -2) (undo-tree-id4990 . -2) (undo-tree-id4991 . -2) (undo-tree-id4992 . -2) (undo-tree-id4993 . -2) (undo-tree-id4994 . -2) (undo-tree-id4995 . -2) (undo-tree-id4996 . -2) (undo-tree-id4997 . -2) (undo-tree-id4998 . -2) (undo-tree-id4999 . -2) (undo-tree-id5000 . -2) (undo-tree-id5001 . -2) (undo-tree-id5002 . -2) (undo-tree-id5003 . -2) 553 (551 . 553) (#("1" 0 1 (fontified t)) . -551) (undo-tree-id5004 . -1) 552 (nil face (rainbow-delimiters-depth-2-face) 532 . 550) (nil fontified nil 532 . 550) (532 . 550) (#("to" 0 2 (fontified nil)) . 532) (nil face (rainbow-delimiters-depth-2-face) 532 . 534) (nil fontified nil 532 . 534) (532 . 534) (#("token_class::token" 0 18 (fontified nil)) . -532) (nil face (rainbow-delimiters-depth-2-face) 532 . 550) (nil fontified nil 532 . 550) (532 . 550) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -532) (undo-tree-id5005 . -2) (undo-tree-id5006 . -2) 534 (532 . 534) (#("i" 0 1 (fontified t)) . -532) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (#("n" 0 1 (fontified t)) . -533) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -534) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) 535 (t 26071 6331 133087 1000)) nil (26071 6410 470517 789000) 0 nil])
([nil nil ((569 . 571) (t 26071 6410 486418 414000)) nil (26071 6425 845619 540000) 0 nil])
([nil nil ((577 . 580) (576 . 577) (575 . 576) (#("n" 0 1 (fontified t face font-lock-type-face)) . -575) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) 576 (#("," 0 1 (fontified t c-type c-<>-arg-sep)) . -576) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (#("t" 0 1 (fontified t)) . -577) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (#("o" 0 1 (fontified t)) . -578) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (#("k" 0 1 (fontified t)) . -579) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (#("e" 0 1 (fontified t)) . -580) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (#("n" 0 1 (fontified t)) . -581) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (#("_" 0 1 (fontified t)) . -582) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (#("c" 0 1 (fontified t)) . -583) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (#("l" 0 1 (fontified t)) . -584) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (#("a" 0 1 (fontified t)) . -585) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (#("s" 0 1 (fontified t)) . -586) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (#("s" 0 1 (fontified t)) . -587) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (#(":" 0 1 (fontified t)) . -588) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (#(":" 0 1 (fontified t)) . -589) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (#("t" 0 1 (fontified t)) . -590) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (#("o" 0 1 (fontified t)) . -591) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (#("k" 0 1 (fontified t)) . -592) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (#("e" 0 1 (fontified t)) . -593) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -594) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -595) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -596) (undo-tree-id5055 . 1) (undo-tree-id5056 . -1) (undo-tree-id5057 . 1) (undo-tree-id5058 . -1) 597 (535 . 536) (531 . 535) (513 . 531) (#("to" 0 1 (c-is-sws t fontified nil) 1 2 (fontified nil)) . 513) (513 . 515) (#("token_class::token" 0 1 (c-is-sws t fontified nil) 1 18 (fontified nil)) . -513) (513 . 531) (#("to" 0 1 (fontified t c-is-sws t) 1 2 (fontified t)) . -513) (undo-tree-id5059 . -2) (undo-tree-id5060 . -2) 515 (513 . 515) (511 . 513) (511 . 512) 569 (t 26071 6425 863084 707000)) nil (26071 6485 25237 228000) 0 nil])
([nil nil ((apply -6 511 688 undo--wrap-and-run-primitive-undo 511 688 ((542 . 545) (513 . 516) 511)) (t 26071 6485 39749 942000)) nil (26071 6692 769783 321000) 0 nil])
([nil nil ((apply 3 540 591 undo--wrap-and-run-primitive-undo 540 591 ((#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -542) 594))) nil (26071 6692 769782 623000) 0 nil])
([nil current ((nil fontified nil 580 . 598) (580 . 598) (#("to" 0 2 (fontified nil)) . 580) (nil fontified nil 580 . 582) (580 . 582) (#("token_class::token" 0 18 (fontified nil)) . -580) (nil fontified nil 580 . 598) (580 . 598) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -580) (undo-tree-id5061 . -2) (undo-tree-id5062 . -2) (undo-tree-id5063 . -2) (undo-tree-id5064 . -2) (undo-tree-id5065 . -2) (undo-tree-id5066 . -2) (undo-tree-id5067 . -2) (undo-tree-id5068 . -2) (undo-tree-id5069 . -2) (undo-tree-id5070 . -2) (undo-tree-id5071 . -2) (undo-tree-id5072 . -2) (undo-tree-id5073 . -2) (undo-tree-id5074 . -2) (undo-tree-id5075 . -2) (undo-tree-id5076 . -2) (undo-tree-id5077 . -2) (undo-tree-id5078 . -2) (undo-tree-id5079 . -2) (undo-tree-id5080 . -2) (undo-tree-id5081 . -2) (undo-tree-id5082 . -2) (undo-tree-id5083 . -2) (undo-tree-id5084 . -2) (undo-tree-id5085 . -2) (undo-tree-id5086 . -2) (undo-tree-id5087 . -2) (undo-tree-id5088 . -2) (undo-tree-id5089 . -2) (undo-tree-id5090 . -2) (undo-tree-id5091 . -2) (undo-tree-id5092 . -2) (undo-tree-id5093 . -2) (undo-tree-id5094 . -2) (undo-tree-id5095 . -2) (undo-tree-id5096 . -2) (undo-tree-id5097 . -2) (undo-tree-id5098 . -2) (undo-tree-id5099 . -2) (undo-tree-id5100 . -2) (undo-tree-id5101 . -2) (undo-tree-id5102 . -2) (undo-tree-id5103 . -2) (undo-tree-id5104 . -2) (undo-tree-id5105 . -2) (undo-tree-id5106 . -2) (undo-tree-id5107 . -2) (undo-tree-id5108 . -2) (undo-tree-id5109 . -2) (undo-tree-id5110 . -2) (undo-tree-id5111 . -2) (undo-tree-id5112 . -2) (undo-tree-id5113 . -2) (undo-tree-id5114 . -2) (undo-tree-id5115 . -2) (undo-tree-id5116 . -2) 582 (580 . 582) (#("lll" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 580) (undo-tree-id5117 . -2) (undo-tree-id5118 . -3) (undo-tree-id5119 . -3) (undo-tree-id5120 . -3)) nil (26071 6692 769776 931000) 0 nil])
nil
