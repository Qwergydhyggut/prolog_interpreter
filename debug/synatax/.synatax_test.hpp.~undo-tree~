(undo-tree-save-format-version . 1)
"38baad0c5421322d232e22426d97af966fb6bb21"
[nil nil nil nil (26071 16380 986183 816000) 0 nil]
([nil nil ((598 . 599) (t 26071 16326 696542 965000)) nil (26071 16469 41788 248000) 0 nil] [nil nil ((605 . 608) (t 26071 16326 696542 965000) 604) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 605) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3)) (26071 16380 365256 616000) 0 nil] [nil nil ((apply -3 540 703 undo--wrap-and-run-primitive-undo 540 703 ((542 . 545) 606)) (t 26071 15706 329891 485000)) ((apply 3 540 700 undo--wrap-and-run-primitive-undo 540 700 ((#("// " 0 1 (c-is-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 542) 1184)) (t 26071 15756 659890 263000)) (26071 15756 652188 949000) 0 nil] [nil nil ((apply -3 540 703 undo--wrap-and-run-primitive-undo 540 703 ((542 . 545) 606)) (t 26071 6692 786411 586000)) ((apply 3 540 700 undo--wrap-and-run-primitive-undo 540 700 ((#("// " 0 1 (c-is-sws t face font-lock-comment-delimiter-face fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t c-in-sws t)) . 542) 540)) (t 26071 15694 293225 115000)) (26071 15694 285696 260000) 0 nil])
([nil nil ((580 . 581)) nil (26071 16469 41787 693000) 0 nil])
([nil nil ((608 . 612)) ((#("test" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 608) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4)) (26071 16380 362896 312000) 0 nil])
nil
nil
([nil nil ((580 . 583)) nil (26071 16469 41787 266000) 0 nil])
nil
([nil nil ((583 . 588)) nil (26071 16469 41786 843000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 605 605 nil nil nil t nil)) nil 17 nil #s(yas--field 1 605 605 nil nil nil t nil) nil nil)) (580 . 612) (#("meta_map_mod::stat_struct<${1:int N}>" 0 37 (fontified nil)) . 580) (nil fontified nil 580 . 617) (580 . 617) (#("sta" 0 3 (fontified nil)) . 580) (nil fontified nil 580 . 583) (580 . 583) (#("meta_map_mod::stat_struct<int N>" 0 25 (fontified nil) 25 26 (fontified nil syntax-table (4 . 62)) 26 31 (fontified nil) 31 32 (fontified nil syntax-table (5 . 60))) . -580) (nil fontified nil 580 . 612) (580 . 612) (#("stat_str" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t)) . -580) (undo-tree-id207 . -8) (undo-tree-id208 . -8) 588) nil (26071 16469 41785 230000) 0 nil])
([nil nil ((#("int N" 0 3 (face font-lock-type-face fontified t) 3 4 (fontified t) 4 5 (face font-lock-variable-name-face fontified t)) . 606)) nil (26071 16469 41782 705000) 0 nil])
([nil nil ((#("<" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -605) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . 1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 606) nil (26071 16469 41781 977000) 0 nil])
([nil nil ((#(">" 0 1 (face (rainbow-delimiters-depth-2-face) c-type c-decl-id-start fontified t)) . -605) (undo-tree-id199 . -1) (undo-tree-id200 . 1) (undo-tree-id201 . -1) (apply yas--snippet-revive 580 606 #s(yas--snippet nil (#s(yas--field 1 605 605 nil nil nil t nil)) nil 17 nil #s(yas--field 1 605 605 nil nil nil t nil) nil nil))) nil (26071 16469 43893 492000) 0 nil])
([nil nil ((630 . 632) (#("+" 0 1 (fontified t)) . -630) (undo-tree-id212 . -1) (undo-tree-id213 . -1) 631 (626 . 631) (#("S" 0 1 (fontified t)) . -626) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (#("t" 0 1 (fontified t)) . -627) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("a" 0 1 (fontified t)) . -628) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("t" 0 1 (fontified t)) . -629) (undo-tree-id220 . -1) (undo-tree-id221 . -1) 630 (627 . 630) (626 . 627) (624 . 626)) nil (26071 16499 284380 413000) 0 nil] [nil nil ((605 . 616)) ((#("lllllllllll" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (face font-lock-type-face fontified t) 6 7 (face font-lock-type-face fontified t) 7 8 (face font-lock-type-face fontified t) 8 9 (face font-lock-type-face fontified t) 9 10 (face font-lock-type-face fontified t) 10 11 (face font-lock-type-face fontified t)) . 605) (undo-tree-id209 . -11) (undo-tree-id210 . -11) (undo-tree-id211 . -11)) (26071 16469 41754 205000) 0 nil])
([nil nil ((apply -3 540 738 undo--wrap-and-run-primitive-undo 540 738 ((542 . 545) 641)) (t 26071 16499 306538 715000)) nil (26071 16644 374882 730000) 0 nil])
nil
([nil nil ((#("  " 0 1 (c-is-sws t fontified t) 1 2 (c-is-sws t c-in-sws t fontified t)) . -644) (undo-tree-id226 . -2) (undo-tree-id227 . -2) 646 (643 . 646) 642) nil (26071 16644 374881 352000) 0 nil])
([nil nil ((677 . 678) (672 . 677) (646 . 672) (#("m" 0 1 (fontified nil c-is-sws t)) . 646) (646 . 647) (#("meta_map_mod::meta_map_out" 0 1 (fontified nil c-is-sws t) 1 26 (fontified nil)) . -646) (646 . 672) (#("meta_" 0 1 (c-is-sws t fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -646) (undo-tree-id222 . -5) (undo-tree-id223 . -5) 651 (646 . 651) (644 . 646) (#("A" 0 1 (c-is-sws t fontified t)) . -644) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 645 (644 . 645)) nil (26071 16644 374874 132000) 0 nil])
([nil nil ((857 . 858) (856 . 858) (t 26071 16644 383201 804000)) nil (26072 22577 170038 687000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -856) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 857) (undo-tree-id344 . 1) (#("0" 0 1 (fontified t)) . 857) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (t 26072 22577 176530 503000)) nil (26072 23808 480503 805000) 0 nil])
([nil nil ((1330 . 1331) (apply yas--snippet-revive 1323 1329 #s(yas--snippet nil nil nil 30 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 30 nil nil nil nil)) (1323 . 1329) (#("size()" 0 6 (fontified nil)) . 1323) (1323 . 1329) (#("size() const" 0 12 (fontified nil)) . -1323) (1323 . 1335) (#("siz" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1323) (undo-tree-id354 . -3) (undo-tree-id355 . -3) 1326 (1318 . 1326) (1317 . 1318) (1315 . 1316) (nil syntax-table nil 1317 . 1318) (nil syntax-table (1) 1311 . 1312) (1312 . 1315) (1311 . 1313) (1310 . 1312) (1307 . 1310) (#("m" 0 1 (fontified t)) . -1307) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (#("y" 0 1 (fontified t)) . -1308) (undo-tree-id358 . -1) (undo-tree-id359 . -1) 1309 (1304 . 1309) (#("t" 0 1 (fontified t)) . -1304) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (#("e" 0 1 (fontified t)) . -1305) (undo-tree-id362 . -1) (undo-tree-id363 . -1) 1306 (#("s" 0 1 (fontified t)) . -1306) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("t" 0 1 (fontified t)) . -1307) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 1308 (1304 . 1308) (1301 . 1304) (#("  " 0 2 (fontified t)) . 1301) (undo-tree-id368 . -2) (undo-tree-id369 . -2) 1303 (1300 . 1303) (1299 . 1300) (1294 . 1299) (apply yas--snippet-revive 1278 1294 #s(yas--snippet nil (#s(yas--field 1 1290 1293 nil nil nil t nil)) nil 29 nil #s(yas--field 1 1290 1293 nil nil nil t nil) nil nil)) (1291 . 1293) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 1291) (1290 . 1291) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1290 1293 nil nil nil t nil)) nil 29 nil #s(yas--field 1 1290 1293 nil nil nil t nil) nil nil)) (1278 . 1302) (#("std::vector<${1:typename Tp}>" 0 29 (fontified nil)) . 1278) (1278 . 1307) (#("v" 0 1 (fontified nil)) . 1278) (1278 . 1279) (#("std::vector<typename Tp, typename Alloc>" 0 11 (fontified nil) 11 12 (syntax-table (4 . 62) fontified nil) 12 23 (fontified nil) 23 24 (c-type c-<>-arg-sep fontified nil) 24 39 (fontified nil) 39 40 (syntax-table (5 . 60) fontified nil)) . -1278) (1278 . 1318) (#("vector" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -1278) (undo-tree-id370 . -6) (undo-tree-id371 . -6) 1284 (1278 . 1284) (1275 . 1278) (1276 . 1279) (#("  " 0 2 (fontified t)) . 1276) (undo-tree-id372 . -2) (undo-tree-id373 . -2) 1278 (1276 . 1278) (1275 . 1277) (1274 . 1276) (1273 . 1273) (1273 . 1274) (apply yas--snippet-revive 1255 1273 #s(yas--snippet nil (#s(yas--field 1 1260 1267 nil nil nil t #s(yas--field 2 1269 1272 nil nil nil t nil)) #s(yas--field 2 1269 1272 nil nil nil t nil)) nil 28 nil #s(yas--field 2 1269 1272 nil nil nil t nil) nil nil)) (1270 . 1272) (#("test_name" 0 9 (fontified nil)) . 1270) (1269 . 1270) (1261 . 1267) (#("test_suite_name" 0 15 (fontified nil)) . 1261) (1260 . 1261) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1260 1267 nil nil nil t #s(yas--field 2 1269 1272 nil nil nil t nil)) #s(yas--field 2 1269 1272 nil nil nil t nil)) nil 28 nil #s(yas--field 2 1269 1272 nil nil nil t nil) nil nil)) (1255 . 1287) (#("TEST(${1:test_suite_name}, ${2:test_name})" 0 42 (fontified nil)) . 1255) (1255 . 1297) (#("T" 0 1 (fontified nil)) . 1255) (1255 . 1256) (#("TEST(test_suite_name, test_name)" 0 32 (fontified nil)) . -1255) (1255 . 1287) (#("T" 0 1 (fontified t)) . -1255) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 1256 (1255 . 1256) (1254 . 1255) (t 26072 23808 489834 94000) 1254) nil (26072 29521 335613 136000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1333 . 1334) (#("
" 0 1 (fontified nil)) . -1361) (1331 . 1362) 1330) nil (26072 29521 335593 721000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1363 . 1364) (#("
" 0 1 (fontified nil)) . -1391) (1361 . 1392) 1334) nil (26072 29521 335592 786000) 0 nil])
([nil nil ((1351 . 1352) (1349 . 1350) (apply yas--snippet-revive 1339 1350 #s(yas--snippet nil nil #s(yas--exit 1349 nil) 31 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1349 nil) 31 nil nil nil nil)) (1339 . 1350) (#("push_back($0)" 0 13 (fontified nil)) . 1339) (1339 . 1352) (#("push_back(…)" 0 12 (fontified nil)) . -1339) (1339 . 1351) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -1339) (undo-tree-id352 . -2) (undo-tree-id353 . -2) 1341 (1334 . 1341) (1332 . 1334) (1332 . 1333) 1334) nil (26072 29521 335591 171000) 0 nil])
([nil nil ((1400 . 1401) (apply yas--snippet-revive 1390 1400 #s(yas--snippet nil nil nil 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 32 nil nil nil nil)) (1390 . 1400) (#("pop_back()" 0 10 (fontified nil)) . 1390) (1390 . 1400) (#("pop_back()" 0 10 (fontified nil)) . -1390) (1390 . 1400) (#("po" 0 1 (fontified t) 1 2 (fontified t)) . -1390) (undo-tree-id348 . -2) (undo-tree-id349 . -2) 1392 (1389 . 1392) (1385 . 1389) (#("tes" 0 3 (fontified nil)) . 1385) (1385 . 1388) (#("test" 0 4 (fontified nil)) . -1385) (1385 . 1389) (#("tes" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1385) (undo-tree-id350 . -3) (undo-tree-id351 . -3) 1388 (1385 . 1388) (1382 . 1385) 1372) nil (26072 29521 335586 317000) 0 nil])
([nil nil ((1437 . 1438) 1400) nil (26072 29521 335569 810000) 0 nil])
([nil current ((1415 . 1416) (1365 . 1366) (1313 . 1314) (t 26072 29521 376360 405000)) nil (26072 30133 485294 258000) 0 nil])
nil
