(undo-tree-save-format-version . 1)
"22f9b0bfded0dccbbde34ac6894667eb9cb920ef"
[nil nil nil nil (26079 22552 909615 549000) 0 (:visualizer [0 1 0 #<marker in no buffer>])]
([nil nil ((#("#" 0 1 (fontified t)) . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("i" 0 1 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . -3) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("c" 0 1 (fontified t face font-lock-preprocessor-face)) . -4) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("l" 0 1 (fontified t face font-lock-preprocessor-face)) . -5) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("u" 0 1 (fontified t face font-lock-preprocessor-face)) . -6) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("d" 0 1 (fontified t face font-lock-preprocessor-face)) . -7) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("e" 0 1 (fontified t face font-lock-preprocessor-face)) . -8) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 9 (#(" " 0 1 (fontified t)) . 9) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 10 (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -10) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (nil syntax-table (1) 10 . 11) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 11) (undo-tree-id114 . -1) (apply yas--snippet-revive 2 12 #s(yas--snippet nil nil #s(yas--exit 11 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11 nil) 3 nil nil nil nil)) (2 . 12) (#("include \"$0\"" 0 12 (fontified nil)) . 2) (undo-tree-id115 . -12) (2 . 14) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id116 . -1) (2 . 3) (#("include \"header\"" 0 16 (fontified nil)) . -2) (undo-tree-id117 . -16) (2 . 18) (#("in" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) 4 (2 . 4) (#("o" 0 1 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) 3 (#(" " 0 1 (fontified t)) . 3) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 4 (2 . 4) (1 . 2) (t 26079 21172 789227 973000)) nil (26079 22552 909611 217000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((156 . 157) (153 . 156) (154 . 157) (#("  " 0 2 (fontified t)) . 154) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 156 (154 . 156) (153 . 155) (#("  " 0 2 (fontified nil)) . 152) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (154 . 156) (151 . 154) (146 . 150) (144 . 146) (139 . 144) (138 . 139) (135 . 138) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -135) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 136 (#("," 0 1 (fontified t c-type c-decl-arg-start)) . -136) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 137 (136 . 137) (134 . 136) (#("r" 0 1 (fontified t)) . -134) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 135 (#(" " 0 1 (fontified t)) . 135) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 136 (130 . 136) (129 . 131) (118 . 129) (116 . 118) (110 . 116) (103 . 110) (102 . 103) (101 . 102) (88 . 101) (#("sy" 0 2 (fontified nil)) . 88) (88 . 90) (#("synatax_ptr_f" 0 13 (fontified nil)) . -88) (88 . 101) (#("synata" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -88) (undo-tree-id12 . -6) (undo-tree-id13 . -6) 94 (93 . 94) (#("n" 0 1 (fontified t)) . -93) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 94 (93 . 94) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -93) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 94) (93 . 95) (92 . 93) (89 . 92) (#("y" 0 1 (fontified t)) . -89) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 90 (88 . 90) (43 . 49) (38 . 43) (36 . 38) (apply yas--snippet-revive 27 37 #s(yas--snippet nil nil #s(yas--exit 36 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 36 nil) 7 nil nil nil nil)) (27 . 37) (#("include \"$0\"" 0 12 (fontified nil)) . 27) (undo-tree-id20 . -12) (27 . 39) (#("i" 0 1 (c-in-sws t fontified nil)) . 27) (undo-tree-id21 . -1) (27 . 28) (#("include \"header\"" 0 16 (fontified nil)) . -27) (undo-tree-id22 . -16) (27 . 43) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -27) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 28 (27 . 28) (26 . 27) (26 . 26) (26 . 27) (#("s" 0 1 (fontified t)) . -63) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("o" 0 1 (fontified t)) . -64) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("u" 0 1 (fontified t)) . -65) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("r" 0 1 (fontified t)) . -66) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("c" 0 1 (fontified t)) . -67) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("e" 0 1 (fontified t)) . -68) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("_" 0 1 (fontified t)) . -69) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("s" 0 1 (fontified t)) . -70) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("e" 0 1 (fontified t)) . -71) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("l" 0 1 (fontified t)) . -72) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("e" 0 1 (fontified t)) . -73) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("c" 0 1 (fontified t)) . -74) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("t" 0 1 (fontified t)) . -75) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 76 (70 . 76) (#("r" 0 1 (fontified t)) . -70) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("e" 0 1 (fontified t)) . -71) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("a" 0 1 (fontified t)) . -72) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("d" 0 1 (fontified t)) . -73) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("_" 0 1 (fontified t)) . -74) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("m" 0 1 (fontified t)) . -75) (undo-tree-id62 . -1) (undo-tree-id63 . -1) 76 (#("o" 0 1 (fontified t)) . -76) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("d" 0 1 (fontified t)) . -77) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("e" 0 1 (fontified t)) . -78) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 79 (63 . 79) (#("so" 0 2 (fontified nil)) . 63) (63 . 65) (#("source_read_mode" 0 16 (fontified nil)) . -63) (63 . 79) (#("sou" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -63) (undo-tree-id70 . -3) (undo-tree-id71 . -3) 66 (63 . 66) (25 . 25) (25 . 26) (#("

" 0 1 (fontified t c-in-sws t) 1 2 (fontified t c-is-sws t)) . 25) (undo-tree-id72 . -2) 27 (63 . 63) (63 . 64) (62 . 62) (62 . 63) (61 . 61) (61 . 62) (44 . 60) (#("so" 0 2 (fontified nil)) . 44) (44 . 46) (#("source_read_mode" 0 16 (fontified nil)) . -44) (44 . 60) (#("sou" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face)) . -44) (undo-tree-id73 . -3) (undo-tree-id74 . -3) 47 (44 . 47) (apply yas--snippet-revive 28 45 #s(yas--snippet nil nil #s(yas--exit 44 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 44 nil) 6 nil nil nil nil)) (28 . 45) (#("using namespace $0;" 0 19 (fontified nil)) . 28) (28 . 47) (#("us" 0 2 (fontified nil)) . 28) (28 . 30) (#("using namespace identifier;" 0 27 (fontified nil)) . -28) (28 . 55) (#("us" 0 1 (fontified t) 1 2 (fontified t)) . -28) (undo-tree-id75 . -2) (undo-tree-id76 . -2) 30 (28 . 30) (27 . 27) (27 . 28) (26 . 26) (26 . 27) (25 . 25) (25 . 26) (18 . 24) (15 . 18) (#("e" 0 1 (fontified t face font-lock-string-face)) . -15) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 16 (11 . 16) (apply yas--snippet-revive 2 12 #s(yas--snippet nil nil #s(yas--exit 11 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11 nil) 5 nil nil nil nil)) (2 . 12) (#("include \"$0\"" 0 12 (fontified nil)) . 2) (undo-tree-id79 . -12) (2 . 14) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id80 . -1) (2 . 3) (#("include \"header\"" 0 16 (fontified nil)) . -2) (undo-tree-id81 . -16) (2 . 18) (#("in" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id82 . -2) (undo-tree-id83 . -2) (undo-tree-id84 . -2) 4 (2 . 4) (1 . 2)) nil (26079 22552 909311 277000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((163 . 164) 156) nil (26079 22552 909209 124000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((38 . 43) (36 . 38) (36 . 37) (t 26079 22552 919193 944000)) nil (26079 22602 842251 351000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((183 . 188) (74 . 76) (#("," 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -74) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 75 (74 . 75) (73 . 74) (#("f" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -73) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 74 (69 . 74) (apply yas--snippet-revive 60 70 #s(yas--snippet nil nil #s(yas--exit 69 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 69 nil) 8 nil nil nil nil)) (60 . 70) (#("include \"$0\"" 0 12 (fontified nil)) . 60) (undo-tree-id131 . -12) (60 . 72) (#("i" 0 1 (c-in-sws t fontified nil)) . 60) (undo-tree-id132 . -1) (60 . 61) (#("include \"header\"" 0 16 (fontified nil)) . -60) (undo-tree-id133 . -16) (60 . 76) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -60) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) 62 (60 . 62) (59 . 60) (59 . 59) (59 . 60) (t 26079 22602 859192 713000)) nil (26079 22689 218789 163000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((157 . 160) (#("char" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . 157) (undo-tree-id137 . -3) (t 26079 22689 232523 907000)) nil (26079 22780 268458 819000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(",char **args" 0 1 (fontified t c-type c-decl-arg-start) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face)) . 164) (undo-tree-id138 . -11) (undo-tree-id139 . -12) (t 26079 22780 275855 0)) nil (26079 23364 476460 644000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("int arg" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t face font-lock-variable-name-face)) . 157) (undo-tree-id140 . -7) (undo-tree-id141 . 4) (undo-tree-id142 . -6) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (t 26079 23364 485840 630000)) nil (26079 23429 982333 153000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((194 . 195) (191 . 194) (#("f" 0 1 (fontified t)) . -191) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 192 (179 . 192) (#("sy" 0 2 (fontified nil)) . 179) (179 . 181) (#("synatax_ptr_f" 0 13 (fontified nil)) . -179) (179 . 192) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -179) (undo-tree-id147 . -2) (undo-tree-id148 . -2) 181 (179 . 181) (172 . 179) (#("s" 0 1 (fontified t)) . -172) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("y" 0 1 (fontified t)) . -173) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 174 (172 . 174) (169 . 172) (t 26079 23429 989172 349000) 168) nil (26079 23544 824742 196000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((179 . 182) (#("h" 0 1 (fontified nil)) . 179) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (179 . 180) (179 . 180)) ((#(" " 0 1 (fontified nil)) . 179) (undo-tree-id155 . 1) (undo-tree-id156 . 1) (#("h" 0 1 (fontified nil)) . 179) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (179 . 180) (#("new" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face)) . 179) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) (undo-tree-id209 . -2) (undo-tree-id210 . -2) (t 26079 23487 225837 604000)) (26079 23546 804633 573000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((172 . 176) (170 . 172) (166 . 170) (165 . 166) (164 . 165) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -164) (undo-tree-id213 . -1) (undo-tree-id214 . -1) 165 (157 . 165) (#("u" 0 1 (fontified t)) . -157) (undo-tree-id215 . -1) (undo-tree-id216 . -1) 158 (157 . 158) (t 26079 23487 225837 604000)) nil (26079 23570 636660 102000) 0 nil])
([nil nil ((#("int arg,char " 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t c-type c-decl-arg-start) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t face font-lock-type-face) 12 13 (fontified t)) . 157) (undo-tree-id223 . -12) (t 26079 23570 655835 547000)) nil (26079 24077 5147 369000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 157)) nil (26079 24077 5145 923000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 157)) nil (26079 24077 5145 279000) 0 nil])
([nil nil ((157 . 158)) nil (26079 24077 5144 888000) 0 nil])
([nil nil ((157 . 160)) nil (26079 24077 5144 488000) 0 nil])
([nil nil ((160 . 162)) nil (26079 24077 5143 612000) 0 nil])
([nil nil ((162 . 165)) nil (26079 24077 5143 255000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . -164) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 165) nil (26079 24077 5142 691000) 0 nil])
([nil nil ((164 . 166)) nil (26079 24077 5141 67000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-type-face)) . -165) (undo-tree-id219 . -1) (undo-tree-id220 . -1) 166) nil (26079 24077 5140 281000) 0 nil])
([nil nil ((165 . 168)) nil (26079 24077 5138 174000) 0 nil])
([nil nil ((78 . 96) (162 . 162) (162 . 168) (#("s" 0 1 (fontified nil)) . 162) (162 . 163) (#("string" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face)) . -162) (undo-tree-id217 . -6) (undo-tree-id218 . -6) 168) nil (26079 24077 5134 717000) 0 nil])
([nil nil ((223 . 224) (#(" " 0 1 (fontified t)) . 227) (undo-tree-id224 . -1) (undo-tree-id225 . -1) 228 (227 . 228) (#(" " 0 1 (fontified t)) . 228) (undo-tree-id226 . -1) (undo-tree-id227 . 1) 229 (223 . 228) (222 . 223) (209 . 222) (#("sy" 0 2 (fontified nil)) . 209) (209 . 211) (#("synatax_ptr_f" 0 13 (fontified nil)) . -209) (209 . 222) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -209) (undo-tree-id228 . -2) (undo-tree-id229 . -2) 211 (209 . 211) (#("r" 0 1 (fontified t)) . -209) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("e" 0 1 (fontified t)) . -210) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (#("t" 0 1 (fontified t)) . -211) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#("u" 0 1 (fontified t)) . -212) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("r" 0 1 (fontified t)) . -213) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -214) (undo-tree-id240 . -1) 215 (203 . 206) (t 26079 24077 12489 715000) 202) nil (26079 24210 64551 217000) 0 nil])
([nil nil ((265 . 266) (254 . 265) (251 . 254) (#("  " 0 2 (fontified t)) . 251) (undo-tree-id241 . -2) (undo-tree-id242 . -2) 253 (250 . 253) (#("  " 0 2 (fontified t)) . 250) (undo-tree-id243 . -2) (undo-tree-id244 . -2) 252 (249 . 252) (t 26079 24210 89153 88000) 223) nil (26079 24350 109439 883000) 0 nil])
([nil nil ((300 . 301) (297 . 298) (296 . 298) (295 . 296) (291 . 295) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -291) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (nil syntax-table nil 293 . 294) (nil syntax-table (1) 291 . 292) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 292) (#("a" 0 1 (fontified t face font-lock-string-face)) . -292) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 293 (292 . 293) (291 . 293) (290 . 292) (288 . 290) (#("r" 0 1 (fontified t)) . -288) (undo-tree-id249 . -1) (undo-tree-id250 . -1) 289 (285 . 289) (#("m" 0 1 (fontified t)) . -285) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("a" 0 1 (fontified t)) . -286) (undo-tree-id253 . -1) (undo-tree-id254 . -1) 287 (286 . 287) (282 . 286) (279 . 282) (232 . 233) (230 . 232) (#("d" 0 1 (fontified t)) . -230) (undo-tree-id255 . -1) (undo-tree-id256 . -1) 231 (230 . 231) (229 . 230) (224 . 229) (221 . 224) (106 . 107) (110 . 111) (#("p" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -110) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 111 (106 . 111) (apply yas--snippet-revive 97 107 #s(yas--snippet nil nil #s(yas--exit 106 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 106 nil) 11 nil nil nil nil)) (97 . 107) (#("include <$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 97) (undo-tree-id259 . -12) (97 . 109) (#("i" 0 1 (c-in-sws t fontified nil)) . 97) (undo-tree-id260 . -1) (97 . 98) (#("include <header>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 15 (fontified nil) 15 16 (syntax-table (5 . 60) fontified nil)) . -97) (undo-tree-id261 . -16) (97 . 113) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -97) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) 99 (98 . 99) (#("m" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -98) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 99 (97 . 99) (96 . 97) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 95 . 96) (nil c-in-sws t 95 . 96) (nil fontified t 95 . 96) (95 . 96) (t 26079 24350 119149 641000) 91) nil (26079 24501 431002 417000) 0 nil])
([nil nil ((301 . 303) (295 . 301) (t 26079 24501 435812 577000)) nil (26079 24532 72225 352000) 0 nil])
([nil nil ((320 . 325) (317 . 319) (#("d" 0 1 (fontified t)) . -317) (undo-tree-id273 . -1) (undo-tree-id274 . -1) 318 (316 . 318) (315 . 317) (313 . 315) (310 . 313) (#("  " 0 2 (fontified t)) . 310) (undo-tree-id275 . -2) (undo-tree-id276 . -2) 312 (309 . 312) (t 26079 24532 112478 488000) 301) nil (26079 24768 907844 65000) 0 nil])
([nil nil ((327 . 333) (326 . 328) (321 . 325) (#("  " 0 2 (fontified nil)) . 321) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (323 . 325)) nil (26079 24768 907839 365000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 323)) nil (26079 24768 907832 5000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 323) (undo-tree-id270 . 1)) nil (26079 24768 907828 507000) 0 nil])
([nil nil ((359 . 360) (357 . 358) (356 . 358) (355 . 356) (352 . 355) (347 . 352) (346 . 347) (343 . 344) (#("％" 0 1 (fontified t face font-lock-string-face)) . -343) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 344 (343 . 344) (341 . 343) (337 . 341) (336 . 338) (335 . 337) (334 . 335) (329 . 334) (324 . 329) (332 . 334) 334) nil (26079 24768 906980 769000) 0 nil])
([nil nil ((426 . 427) (424 . 425) (423 . 425) (420 . 423) (418 . 420) (413 . 415) (410 . 413) (410 . 413) (409 . 410) (406 . 408) (405 . 407) (399 . 405) (#("s" 0 1 (fontified t)) . -399) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("y" 0 1 (fontified t)) . -400) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("t" 0 1 (fontified t)) . -401) (undo-tree-id281 . -1) (undo-tree-id282 . -1) 402 (399 . 402) (396 . 399) (395 . 396) (393 . 394) (392 . 394) (388 . 392) (382 . 388) (#("s" 0 1 (fontified nil)) . 382) (382 . 383) (#("string" 0 6 (fontified nil)) . -382) (382 . 388) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -382) (undo-tree-id283 . -2) (undo-tree-id284 . -2) 384 (382 . 384) (375 . 377) (#(" " 0 1 (fontified nil)) . 375) (380 . 381) (375 . 376) (#("  " 0 2 (fontified nil)) . 375) (380 . 381) (377 . 380) (374 . 377) (#("  " 0 2 (fontified t)) . 374) (undo-tree-id285 . -2) (undo-tree-id286 . -2) 376 (373 . 376) (t 26079 24768 915806 4000) 372) nil (26079 24836 54573 43000) 0 nil])
([nil nil ((nil rear-nonsticky nil 429 . 430) (#("
" 0 1 (fontified nil)) . -458) (427 . 459) 426 (t 26079 24836 69137 673000)) nil (26079 24967 864635 537000) 0 nil])
([nil nil ((nil rear-nonsticky nil 460 . 461) (#("
" 0 1 (fontified nil)) . -489) (458 . 490) 430) nil (26079 24967 864634 317000) 0 nil])
([nil nil ((nil rear-nonsticky nil 491 . 492) (#("
" 0 1 (fontified nil)) . -520) (489 . 521) 461) nil (26079 24967 864632 944000) 0 nil])
([nil nil ((455 . 456) (#("0" 0 1 (fontified t)) . 455)) nil (26079 24967 864631 526000) 0 nil])
([nil nil ((486 . 487) (#("0" 0 1 (fontified t)) . 486)) nil (26079 24967 864630 495000) 0 nil])
([nil nil ((517 . 518) (#("0" 0 1 (fontified t)) . 517)) nil (26079 24967 864629 12000) 0 nil])
([nil nil ((524 . 526) (488 . 490) (451 . 453) (407 . 409) (#("p" 0 1 (fontified t face font-lock-constant-face)) . -490) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 491 (490 . 491) (522 . 523) (486 . 487) (452 . 453) (417 . 418) (515 . 519) (482 . 484) (448 . 451) (#("m" 0 1 (fontified t face font-lock-string-face)) . -448) (undo-tree-id289 . -1) (undo-tree-id290 . -1) 449 (448 . 449) (415 . 417) (412 . 415) (407 . 412) (#("数" 0 1 (fontified t face font-lock-string-face)) . -407) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("据" 0 1 (fontified t face font-lock-string-face)) . -408) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (#("库" 0 1 (fontified t face font-lock-string-face)) . -409) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("名" 0 1 (fontified t face font-lock-string-face)) . -410) (undo-tree-id303 . -1) 411 (407 . 411)) nil (26079 24967 864623 737000) 0 nil])
([nil nil ((nil rear-nonsticky nil 553 . 554) (#("
" 0 1 (fontified nil)) . -620) (551 . 621) 525 (t 26079 24967 872467 764000)) nil (26079 24999 207639 453000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -552) (undo-tree-id304 . -2) (undo-tree-id305 . -2) 554 (552 . 554) (552 . 553) 554) nil (26079 24999 207635 143000) 0 nil])
([nil nil ((136 . 139) (#("y" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -136) (undo-tree-id306 . -1) (undo-tree-id307 . -1) 137 (136 . 137) (124 . 136) (apply yas--snippet-revive 115 125 #s(yas--snippet nil nil #s(yas--exit 124 nil) 12 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 124 nil) 12 nil nil nil nil)) (115 . 125) (#("include \"$0\"" 0 12 (fontified nil)) . 115) (undo-tree-id308 . -12) (115 . 127) (#("i" 0 1 (c-in-sws t fontified nil)) . 115) (undo-tree-id309 . -1) (115 . 116) (#("include \"header\"" 0 16 (fontified nil)) . -115) (undo-tree-id310 . -16) (115 . 131) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -115) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) 117 (115 . 117) (114 . 115) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 113 . 114) (nil fontified t 113 . 114) (nil c-in-sws t 113 . 114) (113 . 114) (t 26079 24999 215800 324000) 112) nil (26079 25126 536160 594000) 0 nil])
([nil nil ((151 . 160) (#("io>" 0 2 (c-in-sws t fontified nil) 2 3 (fontified nil face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 151) (undo-tree-id314 . -3) (undo-tree-id315 . 1) (151 . 153) (#("iostream>" 0 9 (c-in-sws t fontified nil)) . -151) (151 . 160) (#("iost" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face)) . -151) (undo-tree-id316 . -4) (undo-tree-id317 . -4) 155 (154 . 155) (#("y" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -154) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 155 (151 . 155) (apply yas--snippet-revive 142 152 #s(yas--snippet nil nil #s(yas--exit 151 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 151 nil) 13 nil nil nil nil)) (142 . 152) (#("include <$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 142) (undo-tree-id320 . -12) (142 . 154) (#("i" 0 1 (c-in-sws t fontified nil)) . 142) (undo-tree-id321 . -1) (142 . 143) (#("include <header>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 15 (fontified nil) 15 16 (syntax-table (5 . 60) fontified nil)) . -142) (undo-tree-id322 . -16) (142 . 158) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -142) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) 144 (142 . 144) (141 . 142) (140 . 141) (t 26079 25126 552463 852000) 138) nil (26079 25162 910557 425000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-constant-face)) . 193) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (t 26079 25162 915796 293000)) nil (26079 27571 41707 180000) 0 nil])
([nil nil ((321 . 325) (#("sql" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . 321) (undo-tree-id328 . -2) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (t 26079 27571 52403 623000)) nil (26079 29097 222829 851000) 0 nil])
([nil nil ((682 . 683) (681 . 682) (#("o" 0 1 (fontified t)) . -681) (undo-tree-id331 . -1) (undo-tree-id332 . -1) 682 (677 . 682) (676 . 677) (671 . 676) (668 . 671) (t 26079 29097 249032 707000) 641) nil (26079 29896 850197 935000) 0 nil])
([nil nil ((285 . 301) (#("synatax_ptr_t" 0 13 (fontified nil)) . 285) (285 . 298) (#("synatax_ptr_text" 0 16 (fontified nil)) . -285) (285 . 301) (#("synatax_ptr_t" 0 11 (fontified t face font-lock-type-face) 11 12 (fontified t face font-lock-type-face) 12 13 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -285) (undo-tree-id333 . -12) (undo-tree-id334 . -12) (undo-tree-id335 . -13) (undo-tree-id336 . -13) 298 (297 . 298) (#("f" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 297) (t 26079 29896 902346 350000)) nil (26079 37670 670035 460000) 0 nil])
([nil current ((658 . 659) (657 . 658) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -657) (657 . 658) (655 . 656) (#("4" 0 1 (fontified t)) . -655) (undo-tree-id825 . -1) (undo-tree-id826 . -1) 656 (655 . 656) (654 . 656) (651 . 654) (650 . 651) (648 . 649) (647 . 649) (644 . 647) (643 . 644) (641 . 642) (640 . 642) (637 . 640) (636 . 637) (634 . 635) (633 . 635) (630 . 633) (#("a" 0 1 (fontified t face font-lock-type-face)) . -630) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -631) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -632) (undo-tree-id831 . -1) (undo-tree-id832 . -1) 633 (632 . 633) (630 . 632) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -630) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (nil syntax-table nil 631 . 632) (nil syntax-table (1) 630 . 631) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 631) (630 . 632) (#("\"127.0.0.1\", \"root\", \"qqq111\", \"gra_db\");" 0 11 (fontified t face font-lock-string-face) 11 13 (fontified t) 13 19 (fontified t face font-lock-string-face) 19 21 (fontified t) 21 29 (fontified t face font-lock-string-face) 29 31 (fontified t) 31 39 (fontified t face font-lock-string-face) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 41 (fontified t)) . 630) (undo-tree-id835 . 40) (undo-tree-id836 . -40) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -41) (undo-tree-id1026 . -41) (undo-tree-id1027 . -41) (undo-tree-id1028 . -41) (t 26079 33615 842254 799000)) nil (26079 37700 161821 940000) 0 nil] [nil nil ((603 . 605) (603 . 604) (#("  mysql_mod::mysql_connect(\"127.0.0.1\", \"root\", \"qqq111\", \"gra_db\");
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 11 (fontified t face font-lock-constant-face) 11 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 38 (fontified t face font-lock-string-face) 38 40 (fontified t) 40 46 (fontified t face font-lock-string-face) 46 48 (fontified t) 48 56 (fontified t face font-lock-string-face) 56 58 (fontified t) 58 66 (fontified t face font-lock-string-face) 66 67 (fontified t face (rainbow-delimiters-depth-2-face)) 67 68 (fontified t) 68 69 (fontified t)) . 603) (undo-tree-id337 . -68) (undo-tree-id338 . -69) (undo-tree-id339 . -69) (undo-tree-id340 . -28) (undo-tree-id341 . -28) (undo-tree-id342 . -17) (undo-tree-id343 . -17) (undo-tree-id344 . -17) (undo-tree-id345 . -17) (undo-tree-id346 . -17) (undo-tree-id347 . -17) (undo-tree-id348 . -17) (undo-tree-id349 . -17) (undo-tree-id350 . -17) (undo-tree-id351 . -17) (undo-tree-id352 . -17) (undo-tree-id353 . -17) (undo-tree-id354 . -17) (undo-tree-id355 . -17) (undo-tree-id356 . -17) (undo-tree-id357 . -17) (undo-tree-id358 . -17) (undo-tree-id359 . -17) (undo-tree-id360 . -17) (undo-tree-id361 . -17) (undo-tree-id362 . -17) (undo-tree-id363 . -17) (undo-tree-id364 . -17) (undo-tree-id365 . -17) (undo-tree-id366 . -17) (undo-tree-id367 . -17) (undo-tree-id368 . -17) (undo-tree-id369 . -17) (undo-tree-id370 . -17) (undo-tree-id371 . -17) (undo-tree-id372 . -17) (undo-tree-id373 . -17) (undo-tree-id374 . -17) (undo-tree-id375 . -17) (undo-tree-id376 . -17) (undo-tree-id377 . -17) (undo-tree-id378 . -17) (undo-tree-id379 . -17) (undo-tree-id380 . -17) (undo-tree-id381 . -17) (undo-tree-id382 . -17) (undo-tree-id383 . -17) (undo-tree-id384 . -17) (undo-tree-id385 . -17) (undo-tree-id386 . -17) (undo-tree-id387 . -17) (undo-tree-id388 . -17) (undo-tree-id389 . -17) (undo-tree-id390 . -17) (undo-tree-id391 . -17) (undo-tree-id392 . -17) (undo-tree-id393 . -17) (undo-tree-id394 . -17) (undo-tree-id395 . -17) (undo-tree-id396 . -17) (undo-tree-id397 . -17) (undo-tree-id398 . -17) (undo-tree-id399 . -17) (undo-tree-id400 . -17) (undo-tree-id401 . -17) (undo-tree-id402 . -17) (undo-tree-id403 . -17) (undo-tree-id404 . -17) (undo-tree-id405 . -17) (undo-tree-id406 . -17) (undo-tree-id407 . -17) (undo-tree-id408 . -17) (undo-tree-id409 . -17) (undo-tree-id410 . -17) (undo-tree-id411 . -17) (undo-tree-id412 . -17) (undo-tree-id413 . -17) (undo-tree-id414 . -17) (undo-tree-id415 . -17) (undo-tree-id416 . -17) (undo-tree-id417 . -17) (undo-tree-id418 . -17) (undo-tree-id419 . -17) (undo-tree-id420 . -17) (undo-tree-id421 . -17) (undo-tree-id422 . -18) (undo-tree-id423 . -18) (undo-tree-id424 . -18) (undo-tree-id425 . -18) (undo-tree-id426 . -18) (undo-tree-id427 . -18) (undo-tree-id428 . -18) (undo-tree-id429 . -18) (undo-tree-id430 . -18) (undo-tree-id431 . -18) (undo-tree-id432 . -18) (undo-tree-id433 . -18) (undo-tree-id434 . -18) (undo-tree-id435 . -18) (undo-tree-id436 . -18) (undo-tree-id437 . -18) (undo-tree-id438 . -18) (undo-tree-id439 . -18) (undo-tree-id440 . -18) (undo-tree-id441 . -18) (undo-tree-id442 . -18) (undo-tree-id443 . -18) (undo-tree-id444 . -18) (undo-tree-id445 . -18) (undo-tree-id446 . -18) (undo-tree-id447 . -18) (undo-tree-id448 . -18) (undo-tree-id449 . -18) (undo-tree-id450 . -18) (undo-tree-id451 . -18) (undo-tree-id452 . -18) (undo-tree-id453 . -18) (undo-tree-id454 . -18) (undo-tree-id455 . -18) (undo-tree-id456 . -18) (undo-tree-id457 . -18) (undo-tree-id458 . -18) (undo-tree-id459 . -18) (undo-tree-id460 . -18) (undo-tree-id461 . -18) (undo-tree-id462 . -18) (undo-tree-id463 . -18) (undo-tree-id464 . -18) (undo-tree-id465 . -18) (undo-tree-id466 . -18) (undo-tree-id467 . -18) (undo-tree-id468 . -18) (undo-tree-id469 . -18) (undo-tree-id470 . -18) (undo-tree-id471 . -18) (undo-tree-id472 . -18) (undo-tree-id473 . -18) (undo-tree-id474 . -18) (undo-tree-id475 . -19) (undo-tree-id476 . -19) (undo-tree-id477 . -19) (undo-tree-id478 . -19) (undo-tree-id479 . -19) (undo-tree-id480 . -19) (undo-tree-id481 . -19) (undo-tree-id482 . -19) (undo-tree-id483 . -19) (undo-tree-id484 . -19) (undo-tree-id485 . -19) (undo-tree-id486 . -19) (undo-tree-id487 . -19) (undo-tree-id488 . -19) (undo-tree-id489 . -19) (undo-tree-id490 . -19) (undo-tree-id491 . -19) (undo-tree-id492 . -19) (undo-tree-id493 . -19) (undo-tree-id494 . -19) (undo-tree-id495 . -19) (undo-tree-id496 . -19) (undo-tree-id497 . -19) (undo-tree-id498 . -19) (undo-tree-id499 . -19) (undo-tree-id500 . -19) (undo-tree-id501 . -20) (undo-tree-id502 . -20) (undo-tree-id503 . -20) (undo-tree-id504 . -20) (undo-tree-id505 . -20) (undo-tree-id506 . -20) (undo-tree-id507 . -20) (undo-tree-id508 . -20) (undo-tree-id509 . -20) (undo-tree-id510 . -20) (undo-tree-id511 . -20) (undo-tree-id512 . -20) (undo-tree-id513 . -20) (undo-tree-id514 . -20) (undo-tree-id515 . -20) (undo-tree-id516 . -20) (undo-tree-id517 . -20) (undo-tree-id518 . -20) (undo-tree-id519 . -20) (undo-tree-id520 . -20) (undo-tree-id521 . -20) (undo-tree-id522 . -20) (undo-tree-id523 . -20) (undo-tree-id524 . -20) (undo-tree-id525 . -20) (undo-tree-id526 . -20) (undo-tree-id527 . -21) (undo-tree-id528 . -21) (undo-tree-id529 . -21) (undo-tree-id530 . -21) (undo-tree-id531 . -21) (undo-tree-id532 . -21) (undo-tree-id533 . -21) (undo-tree-id534 . -21) (undo-tree-id535 . -21) (undo-tree-id536 . -21) (undo-tree-id537 . -21) (undo-tree-id538 . -21) (undo-tree-id539 . -21) (undo-tree-id540 . -21) (undo-tree-id541 . -21) (undo-tree-id542 . -21) (undo-tree-id543 . -21) (undo-tree-id544 . -21) (undo-tree-id545 . -21) (undo-tree-id546 . -21) (undo-tree-id547 . -21) (undo-tree-id548 . -21) (undo-tree-id549 . -21) (undo-tree-id550 . -21) (undo-tree-id551 . -21) (undo-tree-id552 . -21) (undo-tree-id553 . -22) (undo-tree-id554 . -22) (undo-tree-id555 . -22) (undo-tree-id556 . -22) (undo-tree-id557 . -22) (undo-tree-id558 . -22) (undo-tree-id559 . -22) (undo-tree-id560 . -22) (undo-tree-id561 . -22) (undo-tree-id562 . -22) (undo-tree-id563 . -22) (undo-tree-id564 . -22) (undo-tree-id565 . -22) (undo-tree-id566 . -22) (undo-tree-id567 . -22) (undo-tree-id568 . -22) (undo-tree-id569 . -22) (undo-tree-id570 . -22) (undo-tree-id571 . -22) (undo-tree-id572 . -22) (undo-tree-id573 . -22) (undo-tree-id574 . -22) (undo-tree-id575 . -22) (undo-tree-id576 . -22) (undo-tree-id577 . -22) (undo-tree-id578 . -22) (undo-tree-id579 . -23) (undo-tree-id580 . -23) (undo-tree-id581 . -23) (undo-tree-id582 . -23) (undo-tree-id583 . -23) (undo-tree-id584 . -23) (undo-tree-id585 . -23) (undo-tree-id586 . -23) (undo-tree-id587 . -23) (undo-tree-id588 . -23) (undo-tree-id589 . -23) (undo-tree-id590 . -23) (undo-tree-id591 . -23) (undo-tree-id592 . -23) (undo-tree-id593 . -23) (undo-tree-id594 . -23) (undo-tree-id595 . -23) (undo-tree-id596 . -23) (undo-tree-id597 . -23) (undo-tree-id598 . -23) (undo-tree-id599 . -23) (undo-tree-id600 . -23) (undo-tree-id601 . -23) (undo-tree-id602 . -23) (undo-tree-id603 . -23) (undo-tree-id604 . -23) (undo-tree-id605 . -24) (undo-tree-id606 . -24) (undo-tree-id607 . -24) (undo-tree-id608 . -24) (undo-tree-id609 . -24) (undo-tree-id610 . -24) (undo-tree-id611 . -24) (undo-tree-id612 . -24) (undo-tree-id613 . -24) (undo-tree-id614 . -24) (undo-tree-id615 . -24) (undo-tree-id616 . -24) (undo-tree-id617 . -24) (undo-tree-id618 . -24) (undo-tree-id619 . -24) (undo-tree-id620 . -24) (undo-tree-id621 . -24) (undo-tree-id622 . -24) (undo-tree-id623 . -24) (undo-tree-id624 . -24) (undo-tree-id625 . -24) (undo-tree-id626 . -24) (undo-tree-id627 . -24) (undo-tree-id628 . -24) (undo-tree-id629 . -24) (undo-tree-id630 . -24) (undo-tree-id631 . -25) (undo-tree-id632 . -25) (undo-tree-id633 . -25) (undo-tree-id634 . -25) (undo-tree-id635 . -25) (undo-tree-id636 . -25) (undo-tree-id637 . -25) (undo-tree-id638 . -25) (undo-tree-id639 . -25) (undo-tree-id640 . -25) (undo-tree-id641 . -25) (undo-tree-id642 . -25) (undo-tree-id643 . -25) (undo-tree-id644 . -25) (undo-tree-id645 . -25) (undo-tree-id646 . -25) (undo-tree-id647 . -25) (undo-tree-id648 . -25) (undo-tree-id649 . -25) (undo-tree-id650 . -25) (undo-tree-id651 . -25) (undo-tree-id652 . -25) (undo-tree-id653 . -25) (undo-tree-id654 . -25) (undo-tree-id655 . -25) (undo-tree-id656 . -25) (undo-tree-id657 . -26) (undo-tree-id658 . -26) (undo-tree-id659 . -26) (undo-tree-id660 . -26) (undo-tree-id661 . -26) (undo-tree-id662 . -26) (undo-tree-id663 . -26) (undo-tree-id664 . -26) (undo-tree-id665 . -26) (undo-tree-id666 . -26) (undo-tree-id667 . -26) (undo-tree-id668 . -26) (undo-tree-id669 . -26) (undo-tree-id670 . -26) (undo-tree-id671 . -26) (undo-tree-id672 . -26) (undo-tree-id673 . -26) (undo-tree-id674 . -26) (undo-tree-id675 . -26) (undo-tree-id676 . -26) (undo-tree-id677 . -26) (undo-tree-id678 . -26) (undo-tree-id679 . -26) (undo-tree-id680 . -26) (undo-tree-id681 . -26) (undo-tree-id682 . -26) (undo-tree-id683 . -27) (undo-tree-id684 . -27) (undo-tree-id685 . -27) (undo-tree-id686 . -27) (undo-tree-id687 . -27) (undo-tree-id688 . -27) (undo-tree-id689 . -27) (undo-tree-id690 . -27) (undo-tree-id691 . -27) (undo-tree-id692 . -27) (undo-tree-id693 . -27) (undo-tree-id694 . -27) (undo-tree-id695 . -27) (undo-tree-id696 . -27) (undo-tree-id697 . -27) (undo-tree-id698 . -27) (undo-tree-id699 . -27) (undo-tree-id700 . -27) (undo-tree-id701 . -27) (undo-tree-id702 . -27) (undo-tree-id703 . -27) (undo-tree-id704 . -27) (undo-tree-id705 . -27) (undo-tree-id706 . -27) (undo-tree-id707 . -27) (undo-tree-id708 . -27) (undo-tree-id709 . -28) (undo-tree-id710 . -28) (undo-tree-id711 . -28) (undo-tree-id712 . -28) (undo-tree-id713 . -28) (undo-tree-id714 . -28) (undo-tree-id715 . -28) (undo-tree-id716 . -28) (undo-tree-id717 . -28) (undo-tree-id718 . -28) (undo-tree-id719 . -28) (undo-tree-id720 . -28) (undo-tree-id721 . -28) (undo-tree-id722 . -28) (undo-tree-id723 . -28) (undo-tree-id724 . -28) (undo-tree-id725 . -28) (undo-tree-id726 . -28) (undo-tree-id727 . -28) (undo-tree-id728 . -28) (undo-tree-id729 . -28) (undo-tree-id730 . -28) (undo-tree-id731 . -28) (undo-tree-id732 . -28) (undo-tree-id733 . -28) (undo-tree-id734 . -28) (undo-tree-id735 . -28) (undo-tree-id736 . -28) (undo-tree-id737 . -28) (undo-tree-id738 . -28) (undo-tree-id739 . -28) (undo-tree-id740 . -28) (undo-tree-id741 . -28) (undo-tree-id742 . -28) (undo-tree-id743 . -28) (undo-tree-id744 . -28) (undo-tree-id745 . -28) (undo-tree-id746 . -28) (undo-tree-id747 . -28) (undo-tree-id748 . -28) (undo-tree-id749 . -28) (undo-tree-id750 . -28) (undo-tree-id751 . -28) (undo-tree-id752 . -28) (undo-tree-id753 . -28) (undo-tree-id754 . -28) (undo-tree-id755 . -28) (undo-tree-id756 . -28) (undo-tree-id757 . -28) (undo-tree-id758 . -28) (undo-tree-id759 . -28) (undo-tree-id760 . -28) (undo-tree-id761 . -28) (undo-tree-id762 . -28) (undo-tree-id763 . -28) (undo-tree-id764 . -28) (undo-tree-id765 . -28) (undo-tree-id766 . -28) (undo-tree-id767 . -28) (undo-tree-id768 . -28) (undo-tree-id769 . -28) (undo-tree-id770 . -28) (undo-tree-id771 . -28) (undo-tree-id772 . -28) (undo-tree-id773 . -28) (undo-tree-id774 . -28) (undo-tree-id775 . -28) (undo-tree-id776 . -28) (undo-tree-id777 . -28) (undo-tree-id778 . -28) (undo-tree-id779 . -28) (undo-tree-id780 . -28) (undo-tree-id781 . -28) (undo-tree-id782 . -28) (undo-tree-id783 . -28) (undo-tree-id784 . -28) (undo-tree-id785 . -28) (undo-tree-id786 . -28) (undo-tree-id787 . -28) (undo-tree-id788 . -28) (undo-tree-id789 . -28) (undo-tree-id790 . -28) (undo-tree-id791 . -28) (undo-tree-id792 . -28) (undo-tree-id793 . -28) (undo-tree-id794 . -28) (undo-tree-id795 . -28) (undo-tree-id796 . -28) (undo-tree-id797 . -28) (undo-tree-id798 . -28) (undo-tree-id799 . -28) (undo-tree-id800 . -28) (undo-tree-id801 . -28) (undo-tree-id802 . -28) (undo-tree-id803 . -28) (undo-tree-id804 . -28) (undo-tree-id805 . -28) (undo-tree-id806 . -28) (undo-tree-id807 . -28) (undo-tree-id808 . -28) (undo-tree-id809 . -28) (undo-tree-id810 . -28) (undo-tree-id811 . -28) (undo-tree-id812 . -28) (undo-tree-id813 . -28) (undo-tree-id814 . -28) (undo-tree-id815 . -28) (undo-tree-id816 . -28) (undo-tree-id817 . -69) (undo-tree-id818 . -69) (undo-tree-id819 . -69) 631 (t 26079 33615 842254 799000)) ((603 . 672) (#("
" 0 1 (fontified nil)) . 603) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("  " 0 2 (fontified t)) . 603) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2)) (26079 37670 664523 842000) 0 nil])
nil
nil
