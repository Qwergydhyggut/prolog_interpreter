(undo-tree-save-format-version . 1)
"1954426009db905f58bfd79057acc25a308be3e4"
[nil nil nil nil (26070 17758 180601 155000) 0 nil]
([nil nil ((64 . 65) (59 . 64) (39 . 40) (nil syntax-table nil 39 . 40) (nil syntax-table (1) 31 . 32) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . -39) (undo-tree-id0 . -1) (39 . 40) (nil syntax-table nil 39 . 40) (nil syntax-table (1) 31 . 32) (38 . 39) (nil syntax-table nil 38 . 39) (nil syntax-table (1) 31 . 32) (37 . 38) (nil syntax-table nil 37 . 38) (nil syntax-table (1) 31 . 32) (#("/" 0 1 (face font-lock-string-face fontified t)) . -37) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (nil syntax-table nil 38 . 39) (nil syntax-table (1) 31 . 32) (32 . 38) (nil syntax-table nil 32 . 33) (nil syntax-table (1) 31 . 32) (#("d\"" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face font-lock-string-face fontified nil)) . 32) (undo-tree-id3 . -2) (32 . 33) (#("debug/" 0 6 (fontified nil c-in-sws t)) . -32) (32 . 38) (#("deb" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -32) (undo-tree-id4 . -3) (undo-tree-id5 . -3) 35 (32 . 35) (apply yas--snippet-revive 23 33 #s(yas--snippet nil nil #s(yas--exit 32 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 32 nil) 36 nil nil nil nil)) (23 . 33) (#("include \"$0\"" 0 12 (fontified nil)) . 23) (undo-tree-id6 . -12) (23 . 35) (#("i" 0 1 (fontified nil c-in-sws t)) . 23) (undo-tree-id7 . -1) (23 . 24) (#("include \"header\"" 0 16 (fontified nil)) . -23) (undo-tree-id8 . -16) (23 . 39) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -23) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) 25 (23 . 25) (22 . 23) (22 . 22) (22 . 23) (37 . 40) (38 . 41) (#("  " 0 2 (fontified t)) . 38) (undo-tree-id12 . -2) (undo-tree-id13 . -2) 40 (38 . 40) (37 . 39) (36 . 38) (#("_" 0 1 (fontified t)) . -36) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 37 (36 . 37) (35 . 38) (33 . 35) (24 . 33) (23 . 23) (23 . 24) (22 . 22) (22 . 23) (21 . 21) (21 . 22) (11 . 20) (apply yas--snippet-revive 2 12 #s(yas--snippet nil nil #s(yas--exit 11 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11 nil) 35 nil nil nil nil)) (2 . 12) (#("include \"$0\"" 0 12 (fontified nil)) . 2) (undo-tree-id16 . -12) (2 . 14) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id17 . -1) (2 . 3) (#("include \"header\"" 0 16 (fontified nil)) . -2) (undo-tree-id18 . -16) (2 . 18) (#("in" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 4 (3 . 4) (#("m" 0 1 (face font-lock-preprocessor-face fontified t)) . -3) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 4 (3 . 4) (2 . 3) (1 . 2) (t 26070 17125 979430 244000)) nil (26070 17758 180595 82000) 0 nil])
([nil nil ((73 . 74) 64) nil (26070 17758 180518 752000) 0 nil])
([nil nil ((48 . 57) (#("tests" 0 5 (fontified nil)) . 48) (48 . 53) (#("test_syna()" 0 11 (fontified nil)) . -48) (48 . 59) (#("testsyna" 0 1 (face font-lock-function-name-face fontified t) 1 2 (face font-lock-function-name-face fontified t) 2 3 (face font-lock-function-name-face fontified t) 3 4 (face font-lock-function-name-face fontified t) 4 5 (face font-lock-function-name-face fontified t) 5 6 (face font-lock-function-name-face fontified t) 6 7 (face font-lock-function-name-face fontified t) 7 8 (face font-lock-function-name-face fontified t)) . -48) (undo-tree-id25 . -8) (undo-tree-id26 . -8) (undo-tree-id27 . -5) (undo-tree-id28 . -5) (undo-tree-id29 . -5) (undo-tree-id30 . -5) (undo-tree-id31 . -5) (undo-tree-id32 . -5) (undo-tree-id33 . -5) (undo-tree-id34 . -5) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -6) (undo-tree-id65 . -6) (undo-tree-id66 . -6) (undo-tree-id67 . -6) (undo-tree-id68 . -6) (undo-tree-id69 . -6) (undo-tree-id70 . -6) (undo-tree-id71 . -6) (undo-tree-id72 . -6) (undo-tree-id73 . -6) (undo-tree-id74 . -6) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -6) (undo-tree-id78 . -6) (undo-tree-id79 . -6) (undo-tree-id80 . -6) (undo-tree-id81 . -6) (undo-tree-id82 . -6) (undo-tree-id83 . -6) (undo-tree-id84 . -6) (undo-tree-id85 . -6) (undo-tree-id86 . -6) (undo-tree-id87 . -6) (undo-tree-id88 . -6) (undo-tree-id89 . -6) (undo-tree-id90 . -6) (undo-tree-id91 . -6) (undo-tree-id92 . -6) (undo-tree-id93 . -6) (undo-tree-id94 . -6) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (undo-tree-id97 . -6) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -6) (undo-tree-id108 . -6) (undo-tree-id109 . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) (undo-tree-id114 . -6) (undo-tree-id115 . -6) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -6) (undo-tree-id132 . -6) (undo-tree-id133 . -6) (undo-tree-id134 . -6) (undo-tree-id135 . -6) (undo-tree-id136 . -6) (undo-tree-id137 . -7) (undo-tree-id138 . -7) (undo-tree-id139 . -7) (undo-tree-id140 . -7) (undo-tree-id141 . -7) (undo-tree-id142 . -7) (undo-tree-id143 . -7) (undo-tree-id144 . -7) (undo-tree-id145 . -7) (undo-tree-id146 . -7) (undo-tree-id147 . -7) (undo-tree-id148 . -7) (undo-tree-id149 . -7) (undo-tree-id150 . -7) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . -7) (undo-tree-id154 . -7) (undo-tree-id155 . -7) (undo-tree-id156 . -7) (undo-tree-id157 . -7) (undo-tree-id158 . -7) (undo-tree-id159 . -7) (undo-tree-id160 . -7) (undo-tree-id161 . -7) (undo-tree-id162 . -7) (undo-tree-id163 . -7) (undo-tree-id164 . -7) (undo-tree-id165 . -7) (undo-tree-id166 . -7) (undo-tree-id167 . -7) (undo-tree-id168 . -7) (undo-tree-id169 . -7) (undo-tree-id170 . -7) (undo-tree-id171 . -7) (undo-tree-id172 . -7) (undo-tree-id173 . -7) (undo-tree-id174 . -7) (undo-tree-id175 . -7) (undo-tree-id176 . -7) (undo-tree-id177 . -7) (undo-tree-id178 . -7) (undo-tree-id179 . -7) (undo-tree-id180 . -7) (undo-tree-id181 . -7) (undo-tree-id182 . -7) (undo-tree-id183 . -7) (undo-tree-id184 . -7) (undo-tree-id185 . -7) (undo-tree-id186 . -7) (undo-tree-id187 . -7) (undo-tree-id188 . -7) (undo-tree-id189 . -7) (undo-tree-id190 . -7) (undo-tree-id191 . -7) (undo-tree-id192 . -7) (undo-tree-id193 . -7) (undo-tree-id194 . -7) (undo-tree-id195 . -7) (undo-tree-id196 . -7) (undo-tree-id197 . -7) (undo-tree-id198 . -7) (undo-tree-id199 . -7) (undo-tree-id200 . -7) (undo-tree-id201 . -7) (undo-tree-id202 . -7) (undo-tree-id203 . -7) (undo-tree-id204 . -7) (undo-tree-id205 . -7) (undo-tree-id206 . -7) (undo-tree-id207 . -7) (undo-tree-id208 . -7) (undo-tree-id209 . -7) (undo-tree-id210 . -7) (undo-tree-id211 . -7) (undo-tree-id212 . -7) (undo-tree-id213 . -7) (undo-tree-id214 . -7) (undo-tree-id215 . -7) (undo-tree-id216 . -7) (undo-tree-id217 . -7) (undo-tree-id218 . -7) (undo-tree-id219 . -7) (undo-tree-id220 . -7) (undo-tree-id221 . -7) (undo-tree-id222 . -7) (undo-tree-id223 . -7) (undo-tree-id224 . -7) (undo-tree-id225 . -7) (undo-tree-id226 . -7) (undo-tree-id227 . -7) (undo-tree-id228 . -7) (undo-tree-id229 . -7) (undo-tree-id230 . -7) (undo-tree-id231 . -7) (undo-tree-id232 . -7) (undo-tree-id233 . -7) (undo-tree-id234 . -8) (undo-tree-id235 . -8) (undo-tree-id236 . -8) (undo-tree-id237 . -8) (undo-tree-id238 . -8) (undo-tree-id239 . -8) (undo-tree-id240 . -8) (undo-tree-id241 . -8) (undo-tree-id242 . -8) (undo-tree-id243 . -8) (undo-tree-id244 . -8) (undo-tree-id245 . -8) (undo-tree-id246 . -8) (undo-tree-id247 . -8) (undo-tree-id248 . -8) (undo-tree-id249 . -8) (undo-tree-id250 . -8) (undo-tree-id251 . -8) (undo-tree-id252 . -8) (undo-tree-id253 . -8) (undo-tree-id254 . -8) (undo-tree-id255 . -8) (undo-tree-id256 . -8) (undo-tree-id257 . -8) (undo-tree-id258 . -8) (undo-tree-id259 . -8) (undo-tree-id260 . -8) (undo-tree-id261 . -8) (undo-tree-id262 . -8) (undo-tree-id263 . -8) (undo-tree-id264 . -8) (undo-tree-id265 . -8) (undo-tree-id266 . -8) (undo-tree-id267 . -8) (undo-tree-id268 . -8) (undo-tree-id269 . -8) (undo-tree-id270 . -8) (undo-tree-id271 . -8) (undo-tree-id272 . -8) (undo-tree-id273 . -8) (undo-tree-id274 . -8) (undo-tree-id275 . -8) (undo-tree-id276 . -8) (undo-tree-id277 . -8) (undo-tree-id278 . -8) (undo-tree-id279 . -8) (undo-tree-id280 . -8) (undo-tree-id281 . -8) (undo-tree-id282 . -8) (undo-tree-id283 . -8) (undo-tree-id284 . -8) (undo-tree-id285 . -8) (undo-tree-id286 . -8) (undo-tree-id287 . -8) (undo-tree-id288 . -8) (undo-tree-id289 . -8) (undo-tree-id290 . -8) (undo-tree-id291 . -8) (undo-tree-id292 . -8) (undo-tree-id293 . -8) (undo-tree-id294 . -8) (undo-tree-id295 . -8) (undo-tree-id296 . -8) (undo-tree-id297 . -8) (undo-tree-id298 . -8) (undo-tree-id299 . -8) (undo-tree-id300 . -8) (undo-tree-id301 . -8) (undo-tree-id302 . -8) (undo-tree-id303 . -8) (undo-tree-id304 . -8) (undo-tree-id305 . -8) (undo-tree-id306 . -8) (undo-tree-id307 . -8) (undo-tree-id308 . -8) (undo-tree-id309 . -8) (undo-tree-id310 . -8) (undo-tree-id311 . -8) (undo-tree-id312 . -8) (undo-tree-id313 . -8) (undo-tree-id314 . -8) (undo-tree-id315 . -8) (undo-tree-id316 . -8) (undo-tree-id317 . -8) (undo-tree-id318 . -8) (undo-tree-id319 . -8) (undo-tree-id320 . -8) (undo-tree-id321 . -8) (undo-tree-id322 . -8) (undo-tree-id323 . -8) (undo-tree-id324 . -8) (undo-tree-id325 . -8) (undo-tree-id326 . -8) (undo-tree-id327 . -8) (undo-tree-id328 . -8) (undo-tree-id329 . -8) (undo-tree-id330 . -8) (undo-tree-id331 . -8) (undo-tree-id332 . -8) (undo-tree-id333 . -8) (undo-tree-id334 . -8) (undo-tree-id335 . -8) (undo-tree-id336 . -8) (undo-tree-id337 . -8) (undo-tree-id338 . -8) (undo-tree-id339 . -8) (undo-tree-id340 . -8) (undo-tree-id341 . -8) (undo-tree-id342 . -8) (undo-tree-id343 . -8) (undo-tree-id344 . -8) (undo-tree-id345 . -8) (undo-tree-id346 . -8) (undo-tree-id347 . -8) (undo-tree-id348 . -8) (undo-tree-id349 . -8) (undo-tree-id350 . -8) (undo-tree-id351 . -8) (undo-tree-id352 . -8) (undo-tree-id353 . -8) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -8) (undo-tree-id358 . -8) (undo-tree-id359 . -8) (undo-tree-id360 . -8) (undo-tree-id361 . -8) (undo-tree-id362 . -8) (undo-tree-id363 . -8) (undo-tree-id364 . -8) (undo-tree-id365 . -8) (undo-tree-id366 . -8) (undo-tree-id367 . -8) (undo-tree-id368 . -8) (undo-tree-id369 . -8) (undo-tree-id370 . -8) (undo-tree-id371 . -8) (undo-tree-id372 . -8) (undo-tree-id373 . -8) (undo-tree-id374 . -8) (undo-tree-id375 . -8) (undo-tree-id376 . -8) (undo-tree-id377 . -8) (undo-tree-id378 . -8) (undo-tree-id379 . -8) (undo-tree-id380 . -8) (undo-tree-id381 . -8) (undo-tree-id382 . -8) (undo-tree-id383 . -8) (undo-tree-id384 . -8) (undo-tree-id385 . -8) (undo-tree-id386 . -8) (undo-tree-id387 . -8) (undo-tree-id388 . -8) (undo-tree-id389 . -8) (undo-tree-id390 . -8) (undo-tree-id391 . -8) (undo-tree-id392 . -8) (undo-tree-id393 . -8) (undo-tree-id394 . -8) (undo-tree-id395 . -8) (undo-tree-id396 . -8) (undo-tree-id397 . -8) (undo-tree-id398 . -8) (undo-tree-id399 . -8) (undo-tree-id400 . -8) (undo-tree-id401 . -8) (undo-tree-id402 . -8) (undo-tree-id403 . -8) (undo-tree-id404 . -8) (undo-tree-id405 . -8) (undo-tree-id406 . -8) (undo-tree-id407 . -8) (undo-tree-id408 . -8) (undo-tree-id409 . -8) (undo-tree-id410 . -8) (undo-tree-id411 . -8) (undo-tree-id412 . -8) (undo-tree-id413 . -8) (undo-tree-id414 . -8) (undo-tree-id415 . -8) (undo-tree-id416 . -8) (undo-tree-id417 . -8) (undo-tree-id418 . -8) (undo-tree-id419 . -8) (undo-tree-id420 . -8) (undo-tree-id421 . -8) (undo-tree-id422 . -8) (undo-tree-id423 . -8) (undo-tree-id424 . -8) (undo-tree-id425 . -8) (undo-tree-id426 . -8) (undo-tree-id427 . -8) (undo-tree-id428 . -8) (undo-tree-id429 . -8) (undo-tree-id430 . -8) (undo-tree-id431 . -8) (undo-tree-id432 . -8) (undo-tree-id433 . -8) (undo-tree-id434 . -8) (undo-tree-id435 . -8) (undo-tree-id436 . -8) (undo-tree-id437 . -8) (undo-tree-id438 . -8) (undo-tree-id439 . -8) (undo-tree-id440 . -8) (undo-tree-id441 . -8) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -8) (undo-tree-id445 . -8) (undo-tree-id446 . -8) (undo-tree-id447 . -8) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (undo-tree-id453 . -8) (undo-tree-id454 . -8) 56 (52 . 56) (t 26070 17758 199417 592000)) nil (26070 17783 762801 945000) 0 nil])
([nil nil ((11 . 20) (#("io>" 0 2 (fontified nil c-in-sws t) 2 3 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 11) (undo-tree-id455 . -3) (undo-tree-id456 . 1) (11 . 13) (#("iostream>" 0 9 (fontified nil c-in-sws t)) . -11) (11 . 20) (#("ios" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -11) (undo-tree-id457 . -3) (undo-tree-id458 . -3) 14 (11 . 14) (apply yas--snippet-revive 2 12 #s(yas--snippet nil nil #s(yas--exit 11 nil) 42 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 11 nil) 42 nil nil nil nil)) (2 . 12) (#("include <$0>" 0 12 (fontified nil c-in-sws t)) . 2) (undo-tree-id459 . -12) (2 . 14) (#("i" 0 1 (fontified nil c-in-sws t)) . 2) (undo-tree-id460 . -1) (2 . 3) (#("include <header>" 0 16 (fontified nil c-in-sws t)) . -2) (undo-tree-id461 . -16) (2 . 18) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) 4 (2 . 4) (1 . 2) (1 . 2) (t 26070 17783 792750 411000)) nil (26070 18136 29664 351000) 0 nil])
([nil nil ((apply -12 63 111 undo--wrap-and-run-primitive-undo 63 111 ((104 . 107) (88 . 91) (83 . 86) (63 . 66) 99)) (t 26070 18136 49410 57000)) nil (26070 62362 651574 827000) 0 nil])
([nil current ((178 . 179) (173 . 178) (170 . 173) (170 . 173) (171 . 173) (170 . 172) (169 . 171) (169 . 173) (168 . 168) (168 . 169) (166 . 168) (158 . 166) (#("r" 0 1 (fontified t)) . -158) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 159 (158 . 159) (#("r" 0 1 (fontified t)) . -158) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 159 (154 . 159) (152 . 154) (#("x" 0 1 (fontified t)) . -152) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 153 (148 . 153) (#("m" 0 1 (fontified t)) . -148) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("o" 0 1 (fontified t)) . -149) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("d" 0 1 (fontified t)) . -150) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 151 (140 . 151) (#("sy" 0 2 (fontified nil)) . 140) (140 . 142) (#("synatax_mod" 0 11 (fontified nil)) . -140) (140 . 151) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -140) (undo-tree-id12 . -2) (undo-tree-id13 . -2) 142 (140 . 142) (139 . 139) (139 . 140) (138 . 138) (138 . 139) (#("  " 0 2 (c-in-sws t fontified t face font-lock-comment-face)) . 108) 111 (139 . 139) (139 . 140) (127 . 138) (#("sy" 0 2 (fontified nil)) . 127) (127 . 129) (#("synatax_mod" 0 11 (fontified nil)) . -127) (127 . 138) (#("sy" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face)) . -127) (undo-tree-id14 . -2) (undo-tree-id15 . -2) 129 (127 . 129) (apply yas--snippet-revive 111 128 #s(yas--snippet nil nil #s(yas--exit 127 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 127 nil) 2 nil nil nil nil)) (111 . 128) (#("using namespace $0;" 0 1 (c-is-sws t fontified nil) 1 19 (fontified nil)) . 111) (111 . 130) (#("u" 0 1 (c-is-sws t fontified nil)) . 111) (111 . 112) (#("using namespace identifier;" 0 1 (c-is-sws t fontified nil) 1 27 (fontified nil)) . -111) (111 . 138) (#("usi" 0 1 (fontified t c-is-sws t) 1 2 (fontified t) 2 3 (fontified t)) . -111) (undo-tree-id16 . -3) (undo-tree-id17 . -3) 114 (113 . 114) (#("e" 0 1 (fontified t)) . -113) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 114 (111 . 114) (#("u" 0 1 (fontified t c-is-sws t)) . -111) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("s" 0 1 (fontified t)) . -112) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 113 (111 . 113) (110 . 111) 104) nil (26070 62362 651567 249000) 0 nil])
nil
