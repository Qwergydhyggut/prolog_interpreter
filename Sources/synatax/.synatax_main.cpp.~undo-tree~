(undo-tree-save-format-version . 1)
"ed802e508240598ab23ca3259810d917d516d387"
[nil nil nil nil (26077 35822 685165 848000) 0 (:visualizer [2 0 1 #<marker in no buffer>])]
([nil nil ((apply -264 11742 14771 undo--wrap-and-run-primitive-undo 11742 14771 ((14766 . 14769) (14750 . 14753) (14743 . 14746) (14717 . 14720) (14707 . 14710) (14678 . 14681) (14662 . 14665) (14628 . 14631) (14571 . 14574) (14555 . 14558) (14522 . 14525) (14489 . 14492) (14480 . 14483) (14451 . 14454) (14437 . 14440) (14398 . 14401) (14371 . 14374) (14361 . 14364) (14332 . 14335) (14316 . 14319) (14282 . 14285) (14225 . 14228) (14209 . 14212) (14176 . 14179) (14143 . 14146) (14134 . 14137) (14105 . 14108) (14091 . 14094) (14052 . 14055) (14013 . 14016) (13985 . 13988) (13905 . 13908) (13891 . 13894) (13852 . 13855) (13814 . 13817) (13800 . 13803) (13752 . 13755) (13715 . 13718) (13671 . 13674) (13636 . 13639) (13570 . 13573) (13532 . 13535) (13523 . 13526) (13489 . 13492) (13455 . 13458) (13400 . 13403) (13367 . 13370) (13334 . 13337) (13325 . 13328) (13252 . 13255) (13239 . 13242) (13195 . 13198) (13155 . 13158) (13084 . 13087) (13072 . 13075) (13044 . 13047) (13030 . 13033) (12992 . 12995) (12954 . 12957) (12922 . 12925) (12860 . 12863) (12848 . 12851) (12810 . 12813) (12803 . 12806) (12782 . 12785) (12716 . 12719) (12704 . 12707) (12626 . 12629) (12594 . 12597) (12570 . 12573) (12537 . 12540) (12496 . 12499) (12431 . 12434) (12416 . 12419) (12351 . 12354) (12290 . 12293) (12225 . 12228) (12201 . 12204) (12186 . 12189) (12121 . 12124) (12067 . 12070) (12002 . 12005) (11990 . 11993) (11970 . 11973) (11924 . 11927) (11892 . 11895) (11887 . 11890) (11742 . 11745) 14507)) (t 26075 33086 38278 605000)) nil (26077 35822 687990 231000) 0 (:visualizer [2 0 1 #<marker in no buffer>])])
([nil nil ((apply -201 8570 11943 undo--wrap-and-run-primitive-undo 8570 11943 ((11937 . 11940) (11922 . 11925) (11906 . 11909) (11821 . 11824) (11775 . 11778) (11749 . 11752) (11738 . 11741) (11661 . 11664) (11647 . 11650) (11562 . 11565) (11545 . 11548) (11468 . 11471) (11439 . 11442) (11351 . 11354) (11334 . 11337) (11251 . 11254) (11234 . 11237) (11159 . 11162) (11150 . 11153) (11133 . 11136) (11121 . 11124) (11038 . 11041) (11026 . 11029) (10965 . 10968) (10953 . 10956) (10922 . 10925) (10881 . 10884) (10851 . 10854) (10802 . 10805) (10750 . 10753) (10696 . 10699) (10641 . 10644) (10586 . 10589) (10531 . 10534) (10488 . 10491) (10420 . 10423) (10373 . 10376) (10291 . 10294) (10244 . 10247) (10203 . 10206) (10153 . 10156) (10111 . 10114) (10060 . 10063) (10001 . 10004) (9953 . 9956) (9910 . 9913) (9860 . 9863) (9814 . 9817) (9767 . 9770) (9638 . 9641) (9570 . 9573) (9501 . 9504) (9432 . 9435) (9363 . 9366) (9296 . 9299) (9231 . 9234) (9166 . 9169) (9099 . 9102) (9032 . 9035) (8967 . 8970) (8900 . 8903) (8833 . 8836) (8768 . 8771) (8717 . 8720) (8670 . 8673) (8665 . 8668) (8570 . 8573) 11741))) nil (26077 40416 941399 924000) 0 (:visualizer [1 0 1 #<marker in no buffer>])] [nil nil ((11566 . 11585)) ((#("kkkkkkkkkkkkkkkkkkk" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t face font-lock-type-face) 12 13 (fontified t face font-lock-type-face) 13 14 (fontified t face font-lock-type-face) 14 15 (fontified t face font-lock-type-face) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 11566) (undo-tree-id0 . -18) (undo-tree-id1 . -18) (undo-tree-id2 . -18)) (26077 35822 685161 455000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply -72 7525 8642 undo--wrap-and-run-primitive-undo 7525 8642 ((8636 . 8639) (8606 . 8609) (8568 . 8571) (8531 . 8534) (8411 . 8414) (8395 . 8398) (8380 . 8383) (8365 . 8368) (8350 . 8353) (8335 . 8338) (8266 . 8269) (8200 . 8203) (8134 . 8137) (8069 . 8072) (8002 . 8005) (7935 . 7938) (7869 . 7872) (7801 . 7804) (7735 . 7738) (7666 . 7669) (7599 . 7602) (7579 . 7582) (7574 . 7577) (7525 . 7528)))) ((apply 72 7525 8570 undo--wrap-and-run-primitive-undo 7525 8570 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7525) (#("// " 0 1 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7574) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7579) (#("// " 0 1 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7599) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7666) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7735) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7801) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7869) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7935) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 8002) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 8069) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8134) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8200) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8266) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8335) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8350) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8365) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8380) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8395) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8411) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8531) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8568) (#("// " 0 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8606) (#("// " 0 1 (c-in-sws t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t face font-lock-comment-delimiter-face)) . 8636)))) (26077 40420 241926 568000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
nil
([nil current ((apply -69 6576 7594 undo--wrap-and-run-primitive-undo 6576 7594 ((7586 . 7589) (7572 . 7575) (7489 . 7492) (7400 . 7403) (7386 . 7389) (7289 . 7292) (7275 . 7278) (7192 . 7195) (7157 . 7160) (7060 . 7063) (7046 . 7049) (6966 . 6969) (6952 . 6955) (6881 . 6884) (6872 . 6875) (6855 . 6858) (6841 . 6844) (6768 . 6771) (6756 . 6759) (6718 . 6721) (6667 . 6670) (6662 . 6665) (6576 . 6579)))) ((apply 69 6576 7525 undo--wrap-and-run-primitive-undo 6576 7525 ((#("// " 0 1 (fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6576) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6662) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6667) (#("// " 0 1 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6718) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6756) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6768) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6841) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6855) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6872) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6881) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6952) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 6966) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7046) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7060) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7157) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7192) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7275) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7289) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7386) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7400) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7489) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7572) (#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 7586)))) (26077 40424 811834 201000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#("r" 0 1 (fontified nil)) . 1133) (1107 . 1134) (#("sy" 0 2 (fontified nil)) . 1107) (1107 . 1109) (#("synatax_ptr_class" 0 17 (fontified nil)) . 1107) (1107 . 1124) (#("synatax_p" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 1107) (1110 . 1116) (#("z" 0 1 (fontified nil)) . 1110) (1109 . 1111) (#("b" 0 1 (fontified nil)) . 1109) (1107 . 1110) (#("ptr" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 1107)) ((1107 . 1110) (#("syb" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 1107) (1109 . 1110) (#("nz" 0 1 (fontified nil) 1 2 (fontified nil)) . 1109) (1110 . 1111) (#("atax_p" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 1110) (1107 . 1116) (#("synatax_ptr_class" 0 17 (fontified nil)) . 1107) (1107 . 1124) (#("sy" 0 2 (fontified nil)) . 1107) (1107 . 1109) (#("synatax_ptr_class::ret_ptrr" 0 17 (fontified nil face font-lock-constant-face) 17 18 (fontified nil) 18 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil) 21 22 (fontified nil) 22 23 (fontified nil) 23 24 (fontified nil) 24 25 (fontified nil) 25 26 (fontified nil) 26 27 (fontified nil)) . 1107) (undo-tree-id1671 . -26) (undo-tree-id1672 . -26) (1133 . 1134)) (26077 40422 746242 14000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((214 . 215) (#("," 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -214) (undo-tree-id927 . -1) (undo-tree-id928 . -1) 215 (214 . 215) (204 . 214) (#("b" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -204) (undo-tree-id929 . -1) (undo-tree-id930 . -1) 205 (204 . 205) (202 . 204) (201 . 202) (196 . 201) (#("u" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -196) (undo-tree-id931 . -1) (undo-tree-id932 . -1) 197 (194 . 197) (apply yas--snippet-revive 185 195 #s(yas--snippet nil nil #s(yas--exit #<marker at 183 in synatax_main.cpp> nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 183 in synatax_main.cpp> nil) 1 nil nil nil nil)) (185 . 195) (#("include \"$0\"" 0 12 (fontified nil)) . 185) (undo-tree-id933 . -12) (185 . 197) (#("i" 0 1 (c-in-sws t fontified nil)) . 185) (undo-tree-id934 . -1) (185 . 186) (#("include \"header\"" 0 16 (fontified nil)) . -185) (undo-tree-id935 . -16) (185 . 201) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -185) (undo-tree-id936 . -2) (undo-tree-id937 . -2) (undo-tree-id938 . -2) 187 (185 . 187) (184 . 185) (183 . 184) (t 26077 37376 243280 448000) 182) ((#("
" 0 1 (fontified t c-in-sws t)) . 183) (undo-tree-id1388 . -1) (#("#" 0 1 (fontified nil c-is-sws t c-in-sws t face font-lock-preprocessor-face)) . 184) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("in" 0 1 (fontified nil face font-lock-preprocessor-face c-in-sws t) 1 2 (fontified nil face font-lock-preprocessor-face c-in-sws t)) . 185) (undo-tree-id1391 . -2) (185 . 187) (#("include \"header\"" 0 16 (fontified nil)) . 185) (undo-tree-id1392 . -16) (185 . 201) (#("i" 0 1 (fontified nil c-in-sws t)) . 185) (undo-tree-id1393 . -1) (185 . 186) (#("include \"$0\"" 0 12 (fontified nil)) . 185) (undo-tree-id1394 . -12) (185 . 197) (#("include \"\"" 0 7 (fontified nil c-in-sws t face font-lock-preprocessor-face) 7 8 (fontified nil c-in-sws t) 8 9 (fontified nil face font-lock-string-face c-in-sws t) 9 10 (fontified nil face font-lock-string-face c-in-sws t)) . 185) (undo-tree-id1395 . -10) (undo-tree-id1396 . -9) (#("syu" 0 1 (fontified nil c-in-sws t face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face c-in-sws t) 2 3 (fontified nil face font-lock-string-face c-in-sws t)) . 194) (196 . 197) (#("natax" 0 1 (fontified nil c-in-sws t face font-lock-string-face) 1 2 (fontified nil c-in-sws t face font-lock-string-face) 2 3 (fontified nil c-in-sws t face font-lock-string-face) 3 4 (fontified nil c-in-sws t face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face c-in-sws t)) . 196) (#("/" 0 1 (fontified nil face font-lock-string-face c-in-sws t)) . 201) (#("sy" 0 1 (fontified nil c-in-sws t face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face c-in-sws t)) . 202) (#("b" 0 1 (fontified nil face font-lock-string-face c-in-sws t)) . 204) (204 . 205) (#("natax_ptr." 0 1 (fontified nil c-in-sws t face font-lock-string-face) 1 2 (fontified nil c-in-sws t face font-lock-string-face) 2 3 (fontified nil c-in-sws t face font-lock-string-face) 3 4 (fontified nil c-in-sws t face font-lock-string-face) 4 5 (fontified nil c-in-sws t face font-lock-string-face) 5 6 (fontified nil c-in-sws t face font-lock-string-face) 6 7 (fontified nil c-in-sws t face font-lock-string-face) 7 8 (fontified nil c-in-sws t face font-lock-string-face) 8 9 (fontified nil c-in-sws t face font-lock-string-face) 9 10 (fontified nil face font-lock-string-face c-in-sws t)) . 204) (#("," 0 1 (fontified nil face font-lock-string-face c-in-sws t)) . 214) (214 . 215) (#("h" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . 214)) (26077 40405 880999 857000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((183 . 184) (t 26077 37376 243280 448000) 182) ((#("
" 0 1 (fontified t c-in-sws t)) . 183) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1)) (26077 37410 804417 913000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((1838 . 1839) (1836 . 1838) (#("y" 0 1 (fontified t)) . -1836) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("u" 0 1 (fontified t)) . -1837) (undo-tree-id941 . -1) (undo-tree-id942 . -1) 1838 (1833 . 1838) (1831 . 1833) (1831 . 1832) 1861 (t 26077 37589 253275 197000)) ((#("
" 0 1 (fontified nil)) . 1831) (undo-tree-id943 . 1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . 1) (#("  " 0 2 (fontified nil)) . 1831) (undo-tree-id947 . -2) (undo-tree-id948 . -2) (undo-tree-id949 . -2) (undo-tree-id950 . -2) (undo-tree-id951 . -2) (undo-tree-id952 . -2) (undo-tree-id953 . -2) (undo-tree-id954 . -2) (undo-tree-id955 . -2) (undo-tree-id956 . -2) (undo-tree-id957 . -2) (undo-tree-id958 . -2) (undo-tree-id959 . -2) (undo-tree-id960 . -2) (undo-tree-id961 . -2) (undo-tree-id962 . -2) (undo-tree-id963 . -2) (undo-tree-id964 . -2) (undo-tree-id965 . -2) (undo-tree-id966 . -2) (undo-tree-id967 . -2) (undo-tree-id968 . -2) (undo-tree-id969 . -2) (undo-tree-id970 . -2) (undo-tree-id971 . -2) (undo-tree-id972 . -2) (undo-tree-id973 . -2) (undo-tree-id974 . -2) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -2) (undo-tree-id978 . -2) (undo-tree-id979 . -2) (undo-tree-id980 . -2) (undo-tree-id981 . -2) (undo-tree-id982 . -2) (undo-tree-id983 . -2) (undo-tree-id984 . -2) (undo-tree-id985 . -2) (undo-tree-id986 . -2) (undo-tree-id987 . -2) (undo-tree-id988 . -2) (undo-tree-id989 . -2) (undo-tree-id990 . -2) (undo-tree-id991 . -2) (undo-tree-id992 . -2) (undo-tree-id993 . -2) (undo-tree-id994 . -2) (undo-tree-id995 . -2) (undo-tree-id996 . -2) (undo-tree-id997 . -2) (undo-tree-id998 . -2) (undo-tree-id999 . -2) (undo-tree-id1000 . -2) (undo-tree-id1001 . -2) (undo-tree-id1002 . -2) (undo-tree-id1003 . -2) (undo-tree-id1004 . -2) (undo-tree-id1005 . -2) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (undo-tree-id1086 . -2) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (#("debyu" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 1833) (undo-tree-id1094 . -5) (undo-tree-id1095 . -5) (undo-tree-id1096 . -3) (undo-tree-id1097 . -3) (undo-tree-id1098 . -3) (undo-tree-id1099 . -3) (undo-tree-id1100 . -3) (undo-tree-id1101 . -3) (undo-tree-id1102 . -3) (undo-tree-id1103 . -3) (undo-tree-id1104 . -3) (undo-tree-id1105 . -3) (undo-tree-id1106 . -3) (undo-tree-id1107 . -3) (undo-tree-id1108 . -3) (undo-tree-id1109 . -3) (undo-tree-id1110 . -3) (undo-tree-id1111 . -3) (undo-tree-id1112 . -3) (undo-tree-id1113 . -3) (undo-tree-id1114 . -3) (undo-tree-id1115 . -3) (undo-tree-id1116 . -3) (undo-tree-id1117 . -3) (undo-tree-id1118 . -3) (undo-tree-id1119 . -3) (undo-tree-id1120 . -3) (undo-tree-id1121 . -3) (undo-tree-id1122 . -3) (undo-tree-id1123 . -3) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -3) (undo-tree-id1130 . -3) (undo-tree-id1131 . -3) (undo-tree-id1132 . -3) (undo-tree-id1133 . -3) (undo-tree-id1134 . -3) (undo-tree-id1135 . -3) (undo-tree-id1136 . -3) (undo-tree-id1137 . -3) (undo-tree-id1138 . -3) (undo-tree-id1139 . -3) (undo-tree-id1140 . -3) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3) (undo-tree-id1143 . -3) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (undo-tree-id1147 . -3) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (undo-tree-id1161 . -3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -3) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -3) (undo-tree-id1167 . -3) (undo-tree-id1168 . -3) (undo-tree-id1169 . -3) (undo-tree-id1170 . -3) (undo-tree-id1171 . -3) (undo-tree-id1172 . -3) (undo-tree-id1173 . -3) (undo-tree-id1174 . -3) (undo-tree-id1175 . -3) (undo-tree-id1176 . -3) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) (undo-tree-id1179 . -3) (undo-tree-id1180 . -3) (undo-tree-id1181 . -3) (undo-tree-id1182 . -3) (undo-tree-id1183 . -3) (undo-tree-id1184 . -3) (undo-tree-id1185 . -3) (undo-tree-id1186 . -3) (undo-tree-id1187 . -3) (undo-tree-id1188 . -3) (undo-tree-id1189 . -3) (undo-tree-id1190 . -3) (undo-tree-id1191 . -3) (undo-tree-id1192 . -3) (undo-tree-id1193 . -3) (undo-tree-id1194 . -3) (undo-tree-id1195 . -3) (undo-tree-id1196 . -3) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) (undo-tree-id1199 . -3) (undo-tree-id1200 . -3) (undo-tree-id1201 . -3) (undo-tree-id1202 . -3) (undo-tree-id1203 . -3) (undo-tree-id1204 . -3) (undo-tree-id1205 . -3) (undo-tree-id1206 . -3) (undo-tree-id1207 . -3) (undo-tree-id1208 . -3) (undo-tree-id1209 . -3) (undo-tree-id1210 . -3) (undo-tree-id1211 . -3) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) (undo-tree-id1216 . -3) (undo-tree-id1217 . -3) (undo-tree-id1218 . -3) (undo-tree-id1219 . -3) (undo-tree-id1220 . -3) (undo-tree-id1221 . -3) (undo-tree-id1222 . -3) (undo-tree-id1223 . -3) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (1836 . 1838) (#("ug" 0 1 (fontified nil) 1 2 (fontified nil)) . 1836) (undo-tree-id1241 . -2) (undo-tree-id1242 . -2) (undo-tree-id1243 . -2) (undo-tree-id1244 . -2) (undo-tree-id1245 . -2) (undo-tree-id1246 . -2) (undo-tree-id1247 . -2) (undo-tree-id1248 . -2) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -2) (undo-tree-id1252 . -2) (undo-tree-id1253 . -2) (undo-tree-id1254 . -2) (undo-tree-id1255 . -2) (undo-tree-id1256 . -2) (undo-tree-id1257 . -2) (undo-tree-id1258 . -2) (undo-tree-id1259 . -2) (undo-tree-id1260 . -2) (undo-tree-id1261 . -2) (undo-tree-id1262 . -2) (undo-tree-id1263 . -2) (undo-tree-id1264 . -2) (undo-tree-id1265 . -2) (undo-tree-id1266 . -2) (undo-tree-id1267 . -2) (undo-tree-id1268 . -2) (undo-tree-id1269 . -2) (undo-tree-id1270 . -2) (undo-tree-id1271 . -2) (undo-tree-id1272 . -2) (undo-tree-id1273 . -2) (undo-tree-id1274 . -2) (undo-tree-id1275 . -2) (undo-tree-id1276 . -2) (undo-tree-id1277 . -2) (undo-tree-id1278 . -2) (undo-tree-id1279 . -2) (undo-tree-id1280 . -2) (undo-tree-id1281 . -2) (undo-tree-id1282 . -2) (undo-tree-id1283 . -2) (undo-tree-id1284 . -2) (undo-tree-id1285 . -2) (undo-tree-id1286 . -2) (undo-tree-id1287 . -2) (undo-tree-id1288 . -2) (undo-tree-id1289 . -2) (undo-tree-id1290 . -2) (undo-tree-id1291 . -2) (undo-tree-id1292 . -2) (undo-tree-id1293 . -2) (undo-tree-id1294 . -2) (undo-tree-id1295 . -2) (undo-tree-id1296 . -2) (undo-tree-id1297 . -2) (undo-tree-id1298 . -2) (undo-tree-id1299 . -2) (undo-tree-id1300 . -2) (undo-tree-id1301 . -2) (undo-tree-id1302 . -2) (undo-tree-id1303 . -2) (undo-tree-id1304 . -2) (undo-tree-id1305 . -2) (undo-tree-id1306 . -2) (undo-tree-id1307 . -2) (undo-tree-id1308 . -2) (undo-tree-id1309 . -2) (undo-tree-id1310 . -2) (undo-tree-id1311 . -2) (undo-tree-id1312 . -2) (undo-tree-id1313 . -2) (undo-tree-id1314 . -2) (undo-tree-id1315 . -2) (undo-tree-id1316 . -2) (undo-tree-id1317 . -2) (undo-tree-id1318 . -2) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) (undo-tree-id1321 . -2) (undo-tree-id1322 . -2) (undo-tree-id1323 . -2) (undo-tree-id1324 . -2) (undo-tree-id1325 . -2) (undo-tree-id1326 . -2) (undo-tree-id1327 . -2) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) (undo-tree-id1330 . -2) (undo-tree-id1331 . -2) (undo-tree-id1332 . -2) (undo-tree-id1333 . -2) (undo-tree-id1334 . -2) (undo-tree-id1335 . -2) (undo-tree-id1336 . -2) (undo-tree-id1337 . -2) (undo-tree-id1338 . -2) (undo-tree-id1339 . -2) (undo-tree-id1340 . -2) (undo-tree-id1341 . -2) (undo-tree-id1342 . -2) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -2) (undo-tree-id1347 . -2) (undo-tree-id1348 . -2) (undo-tree-id1349 . -2) (undo-tree-id1350 . -2) (undo-tree-id1351 . -2) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) (undo-tree-id1357 . -2) (undo-tree-id1358 . -2) (undo-tree-id1359 . -2) (undo-tree-id1360 . -2) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . -2) (undo-tree-id1366 . -2) (undo-tree-id1367 . -2) (undo-tree-id1368 . -2) (undo-tree-id1369 . -2) (undo-tree-id1370 . -2) (undo-tree-id1371 . -2) (undo-tree-id1372 . -2) (undo-tree-id1373 . -2) (undo-tree-id1374 . -2) (undo-tree-id1375 . -2) (undo-tree-id1376 . -2) (undo-tree-id1377 . -2) (undo-tree-id1378 . -2) (undo-tree-id1379 . -2) (undo-tree-id1380 . -2) (undo-tree-id1381 . -2) (undo-tree-id1382 . -2) (undo-tree-id1383 . -2) (undo-tree-id1384 . -2) (undo-tree-id1385 . -2) (undo-tree-id1386 . -2) (undo-tree-id1387 . -2) (#(";" 0 1 (fontified t)) . 1838) (t 26077 37668 809939 905000)) (26077 37668 796615 865000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((184 . 185)) ((#("#" 0 1 (fontified t c-is-sws t c-in-sws t)) . 184) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1)) (26077 37410 324203 806000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((185 . 187)) ((#("ui" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . 185) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -2) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2) (undo-tree-id572 . -2) (undo-tree-id573 . -2) (undo-tree-id574 . -2) (undo-tree-id575 . -2) (undo-tree-id576 . -2) (undo-tree-id577 . -2) (undo-tree-id578 . -2) (undo-tree-id579 . -2) (undo-tree-id580 . -2) (undo-tree-id581 . -2) (undo-tree-id582 . -2) (undo-tree-id583 . -2) (undo-tree-id584 . -2) (undo-tree-id585 . -2) (undo-tree-id586 . -2) (undo-tree-id587 . -2) (undo-tree-id588 . -2) (undo-tree-id589 . -2) (undo-tree-id590 . -2) (undo-tree-id591 . -2) (undo-tree-id592 . -2) (undo-tree-id593 . -2) (undo-tree-id594 . -2) (undo-tree-id595 . -2) (undo-tree-id596 . -2) (undo-tree-id597 . -2) (undo-tree-id598 . -2) (undo-tree-id599 . -2) (undo-tree-id600 . -2) (undo-tree-id601 . -2) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . -2) (undo-tree-id605 . -2) (undo-tree-id606 . -2) (undo-tree-id607 . -2) (undo-tree-id608 . -2) (undo-tree-id609 . -2) (undo-tree-id610 . -2) (undo-tree-id611 . -2) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id615 . -2) (undo-tree-id616 . -2) (undo-tree-id617 . -2) (undo-tree-id618 . -2) (undo-tree-id619 . -2) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -2) (undo-tree-id623 . -2) (undo-tree-id624 . -2) (undo-tree-id625 . -2)) (26077 37409 661159 0) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("u" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -185) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -186) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 187) ((185 . 187)) (26077 37409 49696 668000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((185 . 186)) ((#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . 185) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1)) (26077 37408 366691 825000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 185 195 #s(yas--snippet nil nil #s(yas--exit #<marker at 183 in synatax_main.cpp> nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 183 in synatax_main.cpp> nil) 0 nil nil nil nil)) (185 . 195) (#("include \"$0\"" 0 12 (fontified nil)) . 185) (undo-tree-id134 . -12) (185 . 197) (#("i" 0 1 (c-in-sws t fontified nil)) . 185) (undo-tree-id135 . -1) (185 . 186) (#("include \"header\"" 0 16 (fontified nil)) . -185) (undo-tree-id136 . -16) (185 . 201) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -185) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 186) ((185 . 186) (#("include \"header\"" 0 16 (fontified nil)) . 185) (undo-tree-id146 . -16) (185 . 201) (#("i" 0 1 (fontified nil c-in-sws t)) . 185) (undo-tree-id147 . -1) (185 . 186) (#("include \"$0\"" 0 12 (fontified nil)) . 185) (undo-tree-id148 . -12) (185 . 197) (#("include \"\"" 0 7 (fontified t c-in-sws t face font-lock-preprocessor-face) 7 8 (fontified t c-in-sws t) 8 10 (fontified t c-in-sws t face font-lock-string-face)) . 185) (undo-tree-id149 . -10) (undo-tree-id150 . -9) (undo-tree-id151 . -9) (undo-tree-id152 . -9) (undo-tree-id153 . -9)) (26077 37408 358211 972000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
