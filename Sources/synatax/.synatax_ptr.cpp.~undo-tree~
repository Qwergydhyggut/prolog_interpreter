(undo-tree-save-format-version . 1)
"79264c5d3f08fd5fbb2695805e1acc881d2689a4"
[nil nil nil nil (26078 55672 845733 259000) 0 (:visualizer [6 0 1 #<marker in no buffer>])]
([nil nil ((11511 . 11512) (apply yas--snippet-revive 11457 11511 #s(yas--snippet nil (#s(yas--field 1 11471 11482 nil nil nil t #s(yas--field 2 11484 11490 nil nil nil t #s(yas--field 3 11492 11500 nil nil nil t #s(yas--field 4 11502 11510 nil nil nil t nil)))) #s(yas--field 2 11484 11490 nil nil nil t #s(yas--field 3 11492 11500 nil nil nil t #s(yas--field 4 11502 11510 nil nil nil t nil))) #s(yas--field 3 11492 11500 nil nil nil t #s(yas--field 4 11502 11510 nil nil nil t nil)) #s(yas--field 4 11502 11510 nil nil nil t nil)) nil 0 nil #s(yas--field 4 11502 11510 nil nil nil t nil) nil nil)) (11507 . 11509) (11503 . 11507) (#("std::string database" 0 3 (fontified nil face font-lock-constant-face) 3 5 (fontified nil) 5 11 (fontified nil face font-lock-type-face) 11 12 (fontified nil) 12 20 (fontified nil face font-lock-variable-name-face)) . 11504) (undo-tree-id0 . -20) (11502 . 11504) (11493 . 11499) (#("std::string passwd" 0 3 (fontified nil face font-lock-constant-face) 3 5 (fontified nil) 5 11 (fontified nil face font-lock-type-face) 11 12 (fontified nil) 12 18 (fontified nil face font-lock-variable-name-face)) . 11494) (undo-tree-id1 . -18) (11492 . 11494) (11485 . 11489) (#("std::string user" 0 3 (fontified nil face font-lock-constant-face) 3 5 (fontified nil) 5 11 (fontified nil face font-lock-type-face) 11 12 (fontified nil) 12 16 (fontified nil face font-lock-variable-name-face)) . 11486) (undo-tree-id2 . -16) (11484 . 11486) (11480 . 11481) (11472 . 11480) (#("std::string host" 0 3 (fontified nil face font-lock-constant-face) 3 5 (fontified nil) 5 11 (fontified nil face font-lock-type-face) 11 12 (fontified nil) 12 16 (fontified nil face font-lock-variable-name-face)) . 11473) (undo-tree-id3 . -16) (11471 . 11473) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 11471 11482 nil nil nil t #s(yas--field 2 11484 11490 nil nil nil t #s(yas--field 3 11492 11500 nil nil nil t #s(yas--field 4 11502 11510 nil nil nil t nil)))) #s(yas--field 2 11484 11490 nil nil nil t #s(yas--field 3 11492 11500 nil nil nil t #s(yas--field 4 11502 11510 nil nil nil t nil))) #s(yas--field 3 11492 11500 nil nil nil t #s(yas--field 4 11502 11510 nil nil nil t nil)) #s(yas--field 4 11502 11510 nil nil nil t nil)) nil 0 nil #s(yas--field 4 11502 11510 nil nil nil t nil) nil nil)) (11457 . 11548) (#("mysql_connect(${1:std::string host}, ${2:std::string user}, ${3:std::string passwd}, ${4:std::string database})" 0 111 (fontified nil)) . 11457) (11457 . 11568) (#("mysql_connect(std::string host, std::string user, std::string passwd, std::string database)" 0 91 (fontified nil)) . -11457) (11457 . 11548) (#("mysq" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -11457) (undo-tree-id4 . -4) (undo-tree-id5 . -4) 11461 (11457 . 11461) (11442 . 11446) (#("  " 0 2 (fontified nil)) . 11442) (11454 . 11455) (11442 . 11444) (#("    " 0 4 (fontified nil)) . 11442) (11455 . 11456) (11446 . 11455) (#("my" 0 2 (fontified nil)) . 11446) (11446 . 11448) (#("mysql_mod" 0 9 (fontified nil)) . -11446) (11446 . 11455) (#("mysq" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -11446) (undo-tree-id6 . -4) (undo-tree-id7 . -4) 11450 (11446 . 11450) (11441 . 11446) (#("    " 0 4 (fontified t)) . 11441) (undo-tree-id8 . -4) (undo-tree-id9 . -4) 11445 (11440 . 11445) (t 26078 10473 762332 982000) 11439) nil (26078 55672 845726 151000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((apply -255 426 4085 undo--wrap-and-run-primitive-undo 426 4085 ((4040 . 4043) (4027 . 4030) (3974 . 3977) (3910 . 3913) (3855 . 3858) (3806 . 3809) (3751 . 3754) (3696 . 3699) (3647 . 3650) (3647 . 3648) (#("	" 0 1 (fontified t)) . 3647) (3645 . 3647) (3594 . 3597) (3546 . 3549) (3546 . 3547) (#("	" 0 1 (fontified t)) . 3546) (3544 . 3546) (3501 . 3504) (3501 . 3502) (#("	" 0 1 (fontified t c-is-sws t c-in-sws t)) . 3501) (3499 . 3501) (3431 . 3434) (3431 . 3432) (#("	" 0 1 (fontified t c-in-sws t)) . 3431) (3429 . 3431) (3382 . 3385) (3382 . 3383) (#("	" 0 1 (fontified t c-in-sws t)) . 3382) (3380 . 3382) (3300 . 3303) (3254 . 3257) (3254 . 3255) (#("	" 0 1 (fontified t)) . 3254) (3252 . 3254) (3211 . 3214) (3211 . 3212) (#("	" 0 1 (fontified t)) . 3211) (3209 . 3211) (3161 . 3164) (3116 . 3119) (3116 . 3117) (#("	" 0 1 (fontified t)) . 3116) (3114 . 3116) (3069 . 3072) (3024 . 3027) (3024 . 3025) (#("	" 0 1 (fontified t)) . 3024) (3022 . 3024) (2977 . 2980) (2977 . 2978) (#("	" 0 1 (fontified t)) . 2977) (2975 . 2977) (2934 . 2937) (2934 . 2935) (#("	" 0 1 (fontified t)) . 2934) (2932 . 2934) (2883 . 2886) (2837 . 2840) (2837 . 2838) (#("	" 0 1 (fontified t)) . 2837) (2835 . 2837) (2794 . 2797) (2794 . 2795) (#("	" 0 1 (fontified t)) . 2794) (2792 . 2794) (2743 . 2746) (2699 . 2702) (2699 . 2700) (#("	" 0 1 (fontified t)) . 2699) (2697 . 2699) (2656 . 2659) (2656 . 2657) (#("	" 0 1 (fontified t)) . 2656) (2654 . 2656) (2613 . 2616) (2613 . 2614) (#("	" 0 1 (fontified t)) . 2613) (2611 . 2613) (2568 . 2571) (2568 . 2569) (#("	" 0 1 (fontified t)) . 2568) (2566 . 2568) (2517 . 2520) (2456 . 2459) (2456 . 2457) (#("	" 0 1 (fontified t)) . 2456) (2454 . 2456) (2413 . 2416) (2413 . 2414) (#("	" 0 1 (fontified t)) . 2413) (2411 . 2413) (2371 . 2374) (2371 . 2372) (#("	" 0 1 (fontified t)) . 2371) (2369 . 2371) (2323 . 2326) (2278 . 2281) (2278 . 2279) (#("	" 0 1 (fontified t)) . 2278) (2276 . 2278) (2236 . 2239) (2236 . 2237) (#("	" 0 1 (fontified t)) . 2236) (2234 . 2236) (2192 . 2195) (2192 . 2193) (#("	" 0 1 (fontified t)) . 2192) (2190 . 2192) (2142 . 2145) (2093 . 2096) (2093 . 2094) (#("	" 0 1 (fontified t)) . 2093) (2091 . 2093) (2043 . 2046) (1988 . 1991) (1988 . 1989) (#("	" 0 1 (fontified t)) . 1988) (1986 . 1988) (1944 . 1947) (1905 . 1908) (1905 . 1906) (#("	" 0 1 (fontified t)) . 1905) (1903 . 1905) (1864 . 1867) (1864 . 1865) (#("	" 0 1 (fontified t)) . 1864) (1862 . 1864) (1817 . 1820) (1688 . 1691) (1618 . 1621) (1543 . 1546) (1476 . 1479) (1411 . 1414) (1344 . 1347) (1275 . 1278) (1206 . 1209) (1137 . 1140) (1070 . 1073) (1005 . 1008) (940 . 943) (873 . 876) (806 . 809) (741 . 744) (674 . 677) (607 . 610) (540 . 543) (475 . 478) (428 . 431) 3828)) (t 26078 55672 863318 956000)) nil (26078 55828 673428 660000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((211 . 220) (209 . 211) (#("k" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -209) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 210 (207 . 210) (#("t" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -207) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 208 (205 . 208) (apply yas--snippet-revive 196 206 #s(yas--snippet nil nil #s(yas--exit 205 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 205 nil) 1 nil nil nil nil)) (196 . 206) (#("include \"$0\"" 0 12 (fontified nil)) . 196) (undo-tree-id14 . -12) (196 . 208) (#("i" 0 1 (c-in-sws t fontified nil)) . 196) (undo-tree-id15 . -1) (196 . 197) (#("include \"header\"" 0 16 (fontified nil)) . -196) (undo-tree-id16 . -16) (196 . 212) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -196) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) 198 (196 . 198) (195 . 196) (194 . 195) (t 26078 55828 689981 781000) 193) nil (26078 55866 703798 847000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((apply -9 328 509 undo--wrap-and-run-primitive-undo 328 509 ((450 . 453) (445 . 448) (328 . 331) 453)) (t 26078 55866 713314 180000)) nil (26078 55893 870552 106000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((apply -3 4119 4125 undo--wrap-and-run-primitive-undo 4119 4125 ((4119 . 4122) 4121))) nil (26078 55893 870548 122000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11861 . 11868) (#("
      " 0 1 (fontified t) 1 7 (fontified t)) . 11861) (undo-tree-id24 . -7) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 11868 (11870 . 11871) (11869 . 11871) (11868 . 11870) (11861 . 11868) (11857 . 11860) (11855 . 11857) (#("s" 0 1 (fontified t)) . -11855) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("d" 0 1 (fontified t)) . -11856) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 11857 (11855 . 11857) (11846 . 11855) (#("csz_stack" 0 9 (fontified nil)) . -11846) (11846 . 11855) (#("csz" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -11846) (undo-tree-id31 . -3) (undo-tree-id32 . -3) 11849 (11846 . 11849) (11844 . 11846) (11832 . 11844) (#("a" 0 1 (fontified nil)) . 11832) (11832 . 11833) (#("analysis_mod" 0 12 (fontified nil)) . -11832) (11832 . 11844) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -11832) (undo-tree-id33 . -2) (undo-tree-id34 . -2) 11834 (11832 . 11834) (11831 . 11832) (11820 . 11831) (11815 . 11820) (#("co" 0 2 (fontified nil)) . 11815) (11815 . 11817) (#("const" 0 5 (fontified nil)) . -11815) (11815 . 11820) (#("co" 0 1 (fontified t) 1 2 (fontified t)) . -11815) (undo-tree-id35 . -2) (undo-tree-id36 . -2) 11817 (11815 . 11817) (#("a" 0 1 (fontified t)) . -11815) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 11816 (11815 . 11816) (11814 . 11816) (11811 . 11814) (#("t" 0 1 (fontified t)) . -11811) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("o" 0 1 (fontified t)) . -11812) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("k" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -11813) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 11814 (11812 . 11814) (#("o" 0 1 (fontified t)) . -11812) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("k" 0 1 (fontified t)) . -11813) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("=" 0 1 (fontified t)) . -11814) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 11815 (11811 . 11815) (11806 . 11811) (t 26078 55893 879980 180000)) nil (26078 56639 626111 575000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 11867)) nil (26078 56639 626083 889000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11867 . 11868)) nil (26078 56639 626083 481000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 11867) (undo-tree-id22 . -1) (undo-tree-id23 . -1)) nil (26078 56639 626082 631000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11917 . 11918) (11903 . 11917) (11890 . 11903) (11869 . 11876) (#("     " 0 5 (fontified nil)) . 11869) (11887 . 11888) (11869 . 11874) (#("       " 0 7 (fontified nil)) . 11869) (11888 . 11889) (11876 . 11888) (#("an" 0 2 (fontified nil)) . 11876) (11876 . 11878) (#("analysis_mod" 0 12 (fontified nil)) . -11876) (11876 . 11888) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -11876) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 11878 (11876 . 11878) (11868 . 11876) (11871 . 11876) 11872) nil (26078 56639 626077 355000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11959 . 11960) (11955 . 11959) (#("w" 0 1 (fontified t)) . -11955) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 11956 (11955 . 11956) (11953 . 11955) (11950 . 11953) (#("st" 0 2 (fontified nil)) . 11950) (11950 . 11952) (#("std" 0 3 (fontified nil)) . -11950) (11950 . 11953) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -11950) (undo-tree-id53 . -2) (undo-tree-id54 . -2) 11952 (11950 . 11952) (11948 . 11950) (11943 . 11948) (#("y" 0 1 (fontified t)) . -11943) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 11944 (11943 . 11944) (#("c" 0 1 (fontified t)) . -11943) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("a" 0 1 (fontified t)) . -11944) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 11945 (#("r" 0 1 (fontified t)) . -11945) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 11946 (11945 . 11946) (#("e" 0 1 (fontified t)) . -11945) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 11946 (11937 . 11946) (#("c" 0 1 (fontified t)) . -11937) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("v" 0 1 (fontified t)) . -11938) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 11939 (11937 . 11939) (11935 . 11937) (11931 . 11935) (11919 . 11926) (#("     " 0 5 (fontified nil)) . 11919) (11928 . 11929) (11919 . 11924) (#("       " 0 7 (fontified nil)) . 11919) (11929 . 11930) (11926 . 11929) (11918 . 11926) (t 26078 56639 633295 203000) 11917) nil (26078 56675 623647 287000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11890 . 11899) (#("csz_stack" 0 9 (fontified nil)) . -11890) (11890 . 11899) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -11890) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) 11891 (11890 . 11891) (11888 . 11890) (t 26078 56675 669960 982000)) nil (26078 56722 500502 520000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11983 . 11984) (11981 . 11983) (#("r" 0 1 (fontified t)) . -11981) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("o" 0 1 (fontified t)) . -11982) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("p" 0 1 (fontified t)) . -11983) (undo-tree-id245 . -1) (undo-tree-id246 . -1) 11984 (11979 . 11984) (11971 . 11979) (t 26078 56722 506626 497000) 11959) nil (26078 56744 678144 394000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((#("       stop;
" 0 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 11972) (undo-tree-id247 . 1) (undo-tree-id248 . -13) (undo-tree-id249 . -13) (undo-tree-id250 . -12) (undo-tree-id251 . 1) (undo-tree-id252 . -11) (undo-tree-id253 . -11) (undo-tree-id254 . -11) (undo-tree-id255 . -11) (undo-tree-id256 . -11) (undo-tree-id257 . -11) (undo-tree-id258 . -11) (undo-tree-id259 . -11) (undo-tree-id260 . -11) (undo-tree-id261 . -11) (undo-tree-id262 . -11) (undo-tree-id263 . -11) (undo-tree-id264 . -11) (undo-tree-id265 . -11) (undo-tree-id266 . -11) (undo-tree-id267 . -11) (undo-tree-id268 . -11) (undo-tree-id269 . -11) (undo-tree-id270 . -11) (undo-tree-id271 . -11) (undo-tree-id272 . -11) (undo-tree-id273 . -11) (undo-tree-id274 . -11) (undo-tree-id275 . -11) (undo-tree-id276 . -11) (undo-tree-id277 . -11) (undo-tree-id278 . -11) (undo-tree-id279 . -11) (undo-tree-id280 . -11) (undo-tree-id281 . -11) (undo-tree-id282 . -11) (undo-tree-id283 . -11) (undo-tree-id284 . -11) (undo-tree-id285 . -11) (undo-tree-id286 . -11) (undo-tree-id287 . -11) (undo-tree-id288 . -11) (undo-tree-id289 . -11) (undo-tree-id290 . -11) (undo-tree-id291 . -11) (undo-tree-id292 . -11) (undo-tree-id293 . -11) (undo-tree-id294 . -11) (undo-tree-id295 . -11) (undo-tree-id296 . -11) (undo-tree-id297 . -11) (undo-tree-id298 . -11) (undo-tree-id299 . -11) (undo-tree-id300 . -11) (undo-tree-id301 . -11) (undo-tree-id302 . -11) (undo-tree-id303 . -11) (undo-tree-id304 . -11) (undo-tree-id305 . -11) (undo-tree-id306 . -11) (undo-tree-id307 . -11) (undo-tree-id308 . -11) (undo-tree-id309 . -11) (undo-tree-id310 . -11) (undo-tree-id311 . -11) (undo-tree-id312 . -11) (undo-tree-id313 . -11) (undo-tree-id314 . -11) (undo-tree-id315 . -11) (undo-tree-id316 . -11) (undo-tree-id317 . -11) (undo-tree-id318 . -11) (undo-tree-id319 . -11) (undo-tree-id320 . -11) (undo-tree-id321 . -11) (undo-tree-id322 . -11) (undo-tree-id323 . -11) (undo-tree-id324 . -11) (undo-tree-id325 . -11) (undo-tree-id326 . -11) (undo-tree-id327 . -11) (undo-tree-id328 . -11) (undo-tree-id329 . -11) (undo-tree-id330 . -11) (undo-tree-id331 . -11) (undo-tree-id332 . -11) (undo-tree-id333 . -11) (undo-tree-id334 . -11) (undo-tree-id335 . -11) (undo-tree-id336 . -11) (undo-tree-id337 . -11) (undo-tree-id338 . -11) (undo-tree-id339 . -11) (undo-tree-id340 . -11) (undo-tree-id341 . -11) (undo-tree-id342 . -11) (undo-tree-id343 . -13) 11983 (t 26078 56744 699959 287000)) nil (26078 56768 271633 26000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11989 . 11990) (11985 . 11989) (11980 . 11985) 11974) nil (26078 56768 271026 642000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((apply -33 12036 12457 undo--wrap-and-run-primitive-undo 12036 12457 ((12434 . 12437) (12393 . 12396) (12371 . 12374) (12300 . 12303) (12259 . 12262) (12211 . 12214) (12170 . 12173) (12121 . 12124) (12102 . 12105) (12054 . 12057) (12040 . 12043) 12411)) (t 26078 56768 276625 374000)) nil (26078 57116 135536 706000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 11866) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1)) nil (26078 57116 135535 408000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11973 . 11977) (#("     " 0 5 (fontified t)) . 11973) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (undo-tree-id917 . -4) (undo-tree-id918 . -4) (undo-tree-id919 . -4) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (undo-tree-id922 . -4) (undo-tree-id923 . -4) (undo-tree-id924 . -4) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) 11977) nil (26078 57116 135514 226000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11868 . 11874) (#("       " 0 7 (fontified t)) . 11868) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) 11872) nil (26078 57116 135426 161000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((11928 . 11934) (#("       " 0 7 (fontified t)) . 11928) (undo-tree-id578 . -6) (undo-tree-id579 . -6) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -4) (undo-tree-id621 . -4) (undo-tree-id622 . -4) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -4) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -4) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -4) (undo-tree-id637 . -6) (undo-tree-id638 . -6) (undo-tree-id639 . -6) (undo-tree-id640 . -6) (undo-tree-id641 . -6) (undo-tree-id642 . -6) (undo-tree-id643 . -6) (undo-tree-id644 . -6) (undo-tree-id645 . -6) (undo-tree-id646 . -6) (undo-tree-id647 . -6) (undo-tree-id648 . -6) (undo-tree-id649 . -6) (undo-tree-id650 . -6) (undo-tree-id651 . -6) (undo-tree-id652 . -6) (undo-tree-id653 . -6) (undo-tree-id654 . -6) (undo-tree-id655 . -6) (undo-tree-id656 . -6) (undo-tree-id657 . -6) (undo-tree-id658 . -6) (undo-tree-id659 . -6) (undo-tree-id660 . -6) (undo-tree-id661 . -6) (undo-tree-id662 . -6) (undo-tree-id663 . -6) (undo-tree-id664 . -6) (undo-tree-id665 . -6) (undo-tree-id666 . -6) (undo-tree-id667 . -6) (undo-tree-id668 . -6) (undo-tree-id669 . -6) (undo-tree-id670 . -6) (undo-tree-id671 . -6) (undo-tree-id672 . -6) (undo-tree-id673 . -6) (undo-tree-id674 . -6) (undo-tree-id675 . -6) (undo-tree-id676 . -6) (undo-tree-id677 . -6) (undo-tree-id678 . -6) (undo-tree-id679 . -6) (undo-tree-id680 . -6) (undo-tree-id681 . -6) (undo-tree-id682 . -6) (undo-tree-id683 . -6) (undo-tree-id684 . -6) (undo-tree-id685 . -6) (undo-tree-id686 . -6) (undo-tree-id687 . -6) (undo-tree-id688 . -6) (undo-tree-id689 . -6) (undo-tree-id690 . -6) (undo-tree-id691 . -6) (undo-tree-id692 . -6) (undo-tree-id693 . -6) (undo-tree-id694 . -6) (undo-tree-id695 . -6) (undo-tree-id696 . -6) (undo-tree-id697 . -6) (undo-tree-id698 . -6) (undo-tree-id699 . -6) (undo-tree-id700 . -6) (undo-tree-id701 . -6) (undo-tree-id702 . -6) (undo-tree-id703 . -6) (undo-tree-id704 . -6) (undo-tree-id705 . -6) (undo-tree-id706 . -6) (undo-tree-id707 . -6) (undo-tree-id708 . -6) (undo-tree-id709 . -6) (undo-tree-id710 . -6) (undo-tree-id711 . -6) (undo-tree-id712 . -6) (undo-tree-id713 . -6) (undo-tree-id714 . -6) (undo-tree-id715 . -6) (undo-tree-id716 . -6) (undo-tree-id717 . -6) (undo-tree-id718 . -6) (undo-tree-id719 . -6) (undo-tree-id720 . -6) (undo-tree-id721 . -6) (undo-tree-id722 . -6) 11934) nil (26078 57116 139299 519000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((12000 . 12001) (11997 . 11998) (11996 . 11998) (11995 . 11996) (#("r" 0 1 (fontified t)) . -11995) (undo-tree-id965 . -1) (undo-tree-id966 . -1) 11996 (11984 . 11996) (11983 . 11985) (11975 . 11983) (11968 . 11975)) nil (26078 57183 327919 932000) 0 (:visualizer [5 0 1 #<marker in no buffer>])] [nil nil ((11928 . 11935) (#("      " 0 6 (fontified t)) . 11928) (undo-tree-id344 . -6) (undo-tree-id345 . -6) (undo-tree-id346 . -6) (undo-tree-id347 . -6) (undo-tree-id348 . -6) (undo-tree-id349 . -6) (undo-tree-id350 . -6) (undo-tree-id351 . -6) (undo-tree-id352 . -6) (undo-tree-id353 . -6) (undo-tree-id354 . -6) (undo-tree-id355 . -6) (undo-tree-id356 . -6) (undo-tree-id357 . -6) (undo-tree-id358 . -6) (undo-tree-id359 . -6) (undo-tree-id360 . -6) (undo-tree-id361 . -6) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) (undo-tree-id365 . -6) (undo-tree-id366 . -6) (undo-tree-id367 . -6) (undo-tree-id368 . -6) (undo-tree-id369 . -6) (undo-tree-id370 . -6) (undo-tree-id371 . -6) (undo-tree-id372 . -6) (undo-tree-id373 . -6) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -6) (undo-tree-id379 . -6) (undo-tree-id380 . -6) (undo-tree-id381 . -6) (undo-tree-id382 . -6) (undo-tree-id383 . -6) (undo-tree-id384 . -6) (undo-tree-id385 . -6) (undo-tree-id386 . -6) (undo-tree-id387 . -6) (undo-tree-id388 . -6) (undo-tree-id389 . -6) (undo-tree-id390 . -6) (undo-tree-id391 . -6) (undo-tree-id392 . -6) (undo-tree-id393 . -6) (undo-tree-id394 . -6) (undo-tree-id395 . -6) (undo-tree-id396 . -6) (undo-tree-id397 . -6) (undo-tree-id398 . -6) (undo-tree-id399 . -6) (undo-tree-id400 . -6) (undo-tree-id401 . -6) (undo-tree-id402 . -6) (undo-tree-id403 . -6) (undo-tree-id404 . -6) (undo-tree-id405 . -6) (undo-tree-id406 . -6) (undo-tree-id407 . -6) (undo-tree-id408 . -6) (undo-tree-id409 . -6) (undo-tree-id410 . -6) (undo-tree-id411 . -6) (undo-tree-id412 . -6) (undo-tree-id413 . -6) (undo-tree-id414 . -6) (undo-tree-id415 . -6) (undo-tree-id416 . -6) (undo-tree-id417 . -6) (undo-tree-id418 . -6) (undo-tree-id419 . -6) (undo-tree-id420 . -6) (undo-tree-id421 . -6) (undo-tree-id422 . -6) (undo-tree-id423 . -6) (undo-tree-id424 . -6) (undo-tree-id425 . -6) (undo-tree-id426 . -6) (undo-tree-id427 . -6) (undo-tree-id428 . -6) (undo-tree-id429 . -6) (undo-tree-id430 . -6) (undo-tree-id431 . -6) (undo-tree-id432 . -6) (undo-tree-id433 . -6) (undo-tree-id434 . -6) (undo-tree-id435 . -6) (undo-tree-id436 . -6) (undo-tree-id437 . -6) (undo-tree-id438 . -6) (undo-tree-id439 . -6) (undo-tree-id440 . -6) (undo-tree-id441 . -6) (undo-tree-id442 . -6) (undo-tree-id443 . -6) (undo-tree-id444 . -6) (undo-tree-id445 . -6) (undo-tree-id446 . -6) (undo-tree-id447 . -6) (undo-tree-id448 . -6) (undo-tree-id449 . -6) (undo-tree-id450 . -6) (undo-tree-id451 . -6) (undo-tree-id452 . -6) (undo-tree-id453 . -6) (undo-tree-id454 . -6) (undo-tree-id455 . -6) (undo-tree-id456 . -6) (undo-tree-id457 . -6) (undo-tree-id458 . -6) (undo-tree-id459 . -6) (undo-tree-id460 . -6) (undo-tree-id461 . -6) (undo-tree-id462 . -6) (undo-tree-id463 . -6) (undo-tree-id464 . -6) (undo-tree-id465 . -6) (undo-tree-id466 . -6) (undo-tree-id467 . -6) (undo-tree-id468 . -6) (undo-tree-id469 . -6) (undo-tree-id470 . -6) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -6) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -6) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -6) (undo-tree-id509 . -6) (undo-tree-id510 . -6) (undo-tree-id511 . -6) (undo-tree-id512 . -6) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6) (undo-tree-id516 . -6) (undo-tree-id517 . -6) (undo-tree-id518 . -6) (undo-tree-id519 . -6) (undo-tree-id520 . -6) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -6) (undo-tree-id524 . -6) (undo-tree-id525 . -6) (undo-tree-id526 . -6) (undo-tree-id527 . -6) (undo-tree-id528 . -6) (undo-tree-id529 . -6) (undo-tree-id530 . -6) (undo-tree-id531 . -6) (undo-tree-id532 . -6) (undo-tree-id533 . -6) (undo-tree-id534 . -6) (undo-tree-id535 . -6) (undo-tree-id536 . -6) (undo-tree-id537 . -6) (undo-tree-id538 . -6) (undo-tree-id539 . -6) (undo-tree-id540 . -6) (undo-tree-id541 . -6) (undo-tree-id542 . -6) (undo-tree-id543 . -6) (undo-tree-id544 . -6) (undo-tree-id545 . -6) (undo-tree-id546 . -6) (undo-tree-id547 . -6) (undo-tree-id548 . -6) (undo-tree-id549 . -6) (undo-tree-id550 . -6) (undo-tree-id551 . -6) (undo-tree-id552 . -6) (undo-tree-id553 . -6) (undo-tree-id554 . -6) (undo-tree-id555 . -6) (undo-tree-id556 . -6) (undo-tree-id557 . -6) (undo-tree-id558 . -6) (undo-tree-id559 . -6) (undo-tree-id560 . -6) (undo-tree-id561 . -6) (undo-tree-id562 . -6) (undo-tree-id563 . -6) (undo-tree-id564 . -6) (undo-tree-id565 . -6) (undo-tree-id566 . -6) (undo-tree-id567 . -6) (undo-tree-id568 . -6) (undo-tree-id569 . -6) (undo-tree-id570 . -6) (undo-tree-id571 . -6) (undo-tree-id572 . -6) (undo-tree-id573 . -6) (undo-tree-id574 . -6) (undo-tree-id575 . -6) (undo-tree-id576 . -6) (undo-tree-id577 . -6) 11934) ((11928 . 11934) (#("
      " 0 7 (fontified t)) . 11928) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -7) (undo-tree-id962 . -7) (undo-tree-id963 . -1) (undo-tree-id964 . -7)) (26078 57116 135065 744000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((12047 . 12048) (12045 . 12047) (12043 . 12045) (12041 . 12043) (12036 . 12041) (#("token" 0 5 (fontified nil)) . -12036) (12036 . 12041) (12034 . 12036) (12023 . 12034) (#("to" 0 2 (fontified nil)) . 12023) (12023 . 12025) (#("token_class" 0 11 (fontified nil)) . -12023) (12023 . 12034) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -12023) (undo-tree-id967 . -2) (undo-tree-id968 . -2) 12025 (12018 . 12025) (12013 . 12018) (#(" " 0 1 (fontified t)) . 12013) (undo-tree-id969 . -1) (undo-tree-id970 . -1) 12014 (12013 . 12014) (12012 . 12013) (12011 . 12012) (#("." 0 1 (fontified t)) . -12011) (undo-tree-id971 . -1) (undo-tree-id972 . -1) 12012 (12008 . 12012) (12001 . 12008) (t 26078 57183 339948 529000) 12000) nil (26078 57234 657278 854000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
nil
([nil nil ((12083 . 12084) (12081 . 12083) (12074 . 12081) (12071 . 12074) (#("." 0 1 (fontified t)) . -12071) (undo-tree-id973 . -1) (undo-tree-id974 . -1) 12072 (12065 . 12072) (#("t" 0 1 (fontified t)) . -12065) (undo-tree-id975 . -1) (undo-tree-id976 . -1) 12066 (#("o" 0 1 (fontified t)) . -12066) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (#("k" 0 1 (fontified t)) . -12067) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (#("-" 0 1 (fontified t)) . -12068) (undo-tree-id981 . -1) (undo-tree-id982 . -1) 12069 (12068 . 12069) (#("." 0 1 (fontified t)) . -12068) (undo-tree-id983 . -1) (undo-tree-id984 . -1) 12069 (12067 . 12069) (#("l" 0 1 (fontified t)) . -12067) (undo-tree-id985 . -1) (undo-tree-id986 . -1) 12068 (12064 . 12068) (12060 . 12064) (12059 . 12060) (12056 . 12059) (#("i" 0 1 (fontified t)) . -12056) (undo-tree-id987 . -1) (undo-tree-id988 . -1) 12057 (12055 . 12057) (12048 . 12055) (t 26078 57234 663280 600000) 12047) nil (26078 57311 886308 616000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("lll " 0 4 (fontified t face font-lock-string-face)) . 10473) (undo-tree-id989 . -3) (t 26078 57311 896612 46000)) nil (26078 57335 736444 39000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("s" 0 1 (fontified t)) . 12066) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (t 26078 57335 746611 463000)) nil (26078 57359 891233 946000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((apply -3 12088 12146 undo--wrap-and-run-primitive-undo 12088 12146 ((12092 . 12095) 12098)) (t 26078 57359 903277 533000)) nil (26078 57373 497486 834000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((5104 . 5108) (#("  " 0 2 (fontified t)) . 5104) 5110 (5093 . 5097) (#("  " 0 2 (fontified t)) . 5093) 5097 (5189 . 5194) (t 26078 57373 509943 869000) 5172) nil (26078 57628 464272 325000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((10490 . 10493) (#("a" 0 1 (fontified t face font-lock-string-face)) . -10490) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) 10491 (10486 . 10489) (#("a" 0 1 (fontified t face font-lock-string-face)) . -10486) (undo-tree-id1138 . -1) 10487 (t 26078 57628 473270 921000)) nil (26078 57710 25165 622000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((10486 . 10488) (#("qqq" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face)) . 10486) (undo-tree-id1143 . -2) (undo-tree-id1144 . -3) (undo-tree-id1145 . -3) (undo-tree-id1146 . -3) (undo-tree-id1147 . -3) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3) (undo-tree-id1150 . -3) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -3) (undo-tree-id1154 . -3) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (undo-tree-id1161 . -3) (undo-tree-id1162 . -3) (undo-tree-id1163 . -3) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -3) (undo-tree-id1167 . -3) (undo-tree-id1168 . -3) (undo-tree-id1169 . -3) (undo-tree-id1170 . -3) (undo-tree-id1171 . -3) (undo-tree-id1172 . -2) (undo-tree-id1173 . -2) (undo-tree-id1174 . -2) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -2) (undo-tree-id1178 . -2) (undo-tree-id1179 . -2) (undo-tree-id1180 . -2) (undo-tree-id1181 . -2) (undo-tree-id1182 . -2) (undo-tree-id1183 . -2) (undo-tree-id1184 . -2) (undo-tree-id1185 . -2) (undo-tree-id1186 . -2) (undo-tree-id1187 . -2) (undo-tree-id1188 . -2) (undo-tree-id1189 . -2) (undo-tree-id1190 . -2) (undo-tree-id1191 . -2) (undo-tree-id1192 . -2) (undo-tree-id1193 . -2) (undo-tree-id1194 . -2) (undo-tree-id1195 . -2) (undo-tree-id1196 . -2) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -2) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (t 26078 57710 39935 587000)) nil (26078 57805 965255 169000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((10490 . 10491) (10489 . 10490) (#("lll" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face)) . 10489) (undo-tree-id1139 . 3) (undo-tree-id1140 . -2) (undo-tree-id1141 . -3) (undo-tree-id1142 . -3)) nil (26078 57805 965073 374000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((5152 . 5153) (5149 . 5151) (5148 . 5150) (5139 . 5143) (#("_" 0 1 (fontified t)) . -5144) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) 5145 (5137 . 5145) (5135 . 5137) (5122 . 5135) (#("analysis_read" 0 13 (fontified nil)) . -5122) (5122 . 5135) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -5122) (undo-tree-id1232 . -2) (undo-tree-id1233 . -2) 5124 (5122 . 5124) (5104 . 5108) (#("  " 0 2 (fontified nil)) . 5104) (5119 . 5120) (5104 . 5106) (#("    " 0 4 (fontified nil)) . 5104) (5120 . 5121) (5108 . 5120) (#("a" 0 1 (fontified nil)) . 5108) (5108 . 5109) (#("analysis_mod" 0 12 (fontified nil)) . -5108) (5108 . 5120) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -5108) (undo-tree-id1234 . -2) (undo-tree-id1235 . -2) 5110 (5108 . 5110) (#("s" 0 1 (fontified t)) . -5108) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) 5109 (5108 . 5109) (5103 . 5108) (t 26078 57805 986599 896000) 5102) nil (26078 57929 840449 386000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 5333 . 5334) (#("
" 0 1 (fontified nil)) . -5379) (5329 . 5380) 5328 (t 26078 57929 886596 846000)) nil (26078 57967 878283 84000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 6653 . 6654) (#("
" 0 1 (fontified nil)) . -6699) (6649 . 6700) 6618) nil (26078 57967 878277 739000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 6357 . 6358) (#("
" 0 1 (fontified nil)) . -6403) (6353 . 6404) 6347 (t 26078 57967 886595 910000)) nil (26078 58099 617986 378000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((5108 . 5110) (5334 . 5336) (6706 . 6708) (6358 . 6360) (t 26078 58099 626592 660000)) nil (26078 58168 772625 84000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((apply 2 5104 5154 undo--wrap-and-run-primitive-undo 5104 5154 ((#("//" 0 1 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 1 2 (fontified t face font-lock-comment-delimiter-face c-in-sws t)) . -5108) 5156)) (t 26078 58168 783257 629000)) nil (26078 58761 129049 625000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((5860 . 5861) (5856 . 5858) (5854 . 5856) (5852 . 5854) (#("x" 0 1 (fontified t)) . -5852) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#("e" 0 1 (fontified t)) . -5853) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) 5854 (5851 . 5854) (#("u" 0 1 (fontified t)) . -5851) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) 5852 (5844 . 5852) (5843 . 5845) (5838 . 5843) (nil face font-lock-type-face 5837 . 5839) (nil fontified t 5837 . 5839) (5837 . 5839) (5833 . 5837) (#("r" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -5833) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (#("h" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -5834) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) 5835 (5827 . 5835) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -5827) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) 5828 (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -5828) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) 5829 (5826 . 5829) (5824 . 5826) (5811 . 5824) (#("analysis_read" 0 13 (fontified nil)) . -5811) (5811 . 5824) (5791 . 5797) (#("    " 0 4 (fontified nil)) . 5791) (5808 . 5809) (5791 . 5795) (#("      " 0 6 (fontified nil)) . 5791) (5809 . 5810) (5797 . 5809) (#("a" 0 1 (fontified nil)) . 5797) (5797 . 5798) (#("analysis_mod" 0 12 (fontified nil)) . -5797) (5797 . 5809) (#("an" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -5797) (undo-tree-id1252 . -2) (undo-tree-id1253 . -2) 5799 (5797 . 5799) (5790 . 5797) (t 26078 58761 136576 426000)) nil (26078 58942 962092 29000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 6687 . 6688) (#("
" 0 1 (fontified nil)) . -6752) (6681 . 6753) 6680 (t 26078 58942 983238 649000)) nil (26078 59008 605191 554000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 7117 . 7118) (#("
" 0 1 (fontified nil)) . -7182) (7111 . 7183) 7105) nil (26078 59008 605187 505000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 4292 . 4293) (#("
" 0 1 (fontified nil)) . -4354) (4290 . 4355) 4289 (t 26078 59008 613237 42000)) nil (26078 59345 172753 624000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((5868 . 5871) (#("y" 0 1 (fontified t)) . -5868) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) 5869 (5865 . 5869) (#("d" 0 1 (fontified t)) . -5865) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) 5866 (5861 . 5866) (5854 . 5861)) nil (26078 59345 172752 301000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("op_st[op_st.size(" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-5-face)) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-6-face))) . 5919) (undo-tree-id1270 . -16)) nil (26078 59345 172749 372000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 5887 . 5888) (nil fontified nil 5871 . 5888) (5871 . 5888) 5870) nil (26078 59345 172748 106000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((5941 . 5943) (5892 . 5893) (#("m" 0 1 (fontified t)) . -5892) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) 5893 (5892 . 5893) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -5940) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . 1) (undo-tree-id1262 . -1) (#("-" 0 1 (fontified t)) . -5941) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (#("1" 0 1 (fontified t)) . -5942) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -5943) (undo-tree-id1267 . -1) (undo-tree-id1268 . 1) (undo-tree-id1269 . -1) 5944 (5891 . 5892) (#("]" 0 1 (fontified nil)) . -5891) (5890 . 5892) (5889 . 5890) (5888 . 5889) (#(")" 0 1 (fontified nil)) . -5888) (5888 . 5889)) nil (26078 59345 172746 289000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 6771 . 6772) (#("
" 0 1 (fontified nil)) . -6856) (6765 . 6857) 6764) nil (26078 59345 172737 266000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("      analysis_mod::analysis_read::do_the_that(op_st[op_st.size()-1]);
" 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t) 6 17 (fontified t face font-lock-constant-face) 17 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 20 (fontified t) 20 32 (fontified t face font-lock-constant-face) 32 33 (fontified t face font-lock-constant-face) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-4-face)) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-5-face)) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t face (rainbow-delimiters-depth-6-face)) 64 65 (fontified t face (rainbow-delimiters-depth-6-face)) 65 66 (fontified t) 66 67 (fontified t) 67 68 (fontified t face (rainbow-delimiters-depth-5-face)) 68 69 (fontified t face (rainbow-delimiters-depth-4-face)) 69 70 (fontified t) 70 71 (fontified t)) . 6857) (undo-tree-id1254 . -70) (undo-tree-id1255 . -6) (undo-tree-id1256 . -6) 6863) nil (26078 59345 176850 957000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("
" 0 1 (fontified nil)) . -7306) (7215 . 7307) 7209) nil (26078 59355 112969 378000) 0 (:visualizer [4 0 1 #<marker in no buffer>])] [nil nil ((#("
" 0 1 (fontified nil)) . -7286) (7215 . 7287) 7209) ((#("
      analysis_mod::analysis_read::do_the_that(op_st[op_st.size()-1]);
" 0 1 (fontified t) 1 6 (fontified nil) 6 7 (rear-nonsticky t fontified nil) 7 18 (fontified nil face font-lock-constant-face) 18 19 (fontified nil face font-lock-constant-face) 19 20 (fontified nil) 20 21 (fontified nil) 21 33 (fontified nil face font-lock-constant-face) 33 34 (fontified nil face font-lock-constant-face) 34 35 (fontified nil) 35 36 (fontified nil) 36 37 (fontified nil) 37 38 (fontified nil) 38 39 (fontified nil) 39 40 (fontified nil) 40 41 (fontified nil) 41 42 (fontified nil) 42 43 (fontified nil) 43 44 (fontified nil) 44 45 (fontified nil) 45 46 (fontified nil) 46 47 (fontified nil) 47 48 (fontified nil face (rainbow-delimiters-depth-4-face)) 48 49 (fontified nil) 49 50 (fontified nil) 50 51 (fontified nil) 51 52 (fontified nil) 52 53 (fontified nil) 53 54 (fontified nil face (rainbow-delimiters-depth-5-face)) 54 55 (fontified nil) 55 56 (fontified nil) 56 57 (fontified nil) 57 58 (fontified nil) 58 59 (fontified nil) 59 60 (fontified nil) 60 61 (fontified nil) 61 62 (fontified nil) 62 63 (fontified nil) 63 64 (fontified nil) 64 65 (fontified nil face (rainbow-delimiters-depth-6-face)) 65 66 (fontified nil face (rainbow-delimiters-depth-6-face)) 66 67 (fontified nil) 67 68 (fontified nil) 68 69 (fontified nil face (rainbow-delimiters-depth-5-face)) 69 70 (fontified nil face (rainbow-delimiters-depth-4-face)) 70 71 (fontified nil) 71 72 (fontified nil)) . 7215) (undo-tree-id1275 . -1) (undo-tree-id1276 . -71) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (7286 . 7287)) (26078 59345 172725 871000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("      analysis_mod::analysis_read::do_the_that(op_st[op_st.size()-1]);
" 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t) 6 17 (fontified t face font-lock-constant-face) 17 18 (fontified t face font-lock-constant-face) 18 19 (fontified t) 19 20 (fontified t) 20 32 (fontified t face font-lock-constant-face) 32 33 (fontified t face font-lock-constant-face) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-4-face)) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t face (rainbow-delimiters-depth-5-face)) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t face (rainbow-delimiters-depth-6-face)) 64 65 (fontified t face (rainbow-delimiters-depth-6-face)) 65 66 (fontified t) 66 67 (fontified t) 67 68 (fontified t face (rainbow-delimiters-depth-5-face)) 68 69 (fontified t face (rainbow-delimiters-depth-4-face)) 69 70 (fontified t) 70 71 (fontified t)) . 7307) (undo-tree-id1279 . -70) (undo-tree-id1280 . -6) (undo-tree-id1281 . -6) (undo-tree-id1282 . -71) (undo-tree-id1283 . -71) (undo-tree-id1284 . -6) (undo-tree-id1285 . -6) (undo-tree-id1286 . -6) (undo-tree-id1287 . -6) (undo-tree-id1288 . -6) (undo-tree-id1289 . -6) (undo-tree-id1290 . -6) (undo-tree-id1291 . -6) (undo-tree-id1292 . -6) (undo-tree-id1293 . -6) (undo-tree-id1294 . -6) (undo-tree-id1295 . -6) (undo-tree-id1296 . -6) (undo-tree-id1297 . -6) (undo-tree-id1298 . -6) (undo-tree-id1299 . -6) (undo-tree-id1300 . -6) (undo-tree-id1301 . -6) (undo-tree-id1302 . -6) (undo-tree-id1303 . -6) (undo-tree-id1304 . -6) (undo-tree-id1305 . -6) (undo-tree-id1306 . -6) (undo-tree-id1307 . -6) (undo-tree-id1308 . -6) (undo-tree-id1309 . -6) (undo-tree-id1310 . -6) (undo-tree-id1311 . -6) (undo-tree-id1312 . -6) (undo-tree-id1313 . -6) (undo-tree-id1314 . -6) (undo-tree-id1315 . -6) (undo-tree-id1316 . -6) (undo-tree-id1317 . -6) (undo-tree-id1318 . -6) (undo-tree-id1319 . -6) (undo-tree-id1320 . -6) (undo-tree-id1321 . -6) (undo-tree-id1322 . -6) (undo-tree-id1323 . -6) (undo-tree-id1324 . -6) (undo-tree-id1325 . -6) (undo-tree-id1326 . -6) (undo-tree-id1327 . -6) (undo-tree-id1328 . -6) (undo-tree-id1329 . -6) (undo-tree-id1330 . -6) (undo-tree-id1331 . -6) (undo-tree-id1332 . -6) (undo-tree-id1333 . -6) (undo-tree-id1334 . -6) (undo-tree-id1335 . -6) (undo-tree-id1336 . -6) (undo-tree-id1337 . -6) (undo-tree-id1338 . -6) (undo-tree-id1339 . -6) (undo-tree-id1340 . -6) (undo-tree-id1341 . -6) (undo-tree-id1342 . -6) (undo-tree-id1343 . -6) (undo-tree-id1344 . -6) (undo-tree-id1345 . -6) (undo-tree-id1346 . -6) (undo-tree-id1347 . -6) (undo-tree-id1348 . -6) (undo-tree-id1349 . -6) (undo-tree-id1350 . -6) (undo-tree-id1351 . -6) (undo-tree-id1352 . -6) (undo-tree-id1353 . -6) (undo-tree-id1354 . -6) (undo-tree-id1355 . -6) (undo-tree-id1356 . -6) (undo-tree-id1357 . -6) (undo-tree-id1358 . -6) (undo-tree-id1359 . -6) (undo-tree-id1360 . -6) (undo-tree-id1361 . -6) (undo-tree-id1362 . -6) (undo-tree-id1363 . -6) (undo-tree-id1364 . -6) (undo-tree-id1365 . -6) (undo-tree-id1366 . -6) (undo-tree-id1367 . -6) (undo-tree-id1368 . -6) (undo-tree-id1369 . -6) (undo-tree-id1370 . -6) (undo-tree-id1371 . -6) (undo-tree-id1372 . -6) (undo-tree-id1373 . -6) (undo-tree-id1374 . -6) (undo-tree-id1375 . -6) (undo-tree-id1376 . -6) (undo-tree-id1377 . -6) (undo-tree-id1378 . -6) (undo-tree-id1379 . -6) (undo-tree-id1380 . -6) (undo-tree-id1381 . -6) (undo-tree-id1382 . -6) (undo-tree-id1383 . -6) (undo-tree-id1384 . -6) (undo-tree-id1385 . -6) (undo-tree-id1386 . -6) (undo-tree-id1387 . -6) (undo-tree-id1388 . -6) (undo-tree-id1389 . -6) (undo-tree-id1390 . -6) (undo-tree-id1391 . -6) (undo-tree-id1392 . -6) (undo-tree-id1393 . -6) (undo-tree-id1394 . -6) (undo-tree-id1395 . -6) (undo-tree-id1396 . -6) (undo-tree-id1397 . -6) (undo-tree-id1398 . -6) (undo-tree-id1399 . -6) (undo-tree-id1400 . -6) (undo-tree-id1401 . -6) (undo-tree-id1402 . -6) (undo-tree-id1403 . -6) (undo-tree-id1404 . -6) (undo-tree-id1405 . -6) (undo-tree-id1406 . -6) (undo-tree-id1407 . -6) (undo-tree-id1408 . -6) (undo-tree-id1409 . -6) (undo-tree-id1410 . -6) (undo-tree-id1411 . -6) (undo-tree-id1412 . -6) (undo-tree-id1413 . -6) (undo-tree-id1414 . -6) (undo-tree-id1415 . -6) (undo-tree-id1416 . -6) (undo-tree-id1417 . -6) (undo-tree-id1418 . -6) (undo-tree-id1419 . -6) (undo-tree-id1420 . -6) (undo-tree-id1421 . -6) (undo-tree-id1422 . -6) (undo-tree-id1423 . -6) (undo-tree-id1424 . -6) (undo-tree-id1425 . -6) (undo-tree-id1426 . -6) (undo-tree-id1427 . -6) (undo-tree-id1428 . -71) 7313) nil (26078 59748 545988 14000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
nil
([nil nil ((11036 . 11038) (11036 . 11037) (11039 . 11040) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -11039) (11039 . 11040) (#(")" 0 1 (fontified nil)) . -11038) (11038 . 11039) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -11038) (11038 . 11039) (11035 . 11036) (11032 . 11035)) nil (26078 59760 77026 596000) 0 (:visualizer [2 0 2 #<marker in no buffer>])] [nil nil ((11039 . 11040) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -11039) (11039 . 11040) (#(")" 0 1 (fontified nil)) . -11038) (11038 . 11039) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -11038) (11038 . 11039) (11035 . 11036) (11032 . 11035) (t 26078 59355 133228 536000)) ((#("qqq" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face)) . 11032) (#("(" 0 1 (fontified nil face font-lock-string-face)) . 11035) (#(")" 0 1 (fontified nil face font-lock-string-face)) . 11038) (11038 . 11039) (#(")" 0 1 (fontified nil)) . 11038) (11038 . 11039) (#(")" 0 1 (fontified nil face font-lock-string-face)) . 11039) (11039 . 11040) (#(")" 0 1 (fontified t face font-lock-string-face)) . 11039) (t 26078 59728 596552 722000)) (26078 59748 347491 647000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply -3 7255 7334 undo--wrap-and-run-primitive-undo 7255 7334 ((7261 . 7264) 7307)) (t 26078 59760 89885 285000)) nil (26078 59808 784729 583000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((10999 . 11001) (10999 . 11000) (#("  static std::string lll=\"lll(10,qqq(12)) . \";
" 0 2 (fontified t) 2 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-constant-face) 12 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 20 (fontified t c-type c-decl-id-start face font-lock-type-face) 20 21 (fontified t) 21 24 (fontified t face font-lock-variable-name-face) 24 25 (fontified t) 25 26 (fontified t face font-lock-string-face) 26 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face font-lock-string-face) 34 35 (fontified t face font-lock-string-face) 35 36 (fontified t face font-lock-string-face) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 45 (fontified t face font-lock-string-face) 45 47 (fontified t)) . 10999) (undo-tree-id1429 . 6) (undo-tree-id1430 . -46) (undo-tree-id1431 . -33) (undo-tree-id1432 . -33) (undo-tree-id1433 . -47) (undo-tree-id1434 . -47) (undo-tree-id1435 . 10) (undo-tree-id1436 . -33) (undo-tree-id1437 . -33) (undo-tree-id1438 . -33) (undo-tree-id1439 . -33) (undo-tree-id1440 . -33) (undo-tree-id1441 . -33) (undo-tree-id1442 . -33) (undo-tree-id1443 . -33) (undo-tree-id1444 . -33) (undo-tree-id1445 . -33) (undo-tree-id1446 . -33) (undo-tree-id1447 . -33) (undo-tree-id1448 . -33) (undo-tree-id1449 . -33) (undo-tree-id1450 . -33) (undo-tree-id1451 . -33) (undo-tree-id1452 . -33) (undo-tree-id1453 . -33) (undo-tree-id1454 . -33) (undo-tree-id1455 . -33) (undo-tree-id1456 . -33) (undo-tree-id1457 . -33) (undo-tree-id1458 . -33) (undo-tree-id1459 . -33) (undo-tree-id1460 . -33) (undo-tree-id1461 . -33) (undo-tree-id1462 . -33) (undo-tree-id1463 . -33) (undo-tree-id1464 . -33) (undo-tree-id1465 . -33) (undo-tree-id1466 . -33) (undo-tree-id1467 . -33) (undo-tree-id1468 . -33) (undo-tree-id1469 . -33) (undo-tree-id1470 . -33) (undo-tree-id1471 . -33) (undo-tree-id1472 . -33) (undo-tree-id1473 . -33) (undo-tree-id1474 . -33) (undo-tree-id1475 . -33) (undo-tree-id1476 . -33) (undo-tree-id1477 . -33) (undo-tree-id1478 . -33) (undo-tree-id1479 . -33) (undo-tree-id1480 . -33) (undo-tree-id1481 . -33) (undo-tree-id1482 . -33) (undo-tree-id1483 . -33) (undo-tree-id1484 . -33) (undo-tree-id1485 . -33) (undo-tree-id1486 . -33) (undo-tree-id1487 . -33) (undo-tree-id1488 . -33) (undo-tree-id1489 . -33) (undo-tree-id1490 . -33) (undo-tree-id1491 . -33) (undo-tree-id1492 . -33) (undo-tree-id1493 . -33) (undo-tree-id1494 . -33) (undo-tree-id1495 . -47) (undo-tree-id1496 . -47) 11032 (t 26078 59728 596552 722000)) ((10999 . 11046) (#("
" 0 1 (fontified nil)) . 10999) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (#("  " 0 2 (fontified t)) . 10999) (undo-tree-id1503 . -2) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -2) (undo-tree-id1509 . -2) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -2) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -2) (undo-tree-id1525 . -2) (undo-tree-id1526 . -2) (undo-tree-id1527 . -2) (undo-tree-id1528 . -2) (undo-tree-id1529 . -2) (undo-tree-id1530 . -2) (undo-tree-id1531 . -2) (undo-tree-id1532 . -2) (undo-tree-id1533 . -2) (undo-tree-id1534 . -2) (undo-tree-id1535 . -2) (undo-tree-id1536 . -2) (undo-tree-id1537 . -2) (undo-tree-id1538 . -2) (undo-tree-id1539 . -2) (undo-tree-id1540 . -2) (undo-tree-id1541 . -2) (undo-tree-id1542 . -2) (undo-tree-id1543 . -2) (undo-tree-id1544 . -2) (undo-tree-id1545 . -2) (undo-tree-id1546 . -2) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2) (undo-tree-id1549 . -2) (undo-tree-id1550 . -2) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) (undo-tree-id1553 . -2) (undo-tree-id1554 . -2) (undo-tree-id1555 . -2) (undo-tree-id1556 . -2) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) (undo-tree-id1563 . -2) (undo-tree-id1564 . -2) (undo-tree-id1565 . -2) (undo-tree-id1566 . -2) (undo-tree-id1567 . -2) (undo-tree-id1568 . -2) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -2) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -2) (undo-tree-id1588 . -2) (undo-tree-id1589 . -2) (undo-tree-id1590 . -2) (undo-tree-id1591 . -2) (undo-tree-id1592 . -2)) (26078 59747 938308 219000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply -3 6805 6884 undo--wrap-and-run-primitive-undo 6805 6884 ((6811 . 6814) 6857))) nil (26078 59808 784728 851000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((11001 . 11002)) ((#("w" 0 1 (fontified t)) . 11001) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1)) (26078 59747 935979 511000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply -3 5894 5973 undo--wrap-and-run-primitive-undo 5894 5973 ((5900 . 5903) 5946))) nil (26078 59808 784727 749000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
nil
([nil nil ((apply -3 5168 5282 undo--wrap-and-run-primitive-undo 5168 5282 ((5172 . 5175) 5218))) nil (26078 59808 784722 274000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((11054 . 11056) (#("0" 0 1 (fontified t face font-lock-string-face)) . -11054) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) 11055 (#("1" 0 1 (fontified t face font-lock-string-face)) . -11054) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) 11055 (#("l" 0 1 (fontified t face font-lock-string-face)) . -11053) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -11054) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -11055) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) 11056 (#("," 0 1 (fontified t face font-lock-string-face)) . -11059) (undo-tree-id2090 . 1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (#("1" 0 1 (fontified t face font-lock-string-face)) . -11060) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (#("2" 0 1 (fontified t face font-lock-string-face)) . -11061) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) 11062 (9682 . 9683) (#("2" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) 9683 (9682 . 9683) (#("3" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) 9683 (9682 . 9683) (#("1" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) 9683 (9681 . 9683) (#("F" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9681) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) 9682 (#(" " 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) 9683 (9681 . 9683) (#("F" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9681) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) 9682 (9678 . 9682) (#("F" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9678) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9679) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9680) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9681) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9682) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9683) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (#("1" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9684) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) 9685 (9683 . 9685) (#("T" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9683) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) 9684 (9683 . 9684) (#("F" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9683) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) 9684 (9683 . 9684) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9683) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (#("O" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9684) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (#("P" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9685) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9686) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (#("F" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9687) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) 9688 (9683 . 9688) (#("F" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9683) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9684) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) 9685 (#("O" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9685) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (#("P" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9686) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) 9687 (#(" " 0 1 (fontified t face font-lock-comment-face)) . -9687) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) 9688 (9681 . 9688) (#("2" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9681) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) 9682 (9678 . 9682) (9637 . 9639) (#("	   " 0 4 (fontified nil)) . 9637) (9678 . 9680) (9674 . 9678) (t 26078 59808 806550 762000)) nil (26078 60984 161927 983000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((#("(" 0 1 (fontified t face font-lock-string-face)) . -11053) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) 11054 (#(")" 0 1 (fontified t face font-lock-string-face)) . -11056) (undo-tree-id2179 . 1) (undo-tree-id2180 . -1) (undo-tree-id2181 . 1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . 1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) 11057 (t 26078 60984 206521 932000)) nil (26078 61001 229807 448000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((11057 . 11058) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -11057) (11057 . 11058) (#(")" 0 1 (fontified nil)) . -11056) (11056 . 11057) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -11056) (11056 . 11057) (11053 . 11054) (t 26078 61001 243188 178000)) nil (26078 61012 782137 583000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9687) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9688) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (#("3" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9689) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9690) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9691) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (#("1" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9692) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9693) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) 9694 (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9694) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (#("3" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9695) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) 9696 (9694 . 9696) (9691 . 9694) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9691) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9692) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) 9693 (9692 . 9693) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9692) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (#("L" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9693) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (#("k" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9694) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9695) (undo-tree-id2242 . -1) 9696 (9691 . 9696) (#("L" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9691) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (#("k" 0 1 (fontified t face font-lock-comment-face)) . -9692) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -9693) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) 9694 (9691 . 9694) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9691) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (#("1" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9692) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) 9693 (9691 . 9693) (#("D" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9691) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) 9692 (#(" " 0 1 (fontified t face font-lock-comment-face)) . -9692) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) 9693 (9692 . 9693) (9689 . 9692) (#("2" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9689) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) 9690 (9689 . 9690) (#("3" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9689) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9690) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) 9691 (9688 . 9691) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9688) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9689) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9690) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) 9691 (#("I" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9691) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (#("D" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9692) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) 9693 (9689 . 9693) (#("3" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9689) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) 9690 (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9690) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (#("L" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9691) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (#("k" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9692) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9693) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) 9694 (9691 . 9694) (9689 . 9691) (#("1" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9689) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9690) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) 9691 (#("O" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9691) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (#("P" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9692) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9693) (undo-tree-id2291 . -1) 9694 (9690 . 9694) (#("6" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9690) (undo-tree-id2292 . -1) 9691 (9690 . 9691) (9685 . 9690) (9679 . 9680) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9681) (undo-tree-id2293 . -1) 9682 (9683 . 9685) (9678 . 9683) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9678) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9679) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) 9680 (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9680) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9681) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (#("3" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) 9683 (9682 . 9683) (#("2" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) 9683 (9682 . 9683) (#("3" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) 9683 (9681 . 9683) (#("Y" 0 1 (fontified t face font-lock-comment-face)) . -9681) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) 9682 (9681 . 9682) (#("5" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9681) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (#("3" 0 1 (fontified t face font-lock-comment-face)) . -9682) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) 9683 (9681 . 9683) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9681) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (#("1" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) 9683 (9682 . 9683) (9681 . 9682) (#("F" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9681) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) 9682 (9679 . 9682) (9678 . 9679) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9678) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9679) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9680) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9681) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (#("3" 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9682) (undo-tree-id2367 . -1) 9683 (t 26078 61012 899854 559000)) nil (26078 62426 801724 767000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((#("12" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 11058) (undo-tree-id2213 . -1)) nil (26078 62426 801507 474000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((10234 . 10237) (10233 . 10234) (9535 . 9538) (9533 . 9535) (9531 . 9533) (9530 . 9531) (9527 . 9530) (9525 . 9527) (9522 . 9525) (9517 . 9522) (9515 . 9517) (9513 . 9515) (9510 . 9513) (9508 . 9510) (9504 . 9508) (9501 . 9504) (9499 . 9501) (9494 . 9499) (9491 . 9494) (9489 . 9491) (9484 . 9489) (#("1" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9484) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) 9485 (#(" " 0 1 (fontified t face font-lock-comment-face c-in-sws t)) . -9485) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) 9486 (9480 . 9486) (9478 . 9480) (9476 . 9478) (9470 . 9476) (9468 . 9470) (9467 . 9468) (9464 . 9467) (9462 . 9464) (9460 . 9462) (9458 . 9460) (9454 . 9458) (t 26078 62426 819819 895000)) nil (26078 62910 397065 247000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((11146 . 11148) (t 26078 62910 406474 731000)) nil (26078 63134 986516 932000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((11145 . 11148) (t 26078 63135 9802 542000)) nil (26078 63233 219057 561000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 9976 . 9977) (9896 . 9977) (t 26078 63147 753135 562000)) ((#("//E //E2 T//E2 T1 OP//E2 T3 Lkh//E2 T2 ID//E2 T3 D//E2 E1//E2 T Lkh//E2 Rkh//E2 
" 0 1 (c-in-sws t c-is-sws t fontified nil face font-lock-comment-delimiter-face) 1 2 (c-in-sws t fontified nil face font-lock-comment-delimiter-face) 2 62 (c-in-sws t fontified nil face font-lock-comment-face) 62 63 (fontified nil face font-lock-comment-face c-in-sws t) 63 64 (fontified nil face font-lock-comment-face c-in-sws t) 64 65 (fontified nil face font-lock-comment-face c-in-sws t) 65 66 (fontified nil face font-lock-comment-face c-in-sws t) 66 67 (fontified nil face font-lock-comment-face c-in-sws t) 67 68 (fontified nil face font-lock-comment-face c-in-sws t) 68 69 (fontified nil face font-lock-comment-face c-in-sws t) 69 70 (fontified nil face font-lock-comment-face c-in-sws t) 70 71 (fontified nil face font-lock-comment-face c-in-sws t) 71 72 (fontified nil face font-lock-comment-face c-in-sws t) 72 73 (fontified nil face font-lock-comment-face c-in-sws t) 73 74 (fontified nil face font-lock-comment-face c-in-sws t) 74 75 (fontified nil face font-lock-comment-face c-in-sws t) 75 76 (fontified nil face font-lock-comment-face c-in-sws t) 76 77 (fontified nil face font-lock-comment-face c-in-sws t) 77 78 (fontified nil face font-lock-comment-face c-in-sws t) 78 79 (fontified nil face font-lock-comment-face c-in-sws t) 79 80 (fontified nil face font-lock-comment-face c-in-sws t) 80 81 (fontified nil rear-nonsticky nil face font-lock-comment-face c-in-sws t)) . 9896) (undo-tree-id2440 . 81) (undo-tree-id2441 . -80) (undo-tree-id2442 . 81) (undo-tree-id2443 . -80) (undo-tree-id2444 . -81) (undo-tree-id2445 . -81) (nil rear-nonsticky t 9976 . 9977)) (26078 63236 857128 511000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((9896 . 9901)) ((#("     " 0 1 (fontified t c-in-sws t c-is-sws t) 1 2 (fontified t c-in-sws t c-is-sws t) 2 3 (fontified t c-in-sws t c-is-sws t) 3 4 (fontified t c-in-sws t c-is-sws t) 4 5 (fontified t c-in-sws t c-is-sws t)) . 9896)) (26078 63239 484812 945000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((#("T Lkh//E2 Rkh//E2 " 0 1 (fontified t c-in-sws t face font-lock-comment-face) 1 2 (fontified t c-in-sws t face font-lock-comment-face) 2 3 (fontified t c-in-sws t face font-lock-comment-face) 3 4 (fontified t c-in-sws t face font-lock-comment-face) 4 5 (fontified t c-in-sws t face font-lock-comment-face) 5 6 (fontified t c-in-sws t face font-lock-comment-face) 6 7 (fontified t c-in-sws t face font-lock-comment-face) 7 8 (fontified t c-in-sws t face font-lock-comment-face) 8 9 (fontified t c-in-sws t face font-lock-comment-face) 9 10 (fontified t c-in-sws t face font-lock-comment-face) 10 11 (fontified t c-in-sws t face font-lock-comment-face) 11 12 (fontified t c-in-sws t face font-lock-comment-face) 12 13 (fontified t c-in-sws t face font-lock-comment-face) 13 14 (fontified t c-in-sws t face font-lock-comment-face) 14 15 (fontified t c-in-sws t face font-lock-comment-face) 15 16 (fontified t c-in-sws t face font-lock-comment-face) 16 17 (fontified t c-in-sws t face font-lock-comment-face) 17 18 (fontified t c-in-sws t face font-lock-comment-face)) . 9963) (undo-tree-id2446 . -18) (undo-tree-id2447 . -18)) ((9963 . 9981)) (26078 63240 345007 27000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((10080 . 10081) (10077 . 10078) (10076 . 10078) (10075 . 10076) (10071 . 10075) (10069 . 10071) (nil fontified nil 10051 . 10069) (nil face (rainbow-delimiters-depth-5-face) 10051 . 10069) (10051 . 10069) (#("to" 0 2 (fontified nil)) . 10051) (nil fontified nil 10051 . 10053) (nil face (rainbow-delimiters-depth-5-face) 10051 . 10053) (10051 . 10053) (#("token_class::token" 0 18 (fontified nil)) . -10051) (nil fontified nil 10051 . 10069) (nil face (rainbow-delimiters-depth-5-face) 10051 . 10069) (10051 . 10069) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -10051) (undo-tree-id2448 . -2) (undo-tree-id2449 . -2) 10053 (10051 . 10053) (10050 . 10052) (10046 . 10050) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9956) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (#("1" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9957) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9958) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) 9959 (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9959) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9960) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9961) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9962) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) 9963) nil (26078 63306 815153 4000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((10082 . 10085) (#("	   " 0 4 (fontified t)) . 10082) 10116 (t 26078 63306 863131 677000)) nil (26078 64466 812829 8000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((10203 . 10205) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 10203) (10203 . 10204) (#("," 0 1 (fontified t)) . 10203) (9857 . 9859) (#("h" 0 1 (fontified nil)) . 9857) (9855 . 9858) (9964 . 9996) (9959 . 9961) (9959 . 9960) (9956 . 9961)) ((#("F//T1" 0 1 (fontified nil c-in-sws t face font-lock-comment-face) 1 2 (fontified nil c-in-sws t face font-lock-comment-face) 2 3 (fontified nil face font-lock-comment-face) 3 4 (fontified nil face font-lock-comment-face) 4 5 (fontified nil face font-lock-comment-face)) . 9956) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 9959) (#("E2" 0 1 (fontified nil c-in-sws t face font-lock-comment-face) 1 2 (fontified nil c-in-sws t face font-lock-comment-face)) . 9959) (#(" OP//E2 T3 Lkh//E2 T2 ID//E2 Rkh" 0 1 (fontified t c-in-sws t face font-lock-comment-face) 1 2 (fontified t c-in-sws t face font-lock-comment-face) 2 3 (fontified t c-in-sws t face font-lock-comment-face) 3 4 (fontified t c-in-sws t face font-lock-comment-face) 4 5 (fontified t c-in-sws t face font-lock-comment-face) 5 6 (fontified t c-in-sws t face font-lock-comment-face) 6 7 (fontified t c-in-sws t face font-lock-comment-face) 7 8 (fontified t c-in-sws t face font-lock-comment-face) 8 9 (fontified t c-in-sws t face font-lock-comment-face) 9 10 (fontified t c-in-sws t face font-lock-comment-face) 10 11 (fontified t c-in-sws t face font-lock-comment-face) 11 12 (fontified t c-in-sws t face font-lock-comment-face) 12 13 (fontified t c-in-sws t face font-lock-comment-face) 13 14 (fontified t c-in-sws t face font-lock-comment-face) 14 15 (fontified t c-in-sws t face font-lock-comment-face) 15 16 (fontified t c-in-sws t face font-lock-comment-face) 16 17 (fontified t c-in-sws t face font-lock-comment-face) 17 18 (fontified t c-in-sws t face font-lock-comment-face) 18 19 (fontified t c-in-sws t face font-lock-comment-face) 19 20 (fontified t c-in-sws t face font-lock-comment-face) 20 21 (fontified t c-in-sws t face font-lock-comment-face) 21 22 (fontified t c-in-sws t face font-lock-comment-face) 22 23 (fontified t c-in-sws t face font-lock-comment-face) 23 24 (fontified t c-in-sws t face font-lock-comment-face) 24 25 (fontified t c-in-sws t face font-lock-comment-face) 25 26 (fontified t c-in-sws t face font-lock-comment-face) 26 27 (fontified t c-in-sws t face font-lock-comment-face) 27 28 (fontified t c-in-sws t face font-lock-comment-face) 28 29 (fontified t c-in-sws t face font-lock-comment-face) 29 30 (fontified t c-in-sws t face font-lock-comment-face) 30 31 (fontified t c-in-sws t face font-lock-comment-face) 31 32 (fontified t c-in-sws t face font-lock-comment-face)) . 9964) (#(",Rh" 0 1 (fontified nil c-type c-not-decl) 1 2 (fontified nil) 2 3 (fontified nil)) . 9855) (9857 . 9858) (#("kh" 0 1 (fontified t) 1 2 (fontified t)) . 9857) (10203 . 10204) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-5-face))) . 10203) (10203 . 10204) (#("}," 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t)) . 10203) (undo-tree-id4938 . 1)) (26078 64470 382112 894000) 0 (:visualizer [2 0 2 #<marker in no buffer>])])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -10203) (undo-tree-id4939 . -1) (undo-tree-id4940 . 1) (undo-tree-id4941 . -1) (#("f" 0 1 (fontified t)) . -10204) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) 10205 (10204 . 10205) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -10204) (undo-tree-id4944 . -1) (undo-tree-id4945 . 1) (undo-tree-id4946 . -1) 10205 (10204 . 10205) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -10204) (10204 . 10205) (#("j" 0 1 (fontified t)) . -10203) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) 10204 (10203 . 10204)) nil (26078 64510 431578 282000) 0 nil] [nil nil ((#("Lkh//E2 T2 ID//E2 Rkh" 0 1 (fontified t c-in-sws t face font-lock-comment-face) 1 2 (fontified t c-in-sws t face font-lock-comment-face) 2 3 (fontified t c-in-sws t face font-lock-comment-face) 3 4 (fontified t c-in-sws t face font-lock-comment-face) 4 5 (fontified t c-in-sws t face font-lock-comment-face) 5 6 (fontified t c-in-sws t face font-lock-comment-face) 6 7 (fontified t c-in-sws t face font-lock-comment-face) 7 8 (fontified t c-in-sws t face font-lock-comment-face) 8 9 (fontified t c-in-sws t face font-lock-comment-face) 9 10 (fontified t c-in-sws t face font-lock-comment-face) 10 11 (fontified t c-in-sws t face font-lock-comment-face) 11 12 (fontified t c-in-sws t face font-lock-comment-face) 12 13 (fontified t c-in-sws t face font-lock-comment-face) 13 14 (fontified t c-in-sws t face font-lock-comment-face) 14 15 (fontified t c-in-sws t face font-lock-comment-face) 15 16 (fontified t c-in-sws t face font-lock-comment-face) 16 17 (fontified t c-in-sws t face font-lock-comment-face) 17 18 (fontified t c-in-sws t face font-lock-comment-face) 18 19 (fontified t c-in-sws t face font-lock-comment-face) 19 20 (fontified t c-in-sws t face font-lock-comment-face) 20 21 (fontified t c-in-sws t face font-lock-comment-face)) . 9979)) ((9979 . 10000)) (26078 64447 272296 33000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((9901 . 9904) (#("  " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 2 (c-in-sws t c-is-sws t fontified nil)) . 9901) (9900 . 9901) (#("   " 0 1 (c-in-sws t c-is-sws t fontified t) 1 2 (c-in-sws t c-is-sws t fontified t) 2 3 (c-in-sws t c-is-sws t fontified t)) . 9900) (undo-tree-id2548 . -3) (undo-tree-id2550 . -3) (undo-tree-id2552 . -3) (undo-tree-id2554 . -3) (undo-tree-id2556 . -3) (undo-tree-id2558 . -3) (undo-tree-id2560 . -3) (undo-tree-id2562 . -3) (undo-tree-id2564 . -3) (undo-tree-id2566 . -3) (undo-tree-id2568 . -3) (undo-tree-id2570 . -3) (undo-tree-id2572 . -3) (undo-tree-id2574 . -3) (undo-tree-id2576 . -3) (undo-tree-id2578 . -3) (undo-tree-id2580 . -3) (undo-tree-id2582 . -3) (undo-tree-id2584 . -3) (undo-tree-id2586 . -3) (undo-tree-id2588 . -3) (undo-tree-id2590 . -3) (undo-tree-id2592 . -3) (undo-tree-id2594 . -3) (undo-tree-id2596 . -3) (undo-tree-id2598 . -3) (undo-tree-id2600 . -3) (undo-tree-id2602 . -3) (undo-tree-id2604 . -3) (undo-tree-id2606 . -3) (undo-tree-id2608 . -3) (undo-tree-id2610 . -3) (undo-tree-id2612 . -3) (undo-tree-id2614 . -3) (undo-tree-id2616 . -3) (undo-tree-id2618 . -3) (undo-tree-id2620 . -3) (undo-tree-id2622 . -3) (undo-tree-id2624 . -3) (undo-tree-id2626 . -3) (undo-tree-id2628 . -3) (undo-tree-id2630 . -3) (undo-tree-id2632 . -3) (undo-tree-id2634 . -3) (undo-tree-id2636 . -3) (undo-tree-id2638 . -3) (undo-tree-id2640 . -3) (undo-tree-id2642 . -3) (undo-tree-id2644 . -3) (undo-tree-id2646 . -3) (undo-tree-id2648 . -3) (undo-tree-id2650 . -3) (undo-tree-id2652 . -3) (undo-tree-id2654 . -3) (undo-tree-id2656 . -3) (undo-tree-id2658 . -3) (undo-tree-id2660 . -3) (undo-tree-id2662 . -3) (undo-tree-id2664 . -3) (undo-tree-id2666 . -3) (undo-tree-id2668 . -3) (undo-tree-id2670 . -3) (undo-tree-id2672 . -3) (undo-tree-id2674 . -3) (undo-tree-id2676 . -3) (undo-tree-id2678 . -3) (undo-tree-id2680 . -3) (undo-tree-id2682 . -3) (undo-tree-id2684 . -3) (undo-tree-id2686 . -3) (undo-tree-id2688 . -3) (undo-tree-id2690 . -3) (undo-tree-id2692 . -3) (undo-tree-id2694 . -3) (undo-tree-id2696 . -3) (undo-tree-id2698 . -3) (undo-tree-id2700 . -3) (undo-tree-id2702 . -3) (undo-tree-id2704 . -3) (undo-tree-id2706 . -3) (undo-tree-id2708 . -3) (undo-tree-id2710 . -3) (undo-tree-id2712 . -3) (undo-tree-id2714 . -3) (undo-tree-id2716 . -3) (undo-tree-id2718 . -3) (undo-tree-id2720 . -3) (undo-tree-id2722 . -3) (undo-tree-id2724 . -3) (undo-tree-id2726 . -3) (undo-tree-id2728 . -3) (undo-tree-id2730 . -3) (undo-tree-id2732 . -3) (undo-tree-id2734 . -3) (undo-tree-id2736 . -3) (undo-tree-id2738 . -3) (undo-tree-id2740 . -3) (undo-tree-id2742 . -3) (undo-tree-id2744 . -3) (undo-tree-id2746 . -3) (undo-tree-id2748 . -3) (undo-tree-id2750 . -3) (undo-tree-id2752 . -3) (undo-tree-id2754 . -3) (undo-tree-id2756 . -3) (undo-tree-id2758 . -3) (undo-tree-id2760 . -3) (undo-tree-id2762 . -3) (undo-tree-id2764 . -3) (undo-tree-id2766 . -3) (undo-tree-id2768 . -3) (undo-tree-id2770 . -3) (undo-tree-id2772 . -3) (undo-tree-id2774 . -3) (undo-tree-id2776 . -3) (undo-tree-id2778 . -3) (undo-tree-id2780 . -3) (undo-tree-id2782 . -3) (undo-tree-id2784 . -3) (undo-tree-id2786 . -3) (undo-tree-id2788 . -3) (undo-tree-id2790 . -3) (undo-tree-id2792 . -3) (undo-tree-id2794 . -3) (undo-tree-id2796 . -3) (undo-tree-id2798 . -3) (undo-tree-id2800 . -3) (undo-tree-id2802 . -3) (undo-tree-id2804 . -3) (undo-tree-id2806 . -3) (undo-tree-id2808 . -3) (undo-tree-id2810 . -3) (undo-tree-id2812 . -3) (undo-tree-id2814 . -3) (undo-tree-id2816 . -3) (undo-tree-id2818 . -3) (undo-tree-id2820 . -3) (undo-tree-id2822 . -3) (undo-tree-id2824 . -3) (undo-tree-id2826 . -3) (undo-tree-id2828 . -3) (undo-tree-id2830 . -3) (undo-tree-id2832 . -3) (undo-tree-id2834 . -3) (undo-tree-id2836 . -3) (undo-tree-id2838 . -3) (undo-tree-id2840 . -3) (undo-tree-id2842 . -3) (undo-tree-id2844 . -3) (undo-tree-id2846 . -3) (undo-tree-id2848 . -3) (undo-tree-id2850 . -3) (undo-tree-id2852 . -3) (undo-tree-id2854 . -3) (undo-tree-id2856 . -3) (undo-tree-id2858 . -3) (undo-tree-id2860 . -3) (undo-tree-id2862 . -3) (undo-tree-id2864 . -3) (undo-tree-id2866 . -3) (undo-tree-id2868 . -3) (undo-tree-id2870 . -3) (undo-tree-id2872 . -3) (undo-tree-id2874 . -3) (undo-tree-id2876 . -3) (undo-tree-id2878 . -3) (undo-tree-id2880 . -3) (undo-tree-id2882 . -3) (undo-tree-id2884 . -3) (undo-tree-id2886 . -3) (undo-tree-id2888 . -3) (undo-tree-id2890 . -3) (undo-tree-id2892 . -3) (undo-tree-id2894 . -3) (undo-tree-id2896 . -3) (undo-tree-id2898 . -3) (undo-tree-id2900 . -3) (undo-tree-id2902 . -3) (undo-tree-id2904 . -3) (undo-tree-id2906 . -3) (undo-tree-id2908 . -3) (undo-tree-id2910 . -3) (undo-tree-id2912 . -3) (undo-tree-id2914 . -3) (undo-tree-id2916 . -3) (undo-tree-id2918 . -3) (undo-tree-id2920 . -3) (undo-tree-id2922 . -3) (undo-tree-id2924 . -3) (undo-tree-id2926 . -3) (undo-tree-id2928 . -3) (undo-tree-id2930 . -3) (undo-tree-id2932 . -3) (undo-tree-id2934 . -3) (undo-tree-id2936 . -3) (undo-tree-id2938 . -3) (undo-tree-id2940 . -3) (undo-tree-id2942 . -3) (undo-tree-id2944 . -3) (undo-tree-id2946 . -3) (undo-tree-id2948 . -3) (undo-tree-id2950 . -3) (undo-tree-id2952 . -3) (undo-tree-id2954 . -3) (undo-tree-id2956 . -3) (undo-tree-id2958 . -3) (undo-tree-id2960 . -3) (undo-tree-id2962 . -3) (undo-tree-id2964 . -3) (undo-tree-id2966 . -3) (undo-tree-id2968 . -3) (undo-tree-id2970 . -3) (undo-tree-id2972 . -3) (undo-tree-id2974 . -3) (undo-tree-id2976 . -3) (undo-tree-id2978 . -3) (undo-tree-id2980 . -3) (undo-tree-id2982 . -3) (undo-tree-id2984 . -3) (undo-tree-id2986 . -3) (undo-tree-id2988 . -3) (undo-tree-id2990 . -3) (undo-tree-id2992 . -3) (undo-tree-id2994 . -3) (undo-tree-id2996 . -3) (undo-tree-id2998 . -3) (undo-tree-id3000 . -3) (undo-tree-id3002 . -3) (undo-tree-id3004 . -3) (undo-tree-id3006 . -3) (undo-tree-id3008 . -3) (undo-tree-id3010 . -3) (undo-tree-id3012 . -3) (undo-tree-id3014 . -3) (undo-tree-id3016 . -3) (undo-tree-id3018 . -3) (undo-tree-id3020 . -3) 9903 (t 26078 64357 139772 649000)) ((9900 . 9903) (#("
" 0 1 (fontified t)) . 9900) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (9901 . 9903) (#("	  " 0 3 (fontified t c-in-sws t c-is-sws t)) . 9901)) (26078 64386 827742 779000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((#("Rkh" 0 3 (fontified t)) . 10237) (undo-tree-id2484 . -2) (undo-tree-id2486 . -1) (undo-tree-id2488 . -1) (undo-tree-id2490 . -1) (undo-tree-id2492 . -1) (undo-tree-id2494 . -1) (undo-tree-id2496 . -1) (undo-tree-id2498 . -1) (undo-tree-id2500 . -1) (undo-tree-id2502 . -1) (undo-tree-id2504 . -1) (undo-tree-id2506 . -1) (undo-tree-id2508 . -1) (undo-tree-id2510 . -1) (undo-tree-id2512 . -1)) ((10237 . 10240) (t 26078 64276 483107 950000)) (26078 64276 428419 890000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((apply -3 10206 10293 undo--wrap-and-run-primitive-undo 10206 10293 ((10209 . 10212) 10246))) ((apply 3 10206 10290 undo--wrap-and-run-primitive-undo 10206 10290 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 10209) 10204))) (26078 64247 749448 892000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("Rkh" 0 3 (fontified t)) . 10236) (undo-tree-id4949 . -2) (undo-tree-id4950 . -3) (undo-tree-id4951 . -3) (undo-tree-id4952 . -3) (undo-tree-id4953 . -3) (undo-tree-id4954 . -3) (undo-tree-id4955 . -3) (undo-tree-id4956 . -3) (undo-tree-id4957 . -3) (undo-tree-id4958 . -3) (undo-tree-id4959 . -3) (undo-tree-id4960 . -3) (undo-tree-id4961 . -3) (undo-tree-id4962 . -3) (undo-tree-id4963 . -3) (undo-tree-id4964 . -3) (undo-tree-id4965 . -3) (undo-tree-id4966 . -3) (undo-tree-id4967 . -3) (undo-tree-id4968 . -3) (undo-tree-id4969 . -3) (undo-tree-id4970 . -3) (undo-tree-id4971 . -3) (undo-tree-id4972 . -3) (undo-tree-id4973 . -3) (undo-tree-id4974 . -3) (undo-tree-id4975 . -3) (undo-tree-id4976 . -3) (undo-tree-id4977 . -3) (undo-tree-id4978 . -3) (undo-tree-id4979 . -3) (undo-tree-id4980 . -3) (undo-tree-id4981 . -3) (undo-tree-id4982 . -3) (undo-tree-id4983 . -3) (undo-tree-id4984 . -3) (undo-tree-id4985 . -3) (undo-tree-id4986 . -3) (undo-tree-id4987 . -3) (undo-tree-id4988 . -3) (undo-tree-id4989 . -3) (undo-tree-id4990 . -3) (undo-tree-id4991 . -3) (undo-tree-id4992 . -3) (undo-tree-id4993 . -3) (undo-tree-id4994 . -3) (undo-tree-id4995 . -3) (undo-tree-id4996 . -3) (undo-tree-id4997 . -3) (undo-tree-id4998 . -3) (undo-tree-id4999 . -3) (undo-tree-id5000 . -3) (undo-tree-id5001 . -3) (undo-tree-id5002 . -3) (undo-tree-id5003 . -3) (undo-tree-id5004 . -3) (undo-tree-id5005 . -3) (undo-tree-id5006 . -3) (undo-tree-id5007 . -3) (undo-tree-id5008 . -2) (undo-tree-id5009 . -2) (undo-tree-id5010 . -2) (undo-tree-id5011 . -2) (undo-tree-id5012 . -2) (undo-tree-id5013 . -2) (undo-tree-id5014 . -2) (undo-tree-id5015 . -2) (undo-tree-id5016 . -2) (undo-tree-id5017 . -2) (undo-tree-id5018 . -2) (undo-tree-id5019 . -2) (undo-tree-id5020 . -2) (undo-tree-id5021 . -2) (undo-tree-id5022 . -2) (undo-tree-id5023 . -2) (undo-tree-id5024 . -2) (undo-tree-id5025 . -2) (undo-tree-id5026 . -2) (undo-tree-id5027 . -2) (undo-tree-id5028 . -2) (undo-tree-id5029 . -2) (undo-tree-id5030 . -2) (undo-tree-id5031 . -2) (undo-tree-id5032 . -2) (undo-tree-id5033 . -2) (undo-tree-id5034 . -2) (undo-tree-id5035 . -2) (undo-tree-id5036 . -2) (undo-tree-id5037 . -2) (undo-tree-id5038 . -2) (undo-tree-id5039 . -2) (undo-tree-id5040 . -2) (undo-tree-id5041 . -2) (undo-tree-id5042 . -2) (undo-tree-id5043 . -2) (undo-tree-id5044 . -2) (undo-tree-id5045 . -2) (undo-tree-id5046 . -2) (undo-tree-id5047 . -2) (undo-tree-id5048 . -2) (undo-tree-id5049 . -2) (undo-tree-id5050 . -2) (undo-tree-id5051 . -2) (undo-tree-id5052 . -2) (undo-tree-id5053 . -2) (undo-tree-id5054 . -2) (undo-tree-id5055 . -2) (undo-tree-id5056 . -2) (undo-tree-id5057 . -2) (undo-tree-id5058 . -2) (undo-tree-id5059 . -2) (undo-tree-id5060 . -2) (undo-tree-id5061 . -2) (undo-tree-id5062 . -2) (undo-tree-id5063 . -2) (undo-tree-id5064 . -2) (undo-tree-id5065 . -2) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -3) (t 26078 64510 443102 248000)) nil (26078 64555 907374 27000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9965) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9966) (undo-tree-id3029 . -1) (#("1" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9967) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9968) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (#("O" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9969) (undo-tree-id3034 . -1) (#("P" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9970) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9971) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9972) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9973) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9974) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9975) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (#("T" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9976) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (#("3" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9977) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (#(" " 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9978) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) 9979) ((9965 . 9979)) (26078 64442 392410 607000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t face font-lock-comment-face c-in-sws t)) . 9999) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2519 . -1) (undo-tree-id2521 . -1) (undo-tree-id2523 . -1) (undo-tree-id2525 . -1) (undo-tree-id2527 . -1) (undo-tree-id2529 . -1) (undo-tree-id2531 . -1) (undo-tree-id2533 . -1) (undo-tree-id2535 . -1) (undo-tree-id2537 . -1) (undo-tree-id2539 . -1) (undo-tree-id2541 . -1) (undo-tree-id2543 . -1) (undo-tree-id2545 . -1) (undo-tree-id2547 . -1) 10000) ((9999 . 10000) (t 26078 64371 499772 299000)) (26078 64371 485093 379000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((10204 . 10205) (#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -10204) (10204 . 10205) (t 26078 64218 13109 381000)) ((#("}" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . 10204) (undo-tree-id2480 . 1) (10204 . 10205) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 10204) (undo-tree-id2481 . 1) (undo-tree-id2482 . -1) (t 26078 64234 283108 980000)) (26078 64234 272846 809000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply 3 5168 5218 undo--wrap-and-run-primitive-undo 5168 5218 ((#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (fontified t face font-lock-comment-delimiter-face)) . -5172) 5221)) (t 26078 64555 919767 808000)) nil (26078 65071 55335 924000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9961) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3085 . -1) (undo-tree-id3087 . -1) (undo-tree-id3089 . -1) (undo-tree-id3091 . -1) (undo-tree-id3093 . -1) (undo-tree-id3095 . -1) (undo-tree-id3097 . -1) (undo-tree-id3099 . -1) (undo-tree-id3101 . -1) (undo-tree-id3103 . -1) (undo-tree-id3105 . -1) (undo-tree-id3107 . -1) (undo-tree-id3109 . -1) (undo-tree-id3111 . -1) (undo-tree-id3113 . -1) (undo-tree-id3115 . -1) (undo-tree-id3117 . -1) (undo-tree-id3119 . -1) (undo-tree-id3121 . -1) (undo-tree-id3123 . -1) (undo-tree-id3125 . -1) (undo-tree-id3127 . -1) (undo-tree-id3129 . -1) (undo-tree-id3131 . -1) (undo-tree-id3133 . -1) (undo-tree-id3135 . -1) (undo-tree-id3137 . -1) (undo-tree-id3139 . -1) (undo-tree-id3141 . -1) (undo-tree-id3143 . -1) (undo-tree-id3145 . -1) (undo-tree-id3147 . -1) (undo-tree-id3149 . -1) (undo-tree-id3151 . -1) (undo-tree-id3153 . -1) (undo-tree-id3155 . -1) (undo-tree-id3157 . -1) (undo-tree-id3159 . -1) (undo-tree-id3161 . -1) (undo-tree-id3163 . -1) (undo-tree-id3165 . -1) (undo-tree-id3167 . -1) (undo-tree-id3169 . -1) (undo-tree-id3171 . -1) (undo-tree-id3173 . -1) (undo-tree-id3175 . -1) (undo-tree-id3177 . -1) (undo-tree-id3179 . -1) (undo-tree-id3181 . -1) (undo-tree-id3183 . -1) (undo-tree-id3185 . -1) (undo-tree-id3187 . -1) (undo-tree-id3189 . -1) (undo-tree-id3191 . -1) (undo-tree-id3193 . -1) (undo-tree-id3195 . -1) (undo-tree-id3197 . -1) (undo-tree-id3199 . -1) (undo-tree-id3201 . -1) (undo-tree-id3203 . -1) (undo-tree-id3205 . -1) (undo-tree-id3207 . -1) (undo-tree-id3209 . -1) (undo-tree-id3211 . -1) (undo-tree-id3213 . -1) (undo-tree-id3215 . -1) (undo-tree-id3217 . -1) (undo-tree-id3219 . -1) (undo-tree-id3221 . -1) (undo-tree-id3223 . -1) (undo-tree-id3225 . -1) (undo-tree-id3227 . -1) (undo-tree-id3229 . -1) (undo-tree-id3231 . -1) (undo-tree-id3233 . -1) (undo-tree-id3235 . -1) (undo-tree-id3237 . -1) (undo-tree-id3239 . -1) (undo-tree-id3241 . -1) (undo-tree-id3243 . -1) (undo-tree-id3245 . -1) (undo-tree-id3247 . -1) (undo-tree-id3249 . -1) (undo-tree-id3251 . -1) (undo-tree-id3253 . -1) (undo-tree-id3255 . -1) (undo-tree-id3257 . -1) (undo-tree-id3259 . -1) (undo-tree-id3261 . -1) (undo-tree-id3263 . -1) (undo-tree-id3265 . -1) (undo-tree-id3267 . -1) (undo-tree-id3269 . -1) (undo-tree-id3271 . -1) (undo-tree-id3273 . -1) (undo-tree-id3275 . -1) (undo-tree-id3277 . -1) (undo-tree-id3279 . -1) (undo-tree-id3281 . -1) (undo-tree-id3283 . -1) (undo-tree-id3285 . -1) (undo-tree-id3287 . -1) (undo-tree-id3289 . -1) (undo-tree-id3291 . -1) (undo-tree-id3293 . -1) (undo-tree-id3295 . -1) (undo-tree-id3297 . -1) (undo-tree-id3299 . -1) (undo-tree-id3301 . -1) (undo-tree-id3303 . -1) (undo-tree-id3305 . -1) (undo-tree-id3307 . -1) (undo-tree-id3309 . -1) (undo-tree-id3311 . -1) (undo-tree-id3313 . -1) (undo-tree-id3315 . -1) (undo-tree-id3317 . -1) (undo-tree-id3319 . -1) (undo-tree-id3321 . -1) (undo-tree-id3323 . -1) (undo-tree-id3325 . -1) (undo-tree-id3327 . -1) (undo-tree-id3329 . -1) (undo-tree-id3331 . -1) (undo-tree-id3333 . -1) (undo-tree-id3335 . -1) (undo-tree-id3337 . -1) (undo-tree-id3339 . -1) (undo-tree-id3341 . -1) (undo-tree-id3343 . -1) (undo-tree-id3345 . -1) (undo-tree-id3347 . -1) (undo-tree-id3349 . -1) (undo-tree-id3351 . -1) (undo-tree-id3353 . -1) (undo-tree-id3355 . -1) (undo-tree-id3357 . -1) (undo-tree-id3359 . -1) (undo-tree-id3361 . -1) (undo-tree-id3363 . -1) (undo-tree-id3365 . -1) (undo-tree-id3367 . -1) (undo-tree-id3369 . -1) (undo-tree-id3371 . -1) (undo-tree-id3373 . -1) (undo-tree-id3375 . -1) (undo-tree-id3377 . -1) (undo-tree-id3379 . -1) (undo-tree-id3381 . -1) (undo-tree-id3383 . -1) (undo-tree-id3385 . -1) (undo-tree-id3387 . -1) (undo-tree-id3389 . -1) (undo-tree-id3391 . -1) (undo-tree-id3393 . -1) (undo-tree-id3395 . -1) (undo-tree-id3397 . -1) (undo-tree-id3399 . -1) (undo-tree-id3401 . -1) (undo-tree-id3403 . -1) (undo-tree-id3405 . -1) (undo-tree-id3407 . -1) (undo-tree-id3409 . -1) (undo-tree-id3411 . -1) (undo-tree-id3413 . -1) (undo-tree-id3415 . -1) (undo-tree-id3417 . -1) (undo-tree-id3419 . -1) (undo-tree-id3421 . -1) (undo-tree-id3423 . -1) (undo-tree-id3425 . -1) (undo-tree-id3427 . -1) (undo-tree-id3429 . -1) (undo-tree-id3431 . -1) (undo-tree-id3433 . -1) (undo-tree-id3435 . -1) (undo-tree-id3437 . -1) (undo-tree-id3439 . -1) (undo-tree-id3441 . -1) (undo-tree-id3443 . -1) (undo-tree-id3445 . -1) (undo-tree-id3447 . -1) (undo-tree-id3449 . -1) (undo-tree-id3451 . -1) (undo-tree-id3453 . -1) (undo-tree-id3455 . -1) (undo-tree-id3457 . -1) (undo-tree-id3459 . -1) (undo-tree-id3461 . -1) (undo-tree-id3463 . -1) (undo-tree-id3465 . -1) (undo-tree-id3467 . -1) (undo-tree-id3469 . -1) (undo-tree-id3471 . -1) (undo-tree-id3473 . -1) (undo-tree-id3475 . -1) (undo-tree-id3477 . -1) (undo-tree-id3479 . -1) (undo-tree-id3481 . -1) (undo-tree-id3483 . -1) (undo-tree-id3485 . -1) (undo-tree-id3487 . -1) (undo-tree-id3489 . -1) (undo-tree-id3491 . -1) (undo-tree-id3493 . -1) (undo-tree-id3495 . -1) (undo-tree-id3497 . -1) (undo-tree-id3499 . -1) (undo-tree-id3501 . -1) (undo-tree-id3503 . -1) (undo-tree-id3505 . -1) (undo-tree-id3507 . -1) (undo-tree-id3509 . -1) (undo-tree-id3511 . -1) (undo-tree-id3513 . -1) (undo-tree-id3515 . -1) (undo-tree-id3517 . -1) (undo-tree-id3519 . -1) (undo-tree-id3521 . -1) (undo-tree-id3523 . -1) (undo-tree-id3525 . -1) (undo-tree-id3527 . -1) (undo-tree-id3529 . -1) (undo-tree-id3531 . -1) (undo-tree-id3533 . -1) (undo-tree-id3535 . -1) (undo-tree-id3537 . -1) (undo-tree-id3539 . -1) (undo-tree-id3541 . -1) (undo-tree-id3543 . -1) (undo-tree-id3545 . -1) (undo-tree-id3547 . -1) (undo-tree-id3549 . -1) (undo-tree-id3551 . -1) (undo-tree-id3553 . -1) (undo-tree-id3555 . -1) (undo-tree-id3557 . -1) (undo-tree-id3559 . -1) (undo-tree-id3561 . -1) (undo-tree-id3563 . -1) (undo-tree-id3565 . -1) (undo-tree-id3567 . -1) (undo-tree-id3569 . -1) (undo-tree-id3571 . -1) (undo-tree-id3573 . -1) (undo-tree-id3575 . -1) (undo-tree-id3577 . -1) (undo-tree-id3579 . -1) (undo-tree-id3581 . -1) (undo-tree-id3583 . -1) (undo-tree-id3585 . -1) (undo-tree-id3587 . -1) (undo-tree-id3589 . -1) (undo-tree-id3591 . -1) (#("/" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9962) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3595 . -1) (undo-tree-id3597 . -1) (undo-tree-id3599 . -1) (undo-tree-id3601 . -1) (undo-tree-id3603 . -1) (undo-tree-id3605 . -1) (undo-tree-id3607 . -1) (undo-tree-id3609 . -1) (undo-tree-id3611 . -1) (undo-tree-id3613 . -1) (undo-tree-id3615 . -1) (undo-tree-id3617 . -1) (undo-tree-id3619 . -1) (undo-tree-id3621 . -1) (undo-tree-id3623 . -1) (undo-tree-id3625 . -1) (undo-tree-id3627 . -1) (undo-tree-id3629 . -1) (undo-tree-id3631 . -1) (undo-tree-id3633 . -1) (undo-tree-id3635 . -1) (undo-tree-id3637 . -1) (undo-tree-id3639 . -1) (undo-tree-id3641 . -1) (undo-tree-id3643 . -1) (undo-tree-id3645 . -1) (undo-tree-id3647 . -1) (undo-tree-id3649 . -1) (undo-tree-id3651 . -1) (undo-tree-id3653 . -1) (undo-tree-id3655 . -1) (undo-tree-id3657 . -1) (undo-tree-id3659 . -1) (undo-tree-id3661 . -1) (undo-tree-id3663 . -1) (undo-tree-id3665 . -1) (undo-tree-id3667 . -1) (undo-tree-id3669 . -1) (undo-tree-id3671 . -1) (undo-tree-id3673 . -1) (undo-tree-id3675 . -1) (undo-tree-id3677 . -1) (undo-tree-id3679 . -1) (undo-tree-id3681 . -1) (undo-tree-id3683 . -1) (undo-tree-id3685 . -1) (undo-tree-id3687 . -1) (undo-tree-id3689 . -1) (undo-tree-id3691 . -1) (undo-tree-id3693 . -1) (undo-tree-id3695 . -1) (undo-tree-id3697 . -1) (undo-tree-id3699 . -1) (undo-tree-id3701 . -1) (undo-tree-id3703 . -1) (undo-tree-id3705 . -1) (undo-tree-id3707 . -1) (undo-tree-id3709 . -1) (undo-tree-id3711 . -1) (undo-tree-id3713 . -1) (undo-tree-id3715 . -1) (undo-tree-id3717 . -1) (undo-tree-id3719 . -1) (undo-tree-id3721 . -1) (undo-tree-id3723 . -1) (undo-tree-id3725 . -1) (undo-tree-id3727 . -1) (undo-tree-id3729 . -1) (undo-tree-id3731 . -1) (undo-tree-id3733 . -1) (undo-tree-id3735 . -1) (undo-tree-id3737 . -1) (undo-tree-id3739 . -1) (undo-tree-id3741 . -1) (undo-tree-id3743 . -1) (undo-tree-id3745 . -1) (undo-tree-id3747 . -1) (undo-tree-id3749 . -1) (undo-tree-id3751 . -1) (undo-tree-id3753 . -1) (undo-tree-id3755 . -1) (undo-tree-id3757 . -1) (undo-tree-id3759 . -1) (undo-tree-id3761 . -1) (undo-tree-id3763 . -1) (undo-tree-id3765 . -1) (undo-tree-id3767 . -1) (undo-tree-id3769 . -1) (undo-tree-id3771 . -1) (undo-tree-id3773 . -1) (undo-tree-id3775 . -1) (undo-tree-id3777 . -1) (undo-tree-id3779 . -1) (undo-tree-id3781 . -1) (undo-tree-id3783 . -1) (undo-tree-id3785 . -1) (undo-tree-id3787 . -1) (undo-tree-id3789 . -1) (undo-tree-id3791 . -1) (undo-tree-id3793 . -1) (undo-tree-id3795 . -1) (undo-tree-id3797 . -1) (undo-tree-id3799 . -1) (undo-tree-id3801 . -1) (undo-tree-id3803 . -1) (undo-tree-id3805 . -1) (undo-tree-id3807 . -1) (undo-tree-id3809 . -1) (undo-tree-id3811 . -1) (undo-tree-id3813 . -1) (undo-tree-id3815 . -1) (undo-tree-id3817 . -1) (undo-tree-id3819 . -1) (undo-tree-id3821 . -1) (undo-tree-id3823 . -1) (undo-tree-id3825 . -1) (undo-tree-id3827 . -1) (undo-tree-id3829 . -1) (undo-tree-id3831 . -1) (undo-tree-id3833 . -1) (undo-tree-id3835 . -1) (undo-tree-id3837 . -1) (undo-tree-id3839 . -1) (undo-tree-id3841 . -1) (undo-tree-id3843 . -1) (undo-tree-id3845 . -1) (undo-tree-id3847 . -1) (undo-tree-id3849 . -1) (undo-tree-id3851 . -1) (undo-tree-id3853 . -1) (undo-tree-id3855 . -1) (undo-tree-id3857 . -1) (undo-tree-id3859 . -1) (undo-tree-id3861 . -1) (undo-tree-id3863 . -1) (undo-tree-id3865 . -1) (undo-tree-id3867 . -1) (undo-tree-id3869 . -1) (undo-tree-id3871 . -1) (undo-tree-id3873 . -1) (undo-tree-id3875 . -1) (undo-tree-id3877 . -1) (undo-tree-id3879 . -1) (undo-tree-id3881 . -1) (undo-tree-id3883 . -1) (undo-tree-id3885 . -1) (undo-tree-id3887 . -1) (undo-tree-id3889 . -1) (undo-tree-id3891 . -1) (undo-tree-id3893 . -1) (undo-tree-id3895 . -1) (undo-tree-id3897 . -1) (undo-tree-id3899 . -1) (undo-tree-id3901 . -1) (undo-tree-id3903 . -1) (undo-tree-id3905 . -1) (undo-tree-id3907 . -1) (undo-tree-id3909 . -1) (undo-tree-id3911 . -1) (undo-tree-id3913 . -1) (undo-tree-id3915 . -1) (undo-tree-id3917 . -1) (undo-tree-id3919 . -1) (undo-tree-id3921 . -1) (undo-tree-id3923 . -1) (undo-tree-id3925 . -1) (undo-tree-id3927 . -1) (undo-tree-id3929 . -1) (undo-tree-id3931 . -1) (undo-tree-id3933 . -1) (undo-tree-id3935 . -1) (undo-tree-id3937 . -1) (undo-tree-id3939 . -1) (undo-tree-id3941 . -1) (undo-tree-id3943 . -1) (undo-tree-id3945 . -1) (undo-tree-id3947 . -1) (undo-tree-id3949 . -1) (undo-tree-id3951 . -1) (undo-tree-id3953 . -1) (undo-tree-id3955 . -1) (undo-tree-id3957 . -1) (undo-tree-id3959 . -1) (undo-tree-id3961 . -1) (undo-tree-id3963 . -1) (undo-tree-id3965 . -1) (undo-tree-id3967 . -1) (undo-tree-id3969 . -1) (undo-tree-id3971 . -1) (undo-tree-id3973 . -1) (undo-tree-id3975 . -1) (undo-tree-id3977 . -1) (undo-tree-id3979 . -1) (undo-tree-id3981 . -1) (undo-tree-id3983 . -1) (undo-tree-id3985 . -1) (undo-tree-id3987 . -1) (undo-tree-id3989 . -1) (undo-tree-id3991 . -1) (undo-tree-id3993 . -1) (undo-tree-id3995 . -1) (undo-tree-id3997 . -1) (undo-tree-id3999 . -1) (undo-tree-id4001 . -1) (undo-tree-id4003 . -1) (undo-tree-id4005 . -1) (undo-tree-id4007 . -1) (undo-tree-id4009 . -1) (undo-tree-id4011 . -1) (#("E" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9963) (undo-tree-id4012 . -1) (undo-tree-id4014 . -1) (undo-tree-id4016 . -1) (undo-tree-id4018 . -1) (undo-tree-id4020 . -1) (undo-tree-id4022 . -1) (undo-tree-id4024 . -1) (undo-tree-id4026 . -1) (undo-tree-id4028 . -1) (undo-tree-id4030 . -1) (undo-tree-id4032 . -1) (undo-tree-id4034 . -1) (undo-tree-id4036 . -1) (undo-tree-id4038 . -1) (undo-tree-id4040 . -1) (undo-tree-id4042 . -1) (undo-tree-id4044 . -1) (undo-tree-id4046 . -1) (undo-tree-id4048 . -1) (undo-tree-id4050 . -1) (undo-tree-id4052 . -1) (undo-tree-id4054 . -1) (undo-tree-id4056 . -1) (undo-tree-id4058 . -1) (undo-tree-id4060 . -1) (undo-tree-id4062 . -1) (undo-tree-id4064 . -1) (undo-tree-id4066 . -1) (undo-tree-id4068 . -1) (undo-tree-id4070 . -1) (undo-tree-id4072 . -1) (undo-tree-id4074 . -1) (undo-tree-id4076 . -1) (undo-tree-id4078 . -1) (undo-tree-id4080 . -1) (undo-tree-id4082 . -1) (undo-tree-id4084 . -1) (undo-tree-id4086 . -1) (undo-tree-id4088 . -1) (undo-tree-id4090 . -1) (undo-tree-id4092 . -1) (undo-tree-id4094 . -1) (undo-tree-id4096 . -1) (undo-tree-id4098 . -1) (undo-tree-id4100 . -1) (undo-tree-id4102 . -1) (undo-tree-id4104 . -1) (undo-tree-id4106 . -1) (undo-tree-id4108 . -1) (undo-tree-id4110 . -1) (undo-tree-id4112 . -1) (undo-tree-id4114 . -1) (undo-tree-id4116 . -1) (undo-tree-id4118 . -1) (undo-tree-id4120 . -1) (undo-tree-id4122 . -1) (undo-tree-id4124 . -1) (undo-tree-id4126 . -1) (undo-tree-id4128 . -1) (undo-tree-id4130 . -1) (undo-tree-id4132 . -1) (undo-tree-id4134 . -1) (undo-tree-id4136 . -1) (undo-tree-id4138 . -1) (undo-tree-id4140 . -1) (undo-tree-id4142 . -1) (undo-tree-id4144 . -1) (undo-tree-id4146 . -1) (undo-tree-id4148 . -1) (undo-tree-id4150 . -1) (undo-tree-id4152 . -1) (undo-tree-id4154 . -1) (undo-tree-id4156 . -1) (undo-tree-id4158 . -1) (undo-tree-id4160 . -1) (undo-tree-id4162 . -1) (undo-tree-id4164 . -1) (undo-tree-id4166 . -1) (undo-tree-id4168 . -1) (undo-tree-id4170 . -1) (undo-tree-id4172 . -1) (undo-tree-id4174 . -1) (undo-tree-id4176 . -1) (undo-tree-id4178 . -1) (undo-tree-id4180 . -1) (undo-tree-id4182 . -1) (undo-tree-id4184 . -1) (undo-tree-id4186 . -1) (undo-tree-id4188 . -1) (undo-tree-id4190 . -1) (undo-tree-id4192 . -1) (undo-tree-id4194 . -1) (undo-tree-id4196 . -1) (undo-tree-id4198 . -1) (undo-tree-id4200 . -1) (undo-tree-id4202 . -1) (undo-tree-id4204 . -1) (undo-tree-id4206 . -1) (undo-tree-id4208 . -1) (undo-tree-id4210 . -1) (undo-tree-id4212 . -1) (undo-tree-id4214 . -1) (undo-tree-id4216 . -1) (undo-tree-id4218 . -1) (undo-tree-id4220 . -1) (undo-tree-id4222 . -1) (undo-tree-id4224 . -1) (undo-tree-id4226 . -1) (undo-tree-id4228 . -1) (undo-tree-id4230 . -1) (undo-tree-id4232 . -1) (undo-tree-id4234 . -1) (undo-tree-id4236 . -1) (undo-tree-id4238 . -1) (undo-tree-id4240 . -1) (undo-tree-id4242 . -1) (undo-tree-id4244 . -1) (undo-tree-id4246 . -1) (undo-tree-id4248 . -1) (undo-tree-id4250 . -1) (undo-tree-id4252 . -1) (undo-tree-id4254 . -1) (undo-tree-id4256 . -1) (undo-tree-id4258 . -1) (undo-tree-id4260 . -1) (undo-tree-id4262 . -1) (undo-tree-id4264 . -1) (undo-tree-id4266 . -1) (undo-tree-id4268 . -1) (undo-tree-id4270 . -1) (undo-tree-id4272 . -1) (undo-tree-id4274 . -1) (undo-tree-id4276 . -1) (undo-tree-id4278 . -1) (undo-tree-id4280 . -1) (undo-tree-id4282 . -1) (undo-tree-id4284 . -1) (undo-tree-id4286 . -1) (undo-tree-id4288 . -1) (undo-tree-id4290 . -1) (undo-tree-id4292 . -1) (undo-tree-id4294 . -1) (undo-tree-id4296 . -1) (undo-tree-id4298 . -1) (undo-tree-id4300 . -1) (undo-tree-id4302 . -1) (undo-tree-id4304 . -1) (undo-tree-id4306 . -1) (undo-tree-id4308 . -1) (undo-tree-id4310 . -1) (undo-tree-id4312 . -1) (undo-tree-id4314 . -1) (undo-tree-id4316 . -1) (undo-tree-id4318 . -1) (undo-tree-id4320 . -1) (undo-tree-id4322 . -1) (undo-tree-id4324 . -1) (undo-tree-id4326 . -1) (undo-tree-id4328 . -1) (undo-tree-id4330 . -1) (undo-tree-id4332 . -1) (undo-tree-id4334 . -1) (undo-tree-id4336 . -1) (undo-tree-id4338 . -1) (undo-tree-id4340 . -1) (#("2" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9964) (undo-tree-id4341 . -1) (undo-tree-id4343 . -1) (undo-tree-id4345 . -1) (undo-tree-id4347 . -1) (undo-tree-id4349 . -1) (undo-tree-id4351 . -1) (undo-tree-id4353 . -1) (undo-tree-id4355 . -1) (undo-tree-id4357 . -1) (undo-tree-id4359 . -1) (undo-tree-id4361 . -1) (undo-tree-id4363 . -1) (undo-tree-id4365 . -1) (undo-tree-id4367 . -1) (undo-tree-id4369 . -1) (undo-tree-id4371 . -1) (undo-tree-id4373 . -1) (undo-tree-id4375 . -1) (undo-tree-id4377 . -1) (undo-tree-id4379 . -1) (undo-tree-id4381 . -1) (undo-tree-id4383 . -1) (undo-tree-id4385 . -1) (undo-tree-id4387 . -1) (undo-tree-id4389 . -1) (undo-tree-id4391 . -1) (undo-tree-id4393 . -1) (undo-tree-id4395 . -1) (undo-tree-id4397 . -1) (undo-tree-id4399 . -1) (undo-tree-id4401 . -1) (undo-tree-id4403 . -1) (undo-tree-id4405 . -1) (undo-tree-id4407 . -1) (undo-tree-id4409 . -1) (undo-tree-id4411 . -1) (undo-tree-id4413 . -1) (undo-tree-id4415 . -1) (undo-tree-id4417 . -1) (undo-tree-id4419 . -1) (undo-tree-id4421 . -1) (undo-tree-id4423 . -1) (undo-tree-id4425 . -1) (undo-tree-id4427 . -1) (undo-tree-id4429 . -1) (undo-tree-id4431 . -1) (undo-tree-id4433 . -1) (undo-tree-id4435 . -1) (undo-tree-id4437 . -1) (undo-tree-id4439 . -1) (undo-tree-id4441 . -1) (undo-tree-id4443 . -1) (undo-tree-id4445 . -1) (undo-tree-id4447 . -1) (undo-tree-id4449 . -1) (undo-tree-id4451 . -1) (undo-tree-id4453 . -1) (undo-tree-id4455 . -1) (undo-tree-id4457 . -1) (undo-tree-id4459 . -1) (undo-tree-id4461 . -1) (undo-tree-id4463 . -1) (undo-tree-id4465 . -1) (undo-tree-id4467 . -1) (undo-tree-id4469 . -1) (undo-tree-id4471 . -1) (undo-tree-id4473 . -1) (undo-tree-id4475 . -1) (undo-tree-id4477 . -1) (undo-tree-id4479 . -1) (undo-tree-id4481 . -1) (undo-tree-id4483 . -1) (undo-tree-id4485 . -1) (undo-tree-id4487 . -1) (undo-tree-id4489 . -1) (undo-tree-id4491 . -1) (undo-tree-id4493 . -1) (undo-tree-id4495 . -1) (undo-tree-id4497 . -1) (undo-tree-id4499 . -1) (undo-tree-id4501 . -1) (undo-tree-id4503 . -1) (undo-tree-id4505 . -1) (undo-tree-id4507 . -1) (undo-tree-id4509 . -1) (undo-tree-id4511 . -1) (undo-tree-id4513 . -1) (undo-tree-id4515 . -1) (undo-tree-id4517 . -1) (undo-tree-id4519 . -1) (undo-tree-id4521 . -1) (undo-tree-id4523 . -1) (undo-tree-id4525 . -1) (undo-tree-id4527 . -1) (undo-tree-id4529 . -1) (undo-tree-id4531 . -1) (undo-tree-id4533 . -1) (undo-tree-id4535 . -1) (undo-tree-id4537 . -1) (undo-tree-id4539 . -1) (undo-tree-id4541 . -1) (undo-tree-id4543 . -1) (undo-tree-id4545 . -1) (undo-tree-id4547 . -1) (undo-tree-id4549 . -1) (undo-tree-id4551 . -1) (undo-tree-id4553 . -1) (undo-tree-id4555 . -1) (undo-tree-id4557 . -1) (undo-tree-id4559 . -1) (undo-tree-id4561 . -1) (undo-tree-id4563 . -1) (undo-tree-id4565 . -1) (undo-tree-id4567 . -1) (undo-tree-id4569 . -1) (undo-tree-id4571 . -1) (undo-tree-id4573 . -1) (undo-tree-id4575 . -1) (undo-tree-id4577 . -1) (undo-tree-id4579 . -1) (undo-tree-id4581 . -1) (undo-tree-id4583 . -1) (undo-tree-id4585 . -1) (undo-tree-id4587 . -1) (undo-tree-id4589 . -1) (undo-tree-id4591 . -1) (undo-tree-id4593 . -1) (undo-tree-id4595 . -1) (undo-tree-id4597 . -1) (undo-tree-id4599 . -1) (undo-tree-id4601 . -1) (undo-tree-id4603 . -1) (undo-tree-id4605 . -1) (undo-tree-id4607 . -1) (undo-tree-id4609 . -1) (undo-tree-id4611 . -1) (undo-tree-id4613 . -1) (undo-tree-id4615 . -1) (undo-tree-id4617 . -1) (undo-tree-id4619 . -1) (undo-tree-id4621 . -1) (undo-tree-id4623 . -1) (undo-tree-id4625 . -1) (undo-tree-id4627 . -1) (undo-tree-id4629 . -1) (undo-tree-id4631 . -1) (undo-tree-id4633 . -1) (undo-tree-id4635 . -1) (undo-tree-id4637 . -1) (undo-tree-id4639 . -1) 9965 (t 26078 64419 459771 129000)) ((9961 . 9965)) (26078 64442 156045 281000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
nil
([nil nil ((apply 3 5894 5946 undo--wrap-and-run-primitive-undo 5894 5946 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -5900) 5949))) nil (26078 65071 55334 831000) 0 nil])
([nil nil ((#("2" 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . -9958) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (#(" " 0 1 (c-in-sws t fontified t face font-lock-comment-face)) . -9959) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (#("F" 0 1 (fontified t c-in-sws t face font-lock-comment-face)) . -9960) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) 9961 (t 26078 64426 886437 615000)) ((9958 . 9961) (t 26078 64432 999770 798000)) (26078 64432 991244 854000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply 3 6805 6857 undo--wrap-and-run-primitive-undo 6805 6857 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6811) 6860))) nil (26078 65071 55330 922000) 0 nil])
nil
([nil nil ((apply 3 7255 7307 undo--wrap-and-run-primitive-undo 7255 7307 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -7261) 7310)) (t 26078 65071 66421 870000)) nil (26079 387 455726 414000) 0 nil])
([nil nil ((4483 . 4486) (t 26079 388 753067 651000) 4473) nil (26079 631 933552 456000) 0 nil] [nil nil ((6426 . 6428) (6425 . 6426) (t 26078 65520 976410 870000)) ((#("," 0 1 (fontified nil)) . 6425) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (undo-tree-id5406 . -1) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) (undo-tree-id5424 . -1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (#("{}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 6426) (undo-tree-id5612 . 1) (undo-tree-id5613 . 2) (undo-tree-id5614 . -1) (undo-tree-id5615 . 1) (undo-tree-id5616 . -2) (t 26079 378 49734 579000)) (26079 378 37106 193000) 0 nil] [nil nil ((10952 . 10954) (#("D" 0 1 (fontified t)) . 10952) (undo-tree-id5096 . -1) (t 26078 65296 59749 701000)) ((10952 . 10953) (#("OP" 0 1 (fontified t) 1 2 (fontified t)) . 10952) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) (undo-tree-id5181 . -1) (undo-tree-id5182 . -1) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (undo-tree-id5380 . -1) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (t 26078 65505 773077 908000)) (26078 65505 757720 422000) 0 nil])
([nil nil ((4486 . 4491)) nil (26079 631 933551 88000) 0 nil])
nil
nil
([nil nil ((4491 . 4492)) nil (26079 631 933550 473000) 0 nil])
([nil nil ((4492 . 4495)) nil (26079 631 933549 803000) 0 nil])
([nil nil ((4495 . 4501)) nil (26079 631 933548 796000) 0 nil])
([nil nil ((nil face font-lock-type-face 4501 . 4503) (nil fontified t 4501 . 4503) (4501 . 4503)) nil (26079 631 933547 907000) 0 nil])
([nil nil ((4502 . 4504)) nil (26079 631 933546 787000) 0 nil])
([nil nil ((4506 . 4507) (nil syntax-table nil 4508 . 4509) (nil syntax-table (1) 4502 . 4503) (4503 . 4506)) nil (26079 631 933545 795000) 0 nil])
([nil nil ((4508 . 4509)) nil (26079 631 933544 483000) 0 nil])
([nil nil ((4509 . 4510)) nil (26079 631 933543 897000) 0 nil])
([nil nil ((4510 . 4512)) nil (26079 631 937314 101000) 0 nil])
([nil nil ((4532 . 4533) (4527 . 4531) (4523 . 4525) (4521 . 4523) (4513 . 4521) (#("0" 0 1 (fontified t)) . -4513) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) 4514 (4515 . 4516) (#("-" 0 1 (fontified t)) . -4515) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (#(">" 0 1 (fontified t)) . -4516) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) 4517 (4516 . 4517) (4515 . 4516) (4513 . 4514) (4512 . 4514)) nil (26079 684 445098 735000) 0 nil] [nil nil ((4512 . 4514)) ((#("()" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face (rainbow-delimiters-depth-3-face))) . 4512) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1)) (26079 631 933538 12000) 0 nil])
([nil nil ((6487 . 6488) (6482 . 6487) (6477 . 6482) (t 26079 684 459727 98000) 6476) nil (26079 768 294605 963000) 0 nil])
nil
([nil nil ((apply -3 7316 7395 undo--wrap-and-run-primitive-undo 7316 7395 ((7322 . 7325) 7368)) (t 26079 768 309725 56000)) nil (26079 1597 947054 469000) 0 nil])
([nil nil ((apply -3 6866 6945 undo--wrap-and-run-primitive-undo 6866 6945 ((6872 . 6875) 6918))) nil (26079 1597 947053 893000) 0 nil])
([nil nil ((apply -3 5944 6023 undo--wrap-and-run-primitive-undo 5944 6023 ((5950 . 5953) 5996))) nil (26079 1597 947053 389000) 0 nil])
([nil nil ((apply -3 5218 5332 undo--wrap-and-run-primitive-undo 5218 5332 ((5222 . 5225) 5268))) nil (26079 1597 947049 873000) 0 nil])
([nil nil ((apply 3 5218 5268 undo--wrap-and-run-primitive-undo 5218 5268 ((#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (fontified t face font-lock-comment-delimiter-face)) . -5222) 5271)) (t 26079 1597 959704 810000)) nil (26079 1606 944692 325000) 0 nil])
([nil nil ((apply 3 5944 5996 undo--wrap-and-run-primitive-undo 5944 5996 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -5950) 5999)) (t 26079 1606 959704 588000)) nil (26079 1622 759760 970000) 0 nil])
([nil nil ((5955 . 5956) (5950 . 5955) (5944 . 5950) (5944 . 5945) 5959 (t 26079 1622 773037 536000)) nil (26079 1644 301815 107000) 0 nil])
([nil nil ((5974 . 5976) (5964 . 5974) (5965 . 5966) (5963 . 5964) (5961 . 5962) (nil syntax-table nil 5963 . 5964) (nil syntax-table (1) 5957 . 5958) (5958 . 5961) (5957 . 5959) (nil face font-lock-type-face 5956 . 5958) (nil fontified t 5956 . 5958) (5956 . 5958) (5950 . 5956) (5944 . 5950) (5944 . 5945) 5955 (t 26079 1644 316370 342000)) nil (26079 1717 279054 964000) 0 nil])
([nil nil ((5984 . 5985) (5980 . 5984) (5978 . 5980) (5975 . 5978) (5973 . 5975) (5971 . 5973) (5969 . 5971) (5967 . 5968) (5966 . 5968) (5963 . 5966) (5961 . 5963) (5959 . 5961) (5955 . 5959) (5944 . 5950) (#("    " 0 4 (fontified nil)) . 5944) (5952 . 5953) (5944 . 5948) (#("      " 0 6 (fontified nil)) . 5944) (5953 . 5954) (5950 . 5953) (5944 . 5950) (5944 . 5945) 5974 (t 26079 1717 293035 237000)) nil (26079 1775 236689 519000) 0 nil])
([nil nil ((5970 . 5971) (5969 . 5970) (#("." 0 1 (fontified t)) . 5969) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (t 26079 1775 249700 485000)) nil (26079 1785 99260 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5992 . 5993) (#("
" 0 1 (fontified nil)) . -6029) (5986 . 6030) 5970 (t 26079 1785 113033 579000)) nil (26079 1874 195754 400000) 0 nil])
([nil nil ((6004 . 6010) (#("t" 0 1 (fontified t)) . -6004) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) 6005 (#("o" 0 1 (fontified t)) . -6005) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) 6006 (#("k" 0 1 (fontified t)) . -6006) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) 6007 (6004 . 6007) (#("op_st[0]->str" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face)) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 6004) (undo-tree-id5664 . -12) (undo-tree-id5665 . -13) (undo-tree-id5666 . -13)) nil (26079 1874 195749 809000) 0 nil])
([nil nil ((6007 . 6008) (6006 . 6007) (#("." 0 1 (fontified t)) . 6006) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (t 26079 1874 233031 407000)) nil (26079 1882 776944 617000) 0 nil])
([nil nil ((6014 . 6015) (6006 . 6014) (#(">" 0 1 (fontified t)) . 6006) (undo-tree-id5698 . 1) (#("-" 0 1 (fontified t)) . 6006) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (t 26079 1882 789697 864000)) nil (26079 1906 669320 327000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 6007) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (t 26079 1906 679697 282000)) nil (26079 1918 457714 941000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6008 . 6009) (nil fontified nil 6008 . 6009) (6008 . 6009) 6007) nil (26079 2191 918078 981000) 0 nil])
([nil nil ((apply -3 6079 6158 undo--wrap-and-run-primitive-undo 6079 6158 ((6085 . 6088) 6131)) (t 26079 1918 476363 659000)) nil (26079 2211 77964 234000) 0 nil] [nil nil ((5431 . 5442) (t 26079 1918 476363 659000)) ((#("jjjjjjjjjjj" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . 5431) (undo-tree-id5831 . -11) (undo-tree-id5832 . -11) (undo-tree-id5833 . -11)) (26079 2191 914215 130000) 0 nil] [nil nil ((7371 . 7377) (7371 . 7372) 7392 (t 26079 1918 476363 659000)) ((#("
" 0 1 (fontified nil)) . 7371) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . 1) (#("      " 0 6 (fontified t)) . 7371) (undo-tree-id5738 . -6) (undo-tree-id5739 . -6) (undo-tree-id5740 . -6) (undo-tree-id5741 . -6) (undo-tree-id5742 . -6) (undo-tree-id5743 . -6) (undo-tree-id5744 . -6) (undo-tree-id5745 . -6) (undo-tree-id5746 . -6) (undo-tree-id5747 . -6) (undo-tree-id5748 . -6) (undo-tree-id5749 . -6) (undo-tree-id5750 . -6) (undo-tree-id5751 . -6) (undo-tree-id5752 . -6) (undo-tree-id5753 . -6) (undo-tree-id5754 . -6) (undo-tree-id5755 . -6) (undo-tree-id5756 . -6) (undo-tree-id5757 . -6) (undo-tree-id5758 . -6) (undo-tree-id5759 . -6) (undo-tree-id5760 . -6) (undo-tree-id5761 . -6) (undo-tree-id5762 . -6) (undo-tree-id5763 . -6) (undo-tree-id5764 . -6) (undo-tree-id5765 . -6) (undo-tree-id5766 . -6) (undo-tree-id5767 . -6) (undo-tree-id5768 . -6) (undo-tree-id5769 . -6) (undo-tree-id5770 . -6) (undo-tree-id5771 . -6) (undo-tree-id5772 . -6) (undo-tree-id5773 . -6) (undo-tree-id5774 . -6) (undo-tree-id5775 . -6) (undo-tree-id5776 . -6) (undo-tree-id5777 . -6) (undo-tree-id5778 . -6) (undo-tree-id5779 . -6) (undo-tree-id5780 . -6) (undo-tree-id5781 . -6) (undo-tree-id5782 . -6) (undo-tree-id5783 . -6) (undo-tree-id5784 . -6) (undo-tree-id5785 . -6) (undo-tree-id5786 . -6) (undo-tree-id5787 . -6) (undo-tree-id5788 . -6) (undo-tree-id5789 . -6) (undo-tree-id5790 . -6) (undo-tree-id5791 . -6) (undo-tree-id5792 . -6) (undo-tree-id5793 . -6) (undo-tree-id5794 . -6) (undo-tree-id5795 . -6) (undo-tree-id5796 . -6) (undo-tree-id5797 . -6) (undo-tree-id5798 . -6) (undo-tree-id5799 . -6) (undo-tree-id5800 . -6) (undo-tree-id5801 . -6) (undo-tree-id5802 . -6) (undo-tree-id5803 . -6) (undo-tree-id5804 . -6) (undo-tree-id5805 . -6) (undo-tree-id5806 . -6) (undo-tree-id5807 . -6) (undo-tree-id5808 . -6) (undo-tree-id5809 . -6) (undo-tree-id5810 . -6) (undo-tree-id5811 . -6) (undo-tree-id5812 . -6) (undo-tree-id5813 . -6) (undo-tree-id5814 . -6) (undo-tree-id5815 . -6) (undo-tree-id5816 . -6) (undo-tree-id5817 . -6) (undo-tree-id5818 . -6) (undo-tree-id5819 . -6) (undo-tree-id5820 . -6) (undo-tree-id5821 . -6) (undo-tree-id5822 . -6) (undo-tree-id5823 . -6) (undo-tree-id5824 . -6) (undo-tree-id5825 . -6) (undo-tree-id5826 . -6) (undo-tree-id5827 . -6) (undo-tree-id5828 . -6) (undo-tree-id5829 . -6) (undo-tree-id5830 . -6)) (26079 2181 161867 292000) 0 nil])
([nil nil ((apply -3 5218 5332 undo--wrap-and-run-primitive-undo 5218 5332 ((5222 . 5225) 5268))) nil (26079 2211 77963 481000) 0 nil])
nil
([nil nil ((7377 . 7378)) ((#("P" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 7377) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1)) (26079 2181 159048 120000) 0 nil])
([nil nil ((6092 . 6093) (6088 . 6092) (6081 . 6088) 6078) nil (26079 2211 77959 674000) 0 nil])
nil
([nil nil ((#("tok;/" 0 4 (fontified t) 4 5 (fontified t face font-lock-comment-delimiter-face)) . 14318) (undo-tree-id5834 . -4) (t 26079 2211 93023 185000)) nil (26079 2240 120680 573000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 14318)) nil (26079 2240 120671 403000) 0 nil])
([nil nil ((#("a2" 0 2 (fontified t)) . 12710) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (t 26079 2240 133022 475000)) nil (26079 2268 38578 850000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 12710) (undo-tree-id5840 . 1)) nil (26079 2268 38575 966000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 12710) (undo-tree-id5839 . 1)) nil (26079 2268 38574 886000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 12710) (undo-tree-id5838 . 1)) nil (26079 2268 38573 293000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 12710) (undo-tree-id5835 . 1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1)) nil (26079 2268 38569 136000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 12704) (t 26079 2268 66355 126000)) nil (26079 2459 150776 197000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 12704) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1)) nil (26079 2459 150775 237000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 12704) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1)) nil (26079 2459 150773 201000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 12704) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1)) nil (26079 2459 150771 120000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 12704) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1)) nil (26079 2459 150768 827000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 12704) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1)) nil (26079 2459 150764 668000) 0 nil])
([nil nil ((12708 . 12709) (#("q" 0 1 (fontified t)) . -12708) (undo-tree-id5858 . -1) (#("1" 0 1 (fontified t)) . -12709) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) 12710 (12707 . 12710) (#("s" 0 1 (fontified t)) . -12707) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) 12708 (12707 . 12708) (12706 . 12707) (12704 . 12706) (12704 . 12705) (t 26079 2459 166350 455000)) nil (26079 2481 389120 919000) 0 nil])
([nil nil ((12705 . 12706) (#("1" 0 1 (fontified t)) . 12705)) nil (26079 2481 389108 235000) 0 nil])
([nil nil ((12722 . 12724) (12721 . 12722) (12716 . 12718) (12715 . 12716) (12713 . 12715) (12712 . 12713) (12716 . 12718) (12715 . 12716) (12713 . 12715) (12712 . 12713) (12713 . 12715) (12712 . 12713) (12707 . 12709) (12706 . 12707) (t 26079 2481 406349 912000)) nil (26079 3324 827289 125000) 0 nil])
([nil nil ((14276 . 14285) (14275 . 14276) (14273 . 14275) (14271 . 14273) (14270 . 14271) (14280 . 14281) (14277 . 14280) (14275 . 14277) (14272 . 14275) (14271 . 14272) (14268 . 14269) (nil syntax-table nil 14270 . 14271) (nil syntax-table (1) 14264 . 14265) (14265 . 14268) (14264 . 14266) (14263 . 14265) (14257 . 14263) (#("p" 0 1 (fontified t)) . -14257) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) 14258 (14257 . 14258) (14254 . 14257) 14251) nil (26079 3376 780882 279000) 0 nil] [nil nil ((apply -75 13610 14364 undo--wrap-and-run-primitive-undo 13610 14364 ((14325 . 14328) (14269 . 14272) (14244 . 14247) (14194 . 14197) (14169 . 14172) (14117 . 14120) (14092 . 14095) (14040 . 14043) (14015 . 14018) (14005 . 14008) (13987 . 13990) (13971 . 13974) (13918 . 13921) (13909 . 13912) (13884 . 13887) (13870 . 13873) (13855 . 13858) (13815 . 13818) (13808 . 13811) (13756 . 13759) (13748 . 13751) (13690 . 13693) (13683 . 13686) (13629 . 13632) (13612 . 13615) 14255)) (t 26079 3159 743000 67000)) ((apply 75 13610 14289 undo--wrap-and-run-primitive-undo 13610 14289 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13612) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13629) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13683) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13690) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13748) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13756) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13808) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13815) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13855) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13870) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13884) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13909) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13918) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13971) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 13987) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14005) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14015) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14040) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14092) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14117) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14169) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#<marker at 14332 in synatax_ptr.cpp> . -3) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14194) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14244) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14269) (#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 14325) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) (#<marker at 14476 in synatax_ptr.cpp> . -3) 14335)) (t 26079 3297 162996 732000)) (26079 3297 144704 39000) 0 nil])
([nil nil ((14307 . 14314) (14286 . 14307) (14265 . 14286) (t 26079 3376 802994 792000)) nil (26079 3411 305831 157000) 0 nil])
nil
([nil nil ((14352 . 14353) (14348 . 14352) (14345 . 14348) (t 26079 3411 319660 623000) 14344) nil (26079 3530 319477 211000) 0 nil])
([nil nil ((14369 . 14370) (14365 . 14369) (14363 . 14365) (14360 . 14363) (14358 . 14360) (14355 . 14358) (14354 . 14355) (14350 . 14354) (14348 . 14350) (14344 . 14348) (#("v" 0 1 (fontified t)) . -14344) (undo-tree-id5865 . -1) 14345 (14344 . 14345) (14337 . 14339) (#(" " 0 1 (fontified nil)) . 14337) (14342 . 14343) (14337 . 14338) (#("  " 0 2 (fontified nil)) . 14337) (14342 . 14343) (14339 . 14342) (#("st" 0 2 (fontified nil)) . 14339) (14339 . 14341) (#("std" 0 3 (fontified nil)) . -14339) (14339 . 14342) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -14339) (undo-tree-id5866 . -2) 14341 (14339 . 14341) (14336 . 14339) (t 26079 3530 336324 386000) 14261) nil (26079 3591 686553 281000) 0 nil])
([nil nil ((14466 . 14469) (14466 . 14467) (14466 . 14468) (t 26079 3591 699656 226000)) nil (26079 3655 316613 375000) 0 nil])
([nil nil ((apply -3 14380 14425 undo--wrap-and-run-primitive-undo 14380 14425 ((14382 . 14385) 14388)) (t 26079 3655 346321 347000)) nil (26079 3682 372182 807000) 0 nil])
([nil nil ((6650 . 6651) (6646 . 6650) (6641 . 6646) (t 26079 3682 389654 22000) 6639) nil (26079 5873 20995 257000) 0 nil])
([nil nil ((apply -3 6082 6152 undo--wrap-and-run-primitive-undo 6082 6152 ((6088 . 6091) 6094)) (t 26079 5873 42934 159000)) nil (26079 5977 402095 55000) 0 nil])
([nil nil ((apply -3 6645 6689 undo--wrap-and-run-primitive-undo 6645 6689 ((6649 . 6652) 6655)) (t 26079 5977 416264 957000)) nil (26079 6013 675125 215000) 0 nil])
([nil nil ((6749 . 6750) (6745 . 6749) (6740 . 6745) 6739) nil (26079 6013 675121 60000) 0 nil])
([nil nil ((apply -3 6741 6806 undo--wrap-and-run-primitive-undo 6741 6806 ((6745 . 6748) 6751)) (t 26079 6013 689597 410000)) nil (26079 6112 916734 491000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5694 . 5695) (#("
" 0 1 (face font-lock-comment-face c-in-sws t fontified nil)) . -5751) (5688 . 5752) (t 26079 6114 176261 638000)) nil (26079 6167 445513 562000) 0 nil] [nil nil ((apply 3 6082 6094 undo--wrap-and-run-primitive-undo 6082 6094 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6088) 6097)) (t 26079 6023 492930 504000)) ((apply -3 6082 6097 undo--wrap-and-run-primitive-undo 6082 6097 ((6088 . 6091) 6090)) (t 26079 6105 52928 526000)) (26079 6105 35767 336000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5737) (#("/" 0 1 (fontified t)) . 5737) (#("/" 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face)) . 5737) (5733 . 5737) (#("      " 0 6 (c-in-sws t c-is-sws t fontified t)) . 5733) (undo-tree-id5867 . -4) (undo-tree-id5868 . -4) (undo-tree-id5869 . -4) (undo-tree-id5870 . -4) (undo-tree-id5871 . -4) (undo-tree-id5872 . -4) (undo-tree-id5873 . -4) (undo-tree-id5874 . -4) (undo-tree-id5875 . -4) (undo-tree-id5876 . -4) (undo-tree-id5877 . -4) (undo-tree-id5878 . -4) (undo-tree-id5879 . -4) (undo-tree-id5880 . -4) (undo-tree-id5881 . -4) (undo-tree-id5882 . -4) (undo-tree-id5883 . -4) (undo-tree-id5884 . -4) (undo-tree-id5885 . -4) (undo-tree-id5886 . -4) (undo-tree-id5887 . -4) (undo-tree-id5888 . -4) (undo-tree-id5889 . -4) (undo-tree-id5890 . -4) (undo-tree-id5891 . -4) (undo-tree-id5892 . -4) (undo-tree-id5893 . -4) (undo-tree-id5894 . -4) (undo-tree-id5895 . -4) (undo-tree-id5896 . -4) (undo-tree-id5897 . -4) (undo-tree-id5898 . -4) (undo-tree-id5899 . -4) (undo-tree-id5900 . -4) (undo-tree-id5901 . -4) (undo-tree-id5902 . -4) (undo-tree-id5903 . -4) (undo-tree-id5904 . -4) (undo-tree-id5905 . -4) (undo-tree-id5906 . -4) (undo-tree-id5907 . -4) (undo-tree-id5908 . -4) (undo-tree-id5909 . -4) (undo-tree-id5910 . -4) (undo-tree-id5911 . -4) (undo-tree-id5912 . -4) (undo-tree-id5913 . -4) (undo-tree-id5914 . -4) (undo-tree-id5915 . -4) (undo-tree-id5916 . -4) (undo-tree-id5917 . -4) (undo-tree-id5918 . -4) (undo-tree-id5919 . -4) (undo-tree-id5920 . -4) (undo-tree-id5921 . -4) (undo-tree-id5922 . -4) (undo-tree-id5923 . -4) (undo-tree-id5924 . -4) (undo-tree-id5925 . -4) 5737 (5722 . 5726) (#("      " 0 6 (fontified t)) . 5722) (undo-tree-id5926 . -4) (undo-tree-id5927 . -4) (undo-tree-id5928 . -4) (undo-tree-id5929 . -4) (undo-tree-id5930 . -4) (undo-tree-id5931 . -4) (undo-tree-id5932 . -4) (undo-tree-id5933 . -4) (undo-tree-id5934 . -4) (undo-tree-id5935 . -4) (undo-tree-id5936 . -4) (undo-tree-id5937 . -4) (undo-tree-id5938 . -4) (undo-tree-id5939 . -4) (undo-tree-id5940 . -4) (undo-tree-id5941 . -4) (undo-tree-id5942 . -4) (undo-tree-id5943 . -4) (undo-tree-id5944 . -4) (undo-tree-id5945 . -4) (undo-tree-id5946 . -4) (undo-tree-id5947 . -4) (undo-tree-id5948 . -4) (undo-tree-id5949 . -4) (undo-tree-id5950 . -4) (undo-tree-id5951 . -4) (undo-tree-id5952 . -4) (undo-tree-id5953 . -4) (undo-tree-id5954 . -4) 5726 (5689 . 5693) (#("      " 0 5 (c-is-sws t fontified t) 5 6 (fontified t rear-nonsticky t c-is-sws t)) . -5689) (undo-tree-id5955 . -6) 5695) nil (26079 6167 445504 181000) 0 nil])
nil
([nil nil ((apply -3 5733 5816 undo--wrap-and-run-primitive-undo 5733 5816 ((5737 . 5740) 5743)) (t 26079 6167 462927 8000)) nil (26079 6237 80005 377000) 0 nil])
([nil nil ((apply 3 6702 6712 undo--wrap-and-run-primitive-undo 6702 6712 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -6706) 6715))) nil (26079 6237 80004 193000) 0 nil])
([nil nil ((apply 3 5733 5743 undo--wrap-and-run-primitive-undo 5733 5743 ((#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face c-in-sws t) 1 3 (fontified t face font-lock-comment-delimiter-face c-in-sws t)) . -5737) 5746))) nil (26079 6237 80000 621000) 0 nil])
([nil nil ((apply -3 6699 6743 undo--wrap-and-run-primitive-undo 6699 6743 ((6703 . 6706) 6709)) (t 26079 6237 96258 637000)) nil (26079 6991 671823 949000) 0 nil])
([nil nil ((6594 . 6595) (6590 . 6594) (6585 . 6590) 6583) nil (26079 6991 671819 441000) 0 nil])
([nil nil ((6695 . 6696) (t 26079 6991 712906 952000)) nil (26079 7041 364237 550000) 0 nil])
([nil nil ((6696 . 6698)) nil (26079 7041 364233 538000) 0 nil])
([nil nil ((6697 . 6699) (t 26079 7041 402905 740000)) nil (26079 7083 111119 881000) 0 nil])
([nil nil ((6698 . 6699)) nil (26079 7083 111119 184000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-string-face)) . -6698) (undo-tree-id5964 . -1) 6699) nil (26079 7083 111118 558000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . -6697) (undo-tree-id5962 . -1) (nil syntax-table nil 6701 . 6702) (nil syntax-table (1) 6697 . 6698) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 6698) (undo-tree-id5963 . 1)) nil (26079 7083 111117 44000) 0 nil])
([nil nil ((#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6696) (undo-tree-id5958 . -1) (undo-tree-id5959 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6697) (undo-tree-id5960 . 1) (undo-tree-id5961 . 1)) nil (26079 7083 111114 526000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6695) (undo-tree-id5956 . -1) (undo-tree-id5957 . -1) 6696) nil (26079 7092 322971 879000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5152 . 5153) (#("
" 0 1 (fontified nil)) . -5202) (5148 . 5203) 5095 (t 26079 7083 126238 56000)) nil (26079 7178 464571 985000) 0 nil] [nil nil ((6695 . 6697) (t 26079 7083 126238 56000)) ((#("kk" 0 1 (fontified t) 1 2 (fontified t)) . 6695) (undo-tree-id5965 . -2) (undo-tree-id5966 . -2) (undo-tree-id5967 . -2)) (26079 7092 319755 999000) 0 nil])
([nil nil ((apply -3 5787 5870 undo--wrap-and-run-primitive-undo 5787 5870 ((5791 . 5794) 5797))) nil (26079 7178 464570 955000) 0 nil])
nil
([nil nil ((apply -3 6643 6733 undo--wrap-and-run-primitive-undo 6643 6733 ((6647 . 6650) 6653))) nil (26079 7178 464567 365000) 0 nil])
([nil nil ((apply 3 5787 5797 undo--wrap-and-run-primitive-undo 5787 5797 ((#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face c-in-sws t) 1 3 (fontified t face font-lock-comment-delimiter-face c-in-sws t)) . -5791) 5800)) (t 26079 7178 482902 405000)) nil (26079 7358 91265 940000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -5192) (5148 . 5193) 5091 (t 26079 7358 109564 705000)) nil (26079 7637 9617 761000) 0 nil])
([nil nil ((7813 . 7814) (7808 . 7813) (7803 . 7808) (t 26079 7637 36224 625000) 7776) nil (26079 7714 282830 825000) 0 nil])
([nil nil ((7829 . 7833) (#("s" 0 1 (fontified t)) . -7829) (undo-tree-id5968 . -1) 7830 (7826 . 7830) (7834 . 7839) (7833 . 7834) (7833 . 7834) (#(")" 0 1 (fontified nil)) . -7833) (7833 . 7834) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -7827) (undo-tree-id5969 . -1) (undo-tree-id5970 . -1) (undo-tree-id5971 . 1) (undo-tree-id5972 . -1) 7828 (7826 . 7828) (t 26079 7714 296222 745000)) nil (26079 7797 646487 908000) 0 nil])
([nil nil ((7831 . 7832) (#("s" 0 1 (fontified t)) . 7831)) nil (26079 7797 646475 235000) 0 nil])
([nil nil ((apply -3 5831 5914 undo--wrap-and-run-primitive-undo 5831 5914 ((5835 . 5838) 5841)) (t 26079 7797 662887 394000)) nil (26079 7843 132784 325000) 0 nil])
([nil nil ((apply -3 5237 5251 undo--wrap-and-run-primitive-undo 5237 5251 ((5241 . 5244) 5247))) nil (26079 7843 132779 675000) 0 nil])
([nil current ((apply 3 5237 5247 undo--wrap-and-run-primitive-undo 5237 5247 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -5241) 5250)) (t 26079 7843 162886 296000)) nil (26079 7889 961173 184000) 0 nil])
nil
