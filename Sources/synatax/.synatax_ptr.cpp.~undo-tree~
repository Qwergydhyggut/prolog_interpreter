(undo-tree-save-format-version . 1)
"3ea4c5d9f3e9882a1826bb00bac608232bf9d601"
[nil nil nil nil (26073 40703 481297 377000) 0 nil]
([nil nil ((1 . 2) (t 26073 40136 506760 876000)) nil (26073 40703 481296 508000) 0 nil])
([nil nil ((2 . 10)) nil (26073 40703 481296 35000) 0 nil])
([nil nil ((10 . 12)) nil (26073 40703 481295 594000) 0 nil])
([nil nil ((11 . 18)) nil (26073 40703 481295 234000) 0 nil])
([nil nil ((18 . 20)) nil (26073 40703 481294 740000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face fontified t)) . -19) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 20) nil (26073 40703 481294 86000) 0 nil])
([nil nil ((19 . 24)) nil (26073 40703 481292 435000) 0 nil])
([nil nil ((27 . 27) (27 . 28) (26 . 26) (26 . 27) (25 . 25) (25 . 26)) nil (26073 40703 481291 652000) 0 nil])
([nil nil ((28 . 30)) nil (26073 40703 481290 718000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -29) (undo-tree-id45 . -1) (undo-tree-id46 . -1) 30) nil (26073 40703 481290 50000) 0 nil])
([nil nil ((29 . 30)) nil (26073 40703 481287 909000) 0 nil])
([nil nil ((28 . 39) (#("sy" 0 2 (fontified nil)) . 28) (28 . 30) (#("synatax_mod" 0 11 (fontified nil)) . -28) (28 . 39) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -28) (undo-tree-id43 . -2) (undo-tree-id44 . -2) 30) nil (26073 40703 481287 72000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -36) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("o" 0 1 (fontified t)) . -37) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("d" 0 1 (fontified t)) . -38) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 39) nil (26073 40703 481284 460000) 0 nil])
([nil nil ((36 . 38)) nil (26073 40703 481280 517000) 0 nil])
([nil nil ((28 . 45) (#("synatax_pt" 0 10 (fontified nil)) . 28) (28 . 38) (#("synatax_ptr_class" 0 17 (fontified nil)) . -28) (28 . 45) (#("synatax_pt" 0 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . -28) (undo-tree-id35 . -10) (undo-tree-id36 . -10) 38) nil (26073 40703 481279 613000) 0 nil])
([nil nil ((26 . 26) (26 . 27)) nil (26073 40703 481277 426000) 0 nil])
([nil nil ((26 . 27)) nil (26073 40703 481276 924000) 0 nil])
([nil nil ((27 . 29)) nil (26073 40703 481276 513000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -28) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 29) nil (26073 40703 481275 914000) 0 nil])
([nil nil ((28 . 29)) nil (26073 40703 481273 751000) 0 nil])
([nil nil ((apply yas--snippet-revive 27 37 #s(yas--snippet nil nil #s(yas--exit 36 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 36 nil) 4 nil nil nil nil)) (27 . 37) (#("include <$0>" 0 8 (fontified nil) 8 9 (fontified nil syntax-table (4 . 62)) 9 11 (fontified nil) 11 12 (fontified nil syntax-table (5 . 60))) . 27) (undo-tree-id26 . -12) (27 . 39) (#("i" 0 1 (fontified nil c-in-sws t)) . 27) (undo-tree-id27 . -1) (27 . 28) (#("include <header>" 0 8 (fontified nil) 8 9 (fontified nil syntax-table (4 . 62)) 9 15 (fontified nil) 15 16 (fontified nil syntax-table (5 . 60))) . -27) (undo-tree-id28 . -16) (27 . 43) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -27) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) 29) nil (26073 40703 481272 482000) 0 nil])
([nil nil ((36 . 38)) nil (26073 40703 481268 413000) 0 nil])
([nil nil ((36 . 43) (#("v>" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 36) (undo-tree-id23 . -2) (36 . 37) (#("vector>" 0 7 (fontified nil c-in-sws t)) . -36) (36 . 43) (#("ve" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -36) (undo-tree-id24 . -2) (undo-tree-id25 . -2) 38) nil (26073 40703 481267 557000) 0 nil])
([nil nil ((43 . 43) (43 . 44)) nil (26073 40703 481265 41000) 0 nil])
([nil nil ((44 . 45)) nil (26073 40703 481264 627000) 0 nil])
([nil nil ((#("@" 0 1 (c-is-sws t fontified t)) . -44) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 45) nil (26073 40703 481264 108000) 0 nil])
([nil nil ((44 . 45)) nil (26073 40703 481262 608000) 0 nil])
([nil nil ((45 . 46)) nil (26073 40703 481262 31000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -45) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 46) nil (26073 40703 481261 422000) 0 nil])
([nil nil ((45 . 47)) nil (26073 40703 481259 261000) 0 nil])
([nil nil ((apply yas--snippet-revive 45 55 #s(yas--snippet nil nil #s(yas--exit 54 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 54 nil) 5 nil nil nil nil)) (45 . 55) (#("include \"$0\"" 0 12 (fontified nil)) . 45) (undo-tree-id12 . -12) (45 . 57) (#("i" 0 1 (fontified nil c-in-sws t)) . 45) (undo-tree-id13 . -1) (45 . 46) (#("include \"header\"" 0 16 (fontified nil)) . -45) (undo-tree-id14 . -16) (45 . 61) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -45) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) 47) nil (26073 40703 481258 119000) 0 nil])
([nil nil ((54 . 58)) nil (26073 40703 481253 187000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -57) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 58) nil (26073 40703 481252 519000) 0 nil])
([nil nil ((57 . 61)) nil (26073 40703 481250 949000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -60) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 61) nil (26073 40703 481249 896000) 0 nil])
([nil nil ((60 . 61)) nil (26073 40703 481248 354000) 0 nil])
([nil nil ((#("j" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -60) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 61) nil (26073 40703 481247 703000) 0 nil])
([nil nil ((60 . 61)) nil (26073 40703 481246 202000) 0 nil])
([nil nil ((65 . 66)) nil (26073 40703 481245 650000) 0 nil])
([nil nil ((65 . 68)) nil (26073 40703 481245 99000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -67) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 68) nil (26073 40703 481244 233000) 0 nil])
([nil nil ((67 . 68)) nil (26073 40703 481241 971000) 0 nil])
([nil nil ((68 . 70)) nil (26073 40703 481241 441000) 0 nil])
([nil nil ((70 . 73)) nil (26073 40703 481240 973000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 77 99 nil nil nil t nil)) nil 6 nil #s(yas--field 1 77 99 nil nil nil t nil) nil nil)) (70 . 89) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 70) (70 . 94) (#("v" 0 1 (fontified nil)) . 70) (70 . 71) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (fontified nil syntax-table (4 . 62)) 7 18 (fontified nil) 18 19 (fontified nil c-type c-<>-arg-sep) 19 34 (fontified nil) 34 35 (fontified nil syntax-table (5 . 60))) . -70) (70 . 105) (#("vec" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -70) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 73) nil (26073 40703 481239 797000) 0 nil])
([nil nil ((78 . 79) (#("typename Tp" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 11 (face font-lock-type-face fontified nil)) . 78) (77 . 78)) nil (26073 40703 481237 14000) 0 nil])
([nil nil ((nil fontified nil 77 . 88) (nil face (rainbow-delimiters-depth-1-face) 77 . 88) (77 . 88) (#("to" 0 2 (fontified nil)) . 77) (nil fontified nil 77 . 79) (nil face (rainbow-delimiters-depth-1-face) 77 . 79) (77 . 79) (#("token_class" 0 11 (fontified nil)) . -77) (nil fontified nil 77 . 88) (nil face (rainbow-delimiters-depth-1-face) 77 . 88) (77 . 88) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -77) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 79) nil (26073 40703 481235 483000) 0 nil])
([nil nil ((88 . 89)) nil (26073 40703 481204 479000) 0 nil])
([nil nil ((89 . 90)) nil (26073 40703 481203 942000) 0 nil])
([nil nil ((90 . 99) (#("bnf_token" 0 9 (fontified nil)) . -90) (90 . 99)) nil (26073 40703 481202 969000) 0 nil])
([nil nil ((apply yas--snippet-revive 70 100 #s(yas--snippet nil (#s(yas--field 1 77 99 nil nil nil t nil)) nil 6 nil #s(yas--field 1 77 99 nil nil nil t nil) nil nil))) nil (26073 40703 481202 419000) 0 nil])
([nil nil ((118 . 120)) nil (26073 40703 481202 121000) 0 nil])
([nil nil ((120 . 127)) nil (26073 40703 482777 667000) 0 nil])
([nil nil ((182 . 183) (179 . 182) (180 . 183) (#("  " 0 2 (fontified t)) . 180) (undo-tree-id52 . -2) (undo-tree-id53 . -2) 182 (180 . 182) (179 . 181) (#("  " 0 2 (fontified nil)) . 178) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (180 . 182) (177 . 180) (173 . 176) (172 . 173) (nil fontified nil 154 . 172) (154 . 172) (#("to" 0 2 (fontified nil)) . 154) (nil fontified nil 154 . 156) (154 . 156) (#("token_class::token" 0 18 (fontified nil)) . -154) (nil fontified nil 154 . 172) (154 . 172) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -154) (undo-tree-id56 . -2) (undo-tree-id57 . -2) 156 (154 . 156) (153 . 154) (151 . 153) (150 . 151) (141 . 150) (#("b" 0 1 (fontified nil)) . 141) (141 . 142) (#("bnf_token" 0 9 (fontified nil)) . -141) (141 . 150) (#("b" 0 1 (fontified t)) . -141) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 142 (141 . 142) (#("t" 0 1 (fontified t)) . -141) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("o" 0 1 (fontified t)) . -142) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("k" 0 1 (fontified t)) . -143) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("e" 0 1 (fontified t)) . -144) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("n" 0 1 (fontified t)) . -145) (undo-tree-id68 . -1) (undo-tree-id69 . -1) 146 (nil fontified nil 128 . 146) (nil face (rainbow-delimiters-depth-1-face) 128 . 146) (128 . 146) (#("to" 0 2 (fontified nil)) . 128) (nil fontified nil 128 . 130) (nil face (rainbow-delimiters-depth-1-face) 128 . 130) (128 . 130) (#("token_class::token" 0 18 (fontified nil)) . -128) (nil fontified nil 128 . 146) (nil face (rainbow-delimiters-depth-1-face) 128 . 146) (128 . 146) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -128) (undo-tree-id70 . -3) (undo-tree-id71 . -3) 131 (128 . 131) (127 . 129)) nil (26073 40735 827410 762000) 0 nil] [nil nil ((127 . 129)) ((#("[]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t)) . 127) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1)) (26073 40703 481197 721000) 0 nil])
([nil nil ((189 . 190) 182) nil (26073 40735 827385 164000) 0 nil])
nil
([nil nil ((17 . 18) (11 . 17) (11 . 12) (t 26073 40735 833451 775000)) nil (26073 42163 802945 248000) 0 nil])
([nil nil ((197 . 198) (t 26073 42163 810175 789000) 196) nil (26073 42603 331060 131000) 0 nil])
([nil nil ((nil rear-nonsticky nil 200 . 201) (#("
" 0 1 (fontified nil)) . -387) (198 . 388)) nil (26073 42603 331059 460000) 0 nil])
([nil nil ((194 . 194) (194 . 195) (#("
  
" 0 4 (fontified t)) . -192) (undo-tree-id11 . -4) (undo-tree-id12 . -4) 196 (197 . 197) (197 . 198) (#("

  " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . 197) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -2) 201) nil (26073 42603 331058 436000) 0 nil])
([nil nil ((#("static " 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 195) (undo-tree-id9 . 7) (undo-tree-id10 . -6)) nil (26073 42603 331054 608000) 0 nil])
([nil nil ((192 . 195) (#("  " 0 2 (fontified t)) . 192) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 194 (191 . 194) (397 . 398) (394 . 397) (395 . 398) (#("  " 0 2 (fontified t)) . 395) (undo-tree-id2 . -2) (undo-tree-id3 . -2) 397 (395 . 397) (394 . 396) (#("  " 0 2 (fontified nil)) . 393) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (395 . 397) (392 . 395) (#(";" 0 1 (fontified t)) . -392) (undo-tree-id6 . -1) 393 (228 . 245) (#("sy" 0 2 (fontified nil)) . 228) (228 . 230) (#("synatax_ptr_class" 0 17 (fontified nil)) . -228) (228 . 245) (#("sy" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face)) . -228) (undo-tree-id7 . -2) (undo-tree-id8 . -2) 230 (228 . 230) (228 . 230)) nil (26073 42603 331049 571000) 0 nil])
([nil nil ((341 . 342) (t 26073 42603 350193 373000)) nil (26073 46724 505841 903000) 0 nil])
([nil nil ((385 . 386)) nil (26073 46724 505838 206000) 0 nil])
([nil nil ((nil rear-nonsticky nil 189 . 190) (#("
" 0 1 (fontified nil)) . -2893) (187 . 2894) 186 (t 26073 46724 517024 807000)) nil (26073 46816 11360 838000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 2896)) nil (26073 46816 11360 33000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 2894) (undo-tree-id32 . 1) (undo-tree-id33 . -2) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 2895) nil (26073 46816 11359 50000) 0 nil])
([nil nil ((#("    // {{S,{{token_class::token::Inter_t,{E,Ter}},
    // 	 {token_class::token::Lkh_t,{E,Ter}}}},
    //  {E,{{token_class::token::Inter_t,{F,E1}},
    // 	 {token_class::token::Lkh_t,{F,E1}}}},
    //  {T,{{token_class::token::Inter_t,{F,T2}},
    // 	 {token_class::token::Lkh_t,{F,T2}}}},
    //  {F,{{token_class::token::Inter_t,{ID}},
    // 	 {token_class::token::Lkh_t,{Lkh,E,Rkh}}}},
    //  {E1,{{token_class::token::AND_t,{OP,T,E2}}}},
    //  {T1,{{token_class::token::OR_t,{OP,T,T2}}}},
    //  {E2,{{token_class::token::Ter_t,{Ter}},
    // 	  {token_class::token::AND_t,{E1}}}},
    //  {T2,{{token_class::token::Ter_t,{Ter}},
    // 	  {token_class::token::OR_t,{T1}},
    // 	  {token_class::token::AND_t,{E1}}}}};
     // {Ter,{{token_class::token::Ter_t,{Ter}}}}};
" 0 4 (fontified t c-in-sws t c-is-sws t) 4 5 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 5 7 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 7 51 (fontified t c-in-sws t face font-lock-comment-face) 51 55 (fontified t c-in-sws t) 55 60 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 60 99 (fontified t c-in-sws t face font-lock-comment-face) 99 103 (fontified t c-in-sws t) 103 107 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 107 149 (fontified t c-in-sws t face font-lock-comment-face) 149 153 (fontified t c-in-sws t) 153 158 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 158 196 (fontified t c-in-sws t face font-lock-comment-face) 196 200 (fontified t c-in-sws t) 200 204 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 204 246 (fontified t c-in-sws t face font-lock-comment-face) 246 250 (fontified t c-in-sws t) 250 255 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 255 293 (fontified t c-in-sws t face font-lock-comment-face) 293 297 (fontified t c-in-sws t) 297 301 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 301 341 (fontified t c-in-sws t face font-lock-comment-face) 341 345 (fontified t c-in-sws t) 345 350 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 350 393 (fontified t c-in-sws t face font-lock-comment-face) 393 397 (fontified t c-in-sws t) 397 401 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 401 447 (fontified t c-in-sws t face font-lock-comment-face) 447 451 (fontified t c-in-sws t) 451 455 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 455 500 (fontified t c-in-sws t face font-lock-comment-face) 500 504 (fontified t c-in-sws t) 504 508 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 508 548 (fontified t c-in-sws t face font-lock-comment-face) 548 552 (fontified t c-in-sws t) 552 558 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 558 594 (fontified t c-in-sws t face font-lock-comment-face) 594 598 (fontified t c-in-sws t) 598 602 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 602 642 (fontified t c-in-sws t face font-lock-comment-face) 642 646 (fontified t c-in-sws t) 646 652 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 652 685 (fontified t c-in-sws t face font-lock-comment-face) 685 689 (fontified t c-in-sws t) 689 695 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 695 732 (fontified t c-in-sws t face font-lock-comment-face) 732 737 (fontified t c-in-sws t) 737 740 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 740 784 (fontified t c-in-sws t face font-lock-comment-face)) . 2068) (undo-tree-id26 . -732) (undo-tree-id27 . -783) (undo-tree-id28 . -732) (undo-tree-id29 . -732) (undo-tree-id30 . -732) (undo-tree-id31 . -732) 2800) nil (26073 46816 11356 425000) 0 nil])
([nil nil ((#("  // static std::vector<token_class::bnf_token> T1={T,E};" 0 2 (fontified t c-in-sws t c-is-sws t) 2 3 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 3 5 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 5 57 (fontified t face font-lock-comment-face c-in-sws t)) . 1062) (undo-tree-id25 . -56)) nil (26073 46816 11352 785000) 0 nil])
([nil nil ((#("
  // static bnf_token_1 TT(bnf_token_1::T);
  // static bnf_token_1 EE(bnf_token_1::E);
  // static std::map<bnf_token_1, bnf_token_1> mdzz111={{TT,EE}};
" 0 1 (fontified t) 1 3 (fontified t c-in-sws t c-is-sws t) 3 4 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 4 6 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 6 45 (fontified t c-in-sws t face font-lock-comment-face) 45 47 (fontified t c-in-sws t) 47 50 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 50 89 (fontified t c-in-sws t face font-lock-comment-face) 89 91 (fontified t c-in-sws t) 91 92 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 92 94 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 94 155 (fontified t c-in-sws t face font-lock-comment-face)) . 1062) (undo-tree-id18 . 155) (undo-tree-id19 . -89) (undo-tree-id20 . -154) (undo-tree-id21 . -89) (undo-tree-id22 . -89) (undo-tree-id23 . -89) (undo-tree-id24 . -89) 1151) nil (26073 46816 11351 168000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -1062) (undo-tree-id16 . -2) (undo-tree-id17 . -2) 1064 (1062 . 1064) (1062 . 1063)) nil (26073 46816 11344 22000) 0 nil])
([nil nil ((64 . 65) (62 . 64) (apply yas--snippet-revive 53 63 #s(yas--snippet nil nil #s(yas--exit 62 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 62 nil) 5 nil nil nil nil)) (53 . 63) (#("include <$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 53) (undo-tree-id36 . -12) (53 . 65) (#("i" 0 1 (c-in-sws t fontified nil)) . 53) (undo-tree-id37 . -1) (53 . 54) (#("include <header>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 15 (fontified nil) 15 16 (syntax-table (5 . 60) fontified nil)) . -53) (undo-tree-id38 . -16) (53 . 69) (#("inc" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -53) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) 56 (54 . 56) (#("m" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -54) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 55 (53 . 55) (#("o" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -53) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 54 (53 . 54) (52 . 53) (#("#" 0 1 (fontified t c-is-sws t)) . -52) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 53 (52 . 53) (#("@" 0 1 (fontified t c-is-sws t)) . -52) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 53 (52 . 53) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 51 . 52) (nil fontified t 51 . 52) (nil c-in-sws t 51 . 52) (51 . 52) (t 26073 46816 20361 809000) 50) nil (26073 46840 882890 622000) 0 nil])
([nil nil ((103 . 104) (nil syntax-table nil 103 . 104) (nil syntax-table (1) 95 . 96) (#("\"" 0 1 (fontified nil face font-lock-string-face c-in-sws t)) . -103) (undo-tree-id52 . -1) (103 . 104) (nil syntax-table nil 103 . 104) (nil syntax-table (1) 95 . 96) (102 . 103) (nil syntax-table nil 102 . 103) (nil syntax-table (1) 95 . 96) (101 . 102) (nil syntax-table nil 101 . 102) (nil syntax-table (1) 95 . 96) (#("/" 0 1 (fontified t face font-lock-string-face)) . -101) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (nil syntax-table nil 102 . 103) (nil syntax-table (1) 95 . 96) (96 . 102) (nil syntax-table nil 96 . 97) (nil syntax-table (1) 95 . 96) (#("d\"" 0 1 (c-in-sws t fontified nil) 1 2 (fontified nil face font-lock-string-face c-in-sws t)) . 96) (undo-tree-id55 . -2) (undo-tree-id56 . 1) (96 . 97) (#("debug/" 0 6 (c-in-sws t fontified nil)) . -96) (96 . 102) (#("de" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face)) . -96) (undo-tree-id57 . -2) (undo-tree-id58 . -2) 98 (96 . 98) (apply yas--snippet-revive 87 97 #s(yas--snippet nil nil #s(yas--exit 96 nil) 6 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 96 nil) 6 nil nil nil nil)) (87 . 97) (#("include \"$0\"" 0 12 (fontified nil)) . 87) (undo-tree-id59 . -12) (87 . 99) (#("i" 0 1 (c-in-sws t fontified nil)) . 87) (undo-tree-id60 . -1) (87 . 88) (#("include \"header\"" 0 16 (fontified nil)) . -87) (undo-tree-id61 . -16) (87 . 103) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -87) (undo-tree-id62 . -2) (undo-tree-id63 . -2) (undo-tree-id64 . -2) 89 (87 . 89) (86 . 87) (85 . 86) (t 26073 46840 887029 474000) 79) nil (26073 46859 28239 506000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2143 . 2144) (#("
" 0 1 (fontified nil)) . -3777) (2141 . 3778) 2140 (t 26073 46859 33696 866000)) nil (26073 46926 688932 700000) 0 nil])
([nil nil ((#("  ;
" 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 3778) (undo-tree-id85 . -3) (undo-tree-id86 . -2) (undo-tree-id87 . -2) 3780) nil (26073 46926 688931 402000) 0 nil])
([nil nil ((#("  // switch(bnf_stack[bnf_stack.size()-1].stat)
  // {
  // case token_class::bnf_token::ID:
  //   ret_sy.addr=i;
  //   ret_sy.car=tok_stack[tok_stack.size()-1];
  //   tok_stack.pop_back();
  //   tok_stack.push_back(token_class::token(i++));
  //   bnf_stack.pop_back();
  //   break;
      
  // }
" 0 2 (fontified t c-in-sws t c-is-sws t) 2 3 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 3 5 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 5 48 (fontified t face font-lock-comment-face c-in-sws t) 48 50 (fontified t c-in-sws t) 50 53 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 53 55 (fontified t face font-lock-comment-face c-in-sws t) 55 57 (fontified t c-in-sws t) 57 60 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 60 93 (fontified t face font-lock-comment-face c-in-sws t) 93 95 (fontified t c-in-sws t) 95 100 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 100 115 (fontified t face font-lock-comment-face c-in-sws t) 115 117 (fontified t c-in-sws t) 117 122 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 122 164 (fontified t face font-lock-comment-face c-in-sws t) 164 166 (fontified t c-in-sws t) 166 171 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 171 193 (fontified t face font-lock-comment-face c-in-sws t) 193 195 (fontified t c-in-sws t) 195 200 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 200 246 (fontified t face font-lock-comment-face c-in-sws t) 246 248 (fontified t c-in-sws t) 248 253 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 253 275 (fontified t face font-lock-comment-face c-in-sws t) 275 277 (fontified t c-in-sws t) 277 282 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 282 289 (fontified t face font-lock-comment-face c-in-sws t) 289 296 (fontified t c-in-sws t) 296 298 (fontified t c-in-sws t) 298 299 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 299 301 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 301 303 (fontified t face font-lock-comment-face c-in-sws t)) . 2251) (undo-tree-id65 . -296) (undo-tree-id66 . -302) (undo-tree-id67 . -296) (undo-tree-id68 . -303) (undo-tree-id69 . -303) (undo-tree-id70 . -296) (undo-tree-id71 . -296) (undo-tree-id72 . -289) (undo-tree-id73 . -289) (undo-tree-id74 . -275) (undo-tree-id75 . -275) (undo-tree-id76 . -246) (undo-tree-id77 . -246) (undo-tree-id78 . -193) (undo-tree-id79 . -193) (undo-tree-id80 . -164) (undo-tree-id81 . -164) (undo-tree-id82 . -115) (undo-tree-id83 . -115) (undo-tree-id84 . -296)) nil (26073 46926 688926 288000) 0 nil])
([nil nil ((2250 . 2262) (#("synatax_read" 0 12 (fontified nil)) . -2250) (2250 . 2262) (#("sy" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face)) . -2250) (undo-tree-id88 . -2) (undo-tree-id89 . -2) 2252 (2250 . 2252) (2248 . 2250) (2237 . 2248) (#("sy" 0 2 (fontified nil)) . 2237) (2237 . 2239) (#("synatax_mod" 0 11 (fontified nil)) . -2237) (2237 . 2248) (#("sy" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face)) . -2237) (undo-tree-id90 . -2) (undo-tree-id91 . -2) 2239 (2237 . 2239) (2237 . 2239) (t 26073 46926 697032 904000)) nil (26073 46991 327841 925000) 0 nil])
([nil nil ((115 . 124) (apply yas--snippet-revive 106 116 #s(yas--snippet nil nil #s(yas--exit 115 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 115 nil) 7 nil nil nil nil)) (106 . 116) (#("include \"$0\"" 0 12 (fontified nil)) . 106) (undo-tree-id94 . -12) (106 . 118) (#("i" 0 1 (c-in-sws t fontified nil)) . 106) (undo-tree-id95 . -1) (106 . 107) (#("include \"header\"" 0 16 (fontified nil)) . -106) (undo-tree-id96 . -16) (106 . 122) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -106) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) 108 (106 . 108) (105 . 106) (#("@" 0 1 (fontified t c-is-sws t)) . -105) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 106 (105 . 106) (104 . 105) 95) nil (26073 47419 337179 156000) 0 nil] [nil nil ((#("synatax_mod::" 0 11 (fontified t face font-lock-constant-face) 11 12 (fontified t) 12 13 (fontified t)) . 2237) (undo-tree-id92 . -12) (t 26073 46961 883700 981000)) ((2237 . 2250) (t 26073 46983 687035 189000)) (26073 46983 643085 559000) 0 nil])
([nil current ((apply -3 3409 3471 undo--wrap-and-run-primitive-undo 3409 3471 ((3411 . 3414) 3463)) (t 26073 47026 773703 583000)) nil (26073 47425 160775 107000) 0 nil] [nil nil ((#("ull_sy_tree;//bnf_stack.pop_back();" 0 12 (fontified t) 12 14 (fontified t face font-lock-comment-delimiter-face) 14 35 (fontified t face font-lock-comment-face)) . 3427) (undo-tree-id102 . -34) (t 26073 47026 773703 583000)) ((3427 . 3462)) (26073 47419 335413 750000) 0 nil])
nil
nil
nil
