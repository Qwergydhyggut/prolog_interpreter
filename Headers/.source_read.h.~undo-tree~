(undo-tree-save-format-version . 1)
"2085b615dc53ddc001b7cebf36b51d2a3cb6f67a"
[nil nil nil nil (26079 22023 508593 559000) 0 nil]
([nil nil ((1 . 2) (t 26079 21193 692560 784000)) nil (26079 22023 508592 645000) 0 nil])
([nil nil ((2 . 4)) nil (26079 22023 508592 25000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("m" 0 1 (fontified t face font-lock-preprocessor-face)) . -3) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 4) nil (26079 22023 508591 15000) 0 nil])
([nil nil ((2 . 6)) nil (26079 22023 508586 872000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t face font-lock-preprocessor-face)) . -5) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) 6) nil (26079 22023 508585 834000) 0 nil])
([nil nil ((5 . 8)) nil (26079 22023 508580 363000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face font-lock-preprocessor-face)) . -7) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 8) nil (26079 22023 508566 376000) 0 nil])
([nil nil ((7 . 11)) nil (26079 22023 508564 357000) 0 nil])
([nil nil ((11 . 15)) nil (26079 22023 508563 935000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . -14) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 15) nil (26079 22023 508563 53000) 0 nil])
([nil nil ((14 . 16)) nil (26079 22023 508560 839000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t)) . -15) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 16) nil (26079 22023 508560 98000) 0 nil])
([nil nil ((15 . 17)) nil (26079 22023 508556 692000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -16) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 17) nil (26079 22023 508555 733000) 0 nil])
([nil nil ((16 . 30)) nil (26079 22023 508551 518000) 0 nil])
([nil nil ((30 . 32)) nil (26079 22023 508551 156000) 0 nil])
([nil nil ((32 . 32) (32 . 33)) nil (26079 22023 508550 746000) 0 nil])
([nil nil ((33 . 34)) nil (26079 22023 508550 230000) 0 nil])
([nil nil ((34 . 38)) nil (26079 22023 508549 709000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-preprocessor-face)) . -37) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 38) nil (26079 22023 508549 145000) 0 nil])
([nil nil ((37 . 38)) nil (26079 22023 508547 227000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-preprocessor-face)) . -37) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 38) nil (26079 22023 508546 568000) 0 nil])
([nil nil ((37 . 43)) nil (26079 22023 508544 569000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -42) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 43) nil (26079 22023 508543 951000) 0 nil])
([nil nil ((42 . 44)) nil (26079 22023 508541 934000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face font-lock-variable-name-face)) . -43) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 44) nil (26079 22023 508541 306000) 0 nil])
([nil nil ((43 . 50)) nil (26079 22023 508539 116000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face font-lock-variable-name-face)) . -49) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 50) nil (26079 22023 508538 333000) 0 nil])
([nil nil ((49 . 64)) nil (26079 22023 508536 194000) 0 nil])
([nil nil ((66 . 66) (66 . 67) (65 . 65) (65 . 66) (64 . 64) (64 . 65)) nil (26079 22023 508535 508000) 0 nil])
([nil nil ((67 . 68)) nil (26079 22023 508534 57000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -67) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 68) nil (26079 22023 508533 265000) 0 nil])
([nil nil ((67 . 68)) nil (26079 22023 508529 880000) 0 nil])
([nil nil ((68 . 73)) nil (26079 22023 508529 110000) 0 nil])
([nil nil ((65 . 65) (65 . 66)) nil (26079 22023 508528 449000) 0 nil])
([nil nil ((66 . 73)) nil (26079 22023 508527 579000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -72) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 73) nil (26079 22023 508526 395000) 0 nil])
([nil nil ((72 . 73)) nil (26079 22023 508524 518000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 72) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 73) nil (26079 22023 508523 538000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t c-is-sws t)) . -66) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("t" 0 1 (fontified t)) . -67) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("r" 0 1 (fontified t)) . -68) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("u" 0 1 (fontified t)) . -69) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("c" 0 1 (fontified t)) . -70) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face c-type c-decl-type-start)) . -71) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 72) nil (26079 22023 508520 104000) 0 nil])
([nil nil ((66 . 71)) nil (26079 22023 507939 94000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 70) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 71) nil (26079 22023 507938 307000) 0 nil])
([nil nil ((70 . 73)) nil (26079 22023 507936 705000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -72) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 73) nil (26079 22023 507935 993000) 0 nil])
([nil nil ((72 . 76)) nil (26079 22023 507934 159000) 0 nil])
([nil nil ((76 . 82)) nil (26079 22023 507933 626000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -76) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("o" 0 1 (fontified t)) . -77) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("k" 0 1 (fontified t)) . -78) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("e" 0 1 (fontified t)) . -79) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("n" 0 1 (fontified t)) . -80) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -81) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 82) nil (26079 22023 507932 6000) 0 nil])
([nil nil ((76 . 79)) nil (26079 22023 507920 660000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -76) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("o" 0 1 (fontified t)) . -77) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("u" 0 1 (fontified t)) . -78) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 79) nil (26079 22023 507918 786000) 0 nil])
([nil nil ((76 . 88)) nil (26079 22023 507912 354000) 0 nil])
([nil nil ((88 . 91)) nil (26079 22023 507911 511000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -90) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 91) nil (26079 22023 507910 684000) 0 nil])
([nil nil ((90 . 92)) nil (26079 22023 507907 865000) 0 nil])
([nil nil ((93 . 97) (92 . 92) (92 . 93)) nil (26079 22023 507907 17000) 0 nil])
([nil nil ((93 . 95)) nil (26079 22023 507906 246000) 0 nil])
([nil nil ((95 . 97) (94 . 96)) nil (26079 22023 507905 380000) 0 nil])
([nil nil ((97 . 100)) nil (26079 22023 507904 749000) 0 nil])
([nil nil ((100 . 103)) nil (26079 22023 507904 45000) 0 nil])
([nil nil ((103 . 116)) nil (26079 22023 507903 513000) 0 nil])
([nil nil ((116 . 121)) nil (26079 22023 507902 933000) 0 nil])
([nil nil ((117 . 119) (#("    " 0 4 (fontified nil)) . 117) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (121 . 123)) nil (26079 22023 507902 124000) 0 nil])
([nil nil ((121 . 125) (120 . 122)) nil (26079 22023 507899 362000) 0 nil])
([nil nil ((126 . 128) (127 . 128)) nil (26079 22023 507898 635000) 0 nil])
([nil nil ((120 . 125)) nil (26079 22023 507897 678000) 0 nil])
([nil nil ((125 . 131)) nil (26079 22023 507897 306000) 0 nil])
([nil nil ((121 . 123) (#("    " 0 4 (fontified nil)) . 121) (131 . 132)) nil (26079 22023 507896 761000) 0 nil])
([nil nil ((130 . 135)) nil (26079 22023 507896 213000) 0 nil])
([nil nil ((120 . 125)) nil (26079 22023 507895 899000) 0 nil])
([nil nil ((150 . 153)) nil (26079 22023 507895 526000) 0 nil])
([nil nil ((151 . 154) (#("  " 0 2 (fontified t)) . 151) (undo-tree-id4 . -2) (undo-tree-id5 . -2) 153) nil (26079 22023 507894 931000) 0 nil])
([nil nil ((125 . 131)) nil (26079 22023 507893 192000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -130) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 131) nil (26079 22023 507892 521000) 0 nil])
([nil nil ((130 . 137)) nil (26079 22023 507890 851000) 0 nil])
([nil nil ((137 . 140)) nil (26079 22023 507890 351000) 0 nil])
([nil nil ((140 . 147)) nil (26079 22023 507889 960000) 0 nil])
([nil nil ((141 . 145) (#("      " 0 6 (fontified nil)) . 141) (undo-tree-id0 . -6) (undo-tree-id1 . -6) (147 . 149)) nil (26079 22023 507888 722000) 0 nil])
([nil nil ((147 . 148)) nil (26079 22023 509599 818000) 0 nil])
([nil nil ((155 . 161) (#("t" 0 1 (fontified t)) . -155) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 156 (153 . 156) (154 . 158) 156 (147 . 153) (146 . 148)) nil (26079 22116 648359 576000) 0 nil] [nil nil ((148 . 153)) ((#("
    " 0 5 (fontified t)) . 148) (undo-tree-id86 . -5) (undo-tree-id87 . -5) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -5)) (26079 22023 507856 499000) 0 nil])
([nil nil ((apply -24 121 203 undo--wrap-and-run-primitive-undo 121 203 ((189 . 192) (184 . 187) (176 . 179) (163 . 166) (155 . 158) (151 . 154) (143 . 146) (125 . 128) 121))) nil (26079 22116 648349 394000) 0 nil])
nil
([nil nil ((235 . 236) 129) nil (26079 22116 648346 25000) 0 nil])
([nil nil ((309 . 313) (307 . 309) (302 . 307) (301 . 302) (298 . 301) (293 . 298) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -293) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (nil syntax-table nil 296 . 297) (nil syntax-table (1) 293 . 294) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 294) (296 . 297) (293 . 295) (292 . 294) (285 . 292) (#("d" 0 1 (fontified t)) . -285) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -286) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 287 (281 . 287) (280 . 281) (279 . 280) (65 . 98) (233 . 233) (233 . 246) (#("sy" 0 2 (fontified nil)) . 233) (233 . 235) (#("synatax_ptr_f" 0 13 (fontified nil)) . -233) (233 . 246) (#("synatax_pt" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . -233) (undo-tree-id100 . -10) (undo-tree-id101 . -10) 243 (241 . 243) (233 . 241) (75 . 88) (apply yas--snippet-revive 66 76 #s(yas--snippet nil nil #s(yas--exit 75 nil) 4 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 75 nil) 4 nil nil nil nil)) (66 . 76) (#("include \"$0\"" 0 12 (fontified nil)) . 66) (undo-tree-id102 . -12) (66 . 78) (#("in" 0 2 (c-in-sws t fontified nil)) . 66) (undo-tree-id103 . -2) (66 . 68) (#("include \"header\"" 0 16 (fontified nil)) . -66) (undo-tree-id104 . -16) (66 . 82) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -66) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) 68 (66 . 68) (65 . 66) (#("@" 0 1 (fontified t c-is-sws t)) . -65) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("#" 0 1 (fontified t)) . -66) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 67 (66 . 67) (65 . 66) (65 . 65) (65 . 66) (65 . 66) (t 26079 22116 662538 40000)) nil (26079 22356 833523 607000) 0 nil])
([nil nil (314) nil (26079 22456 417463 582000) 0 nil])
([nil nil ((266 . 272) (#("sta" 0 3 (fontified nil)) . 266) (266 . 269) (#("static" 0 6 (fontified nil)) . -266) (266 . 272) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -266) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -2) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) 269 (268 . 269) (#("y" 0 1 (fontified t)) . -268) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) 269 (267 . 269) (266 . 268) (t 26079 22356 849198 772000)) nil (26079 22456 417454 414000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -108) (undo-tree-id270 . -1) (undo-tree-id271 . -1) 109 (108 . 109) (t 26079 22456 425862 990000)) nil (26079 22656 528193 425000) 0 nil])
([nil nil ((#("#include \"synatax_ptr.h\"
" 0 1 (fontified t c-is-sws t c-in-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t c-in-sws t face font-lock-string-face) 10 11 (fontified t c-in-sws t face font-lock-string-face) 11 12 (fontified t c-in-sws t face font-lock-string-face) 12 13 (fontified t c-in-sws t face font-lock-string-face) 13 14 (fontified t c-in-sws t face font-lock-string-face) 14 15 (fontified t c-in-sws t face font-lock-string-face) 15 16 (fontified t c-in-sws t face font-lock-string-face) 16 17 (fontified t c-in-sws t face font-lock-string-face) 17 18 (fontified t c-in-sws t face font-lock-string-face) 18 19 (fontified t c-in-sws t face font-lock-string-face) 19 20 (fontified t c-in-sws t face font-lock-string-face) 20 21 (fontified t c-in-sws t face font-lock-string-face) 21 22 (fontified t c-in-sws t face font-lock-string-face) 22 23 (fontified t c-in-sws t face font-lock-string-face) 23 24 (fontified t c-in-sws t face font-lock-string-face) 24 25 (fontified t c-in-sws t)) . 98) (undo-tree-id264 . -24) (undo-tree-id265 . 15) (undo-tree-id266 . -9) (undo-tree-id267 . -9) (undo-tree-id268 . 15) (undo-tree-id269 . -24) 107) nil (26079 22656 528188 194000) 0 nil])
([nil nil ((275 . 278) (#("char" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . 275) (undo-tree-id272 . -3) (undo-tree-id273 . -4) (undo-tree-id274 . -4) (t 26079 22656 532524 711000)) nil (26079 23540 444867 112000) 0 nil])
([nil nil ((#("int arg," 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t face font-lock-variable-name-face) 7 8 (fontified t c-type c-decl-arg-start)) . 275) (undo-tree-id383 . 5) (undo-tree-id384 . -7) (undo-tree-id385 . -7) (undo-tree-id386 . -7) (undo-tree-id387 . -7) (undo-tree-id388 . -7) (t 26079 23542 552502 905000)) nil (26079 24012 710525 769000) 0 nil] [nil nil ((#(",char **args" 0 1 (fontified t c-type c-decl-arg-start) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face)) . 282) (undo-tree-id275 . -11) (t 26079 22797 525854 576000)) ((282 . 294)) (26079 23539 265095 129000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 280)) nil (26079 24012 710521 146000) 0 nil])
([nil nil ((#("int arg" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 5 (fontified t face font-lock-variable-name-face) 5 6 (fontified t face font-lock-variable-name-face) 6 7 (fontified t face font-lock-variable-name-face)) . 275) (undo-tree-id276 . 4) (undo-tree-id277 . -7) (undo-tree-id278 . -6) (undo-tree-id279 . -7) (undo-tree-id280 . -7) (undo-tree-id282 . -7) (undo-tree-id284 . -7) (undo-tree-id286 . -7) (undo-tree-id288 . -7) (undo-tree-id290 . -7) (undo-tree-id292 . -7) (undo-tree-id294 . -7) (undo-tree-id296 . -7) (undo-tree-id298 . -7) (undo-tree-id300 . -7) (undo-tree-id302 . -7) (undo-tree-id304 . -7) (undo-tree-id306 . -7) (undo-tree-id308 . -7) (undo-tree-id310 . -7) (undo-tree-id312 . -7) (undo-tree-id314 . -7) (undo-tree-id316 . -7) (undo-tree-id318 . -7) (undo-tree-id320 . -7) (undo-tree-id322 . -7) (undo-tree-id324 . -7) (undo-tree-id326 . -7) (undo-tree-id328 . -7) (undo-tree-id329 . -7) (undo-tree-id331 . -7) (t 26079 23386 235840 92000)) ((275 . 282) (t 26079 23423 322505 848000)) (26079 23423 314748 518000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 280)) nil (26079 24012 710520 524000) 0 nil])
nil
([nil nil ((#("char" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . 275) (undo-tree-id332 . 4) (undo-tree-id333 . -3) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . -4) (undo-tree-id344 . -4) (undo-tree-id345 . -4) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -4)) nil (26079 24012 710518 331000) 0 nil])
([nil nil ((280 . 286) (278 . 280) (275 . 278)) nil (26079 24012 710454 174000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-variable-name-face)) . 125) (t 26079 24012 719157 969000)) nil (26079 27559 875537 510000) 0 nil])
([nil current ((#("    /* struct init_pro */
    /* { */
    /*   virtual  */
    /* }; */
" 0 4 (c-in-sws t c-is-sws t fontified t) 4 5 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 5 7 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 7 8 (c-in-sws t fontified t face font-lock-comment-face) 8 9 (c-in-sws t fontified t face font-lock-comment-face) 9 10 (c-in-sws t fontified t face font-lock-comment-face) 10 11 (c-in-sws t fontified t face font-lock-comment-face) 11 12 (c-in-sws t fontified t face font-lock-comment-face) 12 13 (c-in-sws t fontified t face font-lock-comment-face) 13 14 (c-in-sws t fontified t face font-lock-comment-face) 14 15 (c-in-sws t fontified t face font-lock-comment-face) 15 16 (c-in-sws t fontified t face font-lock-comment-face) 16 17 (c-in-sws t fontified t face font-lock-comment-face) 17 18 (c-in-sws t fontified t face font-lock-comment-face) 18 19 (c-in-sws t fontified t face font-lock-comment-face) 19 20 (c-in-sws t fontified t face font-lock-comment-face) 20 21 (c-in-sws t fontified t face font-lock-comment-face) 21 22 (c-in-sws t fontified t face font-lock-comment-face) 22 25 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 25 30 (c-in-sws t fontified t) 30 33 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 33 34 (c-in-sws t fontified t face font-lock-comment-face) 34 37 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 37 38 (c-in-sws t fontified t) 38 42 (c-in-sws t fontified t) 42 45 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 45 47 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 47 48 (c-in-sws t fontified t face font-lock-comment-face) 48 49 (c-in-sws t fontified t face font-lock-comment-face) 49 50 (c-in-sws t fontified t face font-lock-comment-face) 50 51 (c-in-sws t fontified t face font-lock-comment-face) 51 52 (c-in-sws t fontified t face font-lock-comment-face) 52 53 (c-in-sws t fontified t face font-lock-comment-face) 53 54 (c-in-sws t fontified t face font-lock-comment-face) 54 55 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 55 58 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 58 59 (c-in-sws t fontified t) 59 60 (c-in-sws t fontified t) 60 63 (c-in-sws t fontified t) 63 64 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 64 66 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 66 67 (c-in-sws t fontified t face font-lock-comment-face) 67 68 (c-in-sws t fontified t face font-lock-comment-face) 68 71 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 71 72 (c-in-sws t fontified t)) . 154) (undo-tree-id389 . -71) (undo-tree-id390 . -24) (undo-tree-id391 . -71) (undo-tree-id392 . -8) (undo-tree-id393 . -67) (undo-tree-id394 . -8) (undo-tree-id395 . -71) (undo-tree-id396 . -8) (undo-tree-id397 . -26) (undo-tree-id398 . -26) (undo-tree-id399 . -38) (undo-tree-id400 . -38) (undo-tree-id401 . -59) (undo-tree-id402 . -59) (undo-tree-id403 . -72) (undo-tree-id404 . -72) (undo-tree-id405 . -71) (undo-tree-id406 . -71) (undo-tree-id407 . -24) (undo-tree-id408 . -24) (undo-tree-id409 . -24) (undo-tree-id410 . -24) (undo-tree-id411 . -24) (undo-tree-id412 . -24) (undo-tree-id413 . -24) (undo-tree-id414 . -24) (undo-tree-id415 . -24) (undo-tree-id416 . -24) (undo-tree-id417 . -24) (undo-tree-id418 . -24) (undo-tree-id419 . -24) (undo-tree-id420 . -24) (undo-tree-id421 . -24) (undo-tree-id422 . -24) (undo-tree-id423 . -24) (undo-tree-id424 . -24) (undo-tree-id425 . -24) (undo-tree-id426 . -24) (undo-tree-id427 . -24) (undo-tree-id428 . -24) (undo-tree-id429 . -24) (undo-tree-id430 . -24) (undo-tree-id431 . -24) (undo-tree-id432 . -24) (undo-tree-id433 . -24) (undo-tree-id434 . -24) (undo-tree-id435 . -24) (undo-tree-id436 . -24) (undo-tree-id437 . -24) (undo-tree-id438 . -24) (undo-tree-id439 . -24) (undo-tree-id440 . -24) (undo-tree-id441 . -24) (undo-tree-id442 . -24) (undo-tree-id443 . -24) (undo-tree-id444 . -24) (undo-tree-id445 . -24) (undo-tree-id446 . -24) (undo-tree-id447 . -24) (undo-tree-id448 . -24) (undo-tree-id449 . -24) (undo-tree-id450 . -24) (undo-tree-id451 . -24) (undo-tree-id452 . -24) (undo-tree-id453 . -24) (undo-tree-id454 . -24) (undo-tree-id455 . -24) (undo-tree-id456 . -24) (undo-tree-id457 . -24) (undo-tree-id458 . -24) (undo-tree-id459 . -24) (undo-tree-id460 . -24) (undo-tree-id461 . -24) (undo-tree-id462 . -24) (undo-tree-id463 . -24) (undo-tree-id464 . -24) (undo-tree-id465 . -24) (undo-tree-id466 . -24) (undo-tree-id467 . -24) (undo-tree-id468 . -24) (undo-tree-id469 . -24) (undo-tree-id470 . -24) (undo-tree-id471 . -24) (undo-tree-id472 . -24) (undo-tree-id473 . -24) (undo-tree-id474 . -24) (undo-tree-id475 . -24) (undo-tree-id476 . -24) (undo-tree-id477 . -24) (undo-tree-id478 . -24) (undo-tree-id479 . -24) (undo-tree-id480 . -24) (undo-tree-id481 . -24) (undo-tree-id482 . -24) (undo-tree-id483 . -24) (undo-tree-id484 . -24) (undo-tree-id485 . -24) (undo-tree-id486 . -24) (undo-tree-id487 . -24) (undo-tree-id488 . -24) (undo-tree-id489 . -24) (undo-tree-id490 . -24) (undo-tree-id491 . -24) (undo-tree-id492 . -24) (undo-tree-id493 . -24) (undo-tree-id494 . -24) (undo-tree-id495 . -24) (undo-tree-id496 . -24) (undo-tree-id497 . -24) (undo-tree-id498 . -24) (undo-tree-id499 . -24) (undo-tree-id500 . -24) (undo-tree-id501 . -24) (undo-tree-id502 . -24) (undo-tree-id503 . -24) (undo-tree-id504 . -24) (undo-tree-id505 . -24) (undo-tree-id506 . -24) (undo-tree-id507 . -24) (undo-tree-id508 . -24) (undo-tree-id509 . -24) (undo-tree-id510 . -24) (undo-tree-id511 . -24) (undo-tree-id512 . -24) (undo-tree-id513 . -24) (undo-tree-id514 . -24) (undo-tree-id515 . -24) (undo-tree-id516 . -24) (undo-tree-id517 . -24) (undo-tree-id518 . -24) (undo-tree-id519 . -24) (undo-tree-id520 . -24) (undo-tree-id521 . -24) (undo-tree-id522 . -24) (undo-tree-id523 . -24) (undo-tree-id524 . -24) (undo-tree-id525 . -24) (undo-tree-id526 . -24) (undo-tree-id527 . -24) (undo-tree-id528 . -24) (undo-tree-id529 . -24) (undo-tree-id530 . -24) (undo-tree-id531 . -24) (undo-tree-id532 . -24) (undo-tree-id533 . -24) (undo-tree-id534 . -24) (undo-tree-id535 . -24) (undo-tree-id536 . -24) (undo-tree-id537 . -24) (undo-tree-id538 . -24) (undo-tree-id539 . -72) (undo-tree-id540 . -24) (undo-tree-id541 . -71) (undo-tree-id542 . -24) (undo-tree-id543 . -24) (undo-tree-id544 . -24) (undo-tree-id545 . -24) (undo-tree-id546 . -24) (undo-tree-id547 . -24) (undo-tree-id548 . -24) (undo-tree-id549 . -24) (undo-tree-id550 . -24) (undo-tree-id551 . -24) (undo-tree-id552 . -24) (undo-tree-id553 . -24) (undo-tree-id554 . -24) (undo-tree-id555 . -24) (undo-tree-id556 . -24) (undo-tree-id557 . -24) (undo-tree-id558 . -24) (undo-tree-id559 . -24) (undo-tree-id560 . -24) (undo-tree-id561 . -24) (undo-tree-id562 . -24) (undo-tree-id563 . -24) (undo-tree-id564 . -24) (undo-tree-id565 . -24) (undo-tree-id566 . -24) (undo-tree-id567 . -24) (undo-tree-id568 . -24) (undo-tree-id569 . -37) (undo-tree-id570 . -37) (undo-tree-id571 . -37) (undo-tree-id572 . -37) (undo-tree-id573 . -37) (undo-tree-id574 . -37) (undo-tree-id575 . -37) (undo-tree-id576 . -37) (undo-tree-id577 . -37) (undo-tree-id578 . -37) (undo-tree-id579 . -37) (undo-tree-id580 . -37) (undo-tree-id581 . -37) (undo-tree-id582 . -37) (undo-tree-id583 . -37) (undo-tree-id584 . -37) (undo-tree-id585 . -37) (undo-tree-id586 . -37) (undo-tree-id587 . -37) (undo-tree-id588 . -37) (undo-tree-id589 . -37) (undo-tree-id590 . -37) (undo-tree-id591 . -37) (undo-tree-id592 . -37) (undo-tree-id593 . -37) (undo-tree-id594 . -37) (undo-tree-id595 . -58) (undo-tree-id596 . -58) (undo-tree-id597 . -58) (undo-tree-id598 . -58) (undo-tree-id599 . -58) (undo-tree-id600 . -58) (undo-tree-id601 . -58) (undo-tree-id602 . -58) (undo-tree-id603 . -58) (undo-tree-id604 . -58) (undo-tree-id605 . -58) (undo-tree-id606 . -58) (undo-tree-id607 . -58) (undo-tree-id608 . -58) (undo-tree-id609 . -58) (undo-tree-id610 . -58) (undo-tree-id611 . -58) (undo-tree-id612 . -58) (undo-tree-id613 . -58) (undo-tree-id614 . -58) (undo-tree-id615 . -58) (undo-tree-id616 . -58) (undo-tree-id617 . -58) (undo-tree-id618 . -58) (undo-tree-id619 . -58) (undo-tree-id620 . -58) (undo-tree-id621 . -59) (undo-tree-id622 . -71) (undo-tree-id623 . -71) (undo-tree-id624 . -71) (undo-tree-id625 . -71) (undo-tree-id626 . -71) (undo-tree-id627 . -71) (undo-tree-id628 . -71) (undo-tree-id629 . -71) (undo-tree-id630 . -71) (undo-tree-id631 . -71) (undo-tree-id632 . -71) (undo-tree-id633 . -71) (undo-tree-id634 . -71) (undo-tree-id635 . -71) (undo-tree-id636 . -71) (undo-tree-id637 . -71) (undo-tree-id638 . -71) (undo-tree-id639 . -71) (undo-tree-id640 . -71) (undo-tree-id641 . -71) (undo-tree-id642 . -71) (undo-tree-id643 . -71) (undo-tree-id644 . -71) (undo-tree-id645 . -71) (undo-tree-id646 . -71) (undo-tree-id647 . -71) (undo-tree-id648 . -71) (undo-tree-id649 . -71) (undo-tree-id650 . -71) (undo-tree-id651 . -71) (undo-tree-id652 . -71) (undo-tree-id653 . -71) (undo-tree-id654 . -71) (undo-tree-id655 . -71) (undo-tree-id656 . -71) (undo-tree-id657 . -71) (undo-tree-id658 . -71) (undo-tree-id659 . -71) (undo-tree-id660 . -71) (undo-tree-id661 . -71) (undo-tree-id662 . -71) (undo-tree-id663 . -71) (undo-tree-id664 . -71) (undo-tree-id665 . -71) (undo-tree-id666 . -71) (undo-tree-id667 . -71) (undo-tree-id668 . -71) (undo-tree-id669 . -71) (undo-tree-id670 . -71) (undo-tree-id671 . -71) (undo-tree-id672 . -71) (undo-tree-id673 . -71) (undo-tree-id674 . -71) (undo-tree-id675 . -71) (undo-tree-id676 . -71) (undo-tree-id677 . -71) (undo-tree-id678 . -71) (undo-tree-id679 . -71) (undo-tree-id680 . -71) (undo-tree-id681 . -71) (undo-tree-id682 . -71) (undo-tree-id683 . -71) (undo-tree-id684 . -71) (undo-tree-id685 . -71) (undo-tree-id686 . -71) (undo-tree-id687 . -71) (undo-tree-id688 . -71) (undo-tree-id689 . -71) (undo-tree-id690 . -71) (undo-tree-id691 . -71) (undo-tree-id692 . -71) (undo-tree-id693 . -71) (undo-tree-id694 . -71) (undo-tree-id695 . -71) (undo-tree-id696 . -71) (undo-tree-id697 . -71) (undo-tree-id698 . -71) (undo-tree-id699 . -71) (undo-tree-id700 . -71) (undo-tree-id701 . -71) (undo-tree-id702 . -71) (undo-tree-id703 . -71) (undo-tree-id704 . -71) (undo-tree-id705 . -71) (undo-tree-id706 . -71) (undo-tree-id707 . -71) (undo-tree-id708 . -71) (undo-tree-id709 . -71) (undo-tree-id710 . -71) (undo-tree-id711 . -71) (undo-tree-id712 . -71) (undo-tree-id713 . -71) (undo-tree-id714 . -71) (undo-tree-id715 . -71) (undo-tree-id716 . -71) (undo-tree-id717 . -71) (undo-tree-id718 . -71) (undo-tree-id719 . -71) (undo-tree-id720 . -71) (undo-tree-id721 . -71) (undo-tree-id722 . -71) (undo-tree-id723 . -71) (undo-tree-id724 . -71) (undo-tree-id725 . -71) (undo-tree-id726 . -71) (undo-tree-id727 . -71) (undo-tree-id728 . -71) (undo-tree-id729 . -71) (undo-tree-id730 . -72) 225 (t 26079 33615 832254 799000)) nil (26079 34911 901981 333000) 0 nil])
nil
