(undo-tree-save-format-version . 1)
"7feb748dbd38ce110263be74a0b75502c2df06bf"
[nil nil nil nil (26068 58225 404560 771000) 0 nil]
([nil nil ((1013 . 1014) (t 26067 44443 769425 24000)) nil (26068 58285 652959 702000) 0 nil] [nil nil ((nil rear-nonsticky nil 1421 . 1422) (nil fontified nil 1349 . 1422) (nil fontified nil 1348 . 1349) (1348 . 1422) (t 26067 44443 769425 24000)) ((#("[官方文档](https://www.swi-prolog.org/pldoc/doc_for?object=section(%27B.8%27))" 0 1 (c-is-sws t fontified nil face (rainbow-delimiters-depth-1-face)) 1 5 (fontified nil face font-lock-constant-face) 5 6 (fontified nil face (rainbow-delimiters-depth-1-face)) 6 7 (fontified nil c-type c-decl-arg-start face (rainbow-delimiters-depth-1-face)) 7 13 (fontified nil) 13 15 (fontified nil face font-lock-comment-delimiter-face) 15 73 (fontified nil face font-lock-comment-face) 73 74 (fontified nil rear-nonsticky nil face font-lock-comment-face)) . 1348) (undo-tree-id0 . -7) (undo-tree-id1 . -7) (undo-tree-id2 . -72) (undo-tree-id3 . -7) (undo-tree-id4 . -72) (undo-tree-id5 . -6) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -12) (undo-tree-id9 . -13) (undo-tree-id10 . -7) (undo-tree-id11 . -12) (undo-tree-id12 . -13) (undo-tree-id13 . -14) (undo-tree-id14 . -7) (undo-tree-id15 . 1) (undo-tree-id16 . -72) (undo-tree-id17 . -7) (nil rear-nonsticky t 1421 . 1422)) (26068 58225 401031 658000) 0 nil])
([nil nil ((1014 . 1021)) nil (26068 58285 652955 999000) 0 nil])
nil
([nil nil ((951 . 954) (t 26068 58285 672798 572000)) nil (26068 58709 522877 882000) 0 nil])
([nil nil ((954 . 956)) nil (26068 58709 522877 406000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 955) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 956) nil (26068 58709 522876 812000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -951) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("o" 0 1 (fontified t)) . -952) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("o" 0 1 (fontified t)) . -953) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -954) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 955) nil (26068 58709 522874 659000) 0 nil])
([nil nil ((951 . 955)) nil (26068 58709 522869 691000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 954) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 955) nil (26068 58709 522869 27000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -951) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("n" 0 1 (fontified t)) . -952) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -953) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 954) nil (26068 58709 522867 206000) 0 nil])
([nil nil ((951 . 954)) nil (26068 58709 522862 617000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -951) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("o" 0 1 (fontified t)) . -952) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("o" 0 1 (fontified t)) . -953) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 954) nil (26068 58709 522861 552000) 0 nil])
([nil nil ((951 . 956)) nil (26068 58709 522855 600000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 955) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 956) nil (26068 58709 522854 827000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -951) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("o" 0 1 (fontified t)) . -952) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("o" 0 1 (fontified t)) . -953) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -954) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 955) nil (26068 58709 522851 43000) 0 nil])
([nil nil ((951 . 953)) nil (26068 58709 522836 259000) 0 nil])
([nil nil ((952 . 955)) nil (26068 58709 522835 703000) 0 nil])
([nil nil ((955 . 956)) nil (26068 58709 522835 274000) 0 nil])
([nil nil ((956 . 957)) nil (26068 58709 522834 704000) 0 nil])
([nil nil ((957 . 959)) nil (26068 58709 522834 224000) 0 nil])
([nil nil ((958 . 962)) nil (26068 58709 522833 764000) 0 nil])
([nil nil ((962 . 963)) nil (26068 58709 522833 313000) 0 nil])
([nil nil ((963 . 967)) nil (26068 58709 525170 933000) 0 nil])
([nil nil ((#("(bool*(char,char))" 0 1 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-5-face)) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t c-type c-decl-arg-start) 12 13 (fontified t face font-lock-type-face) 13 14 (fontified t face font-lock-type-face) 14 15 (fontified t face font-lock-type-face) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face (rainbow-delimiters-depth-5-face)) 17 18 (fontified t face (rainbow-delimiters-depth-4-face))) . 951) (undo-tree-id55 . -17) (undo-tree-id56 . -17) (undo-tree-id57 . -17) (undo-tree-id58 . 2) (undo-tree-id59 . 1) (undo-tree-id60 . -18) (undo-tree-id61 . 18) (undo-tree-id62 . -1) 968) nil (26068 58725 575124 387000) 0 nil] [nil nil ((969 . 970)) ((#(" " 0 1 (fontified t)) . 969) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1)) (26068 58709 522828 183000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1194) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) 1198 (1193 . 1198) 1182) nil (26068 58801 623965 983000) 0 nil] [nil nil ((nil rear-nonsticky nil 1200 . 1201) (nil fontified nil 1183 . 1201) (1183 . 1201) 1182) ((#("(bool*(char,char))" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil) 6 7 (fontified nil face (rainbow-delimiters-depth-4-face)) 7 10 (fontified nil face font-lock-type-face) 10 11 (fontified nil c-type c-decl-id-start face font-lock-type-face) 11 12 (fontified nil) 12 16 (fontified nil face font-lock-type-face) 16 17 (fontified nil face (rainbow-delimiters-depth-4-face)) 17 18 (fontified nil rear-nonsticky nil face (rainbow-delimiters-depth-3-face))) . 1183) (undo-tree-id63 . -17) (undo-tree-id64 . -17) (undo-tree-id65 . -17) (undo-tree-id66 . 1) (undo-tree-id67 . -18) (undo-tree-id68 . 18) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -5) (undo-tree-id72 . -1) (undo-tree-id73 . -5) (undo-tree-id74 . -17) (nil rear-nonsticky t 1200 . 1201)) (26068 58725 571738 405000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1211 . 1212) (nil fontified nil 1194 . 1212) (1194 . 1212)) nil (26068 58801 623100 420000) 0 nil])
nil
([nil nil (1211) nil (26068 58801 623099 576000) 0 nil])
([nil nil ((1194 . 1198)) nil (26068 58801 623099 80000) 0 nil])
([nil nil ((1216 . 1217)) nil (26068 58801 623098 462000) 0 nil])
([nil nil ((1217 . 1221)) nil (26068 58801 623097 600000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1217) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("u" 0 1 (fontified t)) . -1218) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("l" 0 1 (fontified t)) . -1219) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("l" 0 1 (fontified t)) . -1220) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 1221) nil (26068 58801 623096 223000) 0 nil])
([nil nil ((1217 . 1218)) nil (26068 58801 623088 512000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1217) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 1218) nil (26068 58801 623087 255000) 0 nil])
([nil nil ((1217 . 1221)) nil (26068 58801 623080 929000) 0 nil])
([nil nil ((1221 . 1226)) nil (26068 58801 623080 107000) 0 nil])
([nil nil ((1226 . 1227)) nil (26068 58801 623075 901000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-3-face))) . 1215) (undo-tree-id200 . 1) (undo-tree-id201 . -1) (t 26068 58801 639452 584000)) nil (26068 58824 205090 411000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1198) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . 1) (undo-tree-id199 . -1)) nil (26068 58824 205086 77000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -1205) (undo-tree-id202 . -1) 1206 (1203 . 1204) (1202 . 1204) (t 26068 58824 222785 363000)) nil (26068 58901 557926 698000) 0 nil])
([nil nil ((1199 . 1203) (#("b" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1198) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1199) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1200) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("l" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1201) (undo-tree-id209 . -1) (undo-tree-id210 . -1) 1202 (t 26068 58901 576116 798000)) nil (26068 58971 708304 415000) 0 nil])
([nil nil ((1199 . 1200) (#("*" 0 1 (fontified t)) . 1203) (undo-tree-id211 . 1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (t 26068 58971 716115 77000)) nil (26068 58984 353590 751000) 0 nil])
([nil nil ((1198 . 1202) (#("boo" 0 3 (fontified nil)) . 1198) (1198 . 1201) (#("bool" 0 4 (fontified nil)) . -1198) (1198 . 1202) (#("boo" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1198) (undo-tree-id250 . -3) (undo-tree-id251 . -3) 1201 (1198 . 1201) (1198 . 1199) (#("b" 0 1 (fontified t)) . -1200) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . 1) (#("o" 0 1 (fontified t)) . -1201) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("o" 0 1 (fontified t)) . -1202) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -1203) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) 1204 (t 26068 58984 376114 767000)) nil (26068 59138 920374 711000) 0 nil])
([nil nil ((#(" fun_ifter" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t)) . 1217) (undo-tree-id243 . -9) (undo-tree-id244 . -9) (undo-tree-id245 . -9) (undo-tree-id246 . -9) (undo-tree-id247 . -9) (undo-tree-id248 . 9) (undo-tree-id249 . -9) 1226) nil (26068 59138 920145 969000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1214 . 1215) (nil fontified nil 1205 . 1215) (1205 . 1215) 1204) nil (26068 59138 920138 391000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1205) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1)) nil (26068 59138 920133 943000) 0 nil])
([nil nil ((nil rear-nonsticky nil 957 . 958) (#("
" 0 1 (fontified nil)) . -971) (953 . 972) 947 (t 26068 59138 936110 984000)) nil (26068 59170 446392 699000) 0 nil])
([nil nil ((969 . 973)) nil (26068 59170 448656 926000) 0 nil])
([nil nil ((973 . 975)) nil (26068 59177 444444 998000) 0 nil] [nil nil ((973 . 975)) ((#("[]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 973) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1)) (26068 59170 446387 839000) 0 nil])
([nil nil ((974 . 975)) nil (26068 59177 446306 691000) 0 nil])
nil
([nil nil ((987 . 995) (983 . 986) (982 . 983) (981 . 982) (977 . 981) (976 . 978)) nil (26068 59206 999033 356000) 0 nil] [nil nil ((976 . 978)) ((#("[]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 976) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1)) (26068 59177 444437 472000) 0 nil])
([nil nil ((#(" fun_ptr" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 987) (undo-tree-id279 . -7) (undo-tree-id280 . -8) (undo-tree-id281 . -8) 995 (t 26068 59191 526109 695000)) nil (26068 59219 805903 350000) 0 nil] [nil nil ((#(" fun_pt" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . 987) (undo-tree-id275 . -6) (undo-tree-id276 . -7) (undo-tree-id277 . -7) (undo-tree-id278 . -1) 994 (t 26068 59191 526109 695000)) ((987 . 994)) (26068 59206 997257 928000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 982 . 983) (nil fontified nil 975 . 983) (975 . 983) 974) nil (26068 59219 805893 51000) 0 nil])
nil
([nil nil ((188 . 198) (#("al>" 0 2 (fontified nil c-in-sws t) 2 3 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) fontified nil)) . 188) (undo-tree-id26 . -3) (undo-tree-id27 . 1) (188 . 190) (#("algorithm>" 0 10 (fontified nil c-in-sws t)) . -188) (188 . 198) (#("al" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -188) (undo-tree-id28 . -2) (undo-tree-id29 . -2) 190 (188 . 190) (apply yas--snippet-revive 179 189 #s(yas--snippet nil nil #s(yas--exit 188 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 188 nil) 2 nil nil nil nil)) (179 . 189) (#("include <$0>" 0 12 (fontified nil c-in-sws t)) . 179) (undo-tree-id30 . -12) (179 . 191) (#("i" 0 1 (fontified nil c-in-sws t)) . 179) (undo-tree-id31 . -1) (179 . 180) (#("include <header>" 0 16 (fontified nil c-in-sws t)) . -179) (undo-tree-id32 . -16) (179 . 195) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -179) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) 181 (179 . 181) (178 . 179) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 177 . 178) (nil fontified t 177 . 178) (nil c-in-sws t 177 . 178) (177 . 178) (t 26068 59219 826109 7000) 168) nil (26069 59092 391804 688000) 0 nil])
([nil nil ((#("bool(* fun_ptr)" 0 4 (face font-lock-type-face fontified t) 4 5 (face (rainbow-delimiters-depth-4-face) fontified t) 5 7 (fontified t) 7 14 (face font-lock-function-name-face fontified t) 14 15 (face (rainbow-delimiters-depth-4-face) fontified t)) . 990) (undo-tree-id20 . -14) (undo-tree-id21 . -2) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -15)) nil (26069 59092 391785 756000) 0 nil])
([nil nil ((#("(char,char)" 0 1 (face (rainbow-delimiters-depth-4-face) c-type c-decl-arg-start fontified t) 1 5 (face font-lock-type-face fontified t) 5 6 (c-type c-decl-arg-start fontified t) 6 10 (face font-lock-type-face fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t)) . 990) (undo-tree-id6 . -11) (undo-tree-id7 . -10) (undo-tree-id8 . -10) (undo-tree-id9 . -10) (undo-tree-id10 . -11) (undo-tree-id11 . 11) (undo-tree-id12 . -1) (undo-tree-id13 . 1) (undo-tree-id14 . -11) (undo-tree-id15 . -1) (undo-tree-id16 . -5) (undo-tree-id17 . -1) (undo-tree-id18 . -5) (undo-tree-id19 . -11)) nil (26069 59092 391779 972000) 0 nil])
([nil nil ((1043 . 1050) (1042 . 1043) (apply yas--snippet-revive 1017 1042 #s(yas--snippet nil (#s(yas--field 1 1026 1041 nil nil nil t nil)) nil 3 nil #s(yas--field 1 1026 1041 nil nil nil t nil) nil nil)) (1036 . 1040) (1035 . 1036) (1031 . 1035) (1030 . 1032) (1029 . 1030) (#("k" 0 1 (fontified t)) . -1029) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 1030 (1026 . 1030) (#("c" 0 1 (fontified t)) . -1026) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 1027 (#("typename Signature" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 18 (face font-lock-type-face fontified nil)) . 1027) (1026 . 1027) (117 . 139) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1026 1041 nil nil nil t nil)) nil 3 nil #s(yas--field 1 1026 1041 nil nil nil t nil) nil nil)) (995 . 1023) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 995) (995 . 1028) (#("f" 0 1 (fontified nil)) . 995) (995 . 996) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (fontified nil syntax-table (4 . 62)) 9 27 (fontified nil) 27 28 (fontified nil syntax-table (5 . 60))) . -995) (995 . 1023) (#("functio" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -995) (undo-tree-id4 . -7) (undo-tree-id5 . -7) 1002 (995 . 1002) (993 . 995) (990 . 993)) nil (26069 59092 390809 195000) 0 nil])
([nil nil ((apply -3 1293 1372 undo--wrap-and-run-primitive-undo 1293 1372 ((1297 . 1300) 1327)) (t 26069 59092 396574 614000)) nil (26069 59234 582935 377000) 0 nil])
([nil nil ((1374 . 1375) (1370 . 1374) (#("d" 0 1 (fontified t)) . -1370) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1371 (1365 . 1371) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -1365) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 1366 (1365 . 1366) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -1365) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 1366 (1364 . 1366) (apply yas--snippet-revive 1339 1364 #s(yas--snippet nil (#s(yas--field 1 1348 1363 nil nil nil t nil)) nil 4 nil #s(yas--field 1 1348 1363 nil nil nil t nil) nil nil)) (nil fontified nil 1358 . 1362) (1358 . 1362) (#("ch" 0 2 (fontified nil)) . 1358) (nil fontified nil 1358 . 1360) (1358 . 1360) (#("char" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t)) . -1358) (undo-tree-id42 . -4) (undo-tree-id43 . -4) 1362 (1358 . 1362) (1357 . 1358) (1353 . 1357) (1352 . 1354) (1348 . 1352) (#("n" 0 1 (fontified t)) . -1348) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("o" 0 1 (fontified t)) . -1349) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 1350 (1349 . 1350) (#("typename Signature" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 18 (face font-lock-type-face fontified nil)) . 1349) (1348 . 1349) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1348 1363 nil nil nil t nil)) nil 4 nil #s(yas--field 1 1348 1363 nil nil nil t nil) nil nil)) (1339 . 1367) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 1339) (1339 . 1372) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (fontified nil syntax-table (4 . 62)) 9 27 (fontified nil) 27 28 (fontified nil syntax-table (5 . 60))) . -1339) (1339 . 1367) (1330 . 1334) (#("  " 0 1 (c-is-sws t fontified nil) 1 2 (c-is-sws t fontified nil)) . 1330) (1336 . 1337) (1330 . 1332) (#("    " 0 1 (c-is-sws t fontified nil) 1 4 (c-is-sws t fontified nil)) . 1330) (1337 . 1338) (1336 . 1337) (#("f" 0 1 (fontified t)) . -1336) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 1337 (1334 . 1337) (1329 . 1334) 1328) nil (26069 59234 582929 900000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1379 . 1380) (#("
" 0 1 (fontified nil)) . -1421) (1375 . 1422) 1330 (t 26069 59805 339893 354000)) nil (26069 62261 731064 42000) 0 nil])
([nil nil ((#("(char,char)" 0 1 (face (rainbow-delimiters-depth-4-face) c-type c-decl-arg-start fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 5 (face font-lock-type-face fontified t) 5 6 (c-type c-decl-arg-start fontified t) 6 10 (face font-lock-type-face fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) fontified t)) . 1398) (undo-tree-id823 . -10) (undo-tree-id824 . -10) (undo-tree-id825 . -10) (undo-tree-id826 . -10) (undo-tree-id827 . -10) (undo-tree-id828 . -10) (undo-tree-id829 . -10) (undo-tree-id830 . -10) (undo-tree-id831 . -10) (undo-tree-id832 . -10) (undo-tree-id833 . -10) (undo-tree-id834 . -10) (undo-tree-id835 . -10) (undo-tree-id836 . -10) (undo-tree-id837 . -10) (undo-tree-id838 . -10) (undo-tree-id839 . -10) (undo-tree-id840 . -10) (undo-tree-id841 . -10) (undo-tree-id842 . -10) (undo-tree-id843 . -10) (undo-tree-id844 . -10) (undo-tree-id845 . -10) (undo-tree-id846 . -10) (undo-tree-id847 . -10) (undo-tree-id848 . -10) (undo-tree-id849 . -10) (undo-tree-id850 . -10) (undo-tree-id851 . -10) (undo-tree-id852 . 1) (undo-tree-id853 . -11) (undo-tree-id854 . 11) (undo-tree-id855 . -1) (undo-tree-id856 . -10) (undo-tree-id857 . -10) (undo-tree-id858 . -10) (undo-tree-id859 . -10) (undo-tree-id860 . -10) (undo-tree-id861 . -10) (undo-tree-id862 . -10) (undo-tree-id863 . -10) (undo-tree-id864 . -10) (undo-tree-id865 . -10) (undo-tree-id866 . -10) (undo-tree-id867 . -10) (undo-tree-id868 . -10) (undo-tree-id869 . -10) (undo-tree-id870 . -10) (undo-tree-id871 . -10) (undo-tree-id872 . -10) (undo-tree-id873 . -10) (undo-tree-id874 . -10) (undo-tree-id875 . -10) (undo-tree-id876 . -10) (undo-tree-id877 . -10) (undo-tree-id878 . -10) (undo-tree-id879 . -10) (undo-tree-id880 . -10) (undo-tree-id881 . -10) (undo-tree-id882 . -10) (undo-tree-id883 . -10) (undo-tree-id884 . -10) (undo-tree-id885 . -10) (undo-tree-id886 . -10) (undo-tree-id887 . -10) (undo-tree-id888 . -10) (undo-tree-id889 . -10) (undo-tree-id890 . -10) (undo-tree-id891 . -10) (undo-tree-id892 . -10) (undo-tree-id893 . -10) (undo-tree-id894 . -10) (undo-tree-id895 . -10) (undo-tree-id896 . -10) (undo-tree-id897 . -10) (undo-tree-id898 . -10) (undo-tree-id899 . -10) (undo-tree-id900 . -10) (undo-tree-id901 . -10) (undo-tree-id902 . -10) (undo-tree-id903 . -10) (undo-tree-id904 . -10) (undo-tree-id905 . -10) (undo-tree-id906 . -10) (undo-tree-id907 . -10) (undo-tree-id908 . -10) (undo-tree-id909 . -10) (undo-tree-id910 . -10) (undo-tree-id911 . -10) (undo-tree-id912 . -10) (undo-tree-id913 . -10) (undo-tree-id914 . -10) (undo-tree-id915 . -10) (undo-tree-id916 . -10) (undo-tree-id917 . -10) (undo-tree-id918 . -10) (undo-tree-id919 . -10) (undo-tree-id920 . -10) (undo-tree-id921 . -10) (undo-tree-id922 . -10) (undo-tree-id923 . -10) (undo-tree-id924 . -10) (undo-tree-id925 . -10) (undo-tree-id926 . -10) (undo-tree-id927 . -10) (undo-tree-id928 . -10) (undo-tree-id929 . -10) (undo-tree-id930 . -10) (undo-tree-id931 . -10) (undo-tree-id932 . -10) (undo-tree-id933 . -10) (undo-tree-id934 . -10) (undo-tree-id935 . -10) (undo-tree-id936 . -10) (undo-tree-id937 . -10) (undo-tree-id938 . -10) (undo-tree-id939 . -10) (undo-tree-id940 . -10) (undo-tree-id941 . -10) (undo-tree-id942 . -10) (undo-tree-id943 . -10) (undo-tree-id944 . -10) (undo-tree-id945 . -10) (undo-tree-id946 . -10) (undo-tree-id947 . -10) (undo-tree-id948 . -10) (undo-tree-id949 . -10) (undo-tree-id950 . -10) (undo-tree-id951 . -10) (undo-tree-id952 . -10) (undo-tree-id953 . -10) (undo-tree-id954 . -10) (undo-tree-id955 . -10) (undo-tree-id956 . -10) (undo-tree-id957 . -10) (undo-tree-id958 . -10) (undo-tree-id959 . -10) (undo-tree-id960 . -10) (undo-tree-id961 . -10) (undo-tree-id962 . -10) (undo-tree-id963 . -10) (undo-tree-id964 . -10) (undo-tree-id965 . -10) (undo-tree-id966 . -10) (undo-tree-id967 . -10) (undo-tree-id968 . -10) (undo-tree-id969 . -10) (undo-tree-id970 . -10) (undo-tree-id971 . -10) (undo-tree-id972 . -10) (undo-tree-id973 . -10) (undo-tree-id974 . -10) (undo-tree-id975 . -10) (undo-tree-id976 . -10) (undo-tree-id977 . -10) (undo-tree-id978 . -10) (undo-tree-id979 . -10) (undo-tree-id980 . -10) (undo-tree-id981 . -10) (undo-tree-id982 . -10) (undo-tree-id983 . -10) (undo-tree-id984 . -10) (undo-tree-id985 . -10) (undo-tree-id986 . -10) (undo-tree-id987 . -10) (undo-tree-id988 . -10) (undo-tree-id989 . -10) (undo-tree-id990 . -10) (undo-tree-id991 . -10) (undo-tree-id992 . -10) (undo-tree-id993 . -10) (undo-tree-id994 . -10) (undo-tree-id995 . -10) (undo-tree-id996 . -10) (undo-tree-id997 . -10) (undo-tree-id998 . -10) (undo-tree-id999 . -10) (undo-tree-id1000 . -10) (undo-tree-id1001 . -10) (undo-tree-id1002 . -10) (undo-tree-id1003 . -10) (undo-tree-id1004 . -10) (undo-tree-id1005 . -10) (undo-tree-id1006 . -10) (undo-tree-id1007 . -10) (undo-tree-id1008 . -10) (undo-tree-id1009 . -10) (undo-tree-id1010 . -10) (undo-tree-id1011 . -10) (undo-tree-id1012 . -10) (undo-tree-id1013 . -10) (undo-tree-id1014 . -10) (undo-tree-id1015 . -10) (undo-tree-id1016 . -10) (undo-tree-id1017 . -11) 1408) nil (26069 62261 731058 766000) 0 nil])
([nil nil ((1409 . 1414) (1406 . 1409) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1406) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -1407) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1408) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1409) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -1410) (undo-tree-id58 . -1) 1411 (1398 . 1400) (nil fontified nil 1394 . 1398) (nil face (rainbow-delimiters-depth-3-face) 1394 . 1398) (1394 . 1398) (#("v" 0 1 (fontified nil)) . 1394) (nil fontified nil 1394 . 1395) (nil face (rainbow-delimiters-depth-3-face) 1394 . 1395) (1394 . 1395) (#("void" 0 4 (fontified nil)) . -1394) (nil fontified nil 1394 . 1398) (nil face (rainbow-delimiters-depth-3-face) 1394 . 1398) (1394 . 1398) (#("vo" 0 1 (fontified t) 1 2 (fontified t)) . -1394) (undo-tree-id59 . -2) (undo-tree-id60 . -2) 1396 (1395 . 1396) (#("p" 0 1 (fontified t)) . -1395) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 1396 (1394 . 1396) (#("b" 0 1 (fontified t)) . -1394) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("o" 0 1 (fontified t)) . -1395) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("o" 0 1 (fontified t)) . -1396) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -1397) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) 1398) nil (26069 62392 299843 195000) 0 nil])
([nil nil ((1074 . 1081) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -1074) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) 1075 (1072 . 1075) (apply yas--snippet-revive 1056 1072 #s(yas--snippet nil (#s(yas--field 1 1065 1071 nil nil nil t nil)) nil 14 nil #s(yas--field 1 1065 1071 nil nil nil t nil) nil nil)) (1069 . 1071) (nil fontified nil 1065 . 1069) (nil face (rainbow-delimiters-depth-4-face) 1065 . 1069) (1065 . 1069) (#("vo" 0 2 (fontified nil)) . 1065) (nil fontified nil 1065 . 1067) (nil face (rainbow-delimiters-depth-4-face) 1065 . 1067) (1065 . 1067) (#("void" 0 4 (fontified nil)) . -1065) (nil fontified nil 1065 . 1069) (nil face (rainbow-delimiters-depth-4-face) 1065 . 1069) (1065 . 1069) (#("vo" 0 1 (fontified t) 1 2 (fontified t)) . -1065) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) 1067 (1066 . 1067) (#("typename Signature" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 18 (face font-lock-type-face fontified nil)) . 1066) (1065 . 1066) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1065 1071 nil nil nil t nil)) nil 14 nil #s(yas--field 1 1065 1071 nil nil nil t nil) nil nil)) (1056 . 1084) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 1056) (1056 . 1089) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (fontified nil syntax-table (4 . 62)) 9 27 (fontified nil) 27 28 (fontified nil syntax-table (5 . 60))) . -1056) (1056 . 1084) (1054 . 1056) (nil fontified nil 1051 . 1054) (1051 . 1054) (#("st" 0 2 (fontified nil)) . 1051) (nil fontified nil 1051 . 1053) (1051 . 1053) (#("std" 0 3 (fontified nil)) . -1051) (nil fontified nil 1051 . 1054) (1051 . 1054) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -1051) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) 1053 (1051 . 1053) (1050 . 1051) (t 26069 62261 746509 774000)) nil (26069 62428 294875 856000) 0 nil] [nil nil ((640 . 641) (t 26069 62261 746509 774000)) ((#("," 0 1 (c-type c-decl-arg-start fontified t)) . 640) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1)) (26069 62391 925628 834000) 0 nil])
([nil nil ((1461 . 1466) (#("token" 0 5 (fontified nil)) . -1461) (1461 . 1466) (1459 . 1461) (1448 . 1459) (#("to" 0 2 (fontified nil)) . 1448) (1448 . 1450) (#("token_class" 0 11 (fontified nil)) . -1448) (1448 . 1459) (#("to" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t)) . -1448) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) 1450 (1448 . 1450) (1458 . 1459) (nil face (rainbow-delimiters-depth-5-face) 1070 . 1081) (nil fontified nil 1070 . 1081) (1070 . 1081) (#("to" 0 2 (fontified nil)) . 1070) (nil face (rainbow-delimiters-depth-5-face) 1070 . 1072) (nil fontified nil 1070 . 1072) (1070 . 1072) (#("token_class" 0 11 (fontified nil)) . -1070) (nil face (rainbow-delimiters-depth-5-face) 1070 . 1081) (nil fontified nil 1070 . 1081) (1070 . 1081) (#("to" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t)) . -1070) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) 1072 (1070 . 1072) (1070 . 1072) (1070 . 1075) (t 26069 62428 309839 718000)) nil (26069 62567 447515 554000) 0 nil])
([nil nil ((641 . 642)) ((#("l" 0 1 (fontified t)) . 641) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1)) (26069 62391 923519 891000) 0 nil])
([nil nil ((1088 . 1089) (1466 . 1467) (t 26069 62567 456503 552000)) nil (26069 62829 398548 646000) 0 nil])
nil
([nil nil ((1100 . 1102) (t 26069 62829 419831 551000)) nil (26069 63592 679668 308000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -654) (594 . 655) 593 (t 26069 63592 786482 666000)) nil (26069 64216 28441 629000) 0 nil])
([nil nil ((595 . 601) (#("    " 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . -595) (undo-tree-id1118 . -4) (undo-tree-id1119 . -4) (undo-tree-id1120 . -4) (undo-tree-id1121 . -4) (undo-tree-id1122 . -4) (undo-tree-id1123 . -4) (undo-tree-id1124 . -4) (undo-tree-id1125 . -4) (undo-tree-id1126 . -4) (undo-tree-id1127 . -4) (undo-tree-id1128 . -4) (undo-tree-id1129 . -4) (undo-tree-id1130 . -4) (undo-tree-id1131 . -4) (undo-tree-id1132 . -4) (undo-tree-id1133 . -4) (undo-tree-id1134 . -4) (undo-tree-id1135 . -4) (undo-tree-id1136 . -4) (undo-tree-id1137 . -4) (undo-tree-id1138 . -4) (undo-tree-id1139 . -4) (undo-tree-id1140 . -4) (undo-tree-id1141 . -4) (undo-tree-id1142 . -4) (undo-tree-id1143 . -4) (undo-tree-id1144 . -4) (undo-tree-id1145 . -4) (undo-tree-id1146 . -4) (undo-tree-id1147 . -4) (undo-tree-id1148 . -4) (undo-tree-id1149 . -4) (undo-tree-id1150 . -4) (undo-tree-id1151 . -4) (undo-tree-id1152 . -4) (undo-tree-id1153 . -4) (undo-tree-id1154 . -4) (undo-tree-id1155 . -4) (undo-tree-id1156 . -4) (undo-tree-id1157 . -4) (undo-tree-id1158 . -4) (undo-tree-id1159 . -4) (undo-tree-id1160 . -4) (undo-tree-id1161 . -4) (undo-tree-id1162 . -4) (undo-tree-id1163 . -4) (undo-tree-id1164 . -4) (undo-tree-id1165 . -4) (undo-tree-id1166 . -4) (undo-tree-id1167 . -4) (undo-tree-id1168 . -4) (undo-tree-id1169 . -4) (undo-tree-id1170 . -4) (undo-tree-id1171 . -4) (undo-tree-id1172 . -4) (undo-tree-id1173 . -4) (undo-tree-id1174 . -4) (undo-tree-id1175 . -4) (undo-tree-id1176 . -4) (undo-tree-id1177 . -4) (undo-tree-id1178 . -4) (undo-tree-id1179 . -4) (undo-tree-id1180 . -4) (undo-tree-id1181 . -4) (undo-tree-id1182 . -4) (undo-tree-id1183 . -4) (undo-tree-id1184 . -4) (undo-tree-id1185 . -4) (undo-tree-id1186 . -4) (undo-tree-id1187 . -4) (undo-tree-id1188 . -4) (undo-tree-id1189 . -4) (undo-tree-id1190 . -4) (undo-tree-id1191 . -4) (undo-tree-id1192 . -4) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) (undo-tree-id1197 . -4) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) (undo-tree-id1202 . -4) (undo-tree-id1203 . -4) (undo-tree-id1204 . -4) (undo-tree-id1205 . -4) (undo-tree-id1206 . -4) (undo-tree-id1207 . -4) (undo-tree-id1208 . -4) (undo-tree-id1209 . -4) (undo-tree-id1210 . -4) (undo-tree-id1211 . -4) (undo-tree-id1212 . -4) (undo-tree-id1213 . -4) (undo-tree-id1214 . -4) (undo-tree-id1215 . -4) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) (undo-tree-id1218 . -4) (undo-tree-id1219 . -4) (undo-tree-id1220 . -4) (undo-tree-id1221 . -4) (undo-tree-id1222 . -4) (undo-tree-id1223 . -4) (undo-tree-id1224 . -4) (undo-tree-id1225 . -4) (undo-tree-id1226 . -4) (undo-tree-id1227 . -4) (undo-tree-id1228 . -4) (undo-tree-id1229 . -4) (undo-tree-id1230 . -4) (undo-tree-id1231 . -4) (undo-tree-id1232 . -4) (undo-tree-id1233 . -4) (undo-tree-id1234 . -4) (undo-tree-id1235 . -4) (undo-tree-id1236 . -4) (undo-tree-id1237 . -4) (undo-tree-id1238 . -4) (undo-tree-id1239 . -4) (undo-tree-id1240 . -4) (undo-tree-id1241 . -4) (undo-tree-id1242 . -4) (undo-tree-id1243 . -4) (undo-tree-id1244 . -4) (undo-tree-id1245 . -4) (undo-tree-id1246 . -4) (undo-tree-id1247 . -4) (undo-tree-id1248 . -4) (undo-tree-id1249 . -4) (undo-tree-id1250 . -4) (undo-tree-id1251 . -4) (undo-tree-id1252 . -4) (undo-tree-id1253 . -4) (undo-tree-id1254 . -4) (undo-tree-id1255 . -4) (undo-tree-id1256 . -4) (undo-tree-id1257 . -4) (undo-tree-id1258 . -4) (undo-tree-id1259 . -4) (undo-tree-id1260 . -4) (undo-tree-id1261 . -4) (undo-tree-id1262 . -4) (undo-tree-id1263 . -4) (undo-tree-id1264 . -4) (undo-tree-id1265 . -4) (undo-tree-id1266 . -4) (undo-tree-id1267 . -4) (undo-tree-id1268 . -4) (undo-tree-id1269 . -4) (undo-tree-id1270 . -4) (undo-tree-id1271 . -4) (undo-tree-id1272 . -4) (undo-tree-id1273 . -4) (undo-tree-id1274 . -4) (undo-tree-id1275 . -4) (undo-tree-id1276 . -4) (undo-tree-id1277 . -4) (undo-tree-id1278 . -4) (undo-tree-id1279 . -4) (undo-tree-id1280 . -4) (undo-tree-id1281 . -4) (undo-tree-id1282 . -4) (undo-tree-id1283 . -4) (undo-tree-id1284 . -4) (undo-tree-id1285 . -4) (undo-tree-id1286 . -4) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (undo-tree-id1291 . -4) (undo-tree-id1292 . -4) (undo-tree-id1293 . -4) (undo-tree-id1294 . -4) (undo-tree-id1295 . -4) (undo-tree-id1296 . -4) (undo-tree-id1297 . -4) (undo-tree-id1298 . -4) (undo-tree-id1299 . -4) (undo-tree-id1300 . -4) (undo-tree-id1301 . -4) (undo-tree-id1302 . -4) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) (undo-tree-id1305 . -4) (undo-tree-id1306 . -4) (undo-tree-id1307 . -4) (undo-tree-id1308 . -4) (undo-tree-id1309 . -4) 599) nil (26069 64216 28432 991000) 0 nil])
([nil nil ((738 . 745) (737 . 738) (apply yas--snippet-revive 708 737 #s(yas--snippet nil (#s(yas--field 1 717 736 nil nil nil t nil)) nil 20 nil #s(yas--field 1 717 736 nil nil nil t nil) nil nil)) (735 . 736) (#("^" 0 1 (fontified t)) . -735) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) 736 (733 . 736) (#("w" 0 1 (fontified t)) . -733) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (#("e" 0 1 (fontified t)) . -734) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) 735 (730 . 735) (728 . 730) (nil fontified nil 717 . 728) (nil face (rainbow-delimiters-depth-5-face) 717 . 728) (717 . 728) (#("to" 0 2 (fontified nil)) . 717) (nil fontified nil 717 . 719) (nil face (rainbow-delimiters-depth-5-face) 717 . 719) (717 . 719) (#("token_class" 0 11 (fontified nil)) . -717) (nil fontified nil 717 . 728) (nil face (rainbow-delimiters-depth-5-face) 717 . 728) (717 . 728) (#("token_cl" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . -717) (undo-tree-id1316 . -8) (undo-tree-id1317 . -8) 725 (723 . 725) (#("v" 0 1 (fontified t)) . -723) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) 724 (718 . 724) (#("typename Signature" 0 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 18 (face font-lock-type-face fontified nil)) . 718) (717 . 718) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 717 736 nil nil nil t nil)) nil 20 nil #s(yas--field 1 717 736 nil nil nil t nil) nil nil)) (708 . 736) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 708) (708 . 741) (#("f" 0 1 (fontified nil)) . 708) (708 . 709) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (fontified nil syntax-table (4 . 62)) 9 27 (fontified nil) 27 28 (fontified nil syntax-table (5 . 60))) . -708) (708 . 736) (#("func" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -708) (undo-tree-id1320 . -4) (undo-tree-id1321 . -4) 712 (709 . 712) (708 . 709) (706 . 708) (705 . 706) (#("f" 0 1 (fontified t)) . -705) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) 706 (703 . 706) (702 . 703) (t 26069 64216 36469 933000)) nil (26069 64266 367290 837000) 0 nil])
([nil nil ((736 . 737) (#(")" 0 1 (fontified nil)) . -736) (736 . 737) (t 26069 64266 379802 245000)) nil (26069 64663 483183 668000) 0 nil])
([nil nil ((717 . 718)) nil (26069 64663 483182 603000) 0 nil])
([nil nil ((717 . 721)) nil (26069 64663 483182 146000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -720) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) 721) nil (26069 64663 483181 149000) 0 nil])
([nil nil ((720 . 721)) nil (26069 64663 483178 821000) 0 nil])
([nil nil ((nil fontified nil 717 . 721) (nil face (rainbow-delimiters-depth-5-face) 717 . 721) (717 . 721) (#("vo" 0 2 (fontified nil)) . 717) (nil fontified nil 717 . 719) (nil face (rainbow-delimiters-depth-5-face) 717 . 719) (717 . 719) (#("void" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t)) . -717) (undo-tree-id1324 . -4) (undo-tree-id1325 . -4) 721) nil (26069 64663 483175 471000) 0 nil])
([nil nil ((1051 . 1052) (t 26069 64663 493127 476000)) nil (26070 2472 927627 392000) 0 nil])
([nil nil ((1259 . 1260)) nil (26070 2472 927623 918000) 0 nil])
([nil nil ((906 . 907) (t 26070 2472 936392 575000)) nil (26070 2750 4964 499000) 0 nil])
([nil nil ((425 . 426) (apply yas--snippet-revive 400 425 #s(yas--snippet nil (#s(yas--field 1 412 416 nil nil nil t #s(yas--field 2 418 424 nil nil nil t nil)) #s(yas--field 2 418 424 nil nil nil t nil)) nil 31 nil #s(yas--field 2 418 424 nil nil nil t nil) nil nil)) (419 . 424) (#("test_name" 0 9 (fontified nil)) . 419) (undo-tree-id1328 . -9) (418 . 419) (412 . 416) (#("e" 0 1 (fontified t)) . -412) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (#("r" 0 1 (fontified t)) . -413) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) 414 (413 . 414) (#("test_case_name" 0 14 (fontified nil)) . 413) (undo-tree-id1631 . -14) (412 . 413) (139 . 169) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 412 416 nil nil nil t #s(yas--field 2 418 424 nil nil nil t nil)) #s(yas--field 2 418 424 nil nil nil t nil)) nil 31 nil #s(yas--field 2 418 424 nil nil nil t nil) nil nil)) (370 . 408) (#("FRIEND_TEST(${1:test_case_name}, ${2:test_name})" 0 48 (fontified nil)) . 370) (370 . 418) (#("FR" 0 2 (fontified nil)) . 370) (370 . 372) (#("FRIEND_TEST(test_case_name, test_name)" 0 38 (fontified nil)) . -370) (370 . 408) (#("FRIEN" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -370) (undo-tree-id1632 . -5) (undo-tree-id1633 . -5) 375 (374 . 375) (370 . 374) (365 . 370) (t 26070 2750 16386 925000) 358) nil (26070 11751 625845 628000) 0 nil])
([nil nil ((#("    static token_class::token null_token;
" 0 4 (fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 22 (fontified t face font-lock-constant-face) 22 24 (fontified t) 24 28 (fontified t face font-lock-type-face) 28 29 (fontified t c-type c-decl-id-start face font-lock-type-face) 29 30 (fontified t) 30 40 (fontified t face font-lock-variable-name-face) 40 42 (fontified t)) . 1663) (undo-tree-id273 . -30) (undo-tree-id274 . -42) (undo-tree-id275 . -42) (undo-tree-id276 . -41) (t 26070 11751 642871 459000)) nil (26074 16176 254270 224000) 0 nil])
([nil nil ((nil rear-nonsticky nil 504 . 505) (#("
" 0 1 (fontified nil)) . -542) (500 . 543) 495) nil (26074 16176 254265 303000) 0 nil])
([nil nil ((501 . 507) (#("    " 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . -501) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -4) (undo-tree-id130 . -4) (undo-tree-id131 . -4) (undo-tree-id132 . -4) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -4) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (undo-tree-id142 . -4) (undo-tree-id143 . -4) (undo-tree-id144 . -4) (undo-tree-id145 . -4) (undo-tree-id146 . -4) (undo-tree-id147 . -4) (undo-tree-id148 . -4) (undo-tree-id149 . -4) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -4) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (undo-tree-id212 . -4) (undo-tree-id213 . -4) (undo-tree-id214 . -4) (undo-tree-id215 . -4) (undo-tree-id216 . -4) (undo-tree-id217 . -4) (undo-tree-id218 . -4) (undo-tree-id219 . -4) (undo-tree-id220 . -4) (undo-tree-id221 . -4) (undo-tree-id222 . -4) (undo-tree-id223 . -4) (undo-tree-id224 . -4) (undo-tree-id225 . -4) (undo-tree-id226 . -4) (undo-tree-id227 . -4) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) (undo-tree-id232 . -4) (undo-tree-id233 . -4) (undo-tree-id234 . -4) (undo-tree-id235 . -4) (undo-tree-id236 . -4) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -4) (undo-tree-id261 . -4) (undo-tree-id262 . -4) (undo-tree-id263 . -4) (undo-tree-id264 . -4) (undo-tree-id265 . -4) (undo-tree-id266 . -4) (undo-tree-id267 . -4) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -4) (undo-tree-id271 . -4) (undo-tree-id272 . -4) 505) nil (26074 16176 254256 289000) 0 nil])
([nil nil ((#("      static token_class::token null_token;
" 0 6 (fontified t) 6 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 24 (fontified t face font-lock-constant-face) 24 26 (fontified t) 26 30 (fontified t face font-lock-type-face) 30 31 (fontified t c-type c-decl-id-start face font-lock-type-face) 31 32 (fontified t) 32 42 (fontified t face font-lock-variable-name-face) 42 43 (fontified t) 43 44 (fontified t)) . 501) (undo-tree-id279 . -5) (undo-tree-id280 . -5) (undo-tree-id281 . -43) (undo-tree-id282 . 38) (undo-tree-id283 . -32) 506 (t 26074 16176 269380 866000)) nil (26074 16216 151791 336000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1158 . 1159) (#("
" 0 1 (fontified nil)) . -1196) (1152 . 1197) 1148) nil (26074 16216 151691 70000) 0 nil])
([nil current ((1153 . 1157) (#("      " 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t)) . -1153) (undo-tree-id277 . -6) (undo-tree-id278 . -6) 1159) nil (26074 16216 151687 827000) 0 nil])
nil
