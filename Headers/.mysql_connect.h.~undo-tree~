(undo-tree-save-format-version . 1)
"388268c879a2147838f83ff98faa518ef186b351"
[nil nil nil nil (26078 11691 505877 885000) 0 nil]
([nil nil ((90 . 94) (89 . 89) (89 . 90) (#(" " 0 1 (fontified t)) . 89) (undo-tree-id55 . -1) 90 (apply yas--snippet-revive 70 100 #s(yas--snippet nil (#s(yas--field 1 80 89 nil nil nil t #s(yas--exit 94 nil))) #s(yas--exit 94 nil) 24 nil #s(yas--field 1 80 89 nil nil nil t #s(yas--exit 94 nil)) nil nil)) (81 . 89) (#("identifier" 0 10 (fontified nil face font-lock-variable-name-face)) . 81) (80 . 81) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 80 89 nil nil nil t #s(yas--exit 94 nil))) #s(yas--exit 94 nil) 24 nil #s(yas--field 1 80 89 nil nil nil t #s(yas--exit 94 nil)) nil nil)) (70 . 101) (#("namespace ${1:identifier} {
  $0
    }" 0 38 (fontified nil)) . 70) (103 . 107) (98 . 100) (70 . 102) (#("nam" 0 3 (fontified nil)) . 70) (70 . 73) (#("namespace identifier {declarations}" 0 35 (fontified nil)) . -70) (70 . 105) (#("nam" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -70) (undo-tree-id56 . -3) (undo-tree-id57 . -3) 73 (70 . 73) (69 . 69) (69 . 70) (72 . 77) (#("e" 0 1 (fontified nil)) . 72) (undo-tree-id58 . -1) (72 . 73) (#("endif" 0 5 (fontified nil)) . -72) (undo-tree-id59 . -5) (72 . 77) (#("en" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -72) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) 74 (72 . 74) (71 . 72) (70 . 70) (70 . 71) (69 . 69) (69 . 70) (68 . 68) (68 . 69) (66 . 68) (#("-" 0 1 (fontified t)) . -66) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 67 (66 . 67) (#(")" 0 1 (fontified t)) . -66) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 67 (66 . 67) (#(")" 0 1 (fontified nil face font-lock-variable-name-face)) . -66) (undo-tree-id69 . -1) (66 . 67) (52 . 66) (#("I" 0 1 (fontified t face font-lock-variable-name-face)) . -52) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 53 (48 . 53) (43 . 48) (apply yas--snippet-revive 36 43 #s(yas--snippet nil nil #s(yas--exit 43 nil) 23 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 43 nil) 23 nil nil nil nil)) (36 . 43) (#("define $0" 0 9 (fontified nil)) . 36) (undo-tree-id73 . -9) (36 . 45) (#("de" 0 2 (fontified nil)) . 36) (undo-tree-id74 . -2) (36 . 38) (#("define macro" 0 12 (fontified nil)) . -36) (undo-tree-id75 . -12) (36 . 48) (#("def" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face) 2 3 (fontified t face font-lock-preprocessor-face)) . -36) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) 39 (36 . 39) (#("s" 0 1 (fontified t face font-lock-preprocessor-face)) . -36) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 37 (36 . 37) (35 . 36) (34 . 34) (34 . 35) (32 . 34) (28 . 32) (#("K" 0 1 (fontified t)) . -28) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 29 (28 . 29) (#("K" 0 1 (fontified t)) . -28) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("L" 0 1 (fontified t)) . -29) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("Y" 0 1 (fontified t)) . -30) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 31 (17 . 31) (9 . 17) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 22 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 22 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id94 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id95 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id96 . -12) (2 . 14) (#("ifn" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face) 2 3 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) 5 (3 . 5) (#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . -3) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) 4 (2 . 4) (1 . 2) (t 26078 11211 108979 729000)) nil (26078 11691 505867 472000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 90) (undo-tree-id54 . 1)) nil (26078 11691 503794 305000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 90) (undo-tree-id53 . 1)) nil (26078 11691 503792 595000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 90) (undo-tree-id52 . 1)) nil (26078 11691 503790 934000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 90) (undo-tree-id51 . 1)) nil (26078 11691 503789 484000) 0 nil])
([nil nil ((118 . 120) (#("    " 0 4 (fontified t)) . -118) (undo-tree-id45 . -4) 122 (129 . 134) (apply yas--snippet-revive 122 129 #s(yas--snippet nil nil nil 25 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 25 nil nil nil nil)) (122 . 129) (#("public:" 0 7 (fontified nil)) . 122) (122 . 129) (#("publ" 0 4 (fontified nil)) . 122) (122 . 126) (#("public:" 0 7 (fontified nil)) . -122) (122 . 129) (#("publ" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -122) (undo-tree-id46 . -4) (undo-tree-id47 . -4) 126 (122 . 126) (117 . 122) (123 . 125) (124 . 125) (118 . 122) (117 . 119) (114 . 116) (#("    " 0 4 (fontified nil)) . 114) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (118 . 120) (113 . 118) (94 . 113) (92 . 94) (92 . 95) (93 . 95) (#("  " 0 2 (fontified nil)) . 93) (92 . 93) (#("    " 0 4 (fontified t)) . 95) (undo-tree-id50 . -1) 96) nil (26078 11691 503785 459000) 0 nil])
([nil nil ((apply -24 92 170 undo--wrap-and-run-primitive-undo 92 170 ((163 . 166) (158 . 161) (142 . 145) (132 . 135) (126 . 129) (122 . 125) (116 . 119) (94 . 97) 92))) nil (26078 11691 503772 783000) 0 nil])
([nil nil ((294 . 302) (293 . 294) (287 . 293) (#("string" 0 6 (fontified nil)) . -287) (287 . 293) (285 . 287) (282 . 285) (281 . 282) (280 . 281) (274 . 280) (268 . 274) (#("s" 0 1 (fontified nil)) . 268) (268 . 269) (#("string" 0 6 (fontified nil)) . -268) (268 . 274) (#("s" 0 1 (fontified t)) . -268) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 269 (268 . 269) (266 . 268) (nil fontified nil 263 . 266) (263 . 266) (#("std" 0 3 (fontified nil)) . 263) (nil fontified nil 263 . 266) (263 . 266) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -263) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 266 (264 . 266) (263 . 264) (262 . 263) (258 . 262) (#("n" 0 1 (fontified t)) . -258) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 259 (253 . 259) (251 . 253) (249 . 251) (246 . 249) (245 . 246) (241 . 245) (#("j" 0 1 (fontified t)) . -241) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("o" 0 1 (fontified t)) . -242) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("s" 0 1 (fontified t)) . -243) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("t" 0 1 (fontified t)) . -244) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 245 (241 . 245) (238 . 241) (234 . 238) (232 . 234) (229 . 232) (101 . 108) (#("st>" 0 2 (c-in-sws t fontified nil) 2 3 (fontified nil syntax-table (5 . 60) face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 101) (undo-tree-id14 . -3) (nil fontified nil 101 . 103) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 101 . 103) (nil c-in-sws t 101 . 103) (101 . 103) (#("string>" 0 7 (c-in-sws t fontified nil)) . -101) (nil fontified nil 101 . 108) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 101 . 108) (nil c-in-sws t 101 . 108) (101 . 108) (#("string" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face) 4 5 (fontified t c-in-sws t face font-lock-string-face) 5 6 (fontified t c-in-sws t face font-lock-string-face)) . -101) (undo-tree-id15 . -6) (undo-tree-id16 . -6) 107 (101 . 107) (apply yas--snippet-revive 92 102 #s(yas--snippet nil nil #s(yas--exit 101 nil) 27 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 101 nil) 27 nil nil nil nil)) (92 . 102) (#("include <$0>" 0 12 (fontified nil)) . 92) (undo-tree-id17 . -12) (92 . 104) (#("in" 0 2 (c-in-sws t fontified nil)) . 92) (undo-tree-id18 . -2) (92 . 94) (#("include <header>" 0 16 (fontified nil)) . -92) (undo-tree-id19 . -16) (92 . 108) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -92) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) 94 (93 . 94) (#("u" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -93) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 94 (92 . 94) (91 . 92) (90 . 90) (90 . 91) (79 . 90) (nil syntax-table nil 79 . 80) (nil syntax-table (1) 78 . 79) (#("an\"" 0 2 (c-in-sws t fontified nil) 2 3 (fontified nil face font-lock-string-face c-in-sws t)) . 79) (undo-tree-id26 . -3) (79 . 81) (#("analysis.h\"" 0 11 (fontified nil)) . -79) (nil syntax-table nil 91 . 92) (nil syntax-table (1) 90 . 91) (79 . 90) (#("analysis" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face) 3 4 (fontified t c-in-sws t face font-lock-string-face) 4 5 (fontified t c-in-sws t face font-lock-string-face) 5 6 (fontified t c-in-sws t face font-lock-string-face) 6 7 (fontified t c-in-sws t face font-lock-string-face) 7 8 (fontified t c-in-sws t face font-lock-string-face)) . -79) (undo-tree-id27 . -8) (undo-tree-id28 . -8) 87 (82 . 87) (79 . 82) (apply yas--snippet-revive 70 80 #s(yas--snippet nil nil #s(yas--exit 79 nil) 26 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 79 nil) 26 nil nil nil nil)) (70 . 80) (#("include \"$0\"" 0 12 (fontified nil)) . 70) (undo-tree-id29 . -12) (70 . 82) (#("i" 0 1 (c-in-sws t fontified nil)) . 70) (undo-tree-id30 . -1) (70 . 71) (#("include \"header\"" 0 16 (fontified nil)) . -70) (undo-tree-id31 . -16) (70 . 86) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -70) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) 72 (70 . 72) (69 . 70) (69 . 69) (69 . 70) (69 . 69) (69 . 70) (189 . 190) (173 . 174) (169 . 173) (#("v" 0 1 (c-is-sws t fontified nil)) . 169) (169 . 170) (#("void " 0 1 (c-is-sws t fontified nil) 1 4 (fontified nil) 4 5 (fontified nil c-is-sws t)) . 169) (169 . 173) (#("vo" 0 1 (fontified t c-is-sws t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -169) (undo-tree-id35 . -2) (undo-tree-id36 . -2) 171 171 (170 . 171) (170 . 171) (169 . 170) (182 . 184) (175 . 182) (#("m" 0 1 (fontified t)) . -175) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("o" 0 1 (fontified t)) . -176) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("d" 0 1 (fontified t)) . -177) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 178 (169 . 178) (#("mysql" 0 1 (c-is-sws t fontified nil) 1 5 (fontified nil)) . 169) (169 . 174) (#("mysql_mod" 0 1 (c-is-sws t fontified nil) 1 9 (fontified nil)) . -169) (169 . 178) (#("mysql_" 0 1 (fontified t c-is-sws t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -169) (undo-tree-id43 . -6) (undo-tree-id44 . -6) 175 (170 . 175) (169 . 170) (166 . 169) 162) nil (26078 11691 503754 222000) 0 nil])
([nil current ((320 . 321) 303) nil (26078 11691 503653 971000) 0 nil])
nil
