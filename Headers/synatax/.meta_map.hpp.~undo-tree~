(undo-tree-save-format-version . 1)
"4a2011bb8f1f58dac5362e2286ba516fc894503a"
[nil nil nil nil (26071 3462 612008 7000) 0 (:visualizer [5 0 1 #<marker in no buffer>])]
([nil nil ((apply yas--snippet-revive 87 96 #s(yas--snippet nil nil #s(yas--exit 96 nil) 35 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 96 nil) 35 nil nil nil nil)) (87 . 96) (#("template $0" 0 11 (fontified nil)) . 87) (87 . 98) (#("te" 0 2 (fontified nil)) . 87) (87 . 89) (#("template declaration" 0 20 (fontified nil)) . -87) (87 . 107) (#("te" 0 1 (fontified t) 1 2 (fontified t)) . -87) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 89 (#("r" 0 1 (fontified t)) . -89) (undo-tree-id2 . -1) 90 (87 . 90) (84 . 87) (84 . 87) (89 . 90) (#("    " 0 4 (fontified t)) . 88) (#("    " 0 4 (fontified t)) . 83) (83 . 87) (82 . 82) (82 . 83) (#(" " 0 1 (fontified t)) . 82) (undo-tree-id3 . -1) 83 (apply yas--snippet-revive 60 93 #s(yas--snippet nil (#s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil))) #s(yas--exit 87 nil) 34 nil #s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil)) nil nil)) (71 . 82) (#("identifier" 0 9 (fontified nil face font-lock-constant-face) 9 10 (fontified nil c-type c-decl-id-start face font-lock-constant-face)) . 71) (70 . 71) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil))) #s(yas--exit 87 nil) 34 nil #s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil)) nil nil)) (60 . 91) (#("namespace ${1:identifier} {
  $0
    }" 0 38 (fontified nil)) . 60) (93 . 97) (88 . 90) (60 . 92) (#("na" 0 2 (fontified nil)) . 60) (60 . 62) (#("namespace identifier {declarations}" 0 35 (fontified nil)) . -60) (60 . 95) (#("na" 0 1 (fontified t c-is-sws t) 1 2 (fontified t)) . -60) (undo-tree-id4 . -2) (undo-tree-id5 . -2) 62 (60 . 62) (59 . 59) (59 . 60) (62 . 67) (#("e" 0 1 (fontified nil)) . 62) (undo-tree-id6 . -1) (62 . 63) (#("endif" 0 5 (fontified nil)) . -62) (undo-tree-id7 . -5) (62 . 67) (#("en" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -62) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) 64 (62 . 64) (61 . 62) (60 . 60) (60 . 61) (59 . 59) (59 . 60) (58 . 58) (58 . 59) (47 . 58) (#("O" 0 1 (fontified t face font-lock-variable-name-face)) . -47) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 48 (47 . 48) (38 . 47) (apply yas--snippet-revive 31 38 #s(yas--snippet nil nil #s(yas--exit 38 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 38 nil) 33 nil nil nil nil)) (31 . 38) (#("define $0" 0 9 (fontified nil)) . 31) (undo-tree-id14 . -9) (31 . 40) (#("d" 0 1 (fontified nil)) . 31) (undo-tree-id15 . -1) (31 . 32) (#("define macro" 0 12 (fontified nil)) . -31) (undo-tree-id16 . -12) (31 . 43) (#("de" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -31) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) 33 (31 . 33) (#("f" 0 1 (fontified t face font-lock-preprocessor-face)) . -31) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 32 (31 . 32) (30 . 31) (29 . 29) (29 . 30) (25 . 29) (#("F" 0 1 (fontified t)) . -25) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("R" 0 1 (fontified t)) . -26) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 27 (25 . 27) (#("I" 0 1 (fontified t)) . -25) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 26 (14 . 26) (11 . 14) (#("M" 0 1 (fontified t)) . -11) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("A" 0 1 (fontified t)) . -12) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 13 (9 . 13) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 32 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 32 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id35 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id36 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id37 . -12) (2 . 14) (#("if" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) 4 (2 . 4) (1 . 2) (t 26071 3276 306494 442000)) nil (26071 3462 611999 443000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((apply -3 85 103 undo--wrap-and-run-primitive-undo 85 103 ((87 . 90) 97))) nil (26071 3462 611934 365000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((116 . 117) 98) nil (26071 3462 611930 784000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((60 . 61) (t 26071 3462 623156 571000)) nil (26071 3505 660506 486000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t c-is-sws t)) . -60) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) 61) nil (26071 3511 188719 946000) 0 (:visualizer [4 0 1 #<marker in no buffer>])] [nil nil ((#("

 " 0 1 (fontified t c-in-sws t) 1 2 (fontified t c-is-sws t) 2 3 (fontified t)) . 58) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -2) (undo-tree-id46 . -2) 61) ((58 . 61)) (26071 3505 658901 203000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply 3 85 97 undo--wrap-and-run-primitive-undo 85 97 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -87) 100)) (t 26071 3511 193155 381000)) nil (26071 4619 677105 432000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
nil
([nil nil ((231 . 232) (205 . 206) (#("," 0 1 (fontified t c-type c-decl-id-start)) . -205) (undo-tree-id254 . -1) 206 (229 . 230) (#("," 0 1 (fontified t c-type c-not-decl)) . -229) (undo-tree-id255 . -1) (undo-tree-id256 . -1) 230 (229 . 230) (227 . 229) (#("o" 0 1 (fontified t)) . -227) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("o" 0 1 (fontified t)) . -228) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("o" 0 1 (fontified t)) . -229) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 230 (225 . 230) (224 . 225) (nil fontified nil 206 . 224) (206 . 224) (#("to" 0 2 (fontified nil)) . 206) (nil fontified nil 206 . 208) (206 . 208) (#("token_class::token" 0 18 (fontified nil)) . -206) (nil fontified nil 206 . 224) (206 . 224) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -206) (undo-tree-id263 . -2) 208 (206 . 208) (205 . 206) (197 . 205) (#("=" 0 1 (fontified t)) . -197) (undo-tree-id264 . -1) 198 (197 . 198) (nil fontified nil 179 . 197) (nil face (rainbow-delimiters-depth-2-face) 179 . 197) (179 . 197) (#("to" 0 2 (fontified nil)) . 179) (nil fontified nil 179 . 181) (nil face (rainbow-delimiters-depth-2-face) 179 . 181) (179 . 181) (#("token_class::token" 0 18 (fontified nil)) . -179) (nil fontified nil 179 . 197) (nil face (rainbow-delimiters-depth-2-face) 179 . 197) (179 . 197) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -179) (undo-tree-id265 . -2) 181 (179 . 181) (#("c" 0 1 (fontified t)) . -179) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("a" 0 1 (fontified t)) . -180) (undo-tree-id268 . -1) (#("r" 0 1 (fontified t)) . -181) (undo-tree-id269 . -1) (undo-tree-id270 . -1) 182 (181 . 182) (#("e" 0 1 (fontified t)) . -181) (undo-tree-id271 . -1) (undo-tree-id272 . -1) 182 (179 . 182) (178 . 180) (173 . 178) (167 . 173) (#("st" 0 2 (fontified nil)) . 167) (167 . 169) (#("struct" 0 6 (fontified nil)) . -167) (167 . 173) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -167) (undo-tree-id273 . -2) (undo-tree-id274 . -2) 169 (167 . 169) (164 . 167) (158 . 163) (135 . 139) (154 . 155) (149 . 154) (#("token" 0 5 (fontified nil)) . -149) (149 . 154) (147 . 149) (136 . 147) (#("to" 0 2 (fontified nil)) . 136) (136 . 138) (#("token_class" 0 11 (fontified nil)) . -136) (136 . 147) (#("to" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -136) (undo-tree-id275 . -2) 138 (136 . 138) (135 . 136) (130 . 135) (#("token" 0 5 (fontified nil)) . -130) (130 . 135) (#("t" 0 1 (fontified t face font-lock-type-face)) . -130) (undo-tree-id276 . -1) 131 (130 . 131) (#("c" 0 1 (fontified t face font-lock-type-face)) . -130) (undo-tree-id277 . -1) 131 (130 . 131) (128 . 130) (117 . 128) (#("to" 0 2 (fontified nil)) . 117) (117 . 119) (#("token_class" 0 11 (fontified nil)) . -117) (117 . 128) (#("to" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -117) (undo-tree-id278 . -2) 119 (117 . 119) (73 . 76) (#("b" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -73) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("." 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -74) (undo-tree-id281 . -1) (undo-tree-id282 . -1) 75 (72 . 75) (69 . 72) (apply yas--snippet-revive 60 70 #s(yas--snippet nil nil #s(yas--exit 69 nil) 36 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 69 nil) 36 nil nil nil nil)) (60 . 70) (#("include \"$0\"" 0 12 (fontified nil)) . 60) (undo-tree-id283 . -12) (60 . 72) (#("i" 0 1 (c-in-sws t fontified nil)) . 60) (undo-tree-id284 . -1) (60 . 61) (#("include \"header\"" 0 16 (fontified nil)) . -60) (undo-tree-id285 . -16) (60 . 76) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -60) (undo-tree-id286 . -2) (undo-tree-id287 . -2) 62 (60 . 62) (59 . 60) (59 . 59) (59 . 60) (59 . 59) (59 . 60) (96 . 97)) nil (26071 4642 979746 453000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 237 . 238) (#("
" 0 1 (fontified nil)) . -363) (235 . 364) 234 (t 26071 4619 686461 827000)) nil (26071 4771 990492 249000) 0 (:visualizer [2 1 1 #<marker in no buffer>])] [nil nil ((232 . 235) (t 26071 4619 686461 827000) 231) ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 232) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) (undo-tree-id603 . -3) (undo-tree-id604 . -3) (undo-tree-id605 . -3) (undo-tree-id606 . -3) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -1) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -3) (undo-tree-id666 . -3) (undo-tree-id667 . -3) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3)) (26071 4642 643675 461000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("token_class::token Tok," 0 11 (fontified t face font-lock-constant-face) 11 12 (fontified t) 12 13 (fontified t) 13 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 20 (fontified t face font-lock-variable-name-face) 20 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t face font-lock-variable-name-face) 22 23 (fontified t c-type c-<>-arg-sep)) . 248) (undo-tree-id735 . -22) (undo-tree-id736 . -11) (undo-tree-id737 . -23) (undo-tree-id738 . -11) (undo-tree-id739 . -11) (undo-tree-id740 . -11) (undo-tree-id741 . -11) (undo-tree-id742 . -11) (undo-tree-id743 . -11) (undo-tree-id744 . -11) (undo-tree-id745 . -11) (undo-tree-id746 . -11) (undo-tree-id747 . -11) (undo-tree-id748 . -11) (undo-tree-id749 . -11) (undo-tree-id750 . -11) (undo-tree-id751 . -11) (undo-tree-id752 . -11) (undo-tree-id753 . -11) (undo-tree-id754 . -11) (undo-tree-id755 . -11) (undo-tree-id756 . -11) (undo-tree-id757 . -11) (undo-tree-id758 . -11) (undo-tree-id759 . -11) (undo-tree-id760 . -11) (undo-tree-id761 . -11) (undo-tree-id762 . -12) (undo-tree-id763 . -12) (undo-tree-id764 . -12) (undo-tree-id765 . -12) (undo-tree-id766 . -12) (undo-tree-id767 . -12) (undo-tree-id768 . -12) (undo-tree-id769 . -12) (undo-tree-id770 . -12) (undo-tree-id771 . -12) (undo-tree-id772 . -12) (undo-tree-id773 . -12) (undo-tree-id774 . -12) (undo-tree-id775 . -12) (undo-tree-id776 . -12) (undo-tree-id777 . -12) (undo-tree-id778 . -12) (undo-tree-id779 . -12) (undo-tree-id780 . -12) (undo-tree-id781 . -12) (undo-tree-id782 . -12) (undo-tree-id783 . -12) (undo-tree-id784 . -12) (undo-tree-id785 . -12) (undo-tree-id786 . -13) (undo-tree-id787 . -13) (undo-tree-id788 . -13) (undo-tree-id789 . -13) (undo-tree-id790 . -13) (undo-tree-id791 . -13) (undo-tree-id792 . -13) (undo-tree-id793 . -13) (undo-tree-id794 . -13) (undo-tree-id795 . -13) (undo-tree-id796 . -13) (undo-tree-id797 . -13) (undo-tree-id798 . -13) (undo-tree-id799 . -13) (undo-tree-id800 . -13) (undo-tree-id801 . -13) (undo-tree-id802 . -13) (undo-tree-id803 . -13) (undo-tree-id804 . -13) (undo-tree-id805 . -13) (undo-tree-id806 . -13) (undo-tree-id807 . -13) (undo-tree-id808 . -13) (undo-tree-id809 . -13) (undo-tree-id810 . -14) (undo-tree-id811 . -14) (undo-tree-id812 . -14) (undo-tree-id813 . -14) (undo-tree-id814 . -14) (undo-tree-id815 . -14) (undo-tree-id816 . -14) (undo-tree-id817 . -14) (undo-tree-id818 . -14) (undo-tree-id819 . -14) (undo-tree-id820 . -14) (undo-tree-id821 . -14) (undo-tree-id822 . -14) (undo-tree-id823 . -14) (undo-tree-id824 . -14) (undo-tree-id825 . -14) (undo-tree-id826 . -14) (undo-tree-id827 . -14) (undo-tree-id828 . -14) (undo-tree-id829 . -14) (undo-tree-id830 . -14) (undo-tree-id831 . -14) (undo-tree-id832 . -14) (undo-tree-id833 . -14) (undo-tree-id834 . -15) (undo-tree-id835 . -15) (undo-tree-id836 . -15) (undo-tree-id837 . -15) (undo-tree-id838 . -15) (undo-tree-id839 . -15) (undo-tree-id840 . -15) (undo-tree-id841 . -15) (undo-tree-id842 . -15) (undo-tree-id843 . -15) (undo-tree-id844 . -15) (undo-tree-id845 . -15) (undo-tree-id846 . -15) (undo-tree-id847 . -15) (undo-tree-id848 . -15) (undo-tree-id849 . -15) (undo-tree-id850 . -15) (undo-tree-id851 . -15) (undo-tree-id852 . -15) (undo-tree-id853 . -15) (undo-tree-id854 . -15) (undo-tree-id855 . -15) (undo-tree-id856 . -15) (undo-tree-id857 . -15) (undo-tree-id858 . -16) (undo-tree-id859 . -16) (undo-tree-id860 . -16) (undo-tree-id861 . -16) (undo-tree-id862 . -16) (undo-tree-id863 . -16) (undo-tree-id864 . -16) (undo-tree-id865 . -16) (undo-tree-id866 . -16) (undo-tree-id867 . -16) (undo-tree-id868 . -16) (undo-tree-id869 . -16) (undo-tree-id870 . -16) (undo-tree-id871 . -16) (undo-tree-id872 . -16) (undo-tree-id873 . -16) (undo-tree-id874 . -16) (undo-tree-id875 . -16) (undo-tree-id876 . -16) (undo-tree-id877 . -16) (undo-tree-id878 . -16) (undo-tree-id879 . -16) (undo-tree-id880 . -16) (undo-tree-id881 . -16) (undo-tree-id882 . -17) (undo-tree-id883 . -17) (undo-tree-id884 . -17) (undo-tree-id885 . -17) (undo-tree-id886 . -17) (undo-tree-id887 . -17) (undo-tree-id888 . -17) (undo-tree-id889 . -17) (undo-tree-id890 . -17) (undo-tree-id891 . -17) (undo-tree-id892 . -17) (undo-tree-id893 . -17) (undo-tree-id894 . -17) (undo-tree-id895 . -17) (undo-tree-id896 . -17) (undo-tree-id897 . -17) (undo-tree-id898 . -17) (undo-tree-id899 . -17) (undo-tree-id900 . -17) (undo-tree-id901 . -17) (undo-tree-id902 . -17) (undo-tree-id903 . -17) (undo-tree-id904 . -17) (undo-tree-id905 . -17) (undo-tree-id906 . -17) (undo-tree-id907 . -17) (undo-tree-id908 . -17) (undo-tree-id909 . -17) (undo-tree-id910 . -17) (undo-tree-id911 . -17) (undo-tree-id912 . -17) (undo-tree-id913 . -17) (undo-tree-id914 . -17) (undo-tree-id915 . -17) (undo-tree-id916 . -17) (undo-tree-id917 . -17) (undo-tree-id918 . -17) (undo-tree-id919 . -17) (undo-tree-id920 . -17) (undo-tree-id921 . -17) (undo-tree-id922 . -17) (undo-tree-id923 . -17) (undo-tree-id924 . -17) (undo-tree-id925 . -17) (undo-tree-id926 . -17) (undo-tree-id927 . -17) (undo-tree-id928 . -17) (undo-tree-id929 . -17) (undo-tree-id930 . -17) (undo-tree-id931 . -17) (undo-tree-id932 . -17) (undo-tree-id933 . -17) (undo-tree-id934 . -17) (undo-tree-id935 . -17) (undo-tree-id936 . -17) (undo-tree-id937 . -17) (undo-tree-id938 . -17) (undo-tree-id939 . -17) (undo-tree-id940 . -17) (undo-tree-id941 . -17) (undo-tree-id942 . -17) (undo-tree-id943 . -17) (undo-tree-id944 . -17) (undo-tree-id945 . -17) (undo-tree-id946 . -17) (undo-tree-id947 . -17) (undo-tree-id948 . -17) (undo-tree-id949 . -17) (undo-tree-id950 . -17) (undo-tree-id951 . -17) (undo-tree-id952 . -17) (undo-tree-id953 . -17) (undo-tree-id954 . -17) (undo-tree-id955 . -17) (undo-tree-id956 . -17) (undo-tree-id957 . -17) (undo-tree-id958 . -17) (undo-tree-id959 . -17) (undo-tree-id960 . -17) (undo-tree-id961 . -17) (undo-tree-id962 . -17) (undo-tree-id963 . -17) (undo-tree-id964 . -17) (undo-tree-id965 . -17) (undo-tree-id966 . -17) (undo-tree-id967 . -17) (undo-tree-id968 . -17) (undo-tree-id969 . -17) (undo-tree-id970 . -17) (undo-tree-id971 . -17) (undo-tree-id972 . -17) (undo-tree-id973 . -17) (undo-tree-id974 . -17) (undo-tree-id975 . -17) (undo-tree-id976 . -17) (undo-tree-id977 . -17) (undo-tree-id978 . -17) (undo-tree-id979 . -17) (undo-tree-id980 . -17) (undo-tree-id981 . -17) (undo-tree-id982 . -17) (undo-tree-id983 . -17) (undo-tree-id984 . -18) (undo-tree-id985 . -18) (undo-tree-id986 . -18) (undo-tree-id987 . -18) (undo-tree-id988 . -18) (undo-tree-id989 . -18) (undo-tree-id990 . -18) (undo-tree-id991 . -18) (undo-tree-id992 . -18) (undo-tree-id993 . -18) (undo-tree-id994 . -18) (undo-tree-id995 . -18) (undo-tree-id996 . -18) (undo-tree-id997 . -18) (undo-tree-id998 . -18) (undo-tree-id999 . -18) (undo-tree-id1000 . -18) (undo-tree-id1001 . -18) (undo-tree-id1002 . -18) (undo-tree-id1003 . -18) (undo-tree-id1004 . -18) (undo-tree-id1005 . -18) (undo-tree-id1006 . -18) (undo-tree-id1007 . -18) (undo-tree-id1008 . -18) (undo-tree-id1009 . -18) (undo-tree-id1010 . -19) (undo-tree-id1011 . -19) (undo-tree-id1012 . -19) (undo-tree-id1013 . -19) (undo-tree-id1014 . -19) (undo-tree-id1015 . -19) (undo-tree-id1016 . -19) (undo-tree-id1017 . -19) (undo-tree-id1018 . -19) (undo-tree-id1019 . -19) (undo-tree-id1020 . -19) (undo-tree-id1021 . -19) (undo-tree-id1022 . -19) (undo-tree-id1023 . -19) (undo-tree-id1024 . -19) (undo-tree-id1025 . -19) (undo-tree-id1026 . -19) (undo-tree-id1027 . -19) (undo-tree-id1028 . -19) (undo-tree-id1029 . -19) (undo-tree-id1030 . -19) (undo-tree-id1031 . -19) (undo-tree-id1032 . -19) (undo-tree-id1033 . -19) (undo-tree-id1034 . -19) (undo-tree-id1035 . -19) (undo-tree-id1036 . -19) (undo-tree-id1037 . -19) (undo-tree-id1038 . -19) (undo-tree-id1039 . -19) (undo-tree-id1040 . -19) (undo-tree-id1041 . -19) (undo-tree-id1042 . -19) (undo-tree-id1043 . -19) (undo-tree-id1044 . -19) (undo-tree-id1045 . -19) (undo-tree-id1046 . -19) (undo-tree-id1047 . -19) (undo-tree-id1048 . -19) (undo-tree-id1049 . -19) (undo-tree-id1050 . -19) (undo-tree-id1051 . -19) (undo-tree-id1052 . -19) (undo-tree-id1053 . -19) (undo-tree-id1054 . -19) (undo-tree-id1055 . -19) (undo-tree-id1056 . -19) (undo-tree-id1057 . -19) (undo-tree-id1058 . -19) (undo-tree-id1059 . -19) (undo-tree-id1060 . -19) (undo-tree-id1061 . -19) (undo-tree-id1062 . -19) (undo-tree-id1063 . -19) (undo-tree-id1064 . -19) (undo-tree-id1065 . -19) (undo-tree-id1066 . -19) (undo-tree-id1067 . -19) (undo-tree-id1068 . -19) (undo-tree-id1069 . -19) (undo-tree-id1070 . -19) (undo-tree-id1071 . -19) (undo-tree-id1072 . -19) (undo-tree-id1073 . -19) (undo-tree-id1074 . -19) (undo-tree-id1075 . -19) (undo-tree-id1076 . -19) (undo-tree-id1077 . -19) (undo-tree-id1078 . -19) (undo-tree-id1079 . -19) (undo-tree-id1080 . -19) (undo-tree-id1081 . -19) (undo-tree-id1082 . -19) (undo-tree-id1083 . -19) (undo-tree-id1084 . -19) (undo-tree-id1085 . -19) (undo-tree-id1086 . -19) (undo-tree-id1087 . -19) (undo-tree-id1088 . -19) (undo-tree-id1089 . -19) (undo-tree-id1090 . -19) (undo-tree-id1091 . -19) (undo-tree-id1092 . -19) (undo-tree-id1093 . -19) (undo-tree-id1094 . -19) (undo-tree-id1095 . -19) (undo-tree-id1096 . -19) (undo-tree-id1097 . -19) (undo-tree-id1098 . -19) (undo-tree-id1099 . -19) (undo-tree-id1100 . -19) (undo-tree-id1101 . -19) (undo-tree-id1102 . -19) (undo-tree-id1103 . -19) (undo-tree-id1104 . -19) (undo-tree-id1105 . -19) (undo-tree-id1106 . -19) (undo-tree-id1107 . -19) (undo-tree-id1108 . -19) (undo-tree-id1109 . -19) (undo-tree-id1110 . -19) (undo-tree-id1111 . -19) (undo-tree-id1112 . -18) (undo-tree-id1113 . -18) (undo-tree-id1114 . -18) (undo-tree-id1115 . -18) (undo-tree-id1116 . -18) (undo-tree-id1117 . -18) (undo-tree-id1118 . -18) (undo-tree-id1119 . -18) (undo-tree-id1120 . -18) (undo-tree-id1121 . -18) (undo-tree-id1122 . -18) (undo-tree-id1123 . -18) (undo-tree-id1124 . -18) (undo-tree-id1125 . -18) (undo-tree-id1126 . -18) (undo-tree-id1127 . -18) (undo-tree-id1128 . -18) (undo-tree-id1129 . -18) (undo-tree-id1130 . -18) (undo-tree-id1131 . -18) (undo-tree-id1132 . -18) (undo-tree-id1133 . -18) (undo-tree-id1134 . -18) (undo-tree-id1135 . -18) (undo-tree-id1136 . -18) (undo-tree-id1137 . -18) (undo-tree-id1138 . -17) (undo-tree-id1139 . -17) (undo-tree-id1140 . -17) (undo-tree-id1141 . -17) (undo-tree-id1142 . -17) (undo-tree-id1143 . -17) (undo-tree-id1144 . -17) (undo-tree-id1145 . -17) (undo-tree-id1146 . -17) (undo-tree-id1147 . -17) (undo-tree-id1148 . -17) (undo-tree-id1149 . -17) (undo-tree-id1150 . -17) (undo-tree-id1151 . -17) (undo-tree-id1152 . -17) (undo-tree-id1153 . -17) (undo-tree-id1154 . -17) (undo-tree-id1155 . -17) (undo-tree-id1156 . -17) (undo-tree-id1157 . -17) (undo-tree-id1158 . -17) (undo-tree-id1159 . -17) (undo-tree-id1160 . -17) (undo-tree-id1161 . -17) (undo-tree-id1162 . -16) (undo-tree-id1163 . -16) (undo-tree-id1164 . -16) (undo-tree-id1165 . -16) (undo-tree-id1166 . -16) (undo-tree-id1167 . -16) (undo-tree-id1168 . -16) (undo-tree-id1169 . -16) (undo-tree-id1170 . -16) (undo-tree-id1171 . -16) (undo-tree-id1172 . -16) (undo-tree-id1173 . -16) (undo-tree-id1174 . -16) (undo-tree-id1175 . -16) (undo-tree-id1176 . -16) (undo-tree-id1177 . -16) (undo-tree-id1178 . -16) (undo-tree-id1179 . -16) (undo-tree-id1180 . -16) (undo-tree-id1181 . -16) (undo-tree-id1182 . -16) (undo-tree-id1183 . -16) (undo-tree-id1184 . -16) (undo-tree-id1185 . -16) (undo-tree-id1186 . -15) (undo-tree-id1187 . -15) (undo-tree-id1188 . -15) (undo-tree-id1189 . -15) (undo-tree-id1190 . -15) (undo-tree-id1191 . -15) (undo-tree-id1192 . -15) (undo-tree-id1193 . -15) (undo-tree-id1194 . -15) (undo-tree-id1195 . -15) (undo-tree-id1196 . -15) (undo-tree-id1197 . -15) (undo-tree-id1198 . -15) (undo-tree-id1199 . -15) (undo-tree-id1200 . -15) (undo-tree-id1201 . -15) (undo-tree-id1202 . -15) (undo-tree-id1203 . -15) (undo-tree-id1204 . -15) (undo-tree-id1205 . -15) (undo-tree-id1206 . -15) (undo-tree-id1207 . -15) (undo-tree-id1208 . -15) (undo-tree-id1209 . -15) (undo-tree-id1210 . -15) (undo-tree-id1211 . -15) (undo-tree-id1212 . -14) (undo-tree-id1213 . -14) (undo-tree-id1214 . -14) (undo-tree-id1215 . -14) (undo-tree-id1216 . -14) (undo-tree-id1217 . -14) (undo-tree-id1218 . -14) (undo-tree-id1219 . -14) (undo-tree-id1220 . -14) (undo-tree-id1221 . -14) (undo-tree-id1222 . -14) (undo-tree-id1223 . -14) (undo-tree-id1224 . -14) (undo-tree-id1225 . -14) (undo-tree-id1226 . -14) (undo-tree-id1227 . -14) (undo-tree-id1228 . -14) (undo-tree-id1229 . -14) (undo-tree-id1230 . -14) (undo-tree-id1231 . -14) (undo-tree-id1232 . -14) (undo-tree-id1233 . -14) (undo-tree-id1234 . -14) (undo-tree-id1235 . -14) (undo-tree-id1236 . -9) (undo-tree-id1237 . -9) (undo-tree-id1238 . -9) (undo-tree-id1239 . -9) (undo-tree-id1240 . -9) (undo-tree-id1241 . -9) (undo-tree-id1242 . -9) (undo-tree-id1243 . -9) (undo-tree-id1244 . -9) (undo-tree-id1245 . -9) (undo-tree-id1246 . -9) (undo-tree-id1247 . -9) (undo-tree-id1248 . -9) (undo-tree-id1249 . -9) (undo-tree-id1250 . -9) (undo-tree-id1251 . -9) (undo-tree-id1252 . -9) (undo-tree-id1253 . -9) (undo-tree-id1254 . -9) (undo-tree-id1255 . -9) (undo-tree-id1256 . -9) (undo-tree-id1257 . -9) (undo-tree-id1258 . -9) (undo-tree-id1259 . -9) (undo-tree-id1260 . -8) (undo-tree-id1261 . -8) (undo-tree-id1262 . -8) (undo-tree-id1263 . -8) (undo-tree-id1264 . -8) (undo-tree-id1265 . -8) (undo-tree-id1266 . -8) (undo-tree-id1267 . -8) (undo-tree-id1268 . -8) (undo-tree-id1269 . -8) (undo-tree-id1270 . -8) (undo-tree-id1271 . -8) (undo-tree-id1272 . -8) (undo-tree-id1273 . -8) (undo-tree-id1274 . -8) (undo-tree-id1275 . -8) (undo-tree-id1276 . -8) (undo-tree-id1277 . -8) (undo-tree-id1278 . -8) (undo-tree-id1279 . -8) (undo-tree-id1280 . -8) (undo-tree-id1281 . -8) (undo-tree-id1282 . -8) (undo-tree-id1283 . -8) (undo-tree-id1284 . -7) (undo-tree-id1285 . -7) (undo-tree-id1286 . -7) (undo-tree-id1287 . -7) (undo-tree-id1288 . -7) (undo-tree-id1289 . -7) (undo-tree-id1290 . -7) (undo-tree-id1291 . -7) (undo-tree-id1292 . -7) (undo-tree-id1293 . -7) (undo-tree-id1294 . -7) (undo-tree-id1295 . -7) (undo-tree-id1296 . -7) (undo-tree-id1297 . -7) (undo-tree-id1298 . -7) (undo-tree-id1299 . -7) (undo-tree-id1300 . -7) (undo-tree-id1301 . -7) (undo-tree-id1302 . -7) (undo-tree-id1303 . -7) (undo-tree-id1304 . -7) (undo-tree-id1305 . -7) (undo-tree-id1306 . -7) (undo-tree-id1307 . -7) (undo-tree-id1308 . -6) (undo-tree-id1309 . -6) (undo-tree-id1310 . -6) (undo-tree-id1311 . -6) (undo-tree-id1312 . -6) (undo-tree-id1313 . -6) (undo-tree-id1314 . -6) (undo-tree-id1315 . -6) (undo-tree-id1316 . -6) (undo-tree-id1317 . -6) (undo-tree-id1318 . -6) (undo-tree-id1319 . -6) (undo-tree-id1320 . -6) (undo-tree-id1321 . -6) (undo-tree-id1322 . -6) (undo-tree-id1323 . -6) (undo-tree-id1324 . -6) (undo-tree-id1325 . -6) (undo-tree-id1326 . -6) (undo-tree-id1327 . -6) (undo-tree-id1328 . -6) (undo-tree-id1329 . -6) (undo-tree-id1330 . -6) (undo-tree-id1331 . -6) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) (undo-tree-id1335 . -5) (undo-tree-id1336 . -5) (undo-tree-id1337 . -5) (undo-tree-id1338 . -5) (undo-tree-id1339 . -5) (undo-tree-id1340 . -5) (undo-tree-id1341 . -5) (undo-tree-id1342 . -5) (undo-tree-id1343 . -5) (undo-tree-id1344 . -5) (undo-tree-id1345 . -5) (undo-tree-id1346 . -5) (undo-tree-id1347 . -5) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) (undo-tree-id1351 . -5) (undo-tree-id1352 . -5) (undo-tree-id1353 . -5) (undo-tree-id1354 . -5) (undo-tree-id1355 . -5) (undo-tree-id1356 . -4) (undo-tree-id1357 . -4) (undo-tree-id1358 . -4) (undo-tree-id1359 . -4) (undo-tree-id1360 . -4) (undo-tree-id1361 . -4) (undo-tree-id1362 . -4) (undo-tree-id1363 . -4) (undo-tree-id1364 . -4) (undo-tree-id1365 . -4) (undo-tree-id1366 . -4) (undo-tree-id1367 . -4) (undo-tree-id1368 . -4) (undo-tree-id1369 . -4) (undo-tree-id1370 . -4) (undo-tree-id1371 . -4) (undo-tree-id1372 . -4) (undo-tree-id1373 . -4) (undo-tree-id1374 . -4) (undo-tree-id1375 . -4) (undo-tree-id1376 . -4) (undo-tree-id1377 . -4) (undo-tree-id1378 . -4) (undo-tree-id1379 . -4) (undo-tree-id1380 . -3) (undo-tree-id1381 . -3) (undo-tree-id1382 . -3) (undo-tree-id1383 . -3) (undo-tree-id1384 . -3) (undo-tree-id1385 . -3) (undo-tree-id1386 . -3) (undo-tree-id1387 . -3) (undo-tree-id1388 . -3) (undo-tree-id1389 . -3) (undo-tree-id1390 . -3) (undo-tree-id1391 . -3) (undo-tree-id1392 . -3) (undo-tree-id1393 . -3) (undo-tree-id1394 . -3) (undo-tree-id1395 . -3) (undo-tree-id1396 . -3) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -2) (undo-tree-id1405 . -2) (undo-tree-id1406 . -2) (undo-tree-id1407 . -2) (undo-tree-id1408 . -2) (undo-tree-id1409 . -2) (undo-tree-id1410 . -2) (undo-tree-id1411 . -2) (undo-tree-id1412 . -2) (undo-tree-id1413 . -2) (undo-tree-id1414 . -2) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1419 . -2) (undo-tree-id1420 . -2) (undo-tree-id1421 . -2) (undo-tree-id1422 . -2) (undo-tree-id1423 . -2) (undo-tree-id1424 . -2) (undo-tree-id1425 . -2) (undo-tree-id1426 . -2) (undo-tree-id1427 . -2) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -23)) nil (26071 4771 990476 745000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((233 . 236) (#("  " 0 2 (fontified t)) . 233) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) 235) ((233 . 235) (#("
  " 0 3 (fontified t)) . 233) (undo-tree-id447 . -3) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -3)) (26071 4642 642018 908000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((248 . 249)) nil (26071 4771 989350 242000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
nil
([nil nil ((248 . 251)) nil (26071 4771 989349 835000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((248 . 249)) nil (26071 4771 989349 538000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((248 . 251)) nil (26071 4771 989349 174000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 248 258 #s(yas--snippet nil nil #s(yas--exit 257 nil) 37 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 257 nil) 37 nil nil nil nil)) (248 . 258) (#("template<$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 248) (nil face (rainbow-delimiters-depth-2-face) 248 . 260) (nil fontified nil 248 . 260) (248 . 260) (#("te" 0 2 (fontified nil)) . 248) (nil face (rainbow-delimiters-depth-2-face) 248 . 250) (nil fontified nil 248 . 250) (248 . 250) (#("template<parameters>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -248) (nil face (rainbow-delimiters-depth-2-face) 248 . 268) (nil fontified nil 248 . 268) (248 . 268) (#("tem" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -248) (undo-tree-id733 . -3) (undo-tree-id734 . -3) 251) nil (26071 4771 989347 981000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((257 . 259)) nil (26071 4771 989345 268000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 257 266 #s(yas--snippet nil nil #s(yas--exit 266 nil) 38 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 266 nil) 38 nil nil nil nil)) (257 . 266) (#("typename $0" 0 11 (fontified nil)) . 257) (nil fontified nil 257 . 268) (nil face (rainbow-delimiters-depth-3-face) 257 . 268) (257 . 268) (#("ty" 0 2 (fontified nil)) . 257) (nil fontified nil 257 . 259) (nil face (rainbow-delimiters-depth-3-face) 257 . 259) (257 . 259) (#("typename name" 0 13 (fontified nil)) . -257) (nil fontified nil 257 . 270) (nil face (rainbow-delimiters-depth-3-face) 257 . 270) (257 . 270) (#("ty" 0 1 (fontified t) 1 2 (fontified t)) . -257) (undo-tree-id731 . -2) (undo-tree-id732 . -2) 259) nil (26071 4771 989343 985000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((266 . 267)) nil (26071 4771 989341 404000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((267 . 268)) nil (26071 4771 989340 704000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((268 . 270)) nil (26071 4771 989340 272000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 268 277 #s(yas--snippet nil nil #s(yas--exit 277 nil) 39 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 277 nil) 39 nil nil nil nil)) (268 . 277) (#("typename $0" 0 11 (fontified nil)) . 268) (nil fontified nil 268 . 279) (268 . 279) (#("ty" 0 2 (fontified nil)) . 268) (nil fontified nil 268 . 270) (268 . 270) (#("typename name" 0 13 (fontified nil)) . -268) (nil fontified nil 268 . 281) (268 . 281) (#("ty" 0 1 (fontified t) 1 2 (fontified t)) . -268) (undo-tree-id730 . -2) 270) nil (26071 4771 989339 263000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((277 . 279)) nil (26071 4771 989337 414000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -324) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -325) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (#("k" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -326) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (#("e" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -327) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (#("n" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -328) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (#("_" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -329) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (#("c" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -330) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (#("l" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -331) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -332) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -333) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -334) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (#(":" 0 1 (fontified t c-type c-decl-end)) . -335) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (#(":" 0 1 (fontified t)) . -336) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -337) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -338) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("k" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -339) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (#("e" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -340) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("n" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -341) (undo-tree-id728 . -1) (undo-tree-id729 . -1) 342) nil (26071 4771 989334 43000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((324 . 329)) nil (26071 4771 989312 641000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -328) (undo-tree-id692 . -1) (undo-tree-id693 . -1) 329) nil (26071 4771 989311 559000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((328 . 330)) nil (26071 4771 989305 227000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((329 . 330)) nil (26071 4771 989304 554000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((330 . 331)) nil (26071 4771 989303 970000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((331 . 333)) nil (26071 4927 879329 295000) 0 (:visualizer [2 1 1 #<marker in no buffer>])])
([nil nil ((#("
" 0 1 (fontified nil)) . -503) (369 . 504) 321 (t 26071 4771 999791 475000)) nil (26071 5031 556697 937000) 0 (:visualizer [1 0 1 #<marker in no buffer>])] [nil nil ((nil rear-nonsticky nil 340 . 341) (nil fontified nil 322 . 341) (322 . 341) 321 (t 26071 4771 999791 475000)) ((#(",token_class::token" 0 1 (fontified nil c-type c-decl-type-start) 1 12 (fontified nil face font-lock-constant-face) 12 14 (fontified nil) 14 18 (fontified nil face font-lock-type-face) 18 19 (fontified nil rear-nonsticky nil face font-lock-type-face)) . 322) (undo-tree-id1925 . -18) (undo-tree-id1926 . -18) (undo-tree-id1927 . -18) (undo-tree-id1928 . -1) (undo-tree-id1929 . -18) (nil rear-nonsticky t 340 . 341)) (26071 4927 876271 424000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((#("t" 0 1 (fontified t face font-lock-constant-face)) . 117) (t 26071 4771 999791 475000)) ((117 . 118)) (26071 4849 985678 381000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("  " 0 2 (fontified t)) . -370) (undo-tree-id2207 . -2) (undo-tree-id2208 . -2) 372 (370 . 372) (370 . 371) 372) nil (26071 5031 556696 885000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
nil
([nil nil ((#("oken_class::token " 0 10 (fontified t face font-lock-constant-face) 10 11 (fontified t) 11 12 (fontified t) 12 17 (fontified t face font-lock-type-face) 17 18 (fontified t)) . 117) (undo-tree-id1466 . -17)) ((117 . 135)) (26071 4849 433733 852000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(",token_class::token Tok1>" 0 1 (fontified t c-type c-<>-arg-sep) 1 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 20 (fontified t) 20 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t face font-lock-variable-name-face) 22 23 (fontified t face font-lock-variable-name-face) 23 24 (fontified t face font-lock-variable-name-face) 24 25 (fontified t face (rainbow-delimiters-depth-2-face))) . 419) (undo-tree-id2022 . -24) (undo-tree-id2023 . -1) (undo-tree-id2024 . -12) (undo-tree-id2025 . -8) (undo-tree-id2026 . -8) (undo-tree-id2027 . -8) (undo-tree-id2028 . -8) (undo-tree-id2029 . -8) (undo-tree-id2030 . -8) (undo-tree-id2031 . -8) (undo-tree-id2032 . -8) (undo-tree-id2033 . -8) (undo-tree-id2034 . -8) (undo-tree-id2035 . -8) (undo-tree-id2036 . -8) (undo-tree-id2037 . -8) (undo-tree-id2038 . -7) (undo-tree-id2039 . -7) (undo-tree-id2040 . -7) (undo-tree-id2041 . -7) (undo-tree-id2042 . -7) (undo-tree-id2043 . -7) (undo-tree-id2044 . -7) (undo-tree-id2045 . -7) (undo-tree-id2046 . -7) (undo-tree-id2047 . -7) (undo-tree-id2048 . -7) (undo-tree-id2049 . -7) (undo-tree-id2050 . -7) (undo-tree-id2051 . -7) (undo-tree-id2052 . -7) (undo-tree-id2053 . -7) (undo-tree-id2054 . -7) (undo-tree-id2055 . -7) (undo-tree-id2056 . -7) (undo-tree-id2057 . -7) (undo-tree-id2058 . -7) (undo-tree-id2059 . -7) (undo-tree-id2060 . -7) (undo-tree-id2061 . -7) (undo-tree-id2062 . -6) (undo-tree-id2063 . -6) (undo-tree-id2064 . -6) (undo-tree-id2065 . -6) (undo-tree-id2066 . -6) (undo-tree-id2067 . -6) (undo-tree-id2068 . -6) (undo-tree-id2069 . -6) (undo-tree-id2070 . -6) (undo-tree-id2071 . -6) (undo-tree-id2072 . -6) (undo-tree-id2073 . -6) (undo-tree-id2074 . -6) (undo-tree-id2075 . -6) (undo-tree-id2076 . -6) (undo-tree-id2077 . -6) (undo-tree-id2078 . -6) (undo-tree-id2079 . -6) (undo-tree-id2080 . -6) (undo-tree-id2081 . -6) (undo-tree-id2082 . -6) (undo-tree-id2083 . -6) (undo-tree-id2084 . -6) (undo-tree-id2085 . -6) (undo-tree-id2086 . -5) (undo-tree-id2087 . -5) (undo-tree-id2088 . -5) (undo-tree-id2089 . -5) (undo-tree-id2090 . -5) (undo-tree-id2091 . -5) (undo-tree-id2092 . -5) (undo-tree-id2093 . -5) (undo-tree-id2094 . -5) (undo-tree-id2095 . -5) (undo-tree-id2096 . -5) (undo-tree-id2097 . -5) (undo-tree-id2098 . -5) (undo-tree-id2099 . -5) (undo-tree-id2100 . -5) (undo-tree-id2101 . -5) (undo-tree-id2102 . -5) (undo-tree-id2103 . -5) (undo-tree-id2104 . -5) (undo-tree-id2105 . -5) (undo-tree-id2106 . -5) (undo-tree-id2107 . -5) (undo-tree-id2108 . -5) (undo-tree-id2109 . -5) (undo-tree-id2110 . -4) (undo-tree-id2111 . -4) (undo-tree-id2112 . -4) (undo-tree-id2113 . -4) (undo-tree-id2114 . -4) (undo-tree-id2115 . -4) (undo-tree-id2116 . -4) (undo-tree-id2117 . -4) (undo-tree-id2118 . -4) (undo-tree-id2119 . -4) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -3) (undo-tree-id2135 . -3) (undo-tree-id2136 . -3) (undo-tree-id2137 . -3) (undo-tree-id2138 . -3) (undo-tree-id2139 . -3) (undo-tree-id2140 . -3) (undo-tree-id2141 . -3) (undo-tree-id2142 . -3) (undo-tree-id2143 . -3) (undo-tree-id2144 . -3) (undo-tree-id2145 . -3) (undo-tree-id2146 . -3) (undo-tree-id2147 . -3) (undo-tree-id2148 . -3) (undo-tree-id2149 . -3) (undo-tree-id2150 . -3) (undo-tree-id2151 . -3) (undo-tree-id2152 . -3) (undo-tree-id2153 . -3) (undo-tree-id2154 . -3) (undo-tree-id2155 . -3) (undo-tree-id2156 . -3) (undo-tree-id2157 . -3) (undo-tree-id2158 . -2) (undo-tree-id2159 . -2) (undo-tree-id2160 . -2) (undo-tree-id2161 . -2) (undo-tree-id2162 . -2) (undo-tree-id2163 . -2) (undo-tree-id2164 . -2) (undo-tree-id2165 . -2) (undo-tree-id2166 . -2) (undo-tree-id2167 . -2) (undo-tree-id2168 . -2) (undo-tree-id2169 . -2) (undo-tree-id2170 . -2) (undo-tree-id2171 . -2) (undo-tree-id2172 . -2) (undo-tree-id2173 . -2) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . -2) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -25)) nil (26071 5031 556690 734000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((117 . 118) (117 . 118)) ((#(" " 0 1 (fontified nil)) . 117) (#("T" 0 1 (fontified t face font-lock-type-face)) . 117) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1)) (26071 4848 943484 347000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("q" 0 1 (fontified t face font-lock-type-face)) . -383) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -384) (undo-tree-id2021 . -1) 385 (383 . 385) (419 . 420)) nil (26071 5031 555929 187000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#(",token_class::token" 0 1 (fontified t c-type c-<>-arg-sep) 1 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 14 (fontified t) 14 19 (fontified t face font-lock-type-face)) . 122) (undo-tree-id1463 . -19) (undo-tree-id1464 . -18) (undo-tree-id1465 . -11) 141) ((122 . 141)) (26071 4848 597408 522000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 407 . 408) (nil fontified nil 383 . 408) (nil fontified t 383 . 408) (nil face (rainbow-delimiters-depth-2-face) 383 . 408) (383 . 408) 382) nil (26071 5031 555910 703000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((122 . 123)) ((#("," 0 1 (fontified t c-type c-<>-arg-sep)) . 122) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1)) (26071 4848 170175 776000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((495 . 496) (#("int Tok1" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil) 4 8 (fontified nil face font-lock-variable-name-face)) . 495) (undo-tree-id1930 . -8) (494 . 495) (#("int Tok" 0 3 (fontified nil face font-lock-type-face) 3 7 (fontified nil)) . 492) (undo-tree-id1931 . -7) (491 . 492) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 491 492 nil nil nil t #s(yas--field 2 494 496 nil nil nil t nil)) #s(yas--field 2 494 496 nil nil nil t nil)) nil 42 nil #s(yas--field 2 494 496 nil nil nil t nil) nil nil)) (486 . 509) (#("cons<${1:int Tok}, ${2:int Tok1}>" 0 33 (fontified nil)) . 486) (486 . 519) (#("co" 0 2 (fontified nil)) . 486) (486 . 488) (#("cons<int Tok, int Tok1>" 0 23 (fontified nil)) . -486) (486 . 509) (#("con" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -486) (undo-tree-id1932 . -3) (undo-tree-id1933 . -3) 489 (486 . 489) (#("t" 0 1 (fontified t)) . -486) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (#("o" 0 1 (fontified t)) . -487) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (#("k" 0 1 (fontified t)) . -488) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (#("e" 0 1 (fontified t)) . -489) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (#("n" 0 1 (fontified t)) . -490) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (#("_" 0 1 (fontified t)) . -491) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (#("c" 0 1 (fontified t)) . -492) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (#("l" 0 1 (fontified t)) . -493) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (#("a" 0 1 (fontified t)) . -494) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (#("s" 0 1 (fontified t)) . -495) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (#("s" 0 1 (fontified t)) . -496) (undo-tree-id1954 . -1) (#(":" 0 1 (fontified t c-type c-decl-end)) . -497) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (#(":" 0 1 (fontified t)) . -498) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (#("t" 0 1 (fontified t)) . -499) (undo-tree-id1959 . -1) (#("o" 0 1 (fontified t)) . -500) (undo-tree-id1960 . -1) (#("k" 0 1 (fontified t)) . -501) (undo-tree-id1961 . -1) (#("e" 0 1 (fontified t)) . -502) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (#("n" 0 1 (fontified t)) . -503) (undo-tree-id1964 . -1) 504 (472 . 477) (#("token" 0 5 (fontified nil)) . -472) (472 . 477) (470 . 472) (459 . 470) (#("to" 0 2 (fontified nil)) . 459) (459 . 461) (#("token_class" 0 11 (fontified nil)) . -459) (459 . 470) (#("tok" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -459) (undo-tree-id1965 . -3) 462 (459 . 462) (#("c" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -459) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -460) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (#("n" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -461) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -462) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) 463 (#("<" 0 1 (fontified t)) . -463) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (#("N" 0 1 (fontified t)) . -464) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (#("," 0 1 (fontified t c-type c-decl-arg-start)) . -465) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (#("N" 0 1 (fontified t face font-lock-type-face)) . -466) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (#("1" 0 1 (fontified t face font-lock-type-face)) . -467) (undo-tree-id1982 . -1) (#(">" 0 1 (fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face))) . -468) (undo-tree-id1983 . -1) (undo-tree-id1984 . 1) (undo-tree-id1985 . -1) 469 (442 . 443) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . -405) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) 406 (#("," 0 1 (fontified t c-type c-<>-arg-sep)) . -383) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) 384 (#(">" 0 1 (fontified t rear-nonsticky t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face))) . -407) (undo-tree-id1990 . -1) (undo-tree-id1991 . 1) (undo-tree-id1992 . -1) 408 (408 . 409)) nil (26071 5031 555901 128000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 123) (undo-tree-id1461 . -1) (undo-tree-id1462 . 1) 124) ((123 . 124)) (26071 4847 802167 438000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 486 497 #s(yas--snippet nil (#s(yas--field 1 491 492 nil nil nil t #s(yas--field 2 494 496 nil nil nil t nil)) #s(yas--field 2 494 496 nil nil nil t nil)) nil 42 nil #s(yas--field 2 494 496 nil nil nil t nil) nil nil))) nil (26071 5243 63301 649000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#("T" 0 1 (fontified t face font-lock-type-face)) . -117) (undo-tree-id1460 . -1) 118) ((117 . 118)) (26071 4847 393065 318000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(">" 0 1 (fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face))) . -574) (undo-tree-id2209 . -1) (undo-tree-id2210 . 1) (undo-tree-id2211 . -1) 575 (#("<" 0 1 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-3-face))) . -574) (undo-tree-id2212 . -1) 575 (574 . 576) (582 . 583) (578 . 583) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -578) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -579) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (#("r" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -580) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (#("u" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -581) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (#("c" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -582) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face c-type c-decl-type-start)) . -583) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) 584 (#(" " 0 1 (fontified t)) . 584) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) 585 (#("c" 0 1 (fontified t face font-lock-type-face)) . -585) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -586) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -587) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) 588 (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -588) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 589) (588 . 590) (584 . 588) (578 . 584) (#("st" 0 2 (fontified nil)) . 578) (578 . 580) (#("struct" 0 6 (fontified nil)) . -578) (578 . 584) (#("str" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -578) (undo-tree-id2235 . -3) 581 (578 . 581) (575 . 578) (445 . 450) (#("c" 0 1 (fontified nil)) . 445) (445 . 446) (#("class" 0 5 (fontified nil)) . -445) (445 . 450) (#("c" 0 1 (fontified t face font-lock-type-face)) . -445) (undo-tree-id2236 . -1) 446 (444 . 446) (281 . 286) (#("cl" 0 2 (fontified nil)) . 281) (281 . 283) (#("class" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face)) . -281) (undo-tree-id2237 . -5) (undo-tree-id2238 . -5) 286 (280 . 286) (557 . 562) (552 . 557) (#("cl" 0 2 (fontified nil)) . 552) (552 . 554) (#("class" 0 5 (fontified nil)) . -552) (552 . 557) (#("cla" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -552) (undo-tree-id2239 . -3) 555 (553 . 555) (#("o" 0 1 (fontified t face font-lock-type-face)) . -553) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -554) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -555) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (#("," 0 1 (fontified t c-type c-<>-arg-sep)) . -556) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) 557 (#(" " 0 1 (fontified t)) . 557) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) 558 (#("i" 0 1 (fontified t)) . -558) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (#("n" 0 1 (fontified t)) . -559) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -560) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) 561 (#(" " 0 1 (fontified t)) . 561) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) 562 (#("T" 0 1 (fontified t face font-lock-variable-name-face)) . -562) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -563) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -564) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . -565) (undo-tree-id2264 . -1) (#(">" 0 1 (fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face))) . -566) (undo-tree-id2265 . -1) (undo-tree-id2266 . 1) (undo-tree-id2267 . -1) 567 (apply yas--snippet-revive 552 567 #s(yas--snippet nil (#s(yas--field 1 556 556 nil nil nil t #s(yas--field 2 558 566 nil nil nil nil nil)) #s(yas--field 2 558 566 nil nil nil nil nil)) nil 47 nil #s(yas--field 1 556 556 nil nil nil t #s(yas--field 2 558 566 nil nil nil nil nil)) nil nil)) (#("<" 0 1 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-3-face))) . -556) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . 1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) 557 (#(" " 0 1 (fontified t)) . 557) (undo-tree-id2273 . -1) 558 (#("int Tok" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil) 4 7 (fontified nil face font-lock-variable-name-face)) . 558) (557 . 558) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 556 556 nil nil nil t #s(yas--field 2 558 566 nil nil nil nil nil)) #s(yas--field 2 558 566 nil nil nil nil nil)) nil 47 nil #s(yas--field 1 556 556 nil nil nil t #s(yas--field 2 558 566 nil nil nil nil nil)) nil nil)) (552 . 575) (#("cons<${1:int Tok}, ${2:int Tok1}>" 0 33 (fontified nil)) . 552) (552 . 585) (#("c" 0 1 (fontified nil)) . 552) (552 . 553) (#("cons<int Tok, int Tok1>" 0 4 (fontified nil) 4 5 (syntax-table (4 . 62) fontified nil) 5 12 (fontified nil) 12 13 (c-type c-<>-arg-sep fontified nil) 13 22 (fontified nil) 22 23 (syntax-table (5 . 60) fontified nil)) . -552) (552 . 575) (#("c" 0 1 (fontified t face font-lock-type-face)) . -552) (undo-tree-id2274 . -1) 553 (552 . 553) (551 . 552) (548 . 550) (apply yas--snippet-revive 539 548 #s(yas--snippet nil nil #s(yas--exit 548 nil) 46 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 548 nil) 46 nil nil nil nil)) (539 . 548) (#("typename $0" 0 11 (fontified nil)) . 539) (nil fontified nil 539 . 550) (539 . 550) (#("ty" 0 2 (fontified nil)) . 539) (nil fontified nil 539 . 541) (539 . 541) (#("typename name" 0 13 (fontified nil)) . -539) (nil fontified nil 539 . 552) (539 . 552) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -539) (undo-tree-id2275 . -2) 541 (539 . 541) (538 . 539) (537 . 538) (apply yas--snippet-revive 528 537 #s(yas--snippet nil nil #s(yas--exit 537 nil) 45 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 537 nil) 45 nil nil nil nil)) (528 . 537) (#("typename $0" 0 11 (fontified nil)) . 528) (nil fontified nil 528 . 539) (nil face (rainbow-delimiters-depth-3-face) 528 . 539) (528 . 539) (#("ty" 0 2 (fontified nil)) . 528) (nil fontified nil 528 . 530) (nil face (rainbow-delimiters-depth-3-face) 528 . 530) (528 . 530) (#("typename name" 0 13 (fontified nil)) . -528) (nil fontified nil 528 . 541) (nil face (rainbow-delimiters-depth-3-face) 528 . 541) (528 . 541) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -528) (undo-tree-id2276 . -2) 530 (528 . 530) (apply yas--snippet-revive 519 529 #s(yas--snippet nil nil #s(yas--exit 528 nil) 44 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 528 nil) 44 nil nil nil nil)) (519 . 529) (#("template<$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 519) (nil fontified nil 519 . 531) (nil face (rainbow-delimiters-depth-2-face) 519 . 531) (519 . 531) (#("te" 0 2 (fontified nil)) . 519) (nil fontified nil 519 . 521) (nil face (rainbow-delimiters-depth-2-face) 519 . 521) (519 . 521) (#("template<parameters>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -519) (nil fontified nil 519 . 539) (nil face (rainbow-delimiters-depth-2-face) 519 . 539) (519 . 539) (#("te" 0 1 (fontified t) 1 2 (fontified t)) . -519) (undo-tree-id2277 . -2) 521 (519 . 521) (517 . 518) (apply yas--snippet-revive 509 519 #s(yas--snippet nil nil #s(yas--exit 518 nil) 43 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 518 nil) 43 nil nil nil nil)) (509 . 519) (#("template<$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 509) (509 . 521) (#("te" 0 2 (fontified nil)) . 509) (509 . 511) (#("template<parameters>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -509) (509 . 529) (#("te" 0 1 (fontified t) 1 2 (fontified t)) . -509) (undo-tree-id2278 . -2) (undo-tree-id2279 . -2) 511 (509 . 511) (506 . 509) (#("  " 0 2 (fontified t)) . 506) (undo-tree-id2280 . -2) (undo-tree-id2281 . -2) 508 (505 . 508) (t 26071 5031 579785 163000) 497) nil (26071 5824 977082 812000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((117 . 119)) ((#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . 117) (undo-tree-id1764 . -2) (undo-tree-id1765 . -2) (undo-tree-id1766 . -2) (undo-tree-id1767 . -2) (undo-tree-id1768 . -2) (undo-tree-id1769 . -2) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -2) (undo-tree-id1773 . -2) (undo-tree-id1774 . -2) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) (undo-tree-id1777 . -2) (undo-tree-id1778 . -2) (undo-tree-id1779 . -2) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -2) (undo-tree-id1788 . -2) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) (undo-tree-id1791 . -2) (undo-tree-id1792 . -2) (undo-tree-id1793 . -2) (undo-tree-id1794 . -2) (undo-tree-id1795 . -2) (undo-tree-id1796 . -2) (undo-tree-id1797 . -2) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -2) (undo-tree-id1818 . -2) (undo-tree-id1819 . -2) (undo-tree-id1820 . -2) (undo-tree-id1821 . -2) (undo-tree-id1822 . -2) (undo-tree-id1823 . -2) (undo-tree-id1824 . -2) (undo-tree-id1825 . -2) (undo-tree-id1826 . -2) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) (undo-tree-id1834 . -2) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) (undo-tree-id1837 . -2) (undo-tree-id1838 . -2) (undo-tree-id1839 . -2) (undo-tree-id1840 . -2) (undo-tree-id1841 . -2) (undo-tree-id1842 . -2) (undo-tree-id1843 . -2) (undo-tree-id1844 . -2)) (26071 4847 23646 542000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply -6 519 594 undo--wrap-and-run-primitive-undo 519 594 ((581 . 584) (521 . 524)))) ((apply 6 519 588 undo--wrap-and-run-primitive-undo 519 588 ((#("// " 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 521) (#("// " 0 1 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 581) 115))) (26071 5829 378193 130000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 117 126 #s(yas--snippet nil nil #s(yas--exit #<marker at 141 in meta_map.hpp> nil) 40 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 141 in meta_map.hpp> nil) 40 nil nil nil nil)) (117 . 126) (#("typename $0" 0 11 (fontified nil)) . 117) (nil face (rainbow-delimiters-depth-2-face) 117 . 128) (nil fontified nil 117 . 128) (117 . 128) (#("ty" 0 2 (fontified nil)) . 117) (nil face (rainbow-delimiters-depth-2-face) 117 . 119) (nil fontified nil 117 . 119) (117 . 119) (#("typename name" 0 13 (fontified nil)) . -117) (nil face (rainbow-delimiters-depth-2-face) 117 . 130) (nil fontified nil 117 . 130) (117 . 130) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -117) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) 119) ((117 . 119) (#("typename name" 0 13 (fontified nil face (rainbow-delimiters-depth-2-face))) . 117) (nil face nil 117 . 130) (117 . 130) (#("ty" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 117) (nil face nil 117 . 119) (117 . 119) (#("typename $0" 0 11 (fontified nil face (rainbow-delimiters-depth-2-face))) . 117) (nil face nil 117 . 128) (117 . 128) (#("typename " 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . 117) (undo-tree-id1711 . -9) (undo-tree-id1712 . -9) (undo-tree-id1713 . -9) (undo-tree-id1714 . -9) (undo-tree-id1715 . -9) (undo-tree-id1716 . -9) (undo-tree-id1717 . -9) (undo-tree-id1718 . -9) (undo-tree-id1719 . -9) (undo-tree-id1720 . -9) (undo-tree-id1721 . -9) (undo-tree-id1722 . -9) (undo-tree-id1723 . -9) (undo-tree-id1724 . -9) (undo-tree-id1725 . -9) (undo-tree-id1726 . -9) (undo-tree-id1727 . -9) (undo-tree-id1728 . -9) (undo-tree-id1729 . -9) (undo-tree-id1730 . -9) (undo-tree-id1731 . -9) (undo-tree-id1732 . -9) (undo-tree-id1733 . -9) (undo-tree-id1734 . -9) (undo-tree-id1735 . -9) (undo-tree-id1736 . -9) (undo-tree-id1737 . -9) (undo-tree-id1738 . -9) (undo-tree-id1739 . -9) (undo-tree-id1740 . -9) (undo-tree-id1741 . -9) (undo-tree-id1742 . -9) (undo-tree-id1743 . -9) (undo-tree-id1744 . -9) (undo-tree-id1745 . -9) (undo-tree-id1746 . -9) (undo-tree-id1747 . -9) (undo-tree-id1748 . -9) (undo-tree-id1749 . -9) (undo-tree-id1750 . -9) (undo-tree-id1751 . -9) (undo-tree-id1752 . -9) (undo-tree-id1753 . -9) (undo-tree-id1754 . -9) (undo-tree-id1755 . -9) (undo-tree-id1756 . -9) (undo-tree-id1757 . -9) (undo-tree-id1758 . -9) (undo-tree-id1759 . -9) (undo-tree-id1760 . -9) (undo-tree-id1761 . -9) (undo-tree-id1762 . -9) (undo-tree-id1763 . -9)) (26071 4846 467265 845000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply -12 236 531 undo--wrap-and-run-primitive-undo 236 531 ((468 . 471) (385 . 388) (321 . 324) (238 . 241) 518))) nil (26071 5845 240476 422000) 0 nil] [nil nil ((273 . 274) (#("}" 0 1 (fontified nil)) . -273) (273 . 274) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -145) (undo-tree-id2489 . -1) (undo-tree-id2490 . 1) (undo-tree-id2491 . -1) 146 (144 . 146) (#("<" 0 1 (fontified t)) . -144) (undo-tree-id2492 . -1) 145 (144 . 145) (140 . 144) (135 . 140) (129 . 135) (#("st" 0 2 (fontified nil)) . 129) (129 . 131) (#("struct" 0 6 (fontified nil)) . -129) (129 . 135) (#("str" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -129) (undo-tree-id2493 . -3) 132 (128 . 132) (126 . 127) (apply yas--snippet-revive 117 126 #s(yas--snippet nil nil #s(yas--exit #<marker at 129 in meta_map.hpp> nil) 52 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 129 in meta_map.hpp> nil) 52 nil nil nil nil)) (117 . 126) (#("typename $0" 0 11 (fontified nil)) . 117) (nil fontified nil 117 . 128) (nil face (rainbow-delimiters-depth-2-face) 117 . 128) (117 . 128) (#("ty" 0 2 (fontified nil)) . 117) (nil fontified nil 117 . 119) (nil face (rainbow-delimiters-depth-2-face) 117 . 119) (117 . 119) (#("typename name" 0 13 (fontified nil)) . -117) (nil fontified nil 117 . 130) (nil face (rainbow-delimiters-depth-2-face) 117 . 130) (117 . 130) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -117) (undo-tree-id2494 . -2) 119 (117 . 119) (116 . 118) (apply yas--snippet-revive 107 116 #s(yas--snippet nil nil #s(yas--exit #<marker at 129 in meta_map.hpp> nil) 51 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 129 in meta_map.hpp> nil) 51 nil nil nil nil)) (107 . 116) (#("template $0" 0 11 (fontified nil)) . 107) (107 . 118) (#("te" 0 2 (fontified nil)) . 107) (107 . 109) (#("template declaration" 0 20 (fontified nil)) . -107) (107 . 127) (#("te" 0 1 (fontified t) 1 2 (fontified t)) . -107) (undo-tree-id2495 . -2) (undo-tree-id2496 . -2) 109 (108 . 109) (#("o" 0 1 (fontified t)) . -108) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (#("k" 0 1 (fontified t)) . -109) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (#("e" 0 1 (fontified t)) . -110) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (#("n" 0 1 (fontified t)) . -111) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (#("_" 0 1 (fontified t)) . -112) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (#("c" 0 1 (fontified t)) . -113) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (#("l" 0 1 (fontified t)) . -114) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (#("a" 0 1 (fontified t)) . -115) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (#("s" 0 1 (fontified t)) . -116) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (#("s" 0 1 (fontified t)) . -117) (undo-tree-id2515 . -1) 118 (107 . 118) (#("t" 0 1 (fontified nil)) . 107) (107 . 108) (#("token_class" 0 11 (fontified nil)) . -107) (107 . 118) (#("t" 0 1 (fontified t)) . -107) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) 108 (107 . 108) (105 . 107) (105 . 106) 115 (t 26071 5243 73113 367000)) ((#("
" 0 1 (fontified nil)) . 105) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (#("  " 0 2 (fontified nil)) . 105) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -2) (#("t" 0 1 (fontified nil)) . 107) (107 . 108) (#("token_class" 0 11 (fontified nil)) . 107) (107 . 118) (#("t" 0 1 (fontified nil)) . 107) (107 . 108) (#("token_class" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil)) . 107) (108 . 118) (#("e" 0 1 (fontified nil)) . 108) (107 . 109) (#("template declaration" 0 20 (fontified nil)) . 107) (107 . 127) (#("te" 0 2 (fontified nil)) . 107) (107 . 109) (#("template $0" 0 11 (fontified nil)) . 107) (107 . 118) (#("template " 0 7 (fontified nil face font-lock-keyword-face) 7 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil)) . 107) (undo-tree-id2997 . -9) (undo-tree-id2998 . -9) (undo-tree-id2999 . -9) (#("<>" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face) syntax-table (4 . 62)) 1 2 (fontified nil face (rainbow-delimiters-depth-2-face) syntax-table (5 . 60))) . 116) (undo-tree-id3000 . -2) (undo-tree-id3001 . -1) (#("ty" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face)) . 117) (117 . 119) (#("typename name" 0 13 (fontified nil face (rainbow-delimiters-depth-2-face))) . 117) (nil face nil 117 . 130) (117 . 130) (#("ty" 0 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 117) (nil face nil 117 . 119) (117 . 119) (#("typename $0" 0 11 (fontified nil face (rainbow-delimiters-depth-2-face))) . 117) (nil face nil 117 . 128) (117 . 128) (#("typename " 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil)) . 117) (undo-tree-id3002 . -9) (#("T" 0 1 (fontified nil face font-lock-type-face)) . 126) (#(" str" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face)) . 128) (undo-tree-id3003 . -1) (129 . 132) (#("struct" 0 6 (fontified nil)) . 129) (129 . 135) (#("st" 0 2 (fontified nil)) . 129) (129 . 131) (#("struct" 0 5 (fontified nil face font-lock-keyword-face) 5 6 (fontified nil face font-lock-keyword-face c-type c-decl-type-start)) . 129) (undo-tree-id3004 . -6) (#(" test" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil face font-lock-type-face)) . 135) (undo-tree-id3005 . -1) (#("mdzz" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face)) . 140) (#("<" 0 1 (fontified nil)) . 144) (144 . 145) (#("{}" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-2-face))) . 144) (145 . 146) (#("}" 0 1 (fontified nil)) . 273) (273 . 274) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 273) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1)) (26071 5821 667397 313000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 125) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) 126) ((125 . 126)) (26071 4846 103041 362000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((224 . 228)) nil (26071 5845 240472 670000) 0 nil])
([nil nil ((apply -12 278 573 undo--wrap-and-run-primitive-undo 278 573 ((510 . 513) (427 . 430) (363 . 366) (280 . 283) 560))) ((apply 12 278 561 undo--wrap-and-run-primitive-undo 278 561 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 280) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 363) (#("// " 0 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 427) (#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 510) 199))) (26071 5821 201001 849000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((130 . 131)) ((#(" " 0 1 (fontified t)) . 130)) (26071 4845 786031 379000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((127 . 128) (#("," 0 1 (fontified t)) . -127) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -128) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -129) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (#("k" 0 1 (fontified t face font-lock-type-face)) . -130) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -131) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -132) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (#("_" 0 1 (fontified t face font-lock-type-face)) . -133) (undo-tree-id3487 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -134) (undo-tree-id3488 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -135) (undo-tree-id3489 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -136) (undo-tree-id3490 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -137) (undo-tree-id3491 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -138) (undo-tree-id3492 . -1) (#(":" 0 1 (fontified t)) . -139) (undo-tree-id3493 . -1) (#(":" 0 1 (fontified t)) . -140) (undo-tree-id3494 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -141) (undo-tree-id3495 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -142) (undo-tree-id3496 . -1) (#("k" 0 1 (fontified t face font-lock-type-face)) . -143) (undo-tree-id3497 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -144) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -145) (undo-tree-id3500 . -1) 146 (#(" " 0 1 (fontified t)) . 126) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) 127 (apply yas--snippet-revive 117 128 #s(yas--snippet nil (#s(yas--field 1 125 126 nil nil nil t #s(yas--exit 127 nil))) #s(yas--exit 127 nil) 54 nil #s(yas--field 1 125 126 nil nil nil t #s(yas--exit 127 nil)) nil nil)) (#("type" 0 4 (fontified nil face font-lock-type-face)) . 126) (125 . 126) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 125 126 nil nil nil t #s(yas--exit 127 nil))) #s(yas--exit 127 nil) 54 nil #s(yas--field 1 125 126 nil nil nil t #s(yas--exit 127 nil)) nil nil)) (117 . 131) (#("typedef ${1:type} $0;" 0 21 (fontified nil)) . 117) (nil face (rainbow-delimiters-depth-2-face) 117 . 138) (nil fontified nil 117 . 138) (117 . 138) (#("ty" 0 2 (fontified nil)) . 117) (nil face (rainbow-delimiters-depth-2-face) 117 . 119) (nil fontified nil 117 . 119) (117 . 119) (#("typedef type name;" 0 18 (fontified nil)) . -117) (nil face (rainbow-delimiters-depth-2-face) 117 . 135) (nil fontified nil 117 . 135) (117 . 135) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -117) (undo-tree-id3503 . -2) (undo-tree-id3504 . -2) 119 (117 . 119) (#("token_class::token Tok" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t face font-lock-constant-face) 5 6 (fontified t face font-lock-constant-face) 6 7 (fontified t face font-lock-constant-face) 7 8 (fontified t face font-lock-constant-face) 8 9 (fontified t face font-lock-constant-face) 9 10 (fontified t face font-lock-constant-face) 10 11 (fontified t face font-lock-constant-face) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t face font-lock-type-face) 14 15 (fontified t face font-lock-type-face) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 20 (fontified t face font-lock-variable-name-face) 20 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t face font-lock-variable-name-face)) . 117) (undo-tree-id3505 . -21) (undo-tree-id3506 . -22) (undo-tree-id3507 . -22) 139 (t 26071 5845 253098 796000)) nil (26071 6304 446213 386000) 0 nil])
([nil nil ((#("token_class::token" 0 11 (fontified t face font-lock-constant-face) 11 12 (fontified t) 12 13 (fontified t) 13 18 (fontified t face font-lock-type-face)) . 181) (undo-tree-id2310 . -18) (undo-tree-id2311 . -17) (undo-tree-id2313 . -18) (undo-tree-id2315 . -18) (undo-tree-id2317 . -18) (undo-tree-id2319 . -18) (undo-tree-id2321 . -18) (undo-tree-id2323 . -18) (undo-tree-id2325 . -18) (undo-tree-id2327 . -18) (undo-tree-id2329 . -18) (undo-tree-id2331 . -18) (undo-tree-id2333 . -18) (undo-tree-id2335 . -18) (undo-tree-id2337 . -18) (undo-tree-id2339 . -18) (undo-tree-id2341 . -18) (undo-tree-id2343 . -18) (undo-tree-id2345 . -18) (undo-tree-id2347 . -18) (undo-tree-id2349 . -18) (undo-tree-id2351 . -18) (undo-tree-id2353 . -18) (undo-tree-id2355 . -18) (undo-tree-id2357 . -18) (undo-tree-id2359 . -18) (undo-tree-id2361 . -18) (undo-tree-id2363 . -18) (undo-tree-id2365 . -18) (undo-tree-id2367 . -18) (undo-tree-id2369 . -18) (undo-tree-id2371 . -18) (undo-tree-id2373 . -18) (undo-tree-id2375 . -18) (undo-tree-id2377 . -18) (undo-tree-id2379 . -18) (undo-tree-id2381 . -18) (undo-tree-id2383 . -18) (undo-tree-id2385 . -18) (undo-tree-id2387 . -18) (undo-tree-id2389 . -18) (undo-tree-id2391 . -18) (undo-tree-id2393 . -18) (undo-tree-id2395 . -18) (undo-tree-id2397 . -18) (undo-tree-id2399 . -18) (undo-tree-id2401 . -18) (undo-tree-id2403 . -18) (undo-tree-id2405 . -18) (undo-tree-id2407 . -18) (undo-tree-id2409 . -18) (undo-tree-id2411 . -18) (undo-tree-id2413 . -18) (undo-tree-id2415 . -18) (undo-tree-id2417 . -18) (undo-tree-id2419 . -18) (undo-tree-id2421 . -18) (undo-tree-id2423 . -18) (undo-tree-id2425 . -18) (undo-tree-id2427 . -18) (undo-tree-id2429 . -18) (undo-tree-id2431 . -18) (undo-tree-id2433 . -18) (undo-tree-id2435 . -18) (undo-tree-id2437 . -18) (undo-tree-id2439 . -18) (undo-tree-id2441 . -18) (undo-tree-id2443 . -18) (undo-tree-id2445 . -18) (undo-tree-id2447 . -18) (undo-tree-id2449 . -18) (undo-tree-id2451 . -18) (undo-tree-id2453 . -18) (undo-tree-id2455 . -18) (undo-tree-id2457 . -18) (undo-tree-id2459 . -18) (undo-tree-id2461 . -18) (undo-tree-id2463 . -18) (undo-tree-id2465 . -18) (undo-tree-id2467 . -18) (undo-tree-id2469 . -18) (undo-tree-id2471 . -18) (undo-tree-id2473 . -18) (undo-tree-id2475 . -18) (undo-tree-id2477 . -18) (undo-tree-id2479 . -18) (undo-tree-id2481 . -18) (undo-tree-id2483 . -18) (undo-tree-id2485 . -18) (undo-tree-id2487 . -18) 199) ((181 . 199)) (26071 5820 967166 394000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((130 . 131)) ((#("r" 0 1 (fontified t face font-lock-type-face)) . 130) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1)) (26071 4845 351438 305000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("token_class::token car=Tok;token_class::token cdr=Tok1;" 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 17 (fontified t face font-lock-type-face) 17 18 (fontified t c-type c-decl-id-start face font-lock-type-face) 18 19 (fontified t) 19 20 (fontified t face font-lock-variable-name-face) 20 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t face font-lock-variable-name-face) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 44 (fontified t face font-lock-type-face) 44 45 (fontified t c-type c-decl-id-start face font-lock-type-face) 45 46 (fontified t) 46 47 (fontified t face font-lock-variable-name-face) 47 48 (fontified t face font-lock-variable-name-face) 48 49 (fontified t face font-lock-variable-name-face) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t)) . 149) (undo-tree-id3467 . 55) (undo-tree-id3468 . -54) (undo-tree-id3469 . -55) (undo-tree-id3470 . -19) (undo-tree-id3471 . -46) (undo-tree-id3472 . -19) (undo-tree-id3473 . -46) (undo-tree-id3474 . -55)) nil (26071 6304 446190 347000) 0 nil])
([nil nil ((158 . 159) (#("t" 0 1 (fontified t face font-lock-type-face)) . -158) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -159) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (#("k" 0 1 (fontified t face font-lock-type-face)) . -160) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -161) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -162) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (#("_" 0 1 (fontified t face font-lock-type-face)) . -163) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -164) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -165) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) 166 (#("a" 0 1 (fontified t face font-lock-type-face)) . -166) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -167) (undo-tree-id2300 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -168) (undo-tree-id2301 . -1) (#(":" 0 1 (fontified t)) . -169) (undo-tree-id2302 . -1) (#(":" 0 1 (fontified t)) . -170) (undo-tree-id2303 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -171) (undo-tree-id2304 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -172) (undo-tree-id2305 . -1) (#("k" 0 1 (fontified t face font-lock-type-face)) . -173) (undo-tree-id2306 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -174) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -175) (undo-tree-id2309 . -1) 176 (181 . 182)) ((#("T" 0 1 (fontified nil face font-lock-type-face)) . 181) (158 . 176) (#("T" 0 1 (fontified t face font-lock-type-face)) . 158)) (26071 5820 676815 300000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#("r" 0 1 (fontified t face font-lock-type-face)) . -130) (undo-tree-id1455 . -1) 131) ((130 . 131)) (26071 4844 955966 221000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((149 . 157)) nil (26071 6304 446185 409000) 0 nil])
([nil nil ((186 . 187) (186 . 187) (#("token_class::token " 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 17 (fontified t face font-lock-type-face) 17 18 (fontified t c-type c-decl-id-start face font-lock-type-face) 18 19 (fontified t)) . 186) (undo-tree-id2987 . -18) (undo-tree-id2989 . -19) (t 26071 5738 319768 58000)) ((186 . 205) (#(" " 0 1 (fontified nil)) . 186) (undo-tree-id2991 . -1) (#("T" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 186)) (26071 5820 431223 451000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((174 . 180) (#("st" 0 2 (fontified nil)) . 174) (174 . 176) (#("static" 0 6 (fontified nil)) . -174) (174 . 180) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -174) (undo-tree-id2518 . -2) (undo-tree-id2520 . -1) (undo-tree-id2522 . -1) (undo-tree-id2524 . -1) (undo-tree-id2526 . -1) (undo-tree-id2528 . -1) (undo-tree-id2530 . -1) (undo-tree-id2532 . -1) (undo-tree-id2534 . -1) (undo-tree-id2536 . -1) (undo-tree-id2538 . -1) (undo-tree-id2540 . -1) (undo-tree-id2542 . -1) (undo-tree-id2544 . -1) (undo-tree-id2546 . -1) (undo-tree-id2548 . -1) (undo-tree-id2550 . -1) (undo-tree-id2552 . -1) (undo-tree-id2554 . -1) (undo-tree-id2556 . -1) (undo-tree-id2558 . -1) (undo-tree-id2560 . -1) (undo-tree-id2562 . -1) (undo-tree-id2564 . -1) (undo-tree-id2566 . -1) (undo-tree-id2568 . -1) (undo-tree-id2570 . -1) (undo-tree-id2572 . -1) (undo-tree-id2574 . -1) (undo-tree-id2576 . -1) (undo-tree-id2578 . -1) (undo-tree-id2580 . -1) (undo-tree-id2582 . -1) (undo-tree-id2584 . -1) (undo-tree-id2586 . -1) (undo-tree-id2588 . -1) (undo-tree-id2590 . -1) (undo-tree-id2592 . -1) (undo-tree-id2594 . -1) (undo-tree-id2596 . -1) (undo-tree-id2598 . -1) (undo-tree-id2600 . -1) (undo-tree-id2602 . -1) (undo-tree-id2604 . -1) (undo-tree-id2606 . -1) (undo-tree-id2608 . -1) (undo-tree-id2610 . -1) (undo-tree-id2612 . -1) (undo-tree-id2614 . -1) (undo-tree-id2616 . -1) (undo-tree-id2618 . -1) (undo-tree-id2620 . -1) (undo-tree-id2622 . -1) (undo-tree-id2624 . -1) (undo-tree-id2626 . -1) (undo-tree-id2628 . -1) (undo-tree-id2630 . -1) (undo-tree-id2632 . -1) (undo-tree-id2634 . -1) (undo-tree-id2636 . -1) (undo-tree-id2638 . -1) (undo-tree-id2640 . -1) (undo-tree-id2642 . -1) (undo-tree-id2644 . -1) (undo-tree-id2646 . -1) (undo-tree-id2648 . -1) (undo-tree-id2650 . -1) (undo-tree-id2652 . -1) (undo-tree-id2654 . -1) (undo-tree-id2656 . -1) (undo-tree-id2658 . -1) (undo-tree-id2660 . -1) (undo-tree-id2662 . -1) (undo-tree-id2664 . -1) (undo-tree-id2666 . -1) (undo-tree-id2668 . -1) (undo-tree-id2670 . -1) (undo-tree-id2672 . -1) (undo-tree-id2674 . -1) (undo-tree-id2676 . -1) (undo-tree-id2678 . -1) (undo-tree-id2680 . -1) (undo-tree-id2682 . -1) (undo-tree-id2684 . -1) (undo-tree-id2686 . -1) (undo-tree-id2688 . -1) (undo-tree-id2690 . -1) (undo-tree-id2692 . -1) (undo-tree-id2694 . -1) (undo-tree-id2696 . -1) (undo-tree-id2698 . -1) (undo-tree-id2700 . -1) (undo-tree-id2702 . -1) (undo-tree-id2704 . -1) (undo-tree-id2706 . -1) (undo-tree-id2708 . -1) (undo-tree-id2710 . -1) (undo-tree-id2712 . -1) (undo-tree-id2714 . -1) (undo-tree-id2716 . -2) (undo-tree-id2718 . -2) (undo-tree-id2720 . -2) (undo-tree-id2722 . -2) (undo-tree-id2724 . -2) (undo-tree-id2726 . -2) (undo-tree-id2728 . -2) (undo-tree-id2730 . -2) (undo-tree-id2732 . -2) (undo-tree-id2734 . -2) (undo-tree-id2736 . -2) (undo-tree-id2738 . -2) (undo-tree-id2740 . -2) (undo-tree-id2742 . -2) (undo-tree-id2744 . -2) (undo-tree-id2746 . -2) (undo-tree-id2748 . -2) (undo-tree-id2750 . -2) (undo-tree-id2752 . -2) (undo-tree-id2754 . -2) (undo-tree-id2756 . -2) (undo-tree-id2758 . -2) (undo-tree-id2760 . -2) (undo-tree-id2762 . -2) (undo-tree-id2764 . -2) (undo-tree-id2766 . -2) (undo-tree-id2768 . -2) (undo-tree-id2770 . -2) (undo-tree-id2772 . -2) (undo-tree-id2774 . -2) (undo-tree-id2776 . -2) (undo-tree-id2778 . -2) (undo-tree-id2780 . -2) (undo-tree-id2782 . -2) (undo-tree-id2784 . -2) (undo-tree-id2786 . -2) (undo-tree-id2788 . -2) (undo-tree-id2790 . -2) (undo-tree-id2792 . -2) (undo-tree-id2794 . -2) (undo-tree-id2796 . -2) (undo-tree-id2798 . -2) (undo-tree-id2800 . -2) (undo-tree-id2802 . -2) (undo-tree-id2804 . -2) (undo-tree-id2806 . -2) (undo-tree-id2808 . -2) (undo-tree-id2810 . -2) (undo-tree-id2812 . -2) (undo-tree-id2814 . -2) (undo-tree-id2816 . -2) (undo-tree-id2818 . -2) (undo-tree-id2820 . -2) (undo-tree-id2822 . -2) (undo-tree-id2824 . -2) (undo-tree-id2826 . -2) (undo-tree-id2828 . -2) (undo-tree-id2830 . -2) (undo-tree-id2832 . -2) (undo-tree-id2834 . -2) (undo-tree-id2836 . -2) (undo-tree-id2838 . -2) (undo-tree-id2840 . -2) (undo-tree-id2842 . -2) (undo-tree-id2844 . -2) 176 (174 . 176) (174 . 175) (t 26071 5602 663104 663000)) ((#(" " 0 1 (fontified nil)) . 174) (undo-tree-id2845 . 1) (#("st" 0 1 (fontified nil) 1 2 (fontified nil)) . 174) (undo-tree-id2846 . -2) (174 . 176) (#("static" 0 6 (fontified nil)) . 174) (174 . 180) (#("st" 0 2 (fontified nil)) . 174) (174 . 176) (#("static" 0 6 (fontified t face font-lock-keyword-face)) . 174) (undo-tree-id2847 . -5) (undo-tree-id2848 . -5) (undo-tree-id2849 . -5) (undo-tree-id2850 . -5) (undo-tree-id2851 . -5) (undo-tree-id2852 . -5) (undo-tree-id2853 . -5) (undo-tree-id2854 . -5) (undo-tree-id2855 . -5) (undo-tree-id2856 . -5) (undo-tree-id2857 . -5) (undo-tree-id2858 . -5) (undo-tree-id2859 . -5) (undo-tree-id2860 . -5) (undo-tree-id2861 . -5) (undo-tree-id2862 . -5) (undo-tree-id2863 . -5) (undo-tree-id2864 . -5) (undo-tree-id2865 . -5) (undo-tree-id2866 . -5) (undo-tree-id2867 . -5) (undo-tree-id2868 . -5) (undo-tree-id2869 . -5) (undo-tree-id2870 . -5) (undo-tree-id2871 . -5) (undo-tree-id2872 . -5) (undo-tree-id2873 . -5) (undo-tree-id2874 . -5) (undo-tree-id2875 . -5) (undo-tree-id2876 . -5) (undo-tree-id2877 . -5) (undo-tree-id2878 . -5) (undo-tree-id2879 . -5) (undo-tree-id2880 . -5) (undo-tree-id2881 . -5) (undo-tree-id2882 . -5) (undo-tree-id2883 . -5) (undo-tree-id2884 . -5) (undo-tree-id2885 . -5) (undo-tree-id2886 . -5) (undo-tree-id2887 . -5) (undo-tree-id2888 . -5) (undo-tree-id2889 . -5) (undo-tree-id2890 . -5) (undo-tree-id2891 . -5) (undo-tree-id2892 . -5) (undo-tree-id2893 . -5) (undo-tree-id2894 . -5) (undo-tree-id2895 . -5) (undo-tree-id2896 . -5) (undo-tree-id2897 . -5) (undo-tree-id2898 . -5) (undo-tree-id2899 . -5) (undo-tree-id2900 . -5) (undo-tree-id2901 . -5) (undo-tree-id2902 . -5) (undo-tree-id2903 . -5) (undo-tree-id2904 . -5) (undo-tree-id2905 . -5) (undo-tree-id2906 . -5) (undo-tree-id2907 . -5) (undo-tree-id2908 . -5) (undo-tree-id2909 . -5) (undo-tree-id2910 . -5) (undo-tree-id2911 . -5) (undo-tree-id2912 . -5) (undo-tree-id2913 . -5) (undo-tree-id2914 . -5) (undo-tree-id2915 . -5) (undo-tree-id2916 . -5) (undo-tree-id2917 . -5) (undo-tree-id2918 . -5) (undo-tree-id2919 . -5) (undo-tree-id2920 . -5) (undo-tree-id2921 . -5) (undo-tree-id2922 . -5) (undo-tree-id2923 . -5) (undo-tree-id2924 . -5) (undo-tree-id2925 . -5) (undo-tree-id2926 . -5) (undo-tree-id2927 . -5) (undo-tree-id2928 . -5) (undo-tree-id2929 . -5) (undo-tree-id2930 . -5) (undo-tree-id2931 . -5) (undo-tree-id2932 . -5) (undo-tree-id2933 . -5) (undo-tree-id2934 . -5) (undo-tree-id2935 . -5) (undo-tree-id2936 . -5) (undo-tree-id2937 . -5) (undo-tree-id2938 . -5) (undo-tree-id2939 . -5) (undo-tree-id2940 . -5) (undo-tree-id2941 . -5) (undo-tree-id2942 . -5) (undo-tree-id2943 . -5) (undo-tree-id2944 . -5) (undo-tree-id2945 . -5) (undo-tree-id2946 . -5) (undo-tree-id2947 . -5) (undo-tree-id2948 . -5) (undo-tree-id2949 . -5) (undo-tree-id2950 . -5) (undo-tree-id2951 . -5) (undo-tree-id2952 . -5) (undo-tree-id2953 . -5) (undo-tree-id2954 . -5) (undo-tree-id2955 . -5) (undo-tree-id2956 . -5) (undo-tree-id2957 . -5) (undo-tree-id2958 . -5) (undo-tree-id2959 . -5) (undo-tree-id2960 . -5) (undo-tree-id2961 . -5) (undo-tree-id2962 . -5) (undo-tree-id2963 . -5) (undo-tree-id2964 . -5) (undo-tree-id2965 . -5) (undo-tree-id2966 . -5) (undo-tree-id2967 . -5) (undo-tree-id2968 . -5) (undo-tree-id2969 . -5) (undo-tree-id2970 . -5) (undo-tree-id2971 . -5) (undo-tree-id2972 . -5) (undo-tree-id2973 . -5) (undo-tree-id2974 . -5) (undo-tree-id2975 . -5) (undo-tree-id2976 . -5) (undo-tree-id2977 . -5) (undo-tree-id2978 . -5) (undo-tree-id2979 . -5) (undo-tree-id2980 . -5) (undo-tree-id2981 . -5) (undo-tree-id2982 . -5) (undo-tree-id2983 . -5) (undo-tree-id2984 . -5) (undo-tree-id2985 . -5) (undo-tree-id2986 . -5) (t 26071 5689 933102 554000)) (26071 5689 921657 243000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((130 . 132)) ((#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . 130) (undo-tree-id1549 . -2) (undo-tree-id1550 . -2) (undo-tree-id1551 . -2) (undo-tree-id1552 . -2) (undo-tree-id1553 . -2) (undo-tree-id1554 . -2) (undo-tree-id1555 . -2) (undo-tree-id1556 . -2) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) (undo-tree-id1561 . -2) (undo-tree-id1562 . -2) (undo-tree-id1563 . -2) (undo-tree-id1564 . -2) (undo-tree-id1565 . -2) (undo-tree-id1566 . -2) (undo-tree-id1567 . -2) (undo-tree-id1568 . -2) (undo-tree-id1569 . -2) (undo-tree-id1570 . -2) (undo-tree-id1571 . -2) (undo-tree-id1572 . -2) (undo-tree-id1573 . -2) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -2) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -2) (undo-tree-id1588 . -2) (undo-tree-id1589 . -2) (undo-tree-id1590 . -2) (undo-tree-id1591 . -2) (undo-tree-id1592 . -2) (undo-tree-id1593 . -2) (undo-tree-id1594 . -2) (undo-tree-id1595 . -2) (undo-tree-id1596 . -2) (undo-tree-id1597 . -2) (undo-tree-id1598 . -2) (undo-tree-id1599 . -2) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) (undo-tree-id1602 . -2) (undo-tree-id1603 . -2) (undo-tree-id1604 . -2) (undo-tree-id1605 . -2) (undo-tree-id1606 . -2) (undo-tree-id1607 . -2) (undo-tree-id1608 . -2) (undo-tree-id1609 . -2) (undo-tree-id1610 . -2) (undo-tree-id1611 . -2) (undo-tree-id1612 . -2) (undo-tree-id1613 . -2) (undo-tree-id1614 . -2) (undo-tree-id1615 . -2) (undo-tree-id1616 . -2) (undo-tree-id1617 . -2) (undo-tree-id1618 . -2) (undo-tree-id1619 . -2) (undo-tree-id1620 . -2) (undo-tree-id1621 . -2) (undo-tree-id1622 . -2) (undo-tree-id1623 . -2) (undo-tree-id1624 . -2) (undo-tree-id1625 . -2) (undo-tree-id1626 . -2) (undo-tree-id1627 . -2) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2)) (26071 4844 594369 656000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("i" 0 1 (fontified t)) . -155) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (#("k" 0 1 (fontified t)) . -156) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) 157) nil (26071 6304 446184 619000) 0 nil])
([nil nil ((214 . 218)) ((#(" cdr" 0 1 (fontified t) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face)) . 214) (undo-tree-id2990 . -1)) (26071 5820 88905 464000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((apply yas--snippet-revive 130 139 #s(yas--snippet nil nil #s(yas--exit #<marker at 141 in meta_map.hpp> nil) 41 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 141 in meta_map.hpp> nil) 41 nil nil nil nil)) (130 . 139) (#("typename $0" 0 11 (fontified nil)) . 130) (130 . 141) (#("ty" 0 2 (fontified nil)) . 130) (130 . 132) (#("typename name" 0 13 (fontified nil)) . -130) (130 . 143) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -130) (undo-tree-id1454 . -2) 132) ((130 . 132) (#("typename name" 0 13 (fontified nil)) . 130) (130 . 143) (#("ty" 0 2 (fontified nil)) . 130) (130 . 132) (#("typename $0" 0 11 (fontified nil)) . 130) (130 . 141) (#("typename " 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . 130) (undo-tree-id1467 . -9) (undo-tree-id1468 . -9) (undo-tree-id1469 . -9) (undo-tree-id1470 . -9) (undo-tree-id1471 . -9) (undo-tree-id1472 . -9) (undo-tree-id1473 . -9) (undo-tree-id1474 . -9) (undo-tree-id1475 . -9) (undo-tree-id1476 . -9) (undo-tree-id1477 . -9) (undo-tree-id1478 . -9) (undo-tree-id1479 . -9) (undo-tree-id1480 . -9) (undo-tree-id1481 . -9) (undo-tree-id1482 . -9) (undo-tree-id1483 . -9) (undo-tree-id1484 . -9) (undo-tree-id1485 . -9) (undo-tree-id1486 . -9) (undo-tree-id1487 . -9) (undo-tree-id1488 . -9) (undo-tree-id1489 . -9) (undo-tree-id1490 . -9) (undo-tree-id1491 . -9) (undo-tree-id1492 . -9) (undo-tree-id1493 . -9) (undo-tree-id1494 . -9) (undo-tree-id1495 . -9) (undo-tree-id1496 . -9) (undo-tree-id1497 . -9) (undo-tree-id1498 . -9) (undo-tree-id1499 . -9) (undo-tree-id1500 . -9) (undo-tree-id1501 . -9) (undo-tree-id1502 . -9) (undo-tree-id1503 . -9) (undo-tree-id1504 . -9) (undo-tree-id1505 . -9) (undo-tree-id1506 . -9) (undo-tree-id1507 . -9) (undo-tree-id1508 . -9) (undo-tree-id1509 . -9) (undo-tree-id1510 . -9) (undo-tree-id1511 . -9) (undo-tree-id1512 . -9) (undo-tree-id1513 . -9) (undo-tree-id1514 . -9) (undo-tree-id1515 . -9) (undo-tree-id1516 . -9) (undo-tree-id1517 . -9) (undo-tree-id1518 . -9) (undo-tree-id1519 . -9) (undo-tree-id1520 . -9) (undo-tree-id1521 . -9) (undo-tree-id1522 . -9) (undo-tree-id1523 . -9) (undo-tree-id1524 . -9) (undo-tree-id1525 . -9) (undo-tree-id1526 . -9) (undo-tree-id1527 . -9) (undo-tree-id1528 . -9) (undo-tree-id1529 . -9) (undo-tree-id1530 . -9) (undo-tree-id1531 . -9) (undo-tree-id1532 . -9) (undo-tree-id1533 . -9) (undo-tree-id1534 . -9) (undo-tree-id1535 . -9) (undo-tree-id1536 . -9) (undo-tree-id1537 . -9) (undo-tree-id1538 . -9) (undo-tree-id1539 . -9) (undo-tree-id1540 . -9) (undo-tree-id1541 . -9) (undo-tree-id1542 . -9) (undo-tree-id1543 . -9) (undo-tree-id1544 . -9) (undo-tree-id1545 . -9) (undo-tree-id1546 . -9) (undo-tree-id1547 . -9) (undo-tree-id1548 . -9)) (26071 4844 439240 623000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((155 . 157)) nil (26071 6304 446180 886000) 0 nil])
([nil nil ((227 . 228) (t 26071 5779 579767 54000)) ((#(";" 0 1 (fontified t)) . 227) (t 26071 5796 889766 634000)) (26071 5796 854109 133000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 138) (undo-tree-id1453 . -1) 139) ((138 . 139)) (26071 4844 437789 25000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((154 . 158) (#("To" 0 2 (fontified nil)) . 154) (154 . 156) (#("Tok1" 0 4 (fontified nil)) . -154) (154 . 158) (#("Tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -154) (undo-tree-id3081 . -3) (undo-tree-id3082 . -3) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -2) (undo-tree-id3108 . -2) (undo-tree-id3109 . -2) (undo-tree-id3110 . -2) (undo-tree-id3111 . -2) (undo-tree-id3112 . -2) (undo-tree-id3113 . -2) (undo-tree-id3114 . -2) (undo-tree-id3115 . -2) (undo-tree-id3116 . -2) (undo-tree-id3117 . -2) (undo-tree-id3118 . -2) (undo-tree-id3119 . -2) (undo-tree-id3120 . -2) (undo-tree-id3121 . -2) (undo-tree-id3122 . -2) (undo-tree-id3123 . -2) (undo-tree-id3124 . -2) (undo-tree-id3125 . -2) (undo-tree-id3126 . -2) (undo-tree-id3127 . -2) (undo-tree-id3128 . -2) (undo-tree-id3129 . -2) (undo-tree-id3130 . -2) (undo-tree-id3131 . -2) (undo-tree-id3132 . -2) (undo-tree-id3133 . -2) (undo-tree-id3134 . -2) (undo-tree-id3135 . -2) (undo-tree-id3136 . -2) (undo-tree-id3137 . -2) (undo-tree-id3138 . -2) (undo-tree-id3139 . -2) (undo-tree-id3140 . -2) (undo-tree-id3141 . -2) (undo-tree-id3142 . -2) (undo-tree-id3143 . -2) (undo-tree-id3144 . -2) (undo-tree-id3145 . -2) (undo-tree-id3146 . -2) (undo-tree-id3147 . -2) (undo-tree-id3148 . -2) (undo-tree-id3149 . -2) (undo-tree-id3150 . -2) (undo-tree-id3151 . -2) (undo-tree-id3152 . -2) (undo-tree-id3153 . -2) (undo-tree-id3154 . -2) (undo-tree-id3155 . -2) (undo-tree-id3156 . -2) (undo-tree-id3157 . -2) (undo-tree-id3158 . -2) (undo-tree-id3159 . -2) (undo-tree-id3160 . -2) (undo-tree-id3161 . -2) (undo-tree-id3162 . -2) (undo-tree-id3163 . -2) (undo-tree-id3164 . -2) (undo-tree-id3165 . -2) (undo-tree-id3166 . -2) (undo-tree-id3167 . -2) (undo-tree-id3168 . -2) (undo-tree-id3169 . -2) (undo-tree-id3170 . -2) (undo-tree-id3171 . -2) (undo-tree-id3172 . -2) (undo-tree-id3173 . -2) (undo-tree-id3174 . -2) (undo-tree-id3175 . -2) (undo-tree-id3176 . -2) (undo-tree-id3177 . -2) (undo-tree-id3178 . -2) (undo-tree-id3179 . -2) (undo-tree-id3180 . -2) (undo-tree-id3181 . -2) (undo-tree-id3182 . -2) (undo-tree-id3183 . -2) (undo-tree-id3184 . -2) (undo-tree-id3185 . -2) (undo-tree-id3186 . -2) (undo-tree-id3187 . -2) (undo-tree-id3188 . -2) (undo-tree-id3189 . -2) (undo-tree-id3190 . -2) (undo-tree-id3191 . -2) (undo-tree-id3192 . -2) (undo-tree-id3193 . -2) (undo-tree-id3194 . -2) (undo-tree-id3195 . -2) (undo-tree-id3196 . -2) (undo-tree-id3197 . -2) (undo-tree-id3198 . -2) (undo-tree-id3199 . -2) (undo-tree-id3200 . -2) (undo-tree-id3201 . -2) (undo-tree-id3202 . -2) (undo-tree-id3203 . -2) (undo-tree-id3204 . -2) (undo-tree-id3205 . -2) (undo-tree-id3206 . -2) (undo-tree-id3207 . -2) (undo-tree-id3208 . -2) (undo-tree-id3209 . -2) (undo-tree-id3210 . -2) (undo-tree-id3211 . -2) (undo-tree-id3212 . -2) (undo-tree-id3213 . -2) (undo-tree-id3214 . -2) (undo-tree-id3215 . -2) (undo-tree-id3216 . -2) (undo-tree-id3217 . -2) (undo-tree-id3218 . -2) (undo-tree-id3219 . -2) (undo-tree-id3220 . -2) (undo-tree-id3221 . -2) (undo-tree-id3222 . -2) (undo-tree-id3223 . -2) (undo-tree-id3224 . -2) (undo-tree-id3225 . -2) (undo-tree-id3226 . -2) (undo-tree-id3227 . -2) (undo-tree-id3228 . -2) (undo-tree-id3229 . -2) (undo-tree-id3230 . -2) (undo-tree-id3231 . -2) (undo-tree-id3232 . -2) (undo-tree-id3233 . -2) (undo-tree-id3234 . -2) (undo-tree-id3235 . -2) (undo-tree-id3236 . -2) (undo-tree-id3237 . -2) (undo-tree-id3238 . -2) (undo-tree-id3239 . -2) (undo-tree-id3240 . -2) (undo-tree-id3241 . -2) (undo-tree-id3242 . -2) (undo-tree-id3243 . -2) (undo-tree-id3244 . -2) (undo-tree-id3245 . -2) (undo-tree-id3246 . -2) (undo-tree-id3247 . -2) (undo-tree-id3248 . -2) (undo-tree-id3249 . -2) (undo-tree-id3250 . -2) (undo-tree-id3251 . -2) (undo-tree-id3252 . -2) (undo-tree-id3253 . -2) (undo-tree-id3254 . -2) (undo-tree-id3255 . -2) (undo-tree-id3256 . -2) (undo-tree-id3257 . -2) (undo-tree-id3258 . -2) (undo-tree-id3259 . -2) (undo-tree-id3260 . -2) (undo-tree-id3261 . -2) (undo-tree-id3262 . -2) (undo-tree-id3263 . -2) (undo-tree-id3264 . -2) (undo-tree-id3265 . -2) (undo-tree-id3266 . -2) (undo-tree-id3267 . -2) (undo-tree-id3268 . -2) (undo-tree-id3269 . -2) (undo-tree-id3270 . -2) (undo-tree-id3271 . -2) (undo-tree-id3272 . -2) (undo-tree-id3273 . -2) (undo-tree-id3274 . -2) (undo-tree-id3275 . -2) (undo-tree-id3276 . -2) (undo-tree-id3277 . -2) (undo-tree-id3278 . -2) (undo-tree-id3279 . -2) (undo-tree-id3280 . -2) (undo-tree-id3281 . -2) (undo-tree-id3282 . -2) (undo-tree-id3283 . -2) (undo-tree-id3284 . -2) (undo-tree-id3285 . -2) (undo-tree-id3286 . -2) (undo-tree-id3287 . -2) (undo-tree-id3288 . -2) (undo-tree-id3289 . -2) (undo-tree-id3290 . -2) (undo-tree-id3291 . -2) (undo-tree-id3292 . -2) (undo-tree-id3293 . -2) (undo-tree-id3294 . -2) (undo-tree-id3295 . -2) (undo-tree-id3296 . -2) (undo-tree-id3297 . -2) (undo-tree-id3298 . -2) (undo-tree-id3299 . -2) (undo-tree-id3300 . -2) (undo-tree-id3301 . -2) (undo-tree-id3302 . -2) (undo-tree-id3303 . -2) (undo-tree-id3304 . -2) (undo-tree-id3305 . -2) (undo-tree-id3306 . -3) (undo-tree-id3307 . -3) (undo-tree-id3308 . -3) (undo-tree-id3309 . -3) (undo-tree-id3310 . -3) (undo-tree-id3311 . -3) (undo-tree-id3312 . -3) (undo-tree-id3313 . -3) (undo-tree-id3314 . -3) (undo-tree-id3315 . -3) (undo-tree-id3316 . -3) (undo-tree-id3317 . -3) (undo-tree-id3318 . -3) (undo-tree-id3319 . -3) (undo-tree-id3320 . -3) (undo-tree-id3321 . -3) (undo-tree-id3322 . -3) (undo-tree-id3323 . -3) (undo-tree-id3324 . -3) (undo-tree-id3325 . -3) (undo-tree-id3326 . -3) (undo-tree-id3327 . -3) (undo-tree-id3328 . -3) (undo-tree-id3329 . -3) (undo-tree-id3330 . -3) (undo-tree-id3331 . -3) (undo-tree-id3332 . -3) (undo-tree-id3333 . -3) (undo-tree-id3334 . -3) (undo-tree-id3335 . -3) (undo-tree-id3336 . -3) (undo-tree-id3337 . -3) (undo-tree-id3338 . -3) (undo-tree-id3339 . -3) (undo-tree-id3340 . -3) (undo-tree-id3341 . -3) (undo-tree-id3342 . -3) (undo-tree-id3343 . -3) (undo-tree-id3344 . -3) (undo-tree-id3345 . -3) (undo-tree-id3346 . -3) (undo-tree-id3347 . -3) (undo-tree-id3348 . -3) (undo-tree-id3349 . -3) (undo-tree-id3350 . -3) (undo-tree-id3351 . -3) (undo-tree-id3352 . -3) (undo-tree-id3353 . -3) (undo-tree-id3354 . -3) (undo-tree-id3355 . -3) (undo-tree-id3356 . -3) (undo-tree-id3357 . -3) (undo-tree-id3358 . -3) (undo-tree-id3359 . -3) (undo-tree-id3360 . -3) (undo-tree-id3361 . -3) (undo-tree-id3362 . -3) (undo-tree-id3363 . -3) (undo-tree-id3364 . -3) (undo-tree-id3365 . -3) (undo-tree-id3366 . -3) (undo-tree-id3367 . -3) (undo-tree-id3368 . -3) (undo-tree-id3369 . -3) (undo-tree-id3370 . -3) (undo-tree-id3371 . -3) (undo-tree-id3372 . -3) (undo-tree-id3373 . -3) (undo-tree-id3374 . -3) (undo-tree-id3375 . -3) (undo-tree-id3376 . -3) (undo-tree-id3377 . -3) (undo-tree-id3378 . -3) (undo-tree-id3379 . -3) (undo-tree-id3380 . -3) (undo-tree-id3381 . -3) (undo-tree-id3382 . -3) (undo-tree-id3383 . -3) (undo-tree-id3384 . -3) (undo-tree-id3385 . -3) (undo-tree-id3386 . -3) (undo-tree-id3387 . -3) (undo-tree-id3388 . -3) (undo-tree-id3389 . -3) (undo-tree-id3390 . -3) (undo-tree-id3391 . -3) (undo-tree-id3392 . -3) (undo-tree-id3393 . -3) (undo-tree-id3394 . -3) (undo-tree-id3395 . -3) (undo-tree-id3396 . -3) (undo-tree-id3397 . -3) (undo-tree-id3398 . -3) (undo-tree-id3399 . -3) (undo-tree-id3400 . -3) (undo-tree-id3401 . -3) (undo-tree-id3402 . -3) (undo-tree-id3403 . -3) (undo-tree-id3404 . -3) (undo-tree-id3405 . -3) (undo-tree-id3406 . -3) (undo-tree-id3407 . -3) (undo-tree-id3408 . -3) (undo-tree-id3409 . -3) (undo-tree-id3410 . -3) (undo-tree-id3411 . -3) (undo-tree-id3412 . -3) (undo-tree-id3413 . -3) (undo-tree-id3414 . -3) (undo-tree-id3415 . -3) (undo-tree-id3416 . -3) (undo-tree-id3417 . -3) (undo-tree-id3418 . -3) (undo-tree-id3419 . -3) (undo-tree-id3420 . -3) (undo-tree-id3421 . -3) (undo-tree-id3422 . -3) (undo-tree-id3423 . -3) (undo-tree-id3424 . -3) (undo-tree-id3425 . -3) (undo-tree-id3426 . -3) (undo-tree-id3427 . -3) (undo-tree-id3428 . -3) (undo-tree-id3429 . -3) (undo-tree-id3430 . -3) (undo-tree-id3431 . -3) (undo-tree-id3432 . -3) (undo-tree-id3433 . -3) (undo-tree-id3434 . -3) (undo-tree-id3435 . -3) (undo-tree-id3436 . -3) (undo-tree-id3437 . -3) (undo-tree-id3438 . -3) (undo-tree-id3439 . -3) (undo-tree-id3440 . -3) (undo-tree-id3441 . -3) (undo-tree-id3442 . -3) (undo-tree-id3443 . -3) (undo-tree-id3444 . -3) (undo-tree-id3445 . -3) (undo-tree-id3446 . -3) (undo-tree-id3447 . -3) (undo-tree-id3448 . -3) (undo-tree-id3449 . -3) (undo-tree-id3450 . -3) (undo-tree-id3451 . -3) (undo-tree-id3452 . -3) (undo-tree-id3453 . -3) (undo-tree-id3454 . -3) (undo-tree-id3455 . -3) (undo-tree-id3456 . -3) (undo-tree-id3457 . -3) (undo-tree-id3458 . -3) (undo-tree-id3459 . -3) (undo-tree-id3460 . -3) (undo-tree-id3461 . -3) (undo-tree-id3462 . -3) 157) nil (26071 6304 446169 163000) 0 nil])
nil
nil
([nil nil ((#("p" 0 1 (fontified t face font-lock-type-face)) . -119) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -120) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -121) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -122) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -123) (undo-tree-id3676 . -1) 124 (t 26071 6304 459754 307000)) nil (26071 6362 979292 257000) 0 nil])
([nil nil ((119 . 120)) nil (26071 6362 979285 767000) 0 nil])
([nil nil ((apply yas--snippet-revive 117 126 #s(yas--snippet nil nil #s(yas--exit 126 nil) 55 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 126 nil) 55 nil nil nil nil)) (117 . 126) (#("typename $0" 0 11 (fontified nil)) . 117) (117 . 128) (#("typ" 0 3 (fontified nil)) . 117) (117 . 120) (#("typename name" 0 13 (fontified nil)) . -117) (117 . 130) (#("typ" 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -117) (undo-tree-id3665 . -3) (undo-tree-id3666 . -3) (undo-tree-id3667 . -2) 120) nil (26071 6362 979284 439000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 125) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) 126) nil (26071 6362 979274 162000) 0 nil])
([nil nil ((127 . 128) (#(";" 0 1 (fontified t)) . 127) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (t 26071 6362 993086 233000)) nil (26071 6375 251638 938000) 0 nil])
([nil nil ((159 . 160) (t 26071 6375 263085 936000)) nil (26071 6387 252427 498000) 0 nil])
([nil nil ((150 . 159) (#("co" 0 2 (fontified nil)) . 150) (150 . 152) (#("constexpr" 0 9 (fontified nil)) . -150) (150 . 159) (#("cons" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . -150) (undo-tree-id3683 . -4) (undo-tree-id3684 . -4) 154 (150 . 154) (150 . 151) (t 26071 6387 269752 308000)) nil (26071 6554 924636 592000) 0 nil])
([nil nil ((180 . 186) (171 . 180) (#("co" 0 2 (fontified nil)) . 171) (171 . 173) (#("constexpr" 0 9 (fontified nil)) . -171) (171 . 180) (#("con" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -171) (undo-tree-id3685 . -3) (undo-tree-id3686 . -3) 174 (171 . 174) (170 . 171) (167 . 170) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -167) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -168) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (#("=" 0 1 (fontified t)) . -169) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (#("T" 0 1 (fontified t)) . -170) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (#("o" 0 1 (fontified t)) . -171) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (#("k" 0 1 (fontified t)) . -172) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (#("1" 0 1 (fontified t)) . -173) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (#(";" 0 1 (fontified t)) . -174) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) 175 (137 . 139) (apply yas--snippet-revive 128 137 #s(yas--snippet nil nil #s(yas--exit 137 nil) 56 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 137 nil) 56 nil nil nil nil)) (128 . 137) (#("typename $0" 0 11 (fontified nil)) . 128) (nil fontified nil 128 . 139) (128 . 139) (#("ty" 0 2 (fontified nil)) . 128) (nil fontified nil 128 . 130) (128 . 130) (#("typename name" 0 13 (fontified nil)) . -128) (nil fontified nil 128 . 141) (128 . 141) (#("ty" 0 1 (fontified t) 1 2 (fontified t)) . -128) (undo-tree-id3717 . -2) 130 (128 . 130) (#("T" 0 1 (fontified t face font-lock-type-face)) . -128) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (#(" " 0 1 (fontified t)) . 129) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) 130 (#("T" 0 1 (fontified t face font-lock-variable-name-face)) . -130) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -131) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -132) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . -133) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) 134 (t 26071 6554 936414 918000)) nil (26071 6672 30239 885000) 0 nil])
([nil nil ((186 . 187) (t 26071 6672 43078 759000)) nil (26071 6706 720545 613000) 0 nil])
([nil nil ((#("constexpr " 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t)) . 171) (undo-tree-id3736 . -9) (t 26071 6706 733077 913000)) nil (26071 6768 548540 90000) 0 nil])
([nil nil ((#("constexpr " 0 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t)) . 155) (undo-tree-id3730 . -9) (undo-tree-id3731 . -9) (undo-tree-id3732 . -9) (undo-tree-id3733 . -9) (undo-tree-id3734 . -9) (undo-tree-id3735 . -10)) nil (26071 6768 548535 848000) 0 nil])
([nil nil ((172 . 175) (t 26071 6768 563076 417000) 171) nil (26071 6848 442575 731000) 0 nil])
([nil nil ((175 . 176)) nil (26071 6848 442575 228000) 0 nil])
([nil nil ((apply yas--snippet-revive 175 185 #s(yas--snippet nil nil #s(yas--exit 184 nil) 57 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 184 nil) 57 nil nil nil nil)) (175 . 185) (#("template<$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 175) (175 . 187) (#("t" 0 1 (fontified nil)) . 175) (175 . 176) (#("template<parameters>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -175) (175 . 195) (#("t" 0 1 (fontified t)) . -175) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) 176) nil (26071 6848 442574 115000) 0 nil])
([nil nil ((184 . 186)) nil (26071 6848 442571 914000) 0 nil])
([nil nil ((apply yas--snippet-revive 184 193 #s(yas--snippet nil nil #s(yas--exit 193 nil) 58 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 193 nil) 58 nil nil nil nil)) (184 . 193) (#("typename $0" 0 11 (fontified nil)) . 184) (nil fontified nil 184 . 195) (nil face (rainbow-delimiters-depth-2-face) 184 . 195) (184 . 195) (#("ty" 0 2 (fontified nil)) . 184) (nil fontified nil 184 . 186) (nil face (rainbow-delimiters-depth-2-face) 184 . 186) (184 . 186) (#("typename name" 0 13 (fontified nil)) . -184) (nil fontified nil 184 . 197) (nil face (rainbow-delimiters-depth-2-face) 184 . 197) (184 . 197) (#("ty" 0 1 (fontified t) 1 2 (fontified t)) . -184) (undo-tree-id3742 . -2) 186) nil (26071 6848 442570 628000) 0 nil])
([nil nil ((193 . 194)) nil (26071 6848 442568 722000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t) 1 2 (fontified t)) . 192) (undo-tree-id3740 . -2) (undo-tree-id3741 . -2) 194) nil (26071 6848 442568 190000) 0 nil])
([nil nil ((192 . 194)) nil (26071 6848 442566 532000) 0 nil])
([nil nil ((183 . 184)) nil (26071 6848 442566 237000) 0 nil])
([nil nil ((196 . 199)) nil (26071 6848 442565 814000) 0 nil])
([nil nil ((199 . 201)) nil (26071 6848 442565 414000) 0 nil])
([nil nil ((199 . 205) (#("st" 0 2 (fontified nil)) . 199) (199 . 201) (#("struct" 0 6 (fontified nil)) . -199) (199 . 205) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -199) (undo-tree-id3738 . -2) (undo-tree-id3739 . -2) 201) nil (26071 6848 442564 386000) 0 nil])
([nil nil ((205 . 209)) nil (26071 6848 442562 170000) 0 nil])
([nil nil ((209 . 211)) nil (26071 6848 442561 879000) 0 nil])
([nil nil ((210 . 212)) nil (26071 6848 442561 471000) 0 nil])
([nil nil ((apply yas--snippet-revive 210 219 #s(yas--snippet nil nil #s(yas--exit 219 nil) 59 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 219 nil) 59 nil nil nil nil)) (210 . 219) (#("typename $0" 0 11 (fontified nil)) . 210) (nil fontified nil 210 . 221) (nil face (rainbow-delimiters-depth-2-face) 210 . 221) (210 . 221) (#("ty" 0 2 (fontified nil)) . 210) (nil fontified nil 210 . 212) (nil face (rainbow-delimiters-depth-2-face) 210 . 212) (210 . 212) (#("typename name" 0 13 (fontified nil)) . -210) (nil fontified nil 210 . 223) (nil face (rainbow-delimiters-depth-2-face) 210 . 223) (210 . 223) (#("ty" 0 1 (fontified t) 1 2 (fontified t)) . -210) (undo-tree-id3737 . -2) 212) nil (26071 6848 442559 595000) 0 nil])
([nil nil ((219 . 220)) nil (26071 6848 442552 755000) 0 nil])
([nil nil ((220 . 222)) nil (26071 6848 442552 372000) 0 nil])
([nil nil ((222 . 227)) nil (26071 6848 442551 818000) 0 nil])
([nil nil ((227 . 230)) nil (26071 6848 442551 446000) 0 nil])
([nil nil ((230 . 232)) nil (26071 6848 442551 76000) 0 nil])
([nil nil ((232 . 235)) nil (26071 6848 442550 608000) 0 nil])
([nil nil ((235 . 236)) nil (26071 6848 442550 33000) 0 nil])
([nil nil ((237 . 238)) nil (26071 6889 196455 678000) 0 nil])
([nil nil ((#("typename::" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t)) . 222) (undo-tree-id4234 . -9) (undo-tree-id4235 . -8) (undo-tree-id4236 . -8) (undo-tree-id4237 . -10)) nil (26071 6905 874993 558000) 0 nil] [nil nil ((#("t" 0 1 (fontified t face font-lock-constant-face)) . -210) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3748 . -1) (undo-tree-id3750 . -1) (undo-tree-id3752 . -1) (undo-tree-id3754 . -1) (undo-tree-id3756 . -1) (undo-tree-id3758 . -1) (undo-tree-id3760 . -1) (undo-tree-id3762 . -1) (undo-tree-id3764 . -1) (undo-tree-id3766 . -1) (undo-tree-id3768 . -1) (undo-tree-id3770 . -1) (undo-tree-id3772 . -1) (undo-tree-id3774 . -1) (undo-tree-id3776 . -1) (undo-tree-id3778 . -1) (undo-tree-id3780 . -1) (undo-tree-id3782 . -1) (undo-tree-id3784 . -1) (undo-tree-id3786 . -1) (undo-tree-id3788 . -1) (undo-tree-id3790 . -1) (undo-tree-id3792 . -1) (undo-tree-id3794 . -1) (undo-tree-id3796 . -1) (undo-tree-id3798 . -1) (undo-tree-id3800 . -1) (undo-tree-id3802 . -1) (undo-tree-id3804 . -1) (undo-tree-id3806 . -1) (undo-tree-id3808 . -1) (undo-tree-id3810 . -1) (undo-tree-id3812 . -1) (undo-tree-id3814 . -1) (undo-tree-id3816 . -1) (undo-tree-id3818 . -1) (undo-tree-id3820 . -1) (undo-tree-id3822 . -1) (undo-tree-id3824 . -1) (undo-tree-id3826 . -1) (undo-tree-id3828 . -1) (undo-tree-id3830 . -1) (undo-tree-id3832 . -1) (undo-tree-id3834 . -1) (undo-tree-id3836 . -1) (undo-tree-id3838 . -1) (undo-tree-id3840 . -1) (undo-tree-id3842 . -1) (undo-tree-id3844 . -1) (undo-tree-id3846 . -1) (undo-tree-id3848 . -1) (undo-tree-id3850 . -1) (undo-tree-id3852 . -1) (undo-tree-id3854 . -1) (undo-tree-id3856 . -1) (undo-tree-id3858 . -1) (undo-tree-id3860 . -1) (undo-tree-id3862 . -1) (undo-tree-id3864 . -1) (undo-tree-id3866 . -1) (undo-tree-id3868 . -1) (undo-tree-id3870 . -1) (undo-tree-id3872 . -1) (undo-tree-id3874 . -1) (undo-tree-id3876 . -1) (undo-tree-id3878 . -1) (undo-tree-id3880 . -1) (undo-tree-id3882 . -1) (undo-tree-id3884 . -1) (undo-tree-id3886 . -1) (undo-tree-id3888 . -1) (undo-tree-id3890 . -1) (undo-tree-id3892 . -1) (undo-tree-id3894 . -1) (undo-tree-id3896 . -1) (undo-tree-id3898 . -1) (undo-tree-id3900 . -1) (undo-tree-id3902 . -1) (undo-tree-id3904 . -1) (undo-tree-id3906 . -1) (undo-tree-id3908 . -1) (undo-tree-id3910 . -1) (undo-tree-id3912 . -1) (undo-tree-id3914 . -1) (undo-tree-id3916 . -1) (undo-tree-id3918 . -1) (undo-tree-id3920 . -1) (undo-tree-id3922 . -1) (undo-tree-id3924 . -1) (undo-tree-id3926 . -1) (undo-tree-id3928 . -1) (undo-tree-id3930 . -1) (undo-tree-id3932 . -1) (undo-tree-id3934 . -1) (undo-tree-id3936 . -1) (undo-tree-id3938 . -1) (undo-tree-id3940 . -1) (undo-tree-id3942 . -1) (undo-tree-id3944 . -1) (undo-tree-id3946 . -1) (undo-tree-id3948 . -1) (undo-tree-id3950 . -1) (undo-tree-id3952 . -1) (undo-tree-id3954 . -1) (undo-tree-id3956 . -1) (undo-tree-id3958 . -1) (undo-tree-id3960 . -1) (undo-tree-id3962 . -1) (undo-tree-id3964 . -1) (undo-tree-id3966 . -1) (undo-tree-id3968 . -1) (undo-tree-id3970 . -1) (undo-tree-id3972 . -1) (undo-tree-id3974 . -1) (undo-tree-id3976 . -1) (undo-tree-id3978 . -1) (undo-tree-id3980 . -1) (#("y" 0 1 (fontified t face font-lock-constant-face)) . -211) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3985 . -1) (undo-tree-id3987 . -1) (undo-tree-id3989 . -1) (undo-tree-id3991 . -1) (undo-tree-id3993 . -1) (undo-tree-id3995 . -1) (undo-tree-id3997 . -1) (undo-tree-id3999 . -1) (undo-tree-id4001 . -1) (undo-tree-id4003 . -1) (undo-tree-id4005 . -1) (undo-tree-id4007 . -1) (undo-tree-id4009 . -1) (undo-tree-id4011 . -1) (undo-tree-id4013 . -1) (undo-tree-id4015 . -1) (undo-tree-id4017 . -1) (undo-tree-id4019 . -1) (undo-tree-id4021 . -1) (undo-tree-id4023 . -1) (undo-tree-id4025 . -1) (undo-tree-id4027 . -1) (undo-tree-id4029 . -1) (undo-tree-id4031 . -1) (undo-tree-id4033 . -1) (undo-tree-id4035 . -1) (undo-tree-id4037 . -1) (undo-tree-id4039 . -1) (undo-tree-id4041 . -1) (undo-tree-id4043 . -1) (undo-tree-id4045 . -1) (undo-tree-id4047 . -1) (undo-tree-id4049 . -1) (undo-tree-id4051 . -1) (undo-tree-id4053 . -1) (undo-tree-id4055 . -1) (undo-tree-id4057 . -1) (undo-tree-id4059 . -1) (undo-tree-id4061 . -1) (undo-tree-id4063 . -1) (undo-tree-id4065 . -1) (undo-tree-id4067 . -1) (undo-tree-id4069 . -1) (undo-tree-id4071 . -1) (undo-tree-id4073 . -1) (undo-tree-id4075 . -1) (undo-tree-id4077 . -1) (undo-tree-id4079 . -1) (undo-tree-id4081 . -1) (undo-tree-id4083 . -1) (undo-tree-id4085 . -1) (undo-tree-id4087 . -1) (undo-tree-id4089 . -1) (undo-tree-id4091 . -1) (undo-tree-id4093 . -1) (undo-tree-id4095 . -1) (undo-tree-id4097 . -1) (undo-tree-id4099 . -1) (undo-tree-id4101 . -1) (undo-tree-id4103 . -1) (undo-tree-id4105 . -1) (undo-tree-id4107 . -1) (undo-tree-id4109 . -1) (undo-tree-id4111 . -1) (undo-tree-id4113 . -1) (undo-tree-id4115 . -1) (undo-tree-id4117 . -1) (undo-tree-id4119 . -1) (undo-tree-id4121 . -1) (undo-tree-id4123 . -1) (undo-tree-id4125 . -1) (undo-tree-id4127 . -1) (undo-tree-id4129 . -1) (undo-tree-id4131 . -1) (undo-tree-id4133 . -1) (undo-tree-id4135 . -1) (undo-tree-id4137 . -1) (undo-tree-id4139 . -1) (#("p" 0 1 (fontified t face font-lock-constant-face)) . -212) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4144 . -1) (undo-tree-id4146 . -1) (undo-tree-id4148 . -1) (undo-tree-id4150 . -1) (undo-tree-id4152 . -1) (undo-tree-id4154 . -1) (undo-tree-id4156 . -1) (undo-tree-id4158 . -1) (undo-tree-id4160 . -1) (undo-tree-id4162 . -1) (undo-tree-id4164 . -1) (undo-tree-id4166 . -1) (undo-tree-id4168 . -1) (undo-tree-id4170 . -1) (undo-tree-id4172 . -1) (undo-tree-id4174 . -1) (undo-tree-id4176 . -1) (undo-tree-id4178 . -1) (undo-tree-id4180 . -1) (undo-tree-id4182 . -1) (undo-tree-id4184 . -1) (undo-tree-id4186 . -1) (undo-tree-id4188 . -1) (undo-tree-id4190 . -1) (undo-tree-id4192 . -1) (undo-tree-id4194 . -1) (undo-tree-id4196 . -1) (undo-tree-id4198 . -1) (undo-tree-id4200 . -1) (undo-tree-id4202 . -1) (undo-tree-id4204 . -1) (undo-tree-id4206 . -1) (undo-tree-id4208 . -1) (undo-tree-id4210 . -1) (undo-tree-id4212 . -1) (undo-tree-id4214 . -1) (undo-tree-id4216 . -1) (undo-tree-id4218 . -1) (undo-tree-id4220 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -213) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -214) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -215) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -216) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -217) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) 218 (#(" " 0 1 (fontified t)) . 218) (undo-tree-id4233 . -1) 219 (t 26071 6848 463074 472000)) ((210 . 219) (t 26071 6868 609740 651000)) (26071 6868 583896 55000) 0 nil])
([nil nil ((226 . 229) (225 . 226) (#("=" 0 1 (fontified t)) . -225) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) 226 (225 . 226) (t 26071 6905 889739 744000)) nil (26071 6922 514847 522000) 0 nil])
nil
([nil nil ((226 . 227) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -226) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (#("h" 0 1 (fontified t face font-lock-variable-name-face)) . -227) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) 228 (226 . 228) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -226) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -227) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -228) (undo-tree-id4458 . -1) 229 (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -228) (undo-tree-id4459 . -1) 229 (228 . 229) (t 26071 6922 529739 342000)) nil (26071 6973 855080 748000) 0 nil])
([nil nil ((nil rear-nonsticky nil 232 . 233) (#("
" 0 1 (fontified nil)) . -288) (230 . 289) 219 (t 26071 6973 869738 106000)) nil (26071 7006 287675 406000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -231) (undo-tree-id4461 . -2) (undo-tree-id4462 . -2) 233 (231 . 233) (231 . 232) 233) nil (26071 7006 287673 732000) 0 nil])
([nil nil ((266 . 267) (#("a" 0 1 (fontified t face font-lock-type-face)) . 266)) nil (26071 7006 287668 657000) 0 nil])
([nil nil ((282 . 283) (#("a" 0 1 (fontified t face font-lock-type-face)) . 282) (undo-tree-id4460 . -1)) nil (26071 7006 287664 926000) 0 nil])
([nil nil ((289 . 292) (t 26071 7006 303070 662000) 272) nil (26071 7206 692428 703000) 0 nil])
([nil nil ((290 . 293) (#("  " 0 2 (fontified t)) . 290) (undo-tree-id4537 . -2) (undo-tree-id4538 . -2) 292) nil (26071 7206 692428 50000) 0 nil])
([nil nil ((293 . 295)) nil (26071 7206 692426 651000) 0 nil])
([nil nil ((apply yas--snippet-revive 293 303 #s(yas--snippet nil nil #s(yas--exit 302 nil) 60 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 302 nil) 60 nil nil nil nil)) (293 . 303) (#("template<$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 293) (293 . 305) (#("te" 0 2 (fontified nil)) . 293) (293 . 295) (#("template<parameters>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -293) (293 . 313) (#("te" 0 1 (fontified t) 1 2 (fontified t)) . -293) (undo-tree-id4535 . -2) (undo-tree-id4536 . -2) 295) nil (26071 7206 692425 749000) 0 nil])
([nil nil ((301 . 302)) nil (26071 7206 692423 897000) 0 nil])
([nil nil ((303 . 305)) nil (26071 7206 692423 603000) 0 nil])
([nil nil ((apply yas--snippet-revive 303 312 #s(yas--snippet nil nil #s(yas--exit 312 nil) 61 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 312 nil) 61 nil nil nil nil)) (303 . 312) (#("typename $0" 0 11 (fontified nil)) . 303) (nil fontified nil 303 . 314) (nil face (rainbow-delimiters-depth-2-face) 303 . 314) (303 . 314) (#("ty" 0 2 (fontified nil)) . 303) (nil fontified nil 303 . 305) (nil face (rainbow-delimiters-depth-2-face) 303 . 305) (303 . 305) (#("typename name" 0 13 (fontified nil)) . -303) (nil fontified nil 303 . 316) (nil face (rainbow-delimiters-depth-2-face) 303 . 316) (303 . 316) (#("ty" 0 1 (fontified t) 1 2 (fontified t)) . -303) (undo-tree-id4534 . -2) 305) nil (26071 7206 692422 526000) 0 nil])
([nil nil ((312 . 313)) nil (26071 7206 692420 797000) 0 nil])
([nil nil ((313 . 314)) nil (26071 7206 692420 435000) 0 nil])
([nil nil ((314 . 315)) nil (26071 7206 692420 75000) 0 nil])
([nil nil ((apply yas--snippet-revive 314 323 #s(yas--snippet nil nil #s(yas--exit 323 nil) 62 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 323 nil) 62 nil nil nil nil)) (314 . 323) (#("template $0" 0 11 (fontified nil)) . 314) (nil fontified nil 314 . 325) (314 . 325) (#("t" 0 1 (fontified nil)) . 314) (nil fontified nil 314 . 315) (314 . 315) (#("template declaration" 0 20 (fontified nil)) . -314) (nil fontified nil 314 . 334) (314 . 334) (#("t" 0 1 (fontified t)) . -314) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) 315) nil (26071 7206 692418 555000) 0 nil])
([nil nil ((324 . 325) (#("]" 0 1 (fontified nil face (rainbow-delimiters-mismatched-face))) . -324) (323 . 325) (#("]" 0 1 (fontified nil)) . -323) (323 . 324)) nil (26071 7206 692416 8000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -323) (undo-tree-id4526 . -1) (undo-tree-id4527 . 1) (undo-tree-id4528 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-unmatched-face))) . -324) (undo-tree-id4529 . -1) (undo-tree-id4530 . 1) (undo-tree-id4531 . -1) 325) nil (26071 7206 692414 914000) 0 nil])
([nil nil ((323 . 324)) nil (26071 7206 692411 118000) 0 nil])
([nil nil ((324 . 330)) nil (26071 7206 692410 831000) 0 nil])
([nil nil ((331 . 334)) nil (26071 7206 692410 541000) 0 nil])
([nil nil ((334 . 337)) nil (26071 7206 692410 252000) 0 nil])
([nil nil ((334 . 340) (#("st" 0 2 (fontified nil)) . 334) (334 . 336) (#("struct" 0 6 (fontified nil)) . -334) (334 . 340) (#("str" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -334) (undo-tree-id4525 . -3) 337) nil (26071 7206 692409 102000) 0 nil])
([nil nil ((340 . 341)) nil (26071 7206 692406 336000) 0 nil])
([nil nil ((341 . 345)) nil (26071 7206 692406 23000) 0 nil])
([nil nil ((345 . 346)) nil (26071 7206 692405 705000) 0 nil])
([nil nil ((346 . 347)) nil (26071 7206 692405 389000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-type-face)) . -346) (undo-tree-id4524 . -1) 347) nil (26071 7206 692404 853000) 0 nil])
([nil nil ((346 . 350)) nil (26071 7206 692403 980000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 351 352 nil nil nil t #s(yas--field 2 354 361 nil nil nil t nil)) #s(yas--field 2 354 361 nil nil nil t nil)) nil 63 nil #s(yas--field 2 354 361 nil nil nil t nil) nil nil)) (346 . 375) (#("cons<${1:typename T}, ${2:typename T1}>" 0 39 (fontified nil)) . 346) (346 . 385) (#("co" 0 2 (fontified nil)) . 346) (346 . 348) (#("cons<typename T, typename T1>" 0 4 (fontified nil) 4 5 (syntax-table (4 . 62) fontified nil) 5 15 (fontified nil) 15 16 (c-type c-<>-arg-sep fontified nil) 16 28 (fontified nil) 28 29 (syntax-table (5 . 60) fontified nil)) . -346) (346 . 375) (#("cons" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . -346) (undo-tree-id4522 . -4) (undo-tree-id4523 . -4) 350) nil (26071 7206 692403 4000) 0 nil])
([nil nil ((#("typename T" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 10 (fontified nil face font-lock-type-face)) . 352) (351 . 352)) nil (26071 7206 692400 648000) 0 nil])
([nil nil ((355 . 359) (#("typename T1" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 355) (354 . 355)) nil (26071 7206 692399 817000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -358) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) 359) nil (26071 7206 692399 49000) 0 nil])
([nil nil ((358 . 360)) nil (26071 7206 692397 320000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -358) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (#("g" 0 1 (fontified t)) . -359) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) 360) nil (26071 7206 692396 280000) 0 nil])
([nil nil ((358 . 361)) nil (26071 7206 692393 551000) 0 nil])
([nil nil ((apply yas--snippet-revive 346 362 #s(yas--snippet nil (#s(yas--field 1 351 352 nil nil nil t #s(yas--field 2 354 361 nil nil nil t nil)) #s(yas--field 2 354 361 nil nil nil t nil)) nil 63 nil #s(yas--field 2 354 361 nil nil nil t nil) nil nil))) nil (26071 7206 692393 157000) 0 nil])
([nil nil ((362 . 364)) nil (26071 7206 692392 866000) 0 nil])
([nil nil ((364 . 365)) nil (26071 7206 692392 547000) 0 nil])
([nil nil ((365 . 368)) nil (26071 7206 692391 980000) 0 nil])
([nil nil ((366 . 369) (#("  " 0 2 (fontified t)) . 366) (undo-tree-id4463 . -2) (undo-tree-id4464 . -2) (undo-tree-id4465 . -2) (undo-tree-id4466 . -2) (undo-tree-id4467 . -2) (undo-tree-id4468 . -2) (undo-tree-id4469 . -2) (undo-tree-id4470 . -2) (undo-tree-id4471 . -2) (undo-tree-id4472 . -2) (undo-tree-id4473 . -2) (undo-tree-id4474 . -2) (undo-tree-id4475 . -2) (undo-tree-id4476 . -2) (undo-tree-id4477 . -2) (undo-tree-id4478 . -2) (undo-tree-id4479 . -2) (undo-tree-id4480 . -2) (undo-tree-id4481 . -2) (undo-tree-id4482 . -2) (undo-tree-id4483 . -2) (undo-tree-id4484 . -2) (undo-tree-id4485 . -2) (undo-tree-id4486 . -2) (undo-tree-id4487 . -2) (undo-tree-id4488 . -2) (undo-tree-id4489 . -2) (undo-tree-id4490 . -2) (undo-tree-id4491 . -2) (undo-tree-id4492 . -2) (undo-tree-id4493 . -2) (undo-tree-id4494 . -2) (undo-tree-id4495 . -2) (undo-tree-id4496 . -2) (undo-tree-id4497 . -2) (undo-tree-id4498 . -2) (undo-tree-id4499 . -2) (undo-tree-id4500 . -2) (undo-tree-id4501 . -2) (undo-tree-id4502 . -2) (undo-tree-id4503 . -2) (undo-tree-id4504 . -2) (undo-tree-id4505 . -2) (undo-tree-id4506 . -2) (undo-tree-id4507 . -2) (undo-tree-id4508 . -2) (undo-tree-id4509 . -2) (undo-tree-id4510 . -2) (undo-tree-id4511 . -2) (undo-tree-id4512 . -2) (undo-tree-id4513 . -2) (undo-tree-id4514 . -2) (undo-tree-id4515 . -2) 368) nil (26071 7206 692388 204000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -358) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . 1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) 359 (apply yas--snippet-revive 354 359 #s(yas--snippet nil (#s(yas--field 1 358 358 nil nil nil t nil)) nil 64 nil #s(yas--field 1 358 358 nil nil nil t nil) nil nil)) (#("<" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -358) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . 1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) 359 (#("typename T" 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 10 (fontified t face font-lock-type-face)) . 359) (undo-tree-id4653 . -10) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 358 358 nil nil nil t nil)) nil 64 nil #s(yas--field 1 358 358 nil nil nil t nil) nil nil)) (354 . 370) (#("list<${1:typename T}>" 0 21 (fontified nil)) . 354) (354 . 375) (#("l" 0 1 (fontified nil)) . 354) (354 . 355) (#("list<typename T>" 0 4 (fontified nil) 4 5 (syntax-table (4 . 62) fontified nil) 5 15 (fontified nil) 15 16 (syntax-table (5 . 60) fontified nil)) . -354) (354 . 370) (#("l" 0 1 (fontified t face font-lock-type-face)) . -354) (undo-tree-id4654 . -1) 355 (#("i" 0 1 (fontified t face font-lock-type-face)) . -355) (undo-tree-id4655 . -1) 356 (354 . 356) (354 . 355) (361 . 362) (t 26071 7206 706399 134000)) nil (26071 7243 245134 913000) 0 nil])
([nil nil ((#("..." 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 359) (undo-tree-id4656 . -2) (undo-tree-id4657 . -3) (undo-tree-id4658 . -3) (t 26071 7243 263064 926000)) nil (26071 7271 692108 926000) 0 nil])
([nil nil ((nil rear-nonsticky nil 365 . 366) (nil fontified nil 363 . 366) (363 . 366) 362) nil (26071 7271 692099 16000) 0 nil])
([nil nil ((#("template " 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t)) . 314) (undo-tree-id4765 . -8) (undo-tree-id4766 . -9) (undo-tree-id4767 . -2) (undo-tree-id4768 . -2) (undo-tree-id4769 . -2) (undo-tree-id4770 . -2) (undo-tree-id4771 . -2) (undo-tree-id4772 . -2) (undo-tree-id4773 . -2) (undo-tree-id4774 . -2) (undo-tree-id4775 . -2) (undo-tree-id4776 . -2) (undo-tree-id4777 . -2) (undo-tree-id4778 . -2) (undo-tree-id4779 . -2) (undo-tree-id4780 . -2) (undo-tree-id4781 . -2) (undo-tree-id4782 . -2) (undo-tree-id4783 . -2) (undo-tree-id4784 . -2) (undo-tree-id4785 . -2) (undo-tree-id4786 . -2) (undo-tree-id4787 . -2) (undo-tree-id4788 . -2) (undo-tree-id4789 . -2) (undo-tree-id4790 . -2) (undo-tree-id4791 . -2) (undo-tree-id4792 . -2) (undo-tree-id4793 . -2) (undo-tree-id4794 . -2) (undo-tree-id4795 . -2) (undo-tree-id4796 . -2) (undo-tree-id4797 . -2) (undo-tree-id4798 . -2) (undo-tree-id4799 . -2) (undo-tree-id4800 . -2) (undo-tree-id4801 . -2) (undo-tree-id4802 . -2) (undo-tree-id4803 . -2) (undo-tree-id4804 . -2) (undo-tree-id4805 . -2) (undo-tree-id4806 . -2) (undo-tree-id4807 . -2) (undo-tree-id4808 . -2) (undo-tree-id4809 . -2) (undo-tree-id4810 . -2) (undo-tree-id4811 . -2) (undo-tree-id4812 . -2) (undo-tree-id4813 . -2) (undo-tree-id4814 . -2) (undo-tree-id4815 . -2) (undo-tree-id4816 . -2) (undo-tree-id4817 . -2) (undo-tree-id4818 . -2) (undo-tree-id4819 . -2) (undo-tree-id4820 . -2) (undo-tree-id4821 . -2) (undo-tree-id4822 . -2) (undo-tree-id4823 . -2) (undo-tree-id4824 . -2) (undo-tree-id4825 . -2) (undo-tree-id4826 . -2) (undo-tree-id4827 . -2) (undo-tree-id4828 . -2) (undo-tree-id4829 . -2) (undo-tree-id4830 . -2) (undo-tree-id4831 . -2) (undo-tree-id4832 . -2) (undo-tree-id4833 . -2) (undo-tree-id4834 . -2) (undo-tree-id4835 . -2) (undo-tree-id4836 . -2) (undo-tree-id4837 . -2) (undo-tree-id4838 . -2) (undo-tree-id4839 . -2) (undo-tree-id4840 . -2) (undo-tree-id4841 . -2) (undo-tree-id4842 . -2) (undo-tree-id4843 . -2) (undo-tree-id4844 . -2) (undo-tree-id4845 . -2) (undo-tree-id4846 . -2) (undo-tree-id4847 . -2) (undo-tree-id4848 . -2) (undo-tree-id4849 . -2) (undo-tree-id4850 . -2) (undo-tree-id4851 . -2) (undo-tree-id4852 . -2) (undo-tree-id4853 . -2) (undo-tree-id4854 . -2) (undo-tree-id4855 . -2) (undo-tree-id4856 . -2) (undo-tree-id4857 . -2) (undo-tree-id4858 . -2) (undo-tree-id4859 . -2) (undo-tree-id4860 . -2) (undo-tree-id4861 . -2) (undo-tree-id4862 . -2) (undo-tree-id4863 . -2) (undo-tree-id4864 . -2) (undo-tree-id4865 . -2) (undo-tree-id4866 . -2) (undo-tree-id4867 . -2) (undo-tree-id4868 . -2) (undo-tree-id4869 . -2) (undo-tree-id4870 . -2) (undo-tree-id4871 . -2) (undo-tree-id4872 . -2) (undo-tree-id4873 . -2) (undo-tree-id4874 . -2) (undo-tree-id4875 . -2) (undo-tree-id4876 . -2) (undo-tree-id4877 . -2) (undo-tree-id4878 . -2) (undo-tree-id4879 . -2) (undo-tree-id4880 . -2) (undo-tree-id4881 . -2) (undo-tree-id4882 . -2) (undo-tree-id4883 . -2) (undo-tree-id4884 . -2) (undo-tree-id4885 . -2) (undo-tree-id4886 . -2) (undo-tree-id4887 . -2) (undo-tree-id4888 . -2) (undo-tree-id4889 . -2) (undo-tree-id4890 . -2) (undo-tree-id4891 . -2) (undo-tree-id4892 . -2) (undo-tree-id4893 . -2) (undo-tree-id4894 . -2) (undo-tree-id4895 . -2) (undo-tree-id4896 . -2) (undo-tree-id4897 . -2) (undo-tree-id4898 . -2) (undo-tree-id4899 . -2) (undo-tree-id4900 . -2) (undo-tree-id4901 . -2) (undo-tree-id4902 . -2) (undo-tree-id4903 . -2) (undo-tree-id4904 . -2) (undo-tree-id4905 . -2) (undo-tree-id4906 . -2) (undo-tree-id4907 . -2) (undo-tree-id4908 . -2) (undo-tree-id4909 . -2) (undo-tree-id4910 . -2) (undo-tree-id4911 . -2) (undo-tree-id4912 . -2) (undo-tree-id4913 . -2) (undo-tree-id4914 . -2) (undo-tree-id4915 . -2) (undo-tree-id4916 . -2) (undo-tree-id4917 . -2) (undo-tree-id4918 . -2) (undo-tree-id4919 . -2) (undo-tree-id4920 . -2) (undo-tree-id4921 . -2) (undo-tree-id4922 . -2) (undo-tree-id4923 . -2) (undo-tree-id4924 . -2) (undo-tree-id4925 . -2) (undo-tree-id4926 . -2) (undo-tree-id4927 . -2) (undo-tree-id4928 . -2) (undo-tree-id4929 . -2) (undo-tree-id4930 . -2) (undo-tree-id4931 . -2) (undo-tree-id4932 . -2) (undo-tree-id4933 . -2) (undo-tree-id4934 . -2) (undo-tree-id4935 . -2) (undo-tree-id4936 . -2) (undo-tree-id4937 . -2) (undo-tree-id4938 . -2) (undo-tree-id4939 . -2) (undo-tree-id4940 . -2) (undo-tree-id4941 . -2) (undo-tree-id4942 . -2) (undo-tree-id4943 . -2) (undo-tree-id4944 . -2) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -9) (undo-tree-id4970 . -9) (t 26071 7271 709730 910000)) nil (26071 7314 571940 623000) 0 nil])
([nil nil ((314 . 315)) nil (26071 7314 571738 260000) 0 nil])
([nil nil ((314 . 316)) nil (26071 7314 571737 908000) 0 nil])
([nil nil ((apply yas--snippet-revive 314 323 #s(yas--snippet nil nil #s(yas--exit 323 nil) 65 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 323 nil) 65 nil nil nil nil)) (314 . 323) (#("typename $0" 0 11 (fontified nil)) . 314) (314 . 325) (#("ty" 0 2 (fontified nil)) . 314) (314 . 316) (#("typename name" 0 13 (fontified nil)) . -314) (314 . 327) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -314) (undo-tree-id4764 . -2) 316) nil (26071 7314 571736 663000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 322) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) 323) nil (26071 7314 571730 172000) 0 nil])
([nil nil ((375 . 376) (t 26071 7314 593063 207000)) nil (26071 7361 283249 509000) 0 nil])
([nil nil ((apply yas--snippet-revive 375 385 #s(yas--snippet nil nil #s(yas--exit 384 nil) 66 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 384 nil) 66 nil nil nil nil)) (375 . 385) (#("template<$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 375) (375 . 387) (#("t" 0 1 (fontified nil)) . 375) (375 . 376) (#("template<parameters>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -375) (375 . 395) (#("t" 0 1 (fontified t)) . -375) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) 376) nil (26071 7361 283247 587000) 0 nil])
([nil nil ((383 . 384)) nil (26071 7361 283243 604000) 0 nil])
([nil nil ((385 . 386)) nil (26071 7361 283242 931000) 0 nil])
([nil nil ((387 . 390)) nil (26071 7361 283242 6000) 0 nil])
([nil nil ((390 . 392)) nil (26071 7361 283241 315000) 0 nil])
([nil nil ((390 . 396) (#("st" 0 2 (fontified nil)) . 390) (390 . 392) (#("static" 0 6 (fontified nil)) . -390) (390 . 396) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -390) (undo-tree-id4975 . -2) 392) nil (26071 7361 283239 898000) 0 nil])
([nil nil ((396 . 401)) nil (26071 7361 283237 85000) 0 nil])
([nil nil ((401 . 403)) nil (26071 7361 283236 186000) 0 nil])
([nil nil ((403 . 407)) nil (26071 7361 283234 905000) 0 nil])
([nil nil ((407 . 409)) nil (26071 7361 283232 591000) 0 nil])
([nil nil ((385 . 386)) nil (26071 7361 283231 541000) 0 nil])
([nil nil ((385 . 387)) nil (26071 7361 283230 328000) 0 nil])
([nil nil ((apply yas--snippet-revive 385 394 #s(yas--snippet nil nil #s(yas--exit 394 nil) 67 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 394 nil) 67 nil nil nil nil)) (385 . 394) (#("typename $0" 0 11 (fontified nil)) . 385) (nil face (rainbow-delimiters-depth-2-face) 385 . 396) (nil fontified nil 385 . 396) (385 . 396) (#("ty" 0 2 (fontified nil)) . 385) (nil face (rainbow-delimiters-depth-2-face) 385 . 387) (nil fontified nil 385 . 387) (385 . 387) (#("typename name" 0 13 (fontified nil)) . -385) (nil face (rainbow-delimiters-depth-2-face) 385 . 398) (nil fontified nil 385 . 398) (385 . 398) (#("ty" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -385) (undo-tree-id4973 . -2) (undo-tree-id4974 . -2) 387) nil (26071 7361 283225 646000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 393) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) 394) nil (26071 7361 283218 877000) 0 nil])
([nil nil ((417 . 418)) nil (26071 7361 283211 657000) 0 nil])
([nil nil ((418 . 419)) nil (26071 7361 283210 676000) 0 nil])
([nil nil ((419 . 423)) nil (26071 7361 283210 245000) 0 nil])
([nil nil ((424 . 426)) nil (26071 7361 283209 581000) 0 nil])
([nil nil ((426 . 427)) nil (26071 7361 283205 890000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -411) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) 412 (t 26071 7361 296395 409000)) nil (26071 7385 612649 660000) 0 nil])
([nil nil ((411 . 412) (410 . 412) (#("M" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -410) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) 411 (410 . 411) (t 26071 7385 633061 483000)) nil (26071 7507 93803 549000) 0 nil])
([nil nil ((415 . 416) (413 . 414) (t 26071 7419 923060 657000)) nil (26071 7512 502934 684000) 0 nil] [nil nil ((429 . 432) (t 26071 7419 923060 657000) 413) ((#("
  " 0 3 (fontified t)) . 429) (undo-tree-id5006 . -3) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -3)) (26071 7507 91537 505000) 0 nil])
([nil nil ((399 . 405) (#("str" 0 3 (fontified nil)) . 399) (399 . 402) (#("struct" 0 6 (fontified nil)) . -399) (399 . 405) (#("str" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -399) (undo-tree-id5011 . -2) (undo-tree-id5012 . -2) (undo-tree-id5013 . -3) (undo-tree-id5014 . -2) (undo-tree-id5015 . -2) (undo-tree-id5016 . -2) (undo-tree-id5017 . -2) (undo-tree-id5018 . -2) (undo-tree-id5019 . -2) (undo-tree-id5020 . -2) (undo-tree-id5021 . -2) (undo-tree-id5022 . -2) (undo-tree-id5023 . -2) (undo-tree-id5024 . -2) (undo-tree-id5025 . -2) (undo-tree-id5026 . -2) (undo-tree-id5027 . -2) (undo-tree-id5028 . -2) (undo-tree-id5029 . -2) (undo-tree-id5030 . -2) (undo-tree-id5031 . -2) (undo-tree-id5032 . -2) (undo-tree-id5033 . -2) (undo-tree-id5034 . -2) (undo-tree-id5035 . -2) (undo-tree-id5036 . -2) (undo-tree-id5037 . -2) (undo-tree-id5038 . -3) (undo-tree-id5039 . -3) (undo-tree-id5040 . -3) (undo-tree-id5041 . -3) (undo-tree-id5042 . -3) (undo-tree-id5043 . -3) (undo-tree-id5044 . -3) (undo-tree-id5045 . -3) (undo-tree-id5046 . -3) (undo-tree-id5047 . -3) (undo-tree-id5048 . -3) (undo-tree-id5049 . -3) (undo-tree-id5050 . -3) (undo-tree-id5051 . -3) (undo-tree-id5052 . -3) (undo-tree-id5053 . -3) (undo-tree-id5054 . -3) (undo-tree-id5055 . -3) (undo-tree-id5056 . -3) (undo-tree-id5057 . -3) (undo-tree-id5058 . -3) (undo-tree-id5059 . -3) (undo-tree-id5060 . -3) (undo-tree-id5061 . -3) (undo-tree-id5062 . -3) (undo-tree-id5063 . -3) (undo-tree-id5064 . -3) (undo-tree-id5065 . -3) (undo-tree-id5066 . -3) (undo-tree-id5067 . -3) (undo-tree-id5068 . -3) (undo-tree-id5069 . -3) (undo-tree-id5070 . -3) (undo-tree-id5071 . -3) (undo-tree-id5072 . -3) (undo-tree-id5073 . -3) (undo-tree-id5074 . -3) (undo-tree-id5075 . -3) (undo-tree-id5076 . -3) (undo-tree-id5077 . -3) (undo-tree-id5078 . -3) (undo-tree-id5079 . -3) (undo-tree-id5080 . -3) (undo-tree-id5081 . -3) (undo-tree-id5082 . -3) (undo-tree-id5083 . -3) (undo-tree-id5084 . -3) (undo-tree-id5085 . -3) (undo-tree-id5086 . -3) (undo-tree-id5087 . -3) (undo-tree-id5088 . -3) (undo-tree-id5089 . -3) (undo-tree-id5090 . -3) (undo-tree-id5091 . -3) (undo-tree-id5092 . -3) (undo-tree-id5093 . -3) (undo-tree-id5094 . -3) (undo-tree-id5095 . -3) (undo-tree-id5096 . -3) (undo-tree-id5097 . -3) (undo-tree-id5098 . -3) (undo-tree-id5099 . -3) (undo-tree-id5100 . -3) (undo-tree-id5101 . -3) (undo-tree-id5102 . -3) (undo-tree-id5103 . -3) (undo-tree-id5104 . -3) (undo-tree-id5105 . -3) (undo-tree-id5106 . -3) (undo-tree-id5107 . -3) (undo-tree-id5108 . -3) (undo-tree-id5109 . -3) (undo-tree-id5110 . -3) (undo-tree-id5111 . -3) (undo-tree-id5112 . -3) (undo-tree-id5113 . -3) (undo-tree-id5114 . -3) (undo-tree-id5115 . -3) (undo-tree-id5116 . -3) (undo-tree-id5117 . -3) (undo-tree-id5118 . -3) (undo-tree-id5119 . -3) (undo-tree-id5120 . -3) (undo-tree-id5121 . -3) (undo-tree-id5122 . -3) (undo-tree-id5123 . -3) (undo-tree-id5124 . -3) (undo-tree-id5125 . -3) (undo-tree-id5126 . -3) (undo-tree-id5127 . -3) (undo-tree-id5128 . -3) (undo-tree-id5129 . -3) (undo-tree-id5130 . -3) (undo-tree-id5131 . -3) (undo-tree-id5132 . -3) (undo-tree-id5133 . -3) (undo-tree-id5134 . -3) (undo-tree-id5135 . -3) (undo-tree-id5136 . -3) (undo-tree-id5137 . -3) (undo-tree-id5138 . -3) (undo-tree-id5139 . -3) (undo-tree-id5140 . -3) (undo-tree-id5141 . -3) (undo-tree-id5142 . -3) (undo-tree-id5143 . -3) (undo-tree-id5144 . -3) (undo-tree-id5145 . -3) (undo-tree-id5146 . -3) (undo-tree-id5147 . -3) (undo-tree-id5148 . -3) (undo-tree-id5149 . -3) (undo-tree-id5150 . -3) (undo-tree-id5151 . -3) (undo-tree-id5152 . -3) (undo-tree-id5153 . -3) (undo-tree-id5154 . -3) (undo-tree-id5155 . -3) (undo-tree-id5156 . -3) (undo-tree-id5157 . -3) (undo-tree-id5158 . -3) (undo-tree-id5159 . -3) (undo-tree-id5160 . -3) (undo-tree-id5161 . -3) (undo-tree-id5162 . -3) (undo-tree-id5163 . -3) (undo-tree-id5164 . -3) (undo-tree-id5165 . -3) (undo-tree-id5166 . -3) (undo-tree-id5167 . -3) (undo-tree-id5168 . -3) (undo-tree-id5169 . -3) (undo-tree-id5170 . -3) (undo-tree-id5171 . -3) (undo-tree-id5172 . -3) (undo-tree-id5173 . -3) (undo-tree-id5174 . -3) (undo-tree-id5175 . -3) (undo-tree-id5176 . -3) (undo-tree-id5177 . -3) (undo-tree-id5178 . -3) (undo-tree-id5179 . -3) (undo-tree-id5180 . -3) (undo-tree-id5181 . -3) (undo-tree-id5182 . -3) (undo-tree-id5183 . -3) (undo-tree-id5184 . -3) (undo-tree-id5185 . -3) (undo-tree-id5186 . -3) (undo-tree-id5187 . -3) (undo-tree-id5188 . -3) (undo-tree-id5189 . -3) (undo-tree-id5190 . -3) (undo-tree-id5191 . -3) (undo-tree-id5192 . -3) (undo-tree-id5193 . -3) (undo-tree-id5194 . -3) (undo-tree-id5195 . -3) (undo-tree-id5196 . -3) (undo-tree-id5197 . -3) (undo-tree-id5198 . -3) (undo-tree-id5199 . -3) (undo-tree-id5200 . -3) (undo-tree-id5201 . -3) (undo-tree-id5202 . -3) (undo-tree-id5203 . -3) (undo-tree-id5204 . -3) (undo-tree-id5205 . -3) (undo-tree-id5206 . -3) (undo-tree-id5207 . -3) (undo-tree-id5208 . -3) (undo-tree-id5209 . -3) (undo-tree-id5210 . -3) (undo-tree-id5211 . -3) (undo-tree-id5212 . -3) (undo-tree-id5213 . -3) (undo-tree-id5214 . -3) (undo-tree-id5215 . -3) (undo-tree-id5216 . -3) (undo-tree-id5217 . -3) (undo-tree-id5218 . -3) (undo-tree-id5219 . -3) (undo-tree-id5220 . -3) (undo-tree-id5221 . -3) (undo-tree-id5222 . -3) (undo-tree-id5223 . -3) (undo-tree-id5224 . -3) (undo-tree-id5225 . -3) (undo-tree-id5226 . -3) (undo-tree-id5227 . -3) (undo-tree-id5228 . -3) (undo-tree-id5229 . -3) (undo-tree-id5230 . -3) (undo-tree-id5231 . -3) (undo-tree-id5232 . -3) (undo-tree-id5233 . -3) (undo-tree-id5234 . -3) (undo-tree-id5235 . -3) (undo-tree-id5236 . -3) (undo-tree-id5237 . -3) (undo-tree-id5238 . -3) (undo-tree-id5239 . -3) (undo-tree-id5240 . -3) (undo-tree-id5241 . -3) (undo-tree-id5242 . -3) (undo-tree-id5243 . -3) (undo-tree-id5244 . -3) (undo-tree-id5245 . -3) (undo-tree-id5246 . -3) (undo-tree-id5247 . -3) (undo-tree-id5248 . -3) (undo-tree-id5249 . -3) (undo-tree-id5250 . -3) (undo-tree-id5251 . -3) (undo-tree-id5252 . -3) (undo-tree-id5253 . -3) 402 (401 . 402) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -401) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -402) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -403) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) 404 (#("c" 0 1 (fontified t face font-lock-keyword-face)) . 404) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (t 26071 7512 516391 752000)) nil (26071 7540 871392 454000) 0 nil])
nil
([nil current ((451 . 455) (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -451) (undo-tree-id5365 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 452) (451 . 453) (118 . 122) (120 . 121) (118 . 120) (113 . 118) (107 . 113) (#("st" 0 2 (fontified nil)) . 107) (107 . 109) (#("struct" 0 6 (fontified nil)) . -107) (107 . 113) (#("str" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face)) . -107) (undo-tree-id5366 . -3) 110 (107 . 110) (#(">" 0 1 (fontified t)) . -107) (undo-tree-id5367 . -1) 108 (#("t" 0 1 (fontified t)) . -107) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (#("e" 0 1 (fontified t)) . -108) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (#("m" 0 1 (fontified t)) . -109) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (#("p" 0 1 (fontified t)) . -110) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (#("l" 0 1 (fontified t)) . -111) (undo-tree-id5376 . -1) (undo-tree-id5377 . -1) (#("a" 0 1 (fontified t)) . -112) (undo-tree-id5378 . -1) (undo-tree-id5379 . -1) (#("t" 0 1 (fontified t)) . -113) (undo-tree-id5380 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face c-type c-decl-id-start)) . -114) (undo-tree-id5381 . -1) (undo-tree-id5382 . -1) 115 (#(" " 0 1 (fontified t)) . 115) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) 116 (#("<" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -116) (undo-tree-id5385 . -1) 117 (#("n" 0 1 (fontified t)) . -117) (undo-tree-id5386 . -1) 118 (117 . 118) (115 . 116) (apply yas--snippet-revive 107 117 #s(yas--snippet nil nil #s(yas--exit 116 nil) 68 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 116 nil) 68 nil nil nil nil)) (107 . 117) (#("template<$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 107) (107 . 119) (#("te" 0 2 (fontified nil)) . 107) (107 . 109) (#("template<parameters>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 19 (fontified nil) 19 20 (syntax-table (5 . 60) fontified nil)) . -107) (107 . 127) (#("te" 0 1 (fontified t) 1 2 (fontified t)) . -107) (undo-tree-id5387 . -2) 109 (107 . 109) (105 . 107) (#(" " 0 1 (fontified nil)) . -105) (undo-tree-id5388 . -1) (#(" " 0 1 (fontified t)) . 106) (#("
" 0 1 (fontified t)) . 104) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) 105 (106 . 108) (106 . 109) (#("  " 0 2 (fontified t)) . 106) (undo-tree-id5391 . -2) (undo-tree-id5392 . -2) 108 (105 . 108) (#("  " 0 2 (fontified t)) . 105) (undo-tree-id5393 . -2) 107 (104 . 107) (t 26071 7540 889724 398000) 103) nil (26071 7620 245024 438000) 0 nil])
nil
