(undo-tree-save-format-version . 1)
"32dc6ce3d3971daddade1c92ec446badcc81f7ac"
[nil nil nil nil (26073 40522 235708 378000) 0 nil]
([nil nil ((65 . 65) (65 . 66) (65 . 65) (65 . 66) (68 . 73) (#("e" 0 1 (fontified nil)) . 68) (undo-tree-id26 . -1) (68 . 69) (#("endif" 0 5 (fontified nil)) . -68) (undo-tree-id27 . -5) (68 . 73) (#("en" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -68) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) 70 (68 . 70) (#("w" 0 1 (face font-lock-preprocessor-face fontified t)) . -68) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 69 (68 . 69) (67 . 68) (#("&" 0 1 (fontified t)) . -67) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 68 (67 . 68) (66 . 66) (66 . 67) (65 . 65) (65 . 66) (64 . 64) (64 . 65) (46 . 64) (45 . 46) (#("B" 0 1 (face font-lock-variable-name-face fontified t)) . -45) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 46 (44 . 46) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -44) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 45 (41 . 45) (apply yas--snippet-revive 34 41 #s(yas--snippet nil nil #s(yas--exit 41 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 41 nil) 1 nil nil nil nil)) (34 . 41) (#("define $0" 0 9 (fontified nil)) . 34) (undo-tree-id42 . -9) (34 . 43) (#("d" 0 1 (fontified nil)) . 34) (undo-tree-id43 . -1) (34 . 35) (#("define macro" 0 12 (fontified nil)) . -34) (undo-tree-id44 . -12) (34 . 46) (#("def" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t) 2 3 (face font-lock-preprocessor-face fontified t)) . -34) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) 37 (34 . 37) (#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -34) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 35 (34 . 35) (33 . 34) (32 . 32) (32 . 33) (30 . 32) (#("P" 0 1 (fontified t)) . -30) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 31 (28 . 31) (#("S" 0 1 (fontified t)) . -28) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("S" 0 1 (fontified t)) . -29) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 30 (29 . 30) (#("W" 0 1 (fontified t)) . -29) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 30 (26 . 30) (#("K" 0 1 (fontified t)) . -26) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 27 (26 . 27) (#("K" 0 1 (fontified t)) . -26) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 27 (25 . 27) (15 . 25) (#("Y" 0 1 (fontified t)) . -15) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("T" 0 1 (fontified t)) . -16) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("T" 0 1 (fontified t)) . -17) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 18 (15 . 18) (9 . 15) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id78 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id79 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id80 . -12) (2 . 14) (#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 3 (2 . 3) (1 . 2) (t 26073 40167 643428 803000)) nil (26073 40522 235701 123000) 0 nil])
([nil nil ((159 . 160) (154 . 158) (nil fontified nil 136 . 154) (136 . 154) (#("to" 0 2 (fontified nil)) . 136) (nil fontified nil 136 . 138) (136 . 138) (#("token_class::token" 0 18 (fontified nil)) . -136) (nil fontified nil 136 . 154) (136 . 154) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -136) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 138 (136 . 138) (135 . 136) (132 . 135) (123 . 132) (#("bnf_token" 0 9 (fontified nil)) . -123) (123 . 132) (121 . 123) (nil fontified nil 110 . 121) (nil face (rainbow-delimiters-depth-2-face) 110 . 121) (110 . 121) (#("to" 0 2 (fontified nil)) . 110) (nil fontified nil 110 . 112) (nil face (rainbow-delimiters-depth-2-face) 110 . 112) (110 . 112) (#("token_class" 0 11 (fontified nil)) . -110) (nil fontified nil 110 . 121) (nil face (rainbow-delimiters-depth-2-face) 110 . 121) (110 . 121) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -110) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 113 (110 . 113) (nil face font-lock-type-face 109 . 111) (nil fontified t 109 . 111) (109 . 111) (102 . 109) (#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -102) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -103) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 104 (101 . 104) (95 . 101) (#("st" 0 2 (fontified nil)) . 95) (95 . 97) (#("static" 0 6 (fontified nil)) . -95) (95 . 101) (#("stati" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -95) (undo-tree-id8 . -5) (undo-tree-id9 . -5) 100 (95 . 100) (97 . 98) (93 . 95) (92 . 94) (91 . 93) (91 . 95) (90 . 90) (90 . 91) (84 . 90) (81 . 84) (#("s" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -82) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -83) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 84 (81 . 84) (78 . 81) (#("x" 0 1 (face font-lock-type-face fontified t)) . -78) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 79 (72 . 79) (66 . 72) (#("st" 0 2 (fontified nil)) . 66) (66 . 68) (#("struct" 0 6 (fontified nil)) . -66) (66 . 72) (#("st" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -66) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) 68 (67 . 68) (#("y" 0 1 (fontified t)) . -67) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 68 (66 . 68)) nil (26073 40522 235644 279000) 0 nil])
([nil nil ((176 . 177) 159) nil (26073 40522 235575 320000) 0 nil])
([nil nil ((127 . 136) (#("bnf_token" 0 9 (fontified nil)) . -127) (127 . 136) (125 . 127) (114 . 125) (#("to" 0 2 (fontified nil)) . 114) (114 . 116) (#("token_class" 0 11 (fontified nil)) . -114) (114 . 125) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -114) (undo-tree-id109 . -2) (undo-tree-id110 . -2) 116 (114 . 116) (107 . 115) (#("c" 0 1 (fontified t)) . -107) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 108 (107 . 108) (106 . 107) (105 . 106) (102 . 105) (102 . 103) (t 26073 40522 250109 840000)) nil (26073 40633 836983 174000) 0 nil])
([nil nil ((98 . 100) (96 . 98) (#("w" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -96) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 97 (93 . 97) (apply yas--snippet-revive 84 94 #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (84 . 94) (#("include \"$0\"" 0 12 (fontified nil)) . 84) (undo-tree-id86 . -12) (84 . 96) (#("i" 0 1 (fontified nil c-in-sws t)) . 84) (undo-tree-id87 . -1) (84 . 85) (#("include \"header\"" 0 16 (fontified nil)) . -84) (undo-tree-id88 . -16) (84 . 100) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -84) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) 86 (84 . 86) (83 . 84) (82 . 82) (82 . 83) (75 . 82) (#("v" 0 1 (fontified nil c-in-sws t)) . 75) (undo-tree-id92 . -1) (75 . 76) (#("vector>" 0 7 (fontified nil c-in-sws t)) . -75) (undo-tree-id93 . -7) (75 . 82) (#("ve" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -75) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) 77 (74 . 77) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . -74) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (nil syntax-table nil 75 . 76) (nil syntax-table (1) 74 . 75) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified t)) . 75) (undo-tree-id99 . -1) (apply yas--snippet-revive 66 76 #s(yas--snippet nil nil #s(yas--exit 75 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 75 nil) 2 nil nil nil nil)) (66 . 76) (#("include \"$0\"" 0 12 (fontified nil)) . 66) (undo-tree-id100 . -12) (66 . 78) (#("i" 0 1 (fontified nil c-in-sws t)) . 66) (undo-tree-id101 . -1) (66 . 67) (#("include \"header\"" 0 16 (fontified nil)) . -66) (undo-tree-id102 . -16) (66 . 82) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -66) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) 68 (67 . 68) (#("m" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -67) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 68 (66 . 68) (65 . 66) (65 . 65) (65 . 66) (65 . 66)) nil (26073 40633 836972 265000) 0 nil])
([nil nil ((466 . 467) (455 . 465) (apply yas--snippet-revive 429 455 #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 3 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (449 . 454) (#("token" 0 5 (fontified nil)) . -449) (449 . 454) (447 . 449) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-3-face) 436 . 447) (436 . 447) (#("to" 0 2 (fontified nil)) . 436) (nil fontified nil 436 . 438) (nil face (rainbow-delimiters-depth-3-face) 436 . 438) (436 . 438) (#("token_class" 0 11 (fontified nil)) . -436) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-3-face) 436 . 447) (436 . 447) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -436) (undo-tree-id0 . -2) 438 (437 . 438) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 437) (436 . 437) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 3 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (429 . 448) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 429) (429 . 453) (#("v" 0 1 (fontified nil)) . 429) (429 . 430) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -429) (429 . 464) (#("v" 0 1 (fontified t)) . -429) (undo-tree-id1 . -1) 430 (429 . 430) (427 . 429) (nil fontified nil 424 . 427) (424 . 427) (#("st" 0 2 (fontified nil)) . 424) (nil fontified nil 424 . 426) (424 . 426) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -424) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 427 (426 . 427) (#("a" 0 1 (fontified t)) . -426) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("d" 0 1 (fontified t)) . -427) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 428 (427 . 428) (424 . 427) (423 . 424) (413 . 423) (#("#" 0 1 (fontified t)) . -413) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 414 (413 . 414) (#("$" 0 1 (fontified t)) . -413) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 414 (412 . 414) (apply yas--snippet-revive 386 412 #s(yas--snippet nil (#s(yas--field 1 393 411 nil nil nil t nil)) nil 2 nil #s(yas--field 1 393 411 nil nil nil t nil) nil nil)) (406 . 411) (#("token" 0 5 (fontified nil)) . -406) (406 . 411) (404 . 406) (nil fontified nil 393 . 404) (nil face (rainbow-delimiters-depth-3-face) 393 . 404) (393 . 404) (#("to" 0 2 (fontified nil)) . 393) (nil fontified nil 393 . 395) (nil face (rainbow-delimiters-depth-3-face) 393 . 395) (393 . 395) (#("token_class" 0 11 (fontified nil)) . -393) (nil fontified nil 393 . 404) (nil face (rainbow-delimiters-depth-3-face) 393 . 404) (393 . 404) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -393) (undo-tree-id12 . -2) 395 (394 . 395) (#("i" 0 1 (fontified t)) . -394) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 395 (394 . 395) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 394) (393 . 394) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 393 411 nil nil nil t nil)) nil 2 nil #s(yas--field 1 393 411 nil nil nil t nil) nil nil)) (386 . 405) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 386) (386 . 410) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -386) (386 . 421) (#("c" 0 1 (fontified t)) . -386) (undo-tree-id15 . -1) 387 (386 . 387) (385 . 386) (384 . 385) (nil fontified nil 381 . 384) (381 . 384) (#("st" 0 2 (fontified nil)) . 381) (nil fontified nil 381 . 383) (381 . 383) (#("std" 0 3 (fontified nil)) . -381) (nil fontified nil 381 . 384) (381 . 384) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -381) (undo-tree-id16 . -2) 383 (381 . 383) (380 . 381) (370 . 380) (369 . 370) (apply yas--snippet-revive 339 369 #s(yas--snippet nil (#s(yas--field 1 346 368 nil nil nil t nil)) nil 1 nil #s(yas--field 1 346 368 nil nil nil t nil) nil nil)) (359 . 368) (#("bnf_token" 0 9 (fontified nil)) . -359) (359 . 368) (357 . 359) (nil fontified nil 346 . 357) (nil face (rainbow-delimiters-depth-3-face) 346 . 357) (346 . 357) (#("to" 0 2 (fontified nil)) . 346) (nil fontified nil 346 . 348) (nil face (rainbow-delimiters-depth-3-face) 346 . 348) (346 . 348) (#("token_class" 0 11 (fontified nil)) . -346) (nil fontified nil 346 . 357) (nil face (rainbow-delimiters-depth-3-face) 346 . 357) (346 . 357) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -346) (undo-tree-id17 . -3) (undo-tree-id18 . -3) 349 (347 . 349) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 347) (346 . 347) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 346 368 nil nil nil t nil)) nil 1 nil #s(yas--field 1 346 368 nil nil nil t nil) nil nil)) (339 . 358) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 339) (339 . 363) (#("v" 0 1 (fontified nil)) . 339) (339 . 340) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -339) (339 . 374) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -339) (undo-tree-id19 . -2) (undo-tree-id20 . -2) 341 (339 . 341) (337 . 339) (336 . 337) (#("x" 0 1 (fontified t)) . -336) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 337 (334 . 337) (143 . 144) (#("g" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -143) (undo-tree-id23 . -1) 144 (135 . 144) (133 . 135) (130 . 133) (apply yas--snippet-revive 121 131 #s(yas--snippet nil nil #s(yas--exit 130 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 130 nil) 0 nil nil nil nil)) (121 . 131) (#("include \"$0\"" 0 12 (fontified nil)) . 121) (undo-tree-id24 . -12) (121 . 133) (#("i" 0 1 (c-in-sws t fontified nil)) . 121) (undo-tree-id25 . -1) (121 . 122) (#("include \"header\"" 0 16 (fontified nil)) . -121) (undo-tree-id26 . -16) (121 . 137) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -121) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 122 (121 . 122) (120 . 121) (#("$" 0 1 (fontified t c-is-sws t)) . -120) (undo-tree-id29 . -1) 121 (120 . 121) (119 . 119) (119 . 120) (303 . 307) (303 . 305) (297 . 303) (#("J" 0 1 (fontified t face font-lock-variable-name-face)) . -297) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 298 (294 . 298) (282 . 294) (#("synatax_tree" 0 12 (fontified nil)) . -282) (282 . 294) (280 . 282) (262 . 280) (#("sy" 0 2 (fontified nil)) . 262) (262 . 264) (#("synatax_tree_class" 0 18 (fontified nil)) . -262) (262 . 280) (#("sy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -262) (undo-tree-id32 . -2) (undo-tree-id33 . -2) 264 (263 . 264) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -263) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -264) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 265 (262 . 265) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -262) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -263) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -264) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#(":" 0 1 (fontified t)) . -265) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#(":" 0 1 (fontified t)) . -266) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 267 (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -267) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -268) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -269) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("m" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -270) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -271) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("c" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -272) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("_" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -273) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("b" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -274) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -275) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -276) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("l" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -277) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 278 (65 . 83) (249 . 249) (249 . 260) (#("atomic_bool" 0 11 (fontified nil)) . -249) (249 . 260) (247 . 249) (244 . 247) (#("st" 0 2 (fontified nil)) . 244) (244 . 246) (#("std" 0 3 (fontified nil)) . -244) (244 . 247) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -244) (undo-tree-id84 . -2) 246 (243 . 246) (237 . 243) (#("st" 0 2 (fontified nil)) . 237) (237 . 239) (#("static" 0 6 (fontified nil)) . -237) (237 . 243) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -237) (undo-tree-id85 . -3) 240 (237 . 240) (234 . 237) (t 26073 40633 846780 992000) 131) nil (26073 42565 587377 266000) 0 nil])
([nil nil ((455 . 456) (411 . 412) (t 26073 42565 593525 190000)) nil (26073 46704 215646 340000) 0 nil])
([nil nil ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 174) (undo-tree-id37 . -3) (undo-tree-id38 . -3) 177 (#("s" 0 1 (fontified t)) . -177) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t)) . -178) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t)) . -179) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("t" 0 1 (fontified t)) . -180) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("i" 0 1 (fontified t)) . -181) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -182) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 183 (#(" " 0 1 (fontified t)) . 183) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 184 (183 . 184) (177 . 183) (#("st" 0 2 (fontified nil)) . 177) (177 . 179) (#("static" 0 6 (fontified nil)) . -177) (177 . 183) (#("stat" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -177) (undo-tree-id53 . -4) (undo-tree-id54 . -4) 181 (178 . 181) (#("y" 0 1 (fontified t)) . -178) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("y" 0 1 (fontified t)) . -179) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 180 (179 . 180) (#("t" 0 1 (fontified t)) . -179) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 180 (178 . 180) (177 . 178) (174 . 177) (t 26073 46704 223690 657000) 173) nil (26074 14349 384755 62000) 0 nil])
([nil nil ((nil rear-nonsticky nil 178 . 179) (#("
" 0 1 (fontified nil)) . -232) (174 . 233) 173) nil (26074 14349 384738 896000) 0 nil])
([nil nil ((217 . 218) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -217) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -218) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -219) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -220) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 221 (175 . 177) (#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -175) (undo-tree-id35 . -4) (undo-tree-id36 . -4) 179) nil (26077 41926 27303 965000) 0 nil])
([nil nil ((326 . 327)) nil (26077 41933 694675 861000) 0 nil] [nil nil ((#("token_class::bnf_token bt," 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 25 (fontified t face font-lock-variable-name-face) 25 26 (fontified t c-type c-decl-arg-start)) . 281) (undo-tree-id1163 . -25) (undo-tree-id1165 . -26) (t 26077 41596 349842 784000)) ((281 . 307)) (26077 41925 208309 544000) 0 nil] [nil nil ((#("token_class::bnf_token bt," 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 25 (fontified t face font-lock-variable-name-face) 25 26 (fontified t c-type c-decl-arg-start)) . 281) (undo-tree-id1 . -26) (undo-tree-id2 . -25) (t 26074 14349 402759 11000)) ((281 . 307)) (26077 41462 572608 538000) 0 nil])
([nil nil ((720 . 721) (718 . 720) (715 . 717) (708 . 715) (apply yas--snippet-revive 681 708 #s(yas--snippet nil (#s(yas--field 1 688 707 nil nil nil t nil)) nil 4 nil #s(yas--field 1 688 707 nil nil nil t nil) nil nil)) (706 . 707) (nil fontified nil 688 . 706) (nil face (rainbow-delimiters-depth-3-face) 688 . 706) (688 . 706) (#("to" 0 2 (fontified nil)) . 688) (nil fontified nil 688 . 690) (nil face (rainbow-delimiters-depth-3-face) 688 . 690) (688 . 690) (#("token_class::token" 0 18 (fontified nil)) . -688) (nil fontified nil 688 . 706) (nil face (rainbow-delimiters-depth-3-face) 688 . 706) (688 . 706) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -688) (undo-tree-id1277 . -2) (undo-tree-id1278 . -2) 690 (689 . 690) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 689) (688 . 689) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 688 707 nil nil nil t nil)) nil 4 nil #s(yas--field 1 688 707 nil nil nil t nil) nil nil)) (681 . 700) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 681) (681 . 705) (#("v" 0 1 (fontified nil)) . 681) (681 . 682) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -681) (681 . 716) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -681) (undo-tree-id1279 . -3) (undo-tree-id1280 . -3) 684 (681 . 684) (679 . 681) (676 . 679) (#("st" 0 2 (fontified nil)) . 676) (676 . 678) (#("std" 0 3 (fontified nil)) . -676) (676 . 679) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -676) (undo-tree-id1281 . -2) (undo-tree-id1282 . -2) 678 (676 . 678) (675 . 676) (673 . 674) (672 . 673) (671 . 672) (nil fontified nil 649 . 671) (nil face (rainbow-delimiters-depth-3-face) 649 . 671) (649 . 671) (#("to" 0 2 (fontified nil)) . 649) (nil fontified nil 649 . 651) (nil face (rainbow-delimiters-depth-3-face) 649 . 651) (649 . 651) (#("token_class::bnf_token" 0 22 (fontified nil)) . -649) (nil fontified nil 649 . 671) (nil face (rainbow-delimiters-depth-3-face) 649 . 671) (649 . 671) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -649) (undo-tree-id1283 . -3) (undo-tree-id1284 . -3) 652 (649 . 652) (648 . 650) (642 . 648) (640 . 642) (apply yas--snippet-revive 610 640 #s(yas--snippet nil (#s(yas--field 1 617 639 nil nil nil t nil)) nil 3 nil #s(yas--field 1 617 639 nil nil nil t nil) nil nil)) (630 . 639) (#("bnf_token" 0 9 (fontified nil)) . -630) (630 . 639) (628 . 630) (nil fontified nil 617 . 628) (nil face (rainbow-delimiters-depth-3-face) 617 . 628) (617 . 628) (#("t" 0 1 (fontified nil)) . 617) (nil fontified nil 617 . 618) (nil face (rainbow-delimiters-depth-3-face) 617 . 618) (617 . 618) (#("token_class" 0 11 (fontified nil)) . -617) (nil fontified nil 617 . 628) (nil face (rainbow-delimiters-depth-3-face) 617 . 628) (617 . 628) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -617) (undo-tree-id1285 . -2) (undo-tree-id1286 . -2) 619 (617 . 619) (#("r" 0 1 (fontified t)) . -617) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (#("i" 0 1 (fontified t)) . -618) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) 619 (618 . 619) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 618) (617 . 618) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 617 639 nil nil nil t nil)) nil 3 nil #s(yas--field 1 617 639 nil nil nil t nil) nil nil)) (610 . 629) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 610) (610 . 634) (#("v" 0 1 (fontified nil)) . 610) (610 . 611) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -610) (610 . 645) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -610) (undo-tree-id1291 . -3) (undo-tree-id1292 . -3) 613 (610 . 613) (608 . 610) (605 . 608) (604 . 606) (596 . 604) (apply yas--snippet-revive 566 596 #s(yas--snippet nil (#s(yas--field 1 573 595 nil nil nil t nil)) nil 2 nil #s(yas--field 1 573 595 nil nil nil t nil) nil nil)) (nil fontified nil 573 . 595) (nil face (rainbow-delimiters-depth-2-face) 573 . 595) (573 . 595) (#("to" 0 2 (fontified nil)) . 573) (nil fontified nil 573 . 575) (nil face (rainbow-delimiters-depth-2-face) 573 . 575) (573 . 575) (#("token_class::bnf_token" 0 22 (fontified nil)) . -573) (nil fontified nil 573 . 595) (nil face (rainbow-delimiters-depth-2-face) 573 . 595) (573 . 595) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -573) (undo-tree-id1293 . -3) (undo-tree-id1294 . -3) 576 (574 . 576) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 574) (573 . 574) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 573 595 nil nil nil t nil)) nil 2 nil #s(yas--field 1 573 595 nil nil nil t nil) nil nil)) (566 . 585) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 566) (566 . 590) (#("v" 0 1 (fontified nil)) . 566) (566 . 567) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -566) (566 . 601) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -566) (undo-tree-id1295 . -3) (undo-tree-id1296 . -3) 569 (566 . 569) (564 . 566) (561 . 564) (553 . 561) (551 . 553) (550 . 552) (549 . 551) (#("    " 0 4 (fontified t)) . 526) 532 (553 . 557) (552 . 552) (552 . 553) (547 . 552) (533 . 547) (#("a" 0 1 (fontified t)) . -533) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#("t" 0 1 (fontified t)) . -534) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("r" 0 1 (fontified t)) . -535) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) 536 (532 . 536) (531 . 532) (t 26077 41933 709834 468000) 531) nil (26077 44509 309896 711000) 0 nil])
([nil nil ((300 . 301) (t 26077 41824 83170 502000)) ((#("*" 0 1 (fontified t)) . 300) (t 26077 41890 533168 864000)) (26077 41890 521594 330000) 0 nil] [nil nil ((#("token_class::token tok" 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 22 (fontified t face font-lock-variable-name-face)) . 281) (undo-tree-id1167 . -21) (undo-tree-id1169 . -1) (undo-tree-id1171 . -1) (undo-tree-id1173 . -1) (undo-tree-id1175 . -1) (undo-tree-id1177 . -1) (undo-tree-id1179 . -1) (undo-tree-id1181 . -1) (undo-tree-id1183 . -1) (undo-tree-id1185 . -1) (undo-tree-id1187 . -1) (undo-tree-id1189 . -1) (undo-tree-id1191 . -1) (undo-tree-id1193 . -1) (undo-tree-id1195 . -1) (undo-tree-id1197 . -1) (undo-tree-id1199 . -1) (undo-tree-id1201 . -1) (undo-tree-id1203 . -1) (undo-tree-id1205 . -1) (undo-tree-id1207 . -1) (undo-tree-id1209 . -1) (undo-tree-id1211 . -1) (undo-tree-id1213 . -1) (undo-tree-id1215 . -1) (undo-tree-id1217 . -1) (undo-tree-id1219 . -1) (undo-tree-id1221 . -1) (undo-tree-id1223 . -1) (undo-tree-id1225 . -1) (undo-tree-id1227 . -1) (undo-tree-id1229 . -1) (undo-tree-id1231 . -1) (undo-tree-id1233 . -1) (undo-tree-id1235 . -1) (undo-tree-id1237 . -1) (undo-tree-id1239 . -1) (undo-tree-id1241 . -1) (undo-tree-id1243 . -1) (undo-tree-id1245 . -1) (undo-tree-id1247 . -1) (undo-tree-id1249 . -1) (undo-tree-id1251 . -1) (undo-tree-id1253 . -1) (undo-tree-id1255 . -1) (undo-tree-id1257 . -1) (undo-tree-id1259 . -1) (undo-tree-id1261 . -1) (undo-tree-id1263 . -1) (undo-tree-id1265 . -1) (undo-tree-id1267 . -1) (undo-tree-id1269 . -1) (undo-tree-id1271 . -1) (undo-tree-id1273 . -1) (undo-tree-id1275 . -1) (t 26077 41746 643172 410000)) ((281 . 303) (t 26077 41785 403171 454000)) (26077 41785 393138 209000) 0 nil])
([nil nil ((#("token_class::token tok" 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 22 (fontified t face font-lock-variable-name-face)) . 281) (undo-tree-id3 . -21) (undo-tree-id5 . -22) (t 26077 40925 789859 313000)) ((281 . 303) (t 26077 41324 769849 457000)) (26077 41323 27391 540000) 0 nil])
([nil nil ((723 . 724) (#("    " 0 4 (fontified t)) . 723) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) 727 (t 26077 44509 346437 571000)) nil (26077 44528 140416 242000) 0 nil])
nil
nil
([nil nil ((240 . 241) (#("f" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -240) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id668 . -1) (undo-tree-id670 . -1) (undo-tree-id672 . -1) (undo-tree-id674 . -1) (undo-tree-id676 . -1) (undo-tree-id678 . -1) (undo-tree-id680 . -1) (undo-tree-id682 . -1) (undo-tree-id684 . -1) (undo-tree-id686 . -1) (undo-tree-id688 . -1) (undo-tree-id690 . -1) (undo-tree-id692 . -1) (undo-tree-id694 . -1) (undo-tree-id696 . -1) (undo-tree-id698 . -1) (undo-tree-id700 . -1) (undo-tree-id702 . -1) (undo-tree-id704 . -1) (undo-tree-id706 . -1) (undo-tree-id708 . -1) (undo-tree-id710 . -1) (undo-tree-id712 . -1) (undo-tree-id714 . -1) (undo-tree-id716 . -1) (undo-tree-id718 . -1) (undo-tree-id720 . -1) (undo-tree-id722 . -1) (undo-tree-id724 . -1) (undo-tree-id726 . -1) (undo-tree-id728 . -1) (undo-tree-id730 . -1) (undo-tree-id732 . -1) (undo-tree-id734 . -1) (undo-tree-id736 . -1) (undo-tree-id738 . -1) (undo-tree-id740 . -1) (undo-tree-id742 . -1) (undo-tree-id744 . -1) (undo-tree-id746 . -1) (undo-tree-id748 . -1) (undo-tree-id750 . -1) (undo-tree-id752 . -1) (undo-tree-id754 . -1) (undo-tree-id756 . -1) (undo-tree-id758 . -1) (undo-tree-id760 . -1) (undo-tree-id762 . -1) (undo-tree-id764 . -1) (undo-tree-id766 . -1) (undo-tree-id768 . -1) (undo-tree-id770 . -1) (undo-tree-id772 . -1) (undo-tree-id774 . -1) (undo-tree-id776 . -1) (undo-tree-id778 . -1) (undo-tree-id780 . -1) (undo-tree-id782 . -1) (undo-tree-id784 . -1) (undo-tree-id786 . -1) (undo-tree-id788 . -1) (undo-tree-id790 . -1) (undo-tree-id792 . -1) (undo-tree-id794 . -1) (undo-tree-id796 . -1) (undo-tree-id798 . -1) (undo-tree-id800 . -1) (undo-tree-id802 . -1) (undo-tree-id804 . -1) (undo-tree-id806 . -1) (undo-tree-id808 . -1) (undo-tree-id810 . -1) (undo-tree-id812 . -1) (undo-tree-id814 . -1) (undo-tree-id816 . -1) (undo-tree-id818 . -1) (undo-tree-id820 . -1) (undo-tree-id822 . -1) (undo-tree-id824 . -1) (undo-tree-id826 . -1) (undo-tree-id828 . -1) (undo-tree-id830 . -1) (undo-tree-id832 . -1) (undo-tree-id834 . -1) (undo-tree-id836 . -1) (undo-tree-id838 . -1) (undo-tree-id840 . -1) (undo-tree-id842 . -1) (undo-tree-id844 . -1) (undo-tree-id846 . -1) (undo-tree-id848 . -1) (undo-tree-id850 . -1) (undo-tree-id852 . -1) (undo-tree-id854 . -1) (undo-tree-id856 . -1) (undo-tree-id858 . -1) (undo-tree-id860 . -1) (undo-tree-id862 . -1) (undo-tree-id864 . -1) (undo-tree-id866 . -1) (undo-tree-id868 . -1) (undo-tree-id870 . -1) (undo-tree-id872 . -1) (undo-tree-id874 . -1) 241 (238 . 241) (#("p" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -238) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -239) (undo-tree-id877 . -1) (undo-tree-id878 . -1) 240 (237 . 240) (237 . 238) (#("std::vector<token_class::bnf_token> " 0 3 (fontified t face font-lock-constant-face) 3 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-2-face)) 12 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (fontified t syntax-table (5 . 60) c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t)) . 237) (undo-tree-id879 . -35) (undo-tree-id881 . -23) (undo-tree-id883 . -36) (undo-tree-id885 . -36)) ((237 . 273) (#(" " 0 1 (fontified nil)) . 237) (undo-tree-id887 . 1) (undo-tree-id888 . 1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("vpi" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 237) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (238 . 240) (#("oif" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 238) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (undo-tree-id1086 . -2) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (240 . 241) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 240) (t 26077 41308 243183 197000)) (26077 41308 235764 599000) 0 nil] [nil nil ((#("  static std::vector<token_class::bnf_token> ret_ptr();
" 0 2 (fontified t) 2 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-constant-face) 12 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 21 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-2-face)) 21 32 (fontified t face font-lock-constant-face) 32 34 (fontified t) 34 43 (fontified t face font-lock-type-face) 43 44 (syntax-table (5 . 60) fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t) 45 52 (fontified t face font-lock-function-name-face) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 56 (fontified t)) . 228) (undo-tree-id10 . -9) (undo-tree-id11 . -9) (undo-tree-id12 . -55) 237 (t 26077 41000 236524 152000)) ((228 . 284)) (26077 41291 79597 1000) 0 nil])
([nil nil ((827 . 828) (825 . 827) (820 . 824) (nil fontified nil 802 . 820) (802 . 820) (#("to" 0 2 (fontified nil)) . 802) (nil fontified nil 802 . 804) (802 . 804) (#("token_class::token" 0 18 (fontified nil)) . -802) (nil fontified nil 802 . 820) (802 . 820) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -802) (undo-tree-id1305 . -2) (undo-tree-id1306 . -2) 804 (802 . 804) (801 . 802) (799 . 801) (798 . 799) (789 . 798) (#("bnf_token" 0 9 (fontified nil)) . -789) (789 . 798) (787 . 789) (776 . 787) (#("to" 0 2 (fontified nil)) . 776) (776 . 778) (#("token_class" 0 11 (fontified nil)) . -776) (776 . 787) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -776) (undo-tree-id1307 . -2) (undo-tree-id1308 . -2) 778 (776 . 778) (apply yas--snippet-revive 737 767 #s(yas--snippet nil (#s(yas--field 1 744 766 nil nil nil t nil)) nil 5 nil #s(yas--field 1 744 766 nil nil nil t nil) nil nil)) (757 . 766) (#("bnf_token" 0 9 (fontified nil)) . -757) (757 . 766) (#("b" 0 1 (fontified t)) . -757) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) 758 (757 . 758) (755 . 757) (nil fontified nil 744 . 755) (nil face (rainbow-delimiters-depth-2-face) 744 . 755) (744 . 755) (#("to" 0 2 (fontified nil)) . 744) (nil fontified nil 744 . 746) (nil face (rainbow-delimiters-depth-2-face) 744 . 746) (744 . 746) (#("token_class" 0 11 (fontified nil)) . -744) (nil fontified nil 744 . 755) (nil face (rainbow-delimiters-depth-2-face) 744 . 755) (744 . 755) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -744) (undo-tree-id1311 . -2) (undo-tree-id1312 . -2) 746 (745 . 746) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 745) (744 . 745) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 744 766 nil nil nil t nil)) nil 5 nil #s(yas--field 1 744 766 nil nil nil t nil) nil nil)) (737 . 756) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 737) (737 . 761) (#("v" 0 1 (fontified nil)) . 737) (737 . 738) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -737) (737 . 772) (#("v" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -737) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) 738 (737 . 738) (735 . 737) (732 . 735) (732 . 733) (nil face font-lock-type-face 739 . 741) (nil fontified t 739 . 741) (739 . 741) (738 . 739) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -738) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) 739 (732 . 739) (724 . 732) (721 . 724) (t 26077 44528 153103 771000) 552) nil (26077 44946 586120 150000) 0 nil])
nil
([nil nil ((237 . 241) (#("vo" 0 2 (fontified nil)) . 237) (237 . 239) (#("void" 0 4 (fontified nil)) . -237) (237 . 241) (#("vo" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -237) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 239 (237 . 239) (237 . 238) (#("synatax_tree_class::synatax_tree " 0 18 (fontified t face font-lock-constant-face) 18 20 (fontified t) 20 31 (fontified t face font-lock-type-face) 31 32 (fontified t c-type c-decl-id-start face font-lock-type-face) 32 33 (fontified t)) . 237) (undo-tree-id8 . -32)) ((237 . 270) (#(" " 0 1 (fontified nil)) . 237) (undo-tree-id14 . 1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("vo" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face)) . 237) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (237 . 239) (#("void" 0 4 (fontified nil)) . 237) (237 . 241) (#("vo" 0 2 (fontified nil)) . 237) (237 . 239) (#("void" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 237) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) (undo-tree-id603 . -3) (undo-tree-id604 . -3) (undo-tree-id605 . -3) (undo-tree-id606 . -3) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (t 26077 41248 963184 657000)) (26077 41248 951517 566000) 0 nil])
([nil nil ((874 . 875) (872 . 874) (858 . 872) (857 . 858) (839 . 857) (#("tok" 0 3 (fontified nil)) . 839) (839 . 842) (#("token_class::token" 0 18 (fontified nil)) . -839) (839 . 857) (#("tok" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -839) (undo-tree-id1317 . -3) (undo-tree-id1318 . -3) 842 (839 . 842) (838 . 839) (831 . 838) (#("v" 0 1 (fontified nil)) . 831) (831 . 832) (#("virtual" 0 7 (fontified nil)) . -831) (831 . 838) (#("vi" 0 1 (fontified t) 1 2 (fontified t)) . -831) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) 833 (831 . 833) (828 . 831) (t 26077 44946 609760 127000) 827) nil (26077 45144 486345 995000) 0 nil])
nil
([nil nil ((874 . 876) (t 26077 45144 496421 922000)) nil (26077 46754 418387 498000) 0 nil])
([nil nil ((911 . 912) (909 . 911) (907 . 909) (902 . 907) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -902) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (#("h" 0 1 (fontified t face font-lock-variable-name-face)) . -903) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -904) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -905) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) 906 (903 . 906) (#("j" 0 1 (fontified t face font-lock-variable-name-face)) . -903) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -904) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) 905 (898 . 905) (889 . 898) (#("j" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -889) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -890) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) 891 (888 . 891) (#("x" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -888) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) 889 (888 . 889) (887 . 888) (880 . 887) (#("v" 0 1 (fontified nil)) . 880) (880 . 881) (#("virtual" 0 7 (fontified nil)) . -880) (880 . 887) (#("vir" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -880) (undo-tree-id1539 . -3) (undo-tree-id1540 . -3) 883 (880 . 883) (877 . 880) (t 26077 45494 803079 946000) 845) nil (26077 47302 573149 677000) 0 nil] [nil nil ((880 . 881) (t 26077 45494 803079 946000) 879) ((#("
" 0 1 (fontified t)) . 880) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1)) (26077 46753 679913 308000) 0 nil])
([nil nil ((923 . 932) (917 . 923) (#("st" 0 2 (fontified nil)) . 917) (917 . 919) (#("struct" 0 6 (fontified nil)) . -917) (917 . 923) (#("stru" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -917) (undo-tree-id1541 . -4) (undo-tree-id1542 . -4) 921 (920 . 921) (917 . 920) (916 . 916) (916 . 917) (915 . 916) (t 26077 47302 583035 448000) 914) nil (26077 47370 546689 420000) 0 nil])
([nil nil ((881 . 881) (881 . 882)) ((#("
" 0 1 (fontified t)) . 881) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1)) (26077 46753 677761 182000) 0 nil])
([nil nil ((apply -3 917 937 undo--wrap-and-run-primitive-undo 917 937 ((917 . 920) 933))) nil (26077 47370 546679 162000) 0 nil])
nil
([nil nil ((#("  virtual char ret_next_token()=0;
" 0 2 (fontified t) 2 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t face font-lock-type-face) 12 13 (fontified t face font-lock-type-face) 13 14 (fontified t c-type c-decl-id-start face font-lock-type-face) 14 15 (fontified t) 15 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t face font-lock-function-name-face) 17 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t face font-lock-function-name-face) 20 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t face font-lock-function-name-face) 22 23 (fontified t face font-lock-function-name-face) 23 24 (fontified t face font-lock-function-name-face) 24 25 (fontified t face font-lock-function-name-face) 25 26 (fontified t face font-lock-function-name-face) 26 27 (fontified t face font-lock-function-name-face) 27 28 (fontified t face font-lock-function-name-face) 28 29 (fontified t face font-lock-function-name-face) 29 30 (fontified t face (rainbow-delimiters-depth-2-face)) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t)) . 878) (undo-tree-id1543 . -34) (undo-tree-id1544 . -17) (undo-tree-id1545 . -17) (undo-tree-id1546 . -35) (undo-tree-id1547 . -35) (undo-tree-id1548 . -15) (undo-tree-id1549 . -15) (undo-tree-id1550 . -17) (undo-tree-id1551 . -17) (undo-tree-id1552 . -17) (undo-tree-id1553 . -17) (undo-tree-id1554 . -17) (undo-tree-id1555 . -17) (undo-tree-id1556 . -17) (undo-tree-id1557 . -17) (undo-tree-id1558 . -17) (undo-tree-id1559 . -17) (undo-tree-id1560 . -17) (undo-tree-id1561 . -17) (undo-tree-id1562 . -17) (undo-tree-id1563 . -17) (undo-tree-id1564 . -17) (undo-tree-id1565 . -17) (undo-tree-id1566 . -17) (undo-tree-id1567 . -17) (undo-tree-id1568 . -17) (undo-tree-id1569 . -17) (undo-tree-id1570 . -17) (undo-tree-id1571 . -17) (undo-tree-id1572 . -17) (undo-tree-id1573 . -17) (undo-tree-id1574 . -17) (undo-tree-id1575 . -17) (undo-tree-id1576 . -17) (undo-tree-id1577 . -17) (undo-tree-id1578 . -17) (undo-tree-id1579 . -17) (undo-tree-id1580 . -17) (undo-tree-id1581 . -17) (undo-tree-id1582 . -17) (undo-tree-id1583 . -17) (undo-tree-id1584 . -17) (undo-tree-id1585 . -17) (undo-tree-id1586 . -17) (undo-tree-id1587 . -17) (undo-tree-id1588 . -17) (undo-tree-id1589 . -17) (undo-tree-id1590 . -17) (undo-tree-id1591 . -17) (undo-tree-id1592 . -17) (undo-tree-id1593 . -17) (undo-tree-id1594 . -17) (undo-tree-id1595 . -17) (undo-tree-id1596 . -17) (undo-tree-id1597 . -17) (undo-tree-id1598 . -17) (undo-tree-id1599 . -17) (undo-tree-id1600 . -17) (undo-tree-id1601 . -17) (undo-tree-id1602 . -17) (undo-tree-id1603 . -15) (undo-tree-id1604 . -29) (undo-tree-id1605 . -17) (undo-tree-id1606 . -17) (undo-tree-id1607 . -17) (undo-tree-id1608 . -17) (undo-tree-id1609 . -17) (undo-tree-id1610 . -17) (undo-tree-id1611 . -17) (undo-tree-id1612 . -17) (undo-tree-id1613 . -17) (undo-tree-id1614 . -17) (undo-tree-id1615 . -17) (undo-tree-id1616 . -17) (undo-tree-id1617 . -17) (undo-tree-id1618 . -17) (undo-tree-id1619 . -17) (undo-tree-id1620 . -17) (undo-tree-id1621 . -17) (undo-tree-id1622 . -17) (undo-tree-id1623 . -17) (undo-tree-id1624 . -17) (undo-tree-id1625 . -17) (undo-tree-id1626 . -17) (undo-tree-id1627 . -17) (undo-tree-id1628 . -17) (undo-tree-id1629 . -17) (undo-tree-id1630 . -17) (undo-tree-id1631 . -17) (undo-tree-id1632 . -17) (undo-tree-id1633 . -17) (undo-tree-id1634 . -17) (undo-tree-id1635 . -17) (undo-tree-id1636 . -17) (undo-tree-id1637 . -17) (undo-tree-id1638 . -17) (undo-tree-id1639 . -17) (undo-tree-id1640 . -17) (undo-tree-id1641 . -17) (undo-tree-id1642 . -17) (undo-tree-id1643 . -17) (undo-tree-id1644 . -17) (undo-tree-id1645 . -17) (undo-tree-id1646 . -17) (undo-tree-id1647 . -17) (undo-tree-id1648 . -17) (undo-tree-id1649 . -17) (undo-tree-id1650 . -17) (undo-tree-id1651 . -17) (undo-tree-id1652 . -17) (undo-tree-id1653 . -17) (undo-tree-id1654 . -17) (undo-tree-id1655 . -17) (undo-tree-id1656 . -17) (undo-tree-id1657 . -17) (undo-tree-id1658 . -17) (undo-tree-id1659 . -17) (undo-tree-id1660 . -17) (undo-tree-id1661 . -17) (undo-tree-id1662 . -17) (undo-tree-id1663 . -17) (undo-tree-id1664 . -17) (undo-tree-id1665 . -17) (undo-tree-id1666 . -17) (undo-tree-id1667 . -17) (undo-tree-id1668 . -17) (undo-tree-id1669 . -17) (undo-tree-id1670 . -17) (undo-tree-id1671 . -17) (undo-tree-id1672 . -17) (undo-tree-id1673 . -17) (undo-tree-id1674 . -17) (undo-tree-id1675 . -17) (undo-tree-id1676 . -17) (undo-tree-id1677 . -17) (undo-tree-id1678 . -17) (undo-tree-id1679 . -17) (undo-tree-id1680 . -17) (undo-tree-id1681 . -17) (undo-tree-id1682 . -17) (undo-tree-id1683 . -17) (undo-tree-id1684 . -17) (undo-tree-id1685 . -17) (undo-tree-id1686 . -17) (undo-tree-id1687 . -17) (undo-tree-id1688 . -17) (undo-tree-id1689 . -17) (undo-tree-id1690 . -17) (undo-tree-id1691 . -17) (undo-tree-id1692 . -17) (undo-tree-id1693 . -17) (undo-tree-id1694 . -17) (undo-tree-id1695 . -17) (undo-tree-id1696 . -17) (undo-tree-id1697 . -17) (undo-tree-id1698 . -17) (undo-tree-id1699 . -17) (undo-tree-id1700 . -17) (undo-tree-id1701 . -17) (undo-tree-id1702 . -17) (undo-tree-id1703 . -17) (undo-tree-id1704 . -17) (undo-tree-id1705 . -17) (undo-tree-id1706 . -17) (undo-tree-id1707 . -17) (undo-tree-id1708 . -17) (undo-tree-id1709 . -17) (undo-tree-id1710 . -17) (undo-tree-id1711 . -17) (undo-tree-id1712 . -17) (undo-tree-id1713 . -17) (undo-tree-id1714 . -17) (undo-tree-id1715 . -17) (undo-tree-id1716 . -17) (undo-tree-id1717 . -17) (undo-tree-id1718 . -17) (undo-tree-id1719 . -17) (undo-tree-id1720 . -17) (undo-tree-id1721 . -17) (undo-tree-id1722 . -17) (undo-tree-id1723 . -17) (undo-tree-id1724 . -17) (undo-tree-id1725 . -17) (undo-tree-id1726 . -17) (undo-tree-id1727 . -17) (undo-tree-id1728 . -17) (undo-tree-id1729 . -17) (undo-tree-id1730 . -17) (undo-tree-id1731 . -17) (undo-tree-id1732 . -17) (undo-tree-id1733 . -17) (undo-tree-id1734 . -17) (undo-tree-id1735 . -17) (undo-tree-id1736 . -17) (undo-tree-id1737 . -17) (undo-tree-id1738 . -17) (undo-tree-id1739 . -17) (undo-tree-id1740 . -17) (undo-tree-id1741 . -17) (undo-tree-id1742 . -17) (undo-tree-id1743 . -17) (undo-tree-id1744 . -17) (undo-tree-id1745 . -17) (undo-tree-id1746 . -17) (undo-tree-id1747 . -17) (undo-tree-id1748 . -17) (undo-tree-id1749 . -17) (undo-tree-id1750 . -17) (undo-tree-id1751 . -17) (undo-tree-id1752 . -17) (undo-tree-id1753 . -17) (undo-tree-id1754 . -17) (undo-tree-id1755 . -17) (undo-tree-id1756 . -17) (undo-tree-id1757 . -17) (undo-tree-id1758 . -17) (undo-tree-id1759 . -17) (undo-tree-id1760 . -17) (undo-tree-id1761 . -17) (undo-tree-id1762 . -17) (undo-tree-id1763 . -17) (undo-tree-id1764 . -17) (undo-tree-id1765 . -17) (undo-tree-id1766 . -17) (undo-tree-id1767 . -17) (undo-tree-id1768 . -17) (undo-tree-id1769 . -17) (undo-tree-id1770 . -17) (undo-tree-id1771 . -17) (undo-tree-id1772 . -17) (undo-tree-id1773 . -17) (undo-tree-id1774 . -17) (undo-tree-id1775 . -17) (undo-tree-id1776 . -17) (undo-tree-id1777 . -17) (undo-tree-id1778 . -17) (undo-tree-id1779 . -17) (undo-tree-id1780 . -17) (undo-tree-id1781 . -17) (undo-tree-id1782 . -17) (undo-tree-id1783 . -17) (undo-tree-id1784 . -17) (undo-tree-id1785 . -17) (undo-tree-id1786 . -17) (undo-tree-id1787 . -17) (undo-tree-id1788 . -17) (undo-tree-id1789 . -17) (undo-tree-id1790 . -17) (undo-tree-id1791 . -17) (undo-tree-id1792 . -17) (undo-tree-id1793 . -17) (undo-tree-id1794 . -17) (undo-tree-id1795 . -17) (undo-tree-id1796 . -17) (undo-tree-id1797 . -17) (undo-tree-id1798 . -17) (undo-tree-id1799 . -17) (undo-tree-id1800 . -17) (undo-tree-id1801 . -17) (undo-tree-id1802 . -17) (undo-tree-id1803 . -17) (undo-tree-id1804 . -17) (undo-tree-id1805 . -17) (undo-tree-id1806 . -17) (undo-tree-id1807 . -17) (undo-tree-id1808 . -17) (undo-tree-id1809 . -17) (undo-tree-id1810 . -17) (undo-tree-id1811 . -17) (undo-tree-id1812 . -17) (undo-tree-id1813 . -17) (undo-tree-id1814 . -17) (undo-tree-id1815 . -17) (undo-tree-id1816 . -17) (undo-tree-id1817 . -17) (undo-tree-id1818 . -17) (undo-tree-id1819 . -17) (undo-tree-id1820 . -17) (undo-tree-id1821 . -17) (undo-tree-id1822 . -17) (undo-tree-id1823 . -17) (undo-tree-id1824 . -17) (undo-tree-id1825 . -17) (undo-tree-id1826 . -17) (undo-tree-id1827 . -17) (undo-tree-id1828 . -17) (undo-tree-id1829 . -17) (undo-tree-id1830 . -17) (undo-tree-id1831 . -17) (undo-tree-id1832 . -17) (undo-tree-id1833 . -17) (undo-tree-id1834 . -17) (undo-tree-id1835 . -17) (undo-tree-id1836 . -17) (undo-tree-id1837 . -17) (undo-tree-id1838 . -17) (undo-tree-id1839 . -17) (undo-tree-id1840 . -17) (undo-tree-id1841 . -17) (undo-tree-id1842 . -17) (undo-tree-id1843 . -17) (undo-tree-id1844 . -17) (undo-tree-id1845 . -17) (undo-tree-id1846 . -17) (undo-tree-id1847 . -17) (undo-tree-id1848 . -17) (undo-tree-id1849 . -17) (undo-tree-id1850 . -17) (undo-tree-id1851 . -17) (undo-tree-id1852 . -17) (undo-tree-id1853 . -17) (undo-tree-id1854 . -17) (undo-tree-id1855 . -17) (undo-tree-id1856 . -17) (undo-tree-id1857 . -17) (undo-tree-id1858 . -17) (undo-tree-id1859 . -17) (undo-tree-id1860 . -17) (undo-tree-id1861 . -17) (undo-tree-id1862 . -17) (undo-tree-id1863 . -17) (undo-tree-id1864 . -17) (undo-tree-id1865 . -17) (undo-tree-id1866 . -17) (undo-tree-id1867 . -17) (undo-tree-id1868 . -17) (undo-tree-id1869 . -17) (undo-tree-id1870 . -17) (undo-tree-id1871 . -17) (undo-tree-id1872 . -17) (undo-tree-id1873 . -17) (undo-tree-id1874 . -17) (undo-tree-id1875 . -17) (undo-tree-id1876 . -35) 895 (t 26077 47370 556367 109000)) nil (26077 47423 830886 999000) 0 nil])
([nil nil ((apply -3 333 530 undo--wrap-and-run-primitive-undo 333 530 ((335 . 338) 524)) (t 26077 47423 843032 448000)) nil (26077 50587 782059 909000) 0 nil])
([nil nil ((apply 3 885 901 undo--wrap-and-run-primitive-undo 885 901 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -885) 904)) (t 26077 50589 129621 182000)) nil (26077 50800 910485 401000) 0 nil] [nil nil ((apply -3 228 530 undo--wrap-and-run-primitive-undo 228 530 ((230 . 233) 333)) (t 26077 50474 312957 326000)) ((apply 3 228 527 undo--wrap-and-run-primitive-undo 228 527 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . 230) 261)) (t 26077 50490 196290 270000)) (26077 50490 181843 294000) 0 nil])
([nil nil ((921 . 922) (908 . 921) (#("sy" 0 2 (fontified nil)) . 908) (908 . 910) (#("synatax_ptr_f" 0 13 (fontified nil)) . -908) (908 . 921) (#("sy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -908) (undo-tree-id1877 . -2) (undo-tree-id1878 . -2) (undo-tree-id1879 . -2) (undo-tree-id1880 . -2) 910 (908 . 910) (904 . 907) (903 . 904) (903 . 904) (900 . 903)) nil (26077 50800 910482 115000) 0 nil])
nil
([nil nil ((921 . 923) (t 26077 50800 919615 979000)) nil (26077 50844 417283 921000) 0 nil])
([nil nil ((924 . 953) (923 . 923) (923 . 924) (#("
                             " 0 1 (fontified t) 1 30 (fontified t)) . 923) (undo-tree-id1899 . -30) 953 (955 . 965) (954 . 956) (907 . 908) (908 . 909) (922 . 951) (921 . 921) (921 . 922)) nil (26077 50844 417282 635000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1898 . 1)) nil (26077 50844 417279 654000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1897 . 1)) nil (26077 50844 417277 926000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1896 . 1)) nil (26077 50844 417276 363000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1895 . 1)) nil (26077 50844 417274 826000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1894 . 1)) nil (26077 50844 417273 535000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1893 . 1)) nil (26077 50844 417272 154000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1892 . 1)) nil (26077 50844 417269 921000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1891 . 1)) nil (26077 50844 417268 309000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1890 . 1)) nil (26077 50844 417266 600000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1889 . 1)) nil (26077 50844 417264 971000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1888 . 1)) nil (26077 50844 417263 227000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1887 . 1)) nil (26077 50844 417261 850000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1886 . 1)) nil (26077 50844 417260 212000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 924) (undo-tree-id1885 . 1)) nil (26077 50844 417258 394000) 0 nil])
([nil nil ((#("               " 0 15 (fontified t)) . 924) (undo-tree-id1883 . -14) (undo-tree-id1884 . 15)) nil (26077 50844 417256 254000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -926) (undo-tree-id1881 . -2) (undo-tree-id1882 . -2) 928 (925 . 928)) nil (26077 50844 420510 987000) 0 nil])
([nil nil ((nil rear-nonsticky nil 927 . 928) (#("
" 0 1 (fontified nil)) . -1252) (925 . 1253) 924) nil (26077 50889 631828 599000) 0 nil] [nil nil ((nil rear-nonsticky nil 940 . 941) (nil fontified nil 926 . 941) (926 . 941)) ((#("               " 0 14 (fontified nil) 14 15 (fontified nil rear-nonsticky nil)) . 926) (undo-tree-id1900 . -14) (undo-tree-id1901 . -14) (undo-tree-id1902 . -14) (undo-tree-id1903 . -14) (nil rear-nonsticky t 940 . 941)) (26077 50844 417241 452000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1253) (undo-tree-id1919 . 1)) nil (26077 50889 631827 822000) 0 nil])
nil
([nil nil ((#("			       
" 0 10 (fontified t) 10 11 (fontified t)) . 1253) (undo-tree-id1917 . -10) (undo-tree-id1918 . 11)) nil (26077 50889 631826 709000) 0 nil])
([nil nil ((#("virtual " 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 928) (undo-tree-id1916 . -7)) nil (26077 50889 631825 142000) 0 nil])
([nil nil ((#("virtual " 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 1091) (undo-tree-id1915 . -7)) nil (26077 50889 631824 143000) 0 nil])
([nil nil ((#("virtual " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 1190) (undo-tree-id1914 . -7)) nil (26077 50889 631822 936000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1221) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (#("0" 0 1 (fontified t)) . -1222) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) 1223 (#("=" 0 1 (fontified t)) . -1182) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#("0" 0 1 (fontified t)) . -1183) (undo-tree-id1910 . -1) 1184 (#("=" 0 1 (fontified t)) . -1085) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("0" 0 1 (fontified t)) . -1086) (undo-tree-id1913 . -1) 1087) nil (26077 50889 631818 998000) 0 nil])
([nil nil ((199 . 200) (191 . 199) (189 . 191) (183 . 189) (178 . 183) (177 . 179) (171 . 177) (169 . 171) (166 . 169) (154 . 166) (apply yas--snippet-revive 147 154 #s(yas--snippet nil nil #s(yas--exit 154 nil) 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 154 nil) 10 nil nil nil nil)) (147 . 154) (#("define $0" 0 9 (fontified nil)) . 147) (undo-tree-id2904 . -9) (147 . 156) (#("de" 0 2 (c-in-sws t fontified nil)) . 147) (undo-tree-id2905 . -2) (147 . 149) (#("define macro" 0 12 (c-in-sws t fontified nil)) . -147) (undo-tree-id2906 . -12) (147 . 159) (#("def" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face) 2 3 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -147) (undo-tree-id2907 . -3) (undo-tree-id2908 . -3) (undo-tree-id2909 . -3) 150 (148 . 150) (#("e" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -148) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -149) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -150) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -151) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -152) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) 153 (#(" " 0 1 (fontified t c-in-sws t)) . 153) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) 154 (#("V" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -154) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (#("E" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -155) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (#("C" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -156) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) 157 (154 . 157) (#("v" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -154) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (#("e" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -155) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (#("c" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -156) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (#("b" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -157) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (#("n" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -158) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (#("f" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -159) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) 160 (154 . 160) (apply yas--snippet-revive 147 154 #s(yas--snippet nil nil #s(yas--exit 154 nil) 9 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 154 nil) 9 nil nil nil nil)) (147 . 154) (#("define $0" 0 9 (fontified nil)) . 147) (undo-tree-id2955 . -9) (147 . 156) (#("d" 0 1 (c-in-sws t fontified nil)) . 147) (undo-tree-id2956 . -1) (147 . 148) (#("define macro" 0 12 (c-in-sws t fontified nil)) . -147) (undo-tree-id2957 . -12) (147 . 159) (#("d" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -147) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) 148 (147 . 148) (146 . 147) (146 . 147) (t 26077 50889 702947 130000)) nil (26077 51273 89228 448000) 0 nil])
([nil nil ((620 . 631) (#("V" 0 1 (fontified nil)) . 620) (620 . 621) (#("VEC_BNF_TOK" 0 11 (fontified nil)) . -620) (620 . 631) (#("VE" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -620) (undo-tree-id1920 . -2) (undo-tree-id1921 . -2) (undo-tree-id1922 . -2) 622 (620 . 622) (620 . 621) (#("std::vector<token_class::bnf_token> " 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-2-face)) 12 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (syntax-table (5 . 60) fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t)) . 620) (undo-tree-id1923 . -35) (undo-tree-id1924 . -36) (undo-tree-id1925 . -12) (undo-tree-id1926 . -23) (undo-tree-id1927 . -28) (undo-tree-id1928 . -28) (undo-tree-id1929 . -28) (undo-tree-id1930 . -28) (undo-tree-id1931 . -28) (undo-tree-id1932 . -28) (undo-tree-id1933 . -28) (undo-tree-id1934 . -28) (undo-tree-id1935 . -28) (undo-tree-id1936 . -28) (undo-tree-id1937 . -28) (undo-tree-id1938 . -28) (undo-tree-id1939 . -28) (undo-tree-id1940 . -28) (undo-tree-id1941 . -28) (undo-tree-id1942 . -28) (undo-tree-id1943 . -28) (undo-tree-id1944 . -28) (undo-tree-id1945 . -28) (undo-tree-id1946 . -28) (undo-tree-id1947 . -28) (undo-tree-id1948 . -28) (undo-tree-id1949 . -28) (undo-tree-id1950 . -28) (undo-tree-id1951 . -28) (undo-tree-id1952 . -28) (undo-tree-id1953 . -28) (undo-tree-id1954 . -28) (undo-tree-id1955 . -28) (undo-tree-id1956 . -28) (undo-tree-id1957 . -28) (undo-tree-id1958 . -28) (undo-tree-id1959 . -28) (undo-tree-id1960 . -28) (undo-tree-id1961 . -28) (undo-tree-id1962 . -28) (undo-tree-id1963 . -28) (undo-tree-id1964 . -28) (undo-tree-id1965 . -28) (undo-tree-id1966 . -28) (undo-tree-id1967 . -28) (undo-tree-id1968 . -28) (undo-tree-id1969 . -23) (undo-tree-id1970 . -23) (undo-tree-id1971 . -23) (undo-tree-id1972 . -23) (undo-tree-id1973 . -23) (undo-tree-id1974 . -23) (undo-tree-id1975 . -23) (undo-tree-id1976 . -23) (undo-tree-id1977 . -23) (undo-tree-id1978 . -23) (undo-tree-id1979 . -23) (undo-tree-id1980 . -23) (undo-tree-id1981 . -23) (undo-tree-id1982 . -23) (undo-tree-id1983 . -23) (undo-tree-id1984 . -23) (undo-tree-id1985 . -23) (undo-tree-id1986 . -23) (undo-tree-id1987 . -23) (undo-tree-id1988 . -23) (undo-tree-id1989 . -23) (undo-tree-id1990 . -23) (undo-tree-id1991 . -23) (undo-tree-id1992 . -23) (undo-tree-id1993 . -23) (undo-tree-id1994 . -23) (undo-tree-id1995 . -23) (undo-tree-id1996 . -23) (undo-tree-id1997 . -23) (undo-tree-id1998 . -23) (undo-tree-id1999 . -23) (undo-tree-id2000 . -23) (undo-tree-id2001 . -23) (undo-tree-id2002 . -23) (undo-tree-id2003 . -23) (undo-tree-id2004 . -23) (undo-tree-id2005 . -23) (undo-tree-id2006 . -23) (undo-tree-id2007 . -23) (undo-tree-id2008 . -23) (undo-tree-id2009 . -23) (undo-tree-id2010 . -23) (undo-tree-id2011 . -23) (undo-tree-id2012 . -23) (undo-tree-id2013 . -23) (undo-tree-id2014 . -23) (undo-tree-id2015 . -23) (undo-tree-id2016 . -23) (undo-tree-id2017 . -23) (undo-tree-id2018 . -23) (undo-tree-id2019 . -23) (undo-tree-id2020 . -23) (undo-tree-id2021 . -23) (undo-tree-id2022 . -23) (undo-tree-id2023 . -23) (undo-tree-id2024 . -23) (undo-tree-id2025 . -23) (undo-tree-id2026 . -23) (undo-tree-id2027 . -23) (undo-tree-id2028 . -23) (undo-tree-id2029 . -23) (undo-tree-id2030 . -23) (undo-tree-id2031 . -23) (undo-tree-id2032 . -23) (undo-tree-id2033 . -23) (undo-tree-id2034 . -23) (undo-tree-id2035 . -23) (undo-tree-id2036 . -23) (undo-tree-id2037 . -23) (undo-tree-id2038 . -23) (undo-tree-id2039 . -23) (undo-tree-id2040 . -23) (undo-tree-id2041 . -23) (undo-tree-id2042 . -23) (undo-tree-id2043 . -23) (undo-tree-id2044 . -23) (undo-tree-id2045 . -23) (undo-tree-id2046 . -23) (undo-tree-id2047 . -23) (undo-tree-id2048 . -23) (undo-tree-id2049 . -23) (undo-tree-id2050 . -23) (undo-tree-id2051 . -23) (undo-tree-id2052 . -23) (undo-tree-id2053 . -23) (undo-tree-id2054 . -23) (undo-tree-id2055 . -23) (undo-tree-id2056 . -23) (undo-tree-id2057 . -23) (undo-tree-id2058 . -23) (undo-tree-id2059 . -23) (undo-tree-id2060 . -23) (undo-tree-id2061 . -23) (undo-tree-id2062 . -23) (undo-tree-id2063 . -23) (undo-tree-id2064 . -23) (undo-tree-id2065 . -23) (undo-tree-id2066 . -23) (undo-tree-id2067 . -23) (undo-tree-id2068 . -23) (undo-tree-id2069 . -23) (undo-tree-id2070 . -23) (undo-tree-id2071 . -23) (undo-tree-id2072 . -23) (undo-tree-id2073 . -23) (undo-tree-id2074 . -23) (undo-tree-id2075 . -23) (undo-tree-id2076 . -23) (undo-tree-id2077 . -23) (undo-tree-id2078 . -23) (undo-tree-id2079 . -23) (undo-tree-id2080 . -23) (undo-tree-id2081 . -23) (undo-tree-id2082 . -23) (undo-tree-id2083 . -23) (undo-tree-id2084 . -23) (undo-tree-id2085 . -23) (undo-tree-id2086 . -23) (undo-tree-id2087 . -23) (undo-tree-id2088 . -23) (undo-tree-id2089 . -23) (undo-tree-id2090 . -23) (undo-tree-id2091 . -23) (undo-tree-id2092 . -23) (undo-tree-id2093 . -23) (undo-tree-id2094 . -23) (undo-tree-id2095 . -23) (undo-tree-id2096 . -23) (undo-tree-id2097 . -23) (undo-tree-id2098 . -23) (undo-tree-id2099 . -23) (undo-tree-id2100 . -23) (undo-tree-id2101 . -23) (undo-tree-id2102 . -23) (undo-tree-id2103 . -23) (undo-tree-id2104 . -23) (undo-tree-id2105 . -23) (undo-tree-id2106 . -23) (undo-tree-id2107 . -23) (undo-tree-id2108 . -23) (undo-tree-id2109 . -23) (undo-tree-id2110 . -23) (undo-tree-id2111 . -23) (undo-tree-id2112 . -23) (undo-tree-id2113 . -23) (undo-tree-id2114 . -23) (undo-tree-id2115 . -23) (undo-tree-id2116 . -23) (undo-tree-id2117 . -23) (undo-tree-id2118 . -23) (undo-tree-id2119 . -23) (undo-tree-id2120 . -18) (undo-tree-id2121 . -18) (undo-tree-id2122 . -18) (undo-tree-id2123 . -18) (undo-tree-id2124 . -18) (undo-tree-id2125 . -18) (undo-tree-id2126 . -18) (undo-tree-id2127 . -18) (undo-tree-id2128 . -18) (undo-tree-id2129 . -18) (undo-tree-id2130 . -18) (undo-tree-id2131 . -18) (undo-tree-id2132 . -18) (undo-tree-id2133 . -18) (undo-tree-id2134 . -18) (undo-tree-id2135 . -18) (undo-tree-id2136 . -18) (undo-tree-id2137 . -18) (undo-tree-id2138 . -18) (undo-tree-id2139 . -18) (undo-tree-id2140 . -18) (undo-tree-id2141 . -18) (undo-tree-id2142 . -18) (undo-tree-id2143 . -18) (undo-tree-id2144 . -18) (undo-tree-id2145 . -18) (undo-tree-id2146 . -18) (undo-tree-id2147 . -18) (undo-tree-id2148 . -18) (undo-tree-id2149 . -18) (undo-tree-id2150 . -18) (undo-tree-id2151 . -18) (undo-tree-id2152 . -18) (undo-tree-id2153 . -18) (undo-tree-id2154 . -18) (undo-tree-id2155 . -18) (undo-tree-id2156 . -18) (undo-tree-id2157 . -18) (undo-tree-id2158 . -18) (undo-tree-id2159 . -18) (undo-tree-id2160 . -18) (undo-tree-id2161 . -18) (undo-tree-id2162 . -18) (undo-tree-id2163 . -18) (undo-tree-id2164 . -18) (undo-tree-id2165 . -18) (undo-tree-id2166 . -18) (undo-tree-id2167 . -18) (undo-tree-id2168 . -18) (undo-tree-id2169 . -18) (undo-tree-id2170 . -18) (undo-tree-id2171 . -18) (undo-tree-id2172 . -18) (undo-tree-id2173 . -18) (undo-tree-id2174 . -18) (undo-tree-id2175 . -18) (undo-tree-id2176 . -18) (undo-tree-id2177 . -18) (undo-tree-id2178 . -18) (undo-tree-id2179 . -18) (undo-tree-id2180 . -18) (undo-tree-id2181 . -18) (undo-tree-id2182 . -18) (undo-tree-id2183 . -18) (undo-tree-id2184 . -18) (undo-tree-id2185 . -18) (undo-tree-id2186 . -18) (undo-tree-id2187 . -18) (undo-tree-id2188 . -18) (undo-tree-id2189 . -18) (undo-tree-id2190 . -18) (undo-tree-id2191 . -18) (undo-tree-id2192 . -18) (undo-tree-id2193 . -18) (undo-tree-id2194 . -18) (undo-tree-id2195 . -18) (undo-tree-id2196 . -18) (undo-tree-id2197 . -18) (undo-tree-id2198 . -18) (undo-tree-id2199 . -18) (undo-tree-id2200 . -18) (undo-tree-id2201 . -18) (undo-tree-id2202 . -18) (undo-tree-id2203 . -18) (undo-tree-id2204 . -18) (undo-tree-id2205 . -18) (undo-tree-id2206 . -18) (undo-tree-id2207 . -18) (undo-tree-id2208 . -18) (undo-tree-id2209 . -18) (undo-tree-id2210 . -18) (undo-tree-id2211 . -18) (undo-tree-id2212 . -18) (undo-tree-id2213 . -18) (undo-tree-id2214 . -18) (undo-tree-id2215 . -18) (undo-tree-id2216 . -18) (undo-tree-id2217 . -18) (undo-tree-id2218 . -18) (undo-tree-id2219 . -18) (undo-tree-id2220 . -18) (undo-tree-id2221 . -18) (undo-tree-id2222 . -18) (undo-tree-id2223 . -18) (undo-tree-id2224 . -18) (undo-tree-id2225 . -18) (undo-tree-id2226 . -18) (undo-tree-id2227 . -18) (undo-tree-id2228 . -18) (undo-tree-id2229 . -18) (undo-tree-id2230 . -18) (undo-tree-id2231 . -18) (undo-tree-id2232 . -18) (undo-tree-id2233 . -18) (undo-tree-id2234 . -18) (undo-tree-id2235 . -18) (undo-tree-id2236 . -18) (undo-tree-id2237 . -18) (undo-tree-id2238 . -18) (undo-tree-id2239 . -18) (undo-tree-id2240 . -18) (undo-tree-id2241 . -18) (undo-tree-id2242 . -18) (undo-tree-id2243 . -18) (undo-tree-id2244 . -18) (undo-tree-id2245 . -18) (undo-tree-id2246 . -17) (undo-tree-id2247 . -17) (undo-tree-id2248 . -17) (undo-tree-id2249 . -17) (undo-tree-id2250 . -17) (undo-tree-id2251 . -17) (undo-tree-id2252 . -17) (undo-tree-id2253 . -17) (undo-tree-id2254 . -17) (undo-tree-id2255 . -17) (undo-tree-id2256 . -17) (undo-tree-id2257 . -17) (undo-tree-id2258 . -17) (undo-tree-id2259 . -17) (undo-tree-id2260 . -17) (undo-tree-id2261 . -17) (undo-tree-id2262 . -17) (undo-tree-id2263 . -17) (undo-tree-id2264 . -17) (undo-tree-id2265 . -17) (undo-tree-id2266 . -17) (undo-tree-id2267 . -17) (undo-tree-id2268 . -17) (undo-tree-id2269 . -17) (undo-tree-id2270 . -17) (undo-tree-id2271 . -17) (undo-tree-id2272 . -17) (undo-tree-id2273 . -17) (undo-tree-id2274 . -17) (undo-tree-id2275 . -17) (undo-tree-id2276 . -17) (undo-tree-id2277 . -17) (undo-tree-id2278 . -17) (undo-tree-id2279 . -17) (undo-tree-id2280 . -17) (undo-tree-id2281 . -17) (undo-tree-id2282 . -17) (undo-tree-id2283 . -17) (undo-tree-id2284 . -17) (undo-tree-id2285 . -17) (undo-tree-id2286 . -17) (undo-tree-id2287 . -17) (undo-tree-id2288 . -17) (undo-tree-id2289 . -17) (undo-tree-id2290 . -17) (undo-tree-id2291 . -17) (undo-tree-id2292 . -17) (undo-tree-id2293 . -17) (undo-tree-id2294 . -17) (undo-tree-id2295 . -17) (undo-tree-id2296 . -17) (undo-tree-id2297 . -17) (undo-tree-id2298 . -17) (undo-tree-id2299 . -17) (undo-tree-id2300 . -17) (undo-tree-id2301 . -17) (undo-tree-id2302 . -17) (undo-tree-id2303 . -17) (undo-tree-id2304 . -17) (undo-tree-id2305 . -17) (undo-tree-id2306 . -17) (undo-tree-id2307 . -17) (undo-tree-id2308 . -17) (undo-tree-id2309 . -17) (undo-tree-id2310 . -17) (undo-tree-id2311 . -17) (undo-tree-id2312 . -17) (undo-tree-id2313 . -17) (undo-tree-id2314 . -17) (undo-tree-id2315 . -17) (undo-tree-id2316 . -17) (undo-tree-id2317 . -17) (undo-tree-id2318 . -17) (undo-tree-id2319 . -17) (undo-tree-id2320 . -17) (undo-tree-id2321 . -17) (undo-tree-id2322 . -17) (undo-tree-id2323 . -17) (undo-tree-id2324 . -17) (undo-tree-id2325 . -17) (undo-tree-id2326 . -17) (undo-tree-id2327 . -17) (undo-tree-id2328 . -17) (undo-tree-id2329 . -17) (undo-tree-id2330 . -17) (undo-tree-id2331 . -17) (undo-tree-id2332 . -17) (undo-tree-id2333 . -17) (undo-tree-id2334 . -17) (undo-tree-id2335 . -17) (undo-tree-id2336 . -17) (undo-tree-id2337 . -17) (undo-tree-id2338 . -17) (undo-tree-id2339 . -17) (undo-tree-id2340 . -17) (undo-tree-id2341 . -17) (undo-tree-id2342 . -17) (undo-tree-id2343 . -17) (undo-tree-id2344 . -17) (undo-tree-id2345 . -17) (undo-tree-id2346 . -17) (undo-tree-id2347 . -17) (undo-tree-id2348 . -17) (undo-tree-id2349 . -17) (undo-tree-id2350 . -17) (undo-tree-id2351 . -17) (undo-tree-id2352 . -17) (undo-tree-id2353 . -17) (undo-tree-id2354 . -17) (undo-tree-id2355 . -17) (undo-tree-id2356 . -17) (undo-tree-id2357 . -17) (undo-tree-id2358 . -17) (undo-tree-id2359 . -17) (undo-tree-id2360 . -17) (undo-tree-id2361 . -17) (undo-tree-id2362 . -17) (undo-tree-id2363 . -17) (undo-tree-id2364 . -17) (undo-tree-id2365 . -17) (undo-tree-id2366 . -17) (undo-tree-id2367 . -17) (undo-tree-id2368 . -17) (undo-tree-id2369 . -17) (undo-tree-id2370 . -17) (undo-tree-id2371 . -17) (undo-tree-id2372 . -12) (undo-tree-id2373 . -12) (undo-tree-id2374 . -12) (undo-tree-id2375 . -12) (undo-tree-id2376 . -12) (undo-tree-id2377 . -12) (undo-tree-id2378 . -12) (undo-tree-id2379 . -12) (undo-tree-id2380 . -12) (undo-tree-id2381 . -12) (undo-tree-id2382 . -12) (undo-tree-id2383 . -12) (undo-tree-id2384 . -12) (undo-tree-id2385 . -12) (undo-tree-id2386 . -12) (undo-tree-id2387 . -12) (undo-tree-id2388 . -12) (undo-tree-id2389 . -12) (undo-tree-id2390 . -12) (undo-tree-id2391 . -12) (undo-tree-id2392 . -12) (undo-tree-id2393 . -12) (undo-tree-id2394 . -12) (undo-tree-id2395 . -12) (undo-tree-id2396 . -12) (undo-tree-id2397 . -12) (undo-tree-id2398 . -12) (undo-tree-id2399 . -12) (undo-tree-id2400 . -12) (undo-tree-id2401 . -12) (undo-tree-id2402 . -12) (undo-tree-id2403 . -12) (undo-tree-id2404 . -12) (undo-tree-id2405 . -12) (undo-tree-id2406 . -12) (undo-tree-id2407 . -12) (undo-tree-id2408 . -12) (undo-tree-id2409 . -12) (undo-tree-id2410 . -12) (undo-tree-id2411 . -12) (undo-tree-id2412 . -12) (undo-tree-id2413 . -12) (undo-tree-id2414 . -12) (undo-tree-id2415 . -12) (undo-tree-id2416 . -12) (undo-tree-id2417 . -12) (undo-tree-id2418 . -12) (undo-tree-id2419 . -12) (undo-tree-id2420 . -12) (undo-tree-id2421 . -12) (undo-tree-id2422 . -12) (undo-tree-id2423 . -12) (undo-tree-id2424 . -12) (undo-tree-id2425 . -12) (undo-tree-id2426 . -12) (undo-tree-id2427 . -12) (undo-tree-id2428 . -12) (undo-tree-id2429 . -12) (undo-tree-id2430 . -12) (undo-tree-id2431 . -12) (undo-tree-id2432 . -12) (undo-tree-id2433 . -12) (undo-tree-id2434 . -12) (undo-tree-id2435 . -12) (undo-tree-id2436 . -12) (undo-tree-id2437 . -12) (undo-tree-id2438 . -12) (undo-tree-id2439 . -12) (undo-tree-id2440 . -12) (undo-tree-id2441 . -12) (undo-tree-id2442 . -12) (undo-tree-id2443 . -12) (undo-tree-id2444 . -12) (undo-tree-id2445 . -12) (undo-tree-id2446 . -12) (undo-tree-id2447 . -12) (undo-tree-id2448 . -12) (undo-tree-id2449 . -12) (undo-tree-id2450 . -12) (undo-tree-id2451 . -12) (undo-tree-id2452 . -12) (undo-tree-id2453 . -12) (undo-tree-id2454 . -12) (undo-tree-id2455 . -12) (undo-tree-id2456 . -12) (undo-tree-id2457 . -12) (undo-tree-id2458 . -12) (undo-tree-id2459 . -12) (undo-tree-id2460 . -12) (undo-tree-id2461 . -12) (undo-tree-id2462 . -12) (undo-tree-id2463 . -12) (undo-tree-id2464 . -12) (undo-tree-id2465 . -12) (undo-tree-id2466 . -12) (undo-tree-id2467 . -12) (undo-tree-id2468 . -12) (undo-tree-id2469 . -12) (undo-tree-id2470 . -12) (undo-tree-id2471 . -12) (undo-tree-id2472 . -12) (undo-tree-id2473 . -12) (undo-tree-id2474 . -12) (undo-tree-id2475 . -12) (undo-tree-id2476 . -12) (undo-tree-id2477 . -12) (undo-tree-id2478 . -12) (undo-tree-id2479 . -12) (undo-tree-id2480 . -12) (undo-tree-id2481 . -12) (undo-tree-id2482 . -12) (undo-tree-id2483 . -12) (undo-tree-id2484 . -12) (undo-tree-id2485 . -12) (undo-tree-id2486 . -12) (undo-tree-id2487 . -12) (undo-tree-id2488 . -12) (undo-tree-id2489 . -12) (undo-tree-id2490 . -12) (undo-tree-id2491 . -12) (undo-tree-id2492 . -12) (undo-tree-id2493 . -12) (undo-tree-id2494 . -12) (undo-tree-id2495 . -12) (undo-tree-id2496 . -12) (undo-tree-id2497 . -12) (undo-tree-id2498 . -12) (undo-tree-id2499 . -12) (undo-tree-id2500 . -12) (undo-tree-id2501 . -12) (undo-tree-id2502 . -12) (undo-tree-id2503 . -12) (undo-tree-id2504 . -12) (undo-tree-id2505 . -12) (undo-tree-id2506 . -12) (undo-tree-id2507 . -12) (undo-tree-id2508 . -12) (undo-tree-id2509 . -12) (undo-tree-id2510 . -12) (undo-tree-id2511 . -12) (undo-tree-id2512 . -12) (undo-tree-id2513 . -12) (undo-tree-id2514 . -12) (undo-tree-id2515 . -12) (undo-tree-id2516 . -12) (undo-tree-id2517 . -12) (undo-tree-id2518 . -12) (undo-tree-id2519 . -12) (undo-tree-id2520 . -12) (undo-tree-id2521 . -12) (undo-tree-id2522 . -12) (undo-tree-id2523 . -11) (undo-tree-id2524 . -11) (undo-tree-id2525 . -11) (undo-tree-id2526 . -11) (undo-tree-id2527 . -11) (undo-tree-id2528 . -11) (undo-tree-id2529 . -11) (undo-tree-id2530 . -11) (undo-tree-id2531 . -11) (undo-tree-id2532 . -11) (undo-tree-id2533 . -11) (undo-tree-id2534 . -11) (undo-tree-id2535 . -11) (undo-tree-id2536 . -11) (undo-tree-id2537 . -11) (undo-tree-id2538 . -11) (undo-tree-id2539 . -11) (undo-tree-id2540 . -11) (undo-tree-id2541 . -11) (undo-tree-id2542 . -11) (undo-tree-id2543 . -11) (undo-tree-id2544 . -11) (undo-tree-id2545 . -11) (undo-tree-id2546 . -11) (undo-tree-id2547 . -11) (undo-tree-id2548 . -11) (undo-tree-id2549 . -11) (undo-tree-id2550 . -11) (undo-tree-id2551 . -11) (undo-tree-id2552 . -11) (undo-tree-id2553 . -11) (undo-tree-id2554 . -11) (undo-tree-id2555 . -11) (undo-tree-id2556 . -11) (undo-tree-id2557 . -11) (undo-tree-id2558 . -11) (undo-tree-id2559 . -11) (undo-tree-id2560 . -11) (undo-tree-id2561 . -11) (undo-tree-id2562 . -11) (undo-tree-id2563 . -11) (undo-tree-id2564 . -11) (undo-tree-id2565 . -11) (undo-tree-id2566 . -11) (undo-tree-id2567 . -11) (undo-tree-id2568 . -11) (undo-tree-id2569 . -11) (undo-tree-id2570 . -11) (undo-tree-id2571 . -11) (undo-tree-id2572 . -11) (undo-tree-id2573 . -11) (undo-tree-id2574 . -11) (undo-tree-id2575 . -11) (undo-tree-id2576 . -11) (undo-tree-id2577 . -11) (undo-tree-id2578 . -11) (undo-tree-id2579 . -11) (undo-tree-id2580 . -11) (undo-tree-id2581 . -11) (undo-tree-id2582 . -11) (undo-tree-id2583 . -11) (undo-tree-id2584 . -11) (undo-tree-id2585 . -11) (undo-tree-id2586 . -11) (undo-tree-id2587 . -11) (undo-tree-id2588 . -11) (undo-tree-id2589 . -11) (undo-tree-id2590 . -11) (undo-tree-id2591 . -11) (undo-tree-id2592 . -11) (undo-tree-id2593 . -11) (undo-tree-id2594 . -11) (undo-tree-id2595 . -11) (undo-tree-id2596 . -11) (undo-tree-id2597 . -11) (undo-tree-id2598 . -11) (undo-tree-id2599 . -11) (undo-tree-id2600 . -11) (undo-tree-id2601 . -11) (undo-tree-id2602 . -11) (undo-tree-id2603 . -11) (undo-tree-id2604 . -11) (undo-tree-id2605 . -11) (undo-tree-id2606 . -11) (undo-tree-id2607 . -11) (undo-tree-id2608 . -11) (undo-tree-id2609 . -11) (undo-tree-id2610 . -11) (undo-tree-id2611 . -11) (undo-tree-id2612 . -11) (undo-tree-id2613 . -11) (undo-tree-id2614 . -11) (undo-tree-id2615 . -11) (undo-tree-id2616 . -11) (undo-tree-id2617 . -11) (undo-tree-id2618 . -11) (undo-tree-id2619 . -11) (undo-tree-id2620 . -11) (undo-tree-id2621 . -11) (undo-tree-id2622 . -11) (undo-tree-id2623 . -11) (undo-tree-id2624 . -11) (undo-tree-id2625 . -11) (undo-tree-id2626 . -11) (undo-tree-id2627 . -11) (undo-tree-id2628 . -11) (undo-tree-id2629 . -11) (undo-tree-id2630 . -11) (undo-tree-id2631 . -11) (undo-tree-id2632 . -11) (undo-tree-id2633 . -11) (undo-tree-id2634 . -11) (undo-tree-id2635 . -11) (undo-tree-id2636 . -11) (undo-tree-id2637 . -11) (undo-tree-id2638 . -11) (undo-tree-id2639 . -11) (undo-tree-id2640 . -11) (undo-tree-id2641 . -11) (undo-tree-id2642 . -11) (undo-tree-id2643 . -11) (undo-tree-id2644 . -11) (undo-tree-id2645 . -11) (undo-tree-id2646 . -11) (undo-tree-id2647 . -11) (undo-tree-id2648 . -11) (undo-tree-id2649 . -5) (undo-tree-id2650 . -5) (undo-tree-id2651 . -5) (undo-tree-id2652 . -5) (undo-tree-id2653 . -5) (undo-tree-id2654 . -5) (undo-tree-id2655 . -5) (undo-tree-id2656 . -5) (undo-tree-id2657 . -5) (undo-tree-id2658 . -5) (undo-tree-id2659 . -5) (undo-tree-id2660 . -5) (undo-tree-id2661 . -5) (undo-tree-id2662 . -5) (undo-tree-id2663 . -5) (undo-tree-id2664 . -5) (undo-tree-id2665 . -5) (undo-tree-id2666 . -5) (undo-tree-id2667 . -5) (undo-tree-id2668 . -5) (undo-tree-id2669 . -5) (undo-tree-id2670 . -5) (undo-tree-id2671 . -5) (undo-tree-id2672 . -5) (undo-tree-id2673 . -5) (undo-tree-id2674 . -5) (undo-tree-id2675 . -5) (undo-tree-id2676 . -5) (undo-tree-id2677 . -5) (undo-tree-id2678 . -5) (undo-tree-id2679 . -5) (undo-tree-id2680 . -5) (undo-tree-id2681 . -5) (undo-tree-id2682 . -5) (undo-tree-id2683 . -5) (undo-tree-id2684 . -5) (undo-tree-id2685 . -5) (undo-tree-id2686 . -5) (undo-tree-id2687 . -5) (undo-tree-id2688 . -5) (undo-tree-id2689 . -5) (undo-tree-id2690 . -5) (undo-tree-id2691 . -5) (undo-tree-id2692 . -5) (undo-tree-id2693 . -5) (undo-tree-id2694 . -5) (undo-tree-id2695 . -5) (undo-tree-id2696 . -5) (undo-tree-id2697 . -5) (undo-tree-id2698 . -5) (undo-tree-id2699 . -5) (undo-tree-id2700 . -5) (undo-tree-id2701 . -5) (undo-tree-id2702 . -5) (undo-tree-id2703 . -5) (undo-tree-id2704 . -5) (undo-tree-id2705 . -5) (undo-tree-id2706 . -5) (undo-tree-id2707 . -5) (undo-tree-id2708 . -5) (undo-tree-id2709 . -5) (undo-tree-id2710 . -5) (undo-tree-id2711 . -5) (undo-tree-id2712 . -5) (undo-tree-id2713 . -5) (undo-tree-id2714 . -5) (undo-tree-id2715 . -5) (undo-tree-id2716 . -5) (undo-tree-id2717 . -5) (undo-tree-id2718 . -5) (undo-tree-id2719 . -5) (undo-tree-id2720 . -5) (undo-tree-id2721 . -5) (undo-tree-id2722 . -5) (undo-tree-id2723 . -5) (undo-tree-id2724 . -5) (undo-tree-id2725 . -5) (undo-tree-id2726 . -5) (undo-tree-id2727 . -5) (undo-tree-id2728 . -5) (undo-tree-id2729 . -5) (undo-tree-id2730 . -5) (undo-tree-id2731 . -5) (undo-tree-id2732 . -5) (undo-tree-id2733 . -5) (undo-tree-id2734 . -5) (undo-tree-id2735 . -5) (undo-tree-id2736 . -5) (undo-tree-id2737 . -5) (undo-tree-id2738 . -5) (undo-tree-id2739 . -5) (undo-tree-id2740 . -5) (undo-tree-id2741 . -5) (undo-tree-id2742 . -5) (undo-tree-id2743 . -5) (undo-tree-id2744 . -5) (undo-tree-id2745 . -5) (undo-tree-id2746 . -5) (undo-tree-id2747 . -5) (undo-tree-id2748 . -5) (undo-tree-id2749 . -5) (undo-tree-id2750 . -5) (undo-tree-id2751 . -5) (undo-tree-id2752 . -5) (undo-tree-id2753 . -5) (undo-tree-id2754 . -5) (undo-tree-id2755 . -5) (undo-tree-id2756 . -5) (undo-tree-id2757 . -5) (undo-tree-id2758 . -5) (undo-tree-id2759 . -5) (undo-tree-id2760 . -5) (undo-tree-id2761 . -5) (undo-tree-id2762 . -5) (undo-tree-id2763 . -5) (undo-tree-id2764 . -5) (undo-tree-id2765 . -5) (undo-tree-id2766 . -5) (undo-tree-id2767 . -5) (undo-tree-id2768 . -5) (undo-tree-id2769 . -5) (undo-tree-id2770 . -5) (undo-tree-id2771 . -5) (undo-tree-id2772 . -5) (undo-tree-id2773 . -5) (undo-tree-id2774 . -5) (undo-tree-id2775 . -3) (undo-tree-id2776 . -3) (undo-tree-id2777 . -3) (undo-tree-id2778 . -3) (undo-tree-id2779 . -3) (undo-tree-id2780 . -3) (undo-tree-id2781 . -3) (undo-tree-id2782 . -3) (undo-tree-id2783 . -3) (undo-tree-id2784 . -3) (undo-tree-id2785 . -3) (undo-tree-id2786 . -3) (undo-tree-id2787 . -3) (undo-tree-id2788 . -3) (undo-tree-id2789 . -3) (undo-tree-id2790 . -3) (undo-tree-id2791 . -3) (undo-tree-id2792 . -3) (undo-tree-id2793 . -3) (undo-tree-id2794 . -3) (undo-tree-id2795 . -3) (undo-tree-id2796 . -3) (undo-tree-id2797 . -3) (undo-tree-id2798 . -3) (undo-tree-id2799 . -3) (undo-tree-id2800 . -3) (undo-tree-id2801 . -3) (undo-tree-id2802 . -3) (undo-tree-id2803 . -3) (undo-tree-id2804 . -3) (undo-tree-id2805 . -3) (undo-tree-id2806 . -3) (undo-tree-id2807 . -3) (undo-tree-id2808 . -3) (undo-tree-id2809 . -3) (undo-tree-id2810 . -3) (undo-tree-id2811 . -3) (undo-tree-id2812 . -3) (undo-tree-id2813 . -3) (undo-tree-id2814 . -3) (undo-tree-id2815 . -3) (undo-tree-id2816 . -3) (undo-tree-id2817 . -3) (undo-tree-id2818 . -3) (undo-tree-id2819 . -3) (undo-tree-id2820 . -3) (undo-tree-id2821 . -3) (undo-tree-id2822 . -3) (undo-tree-id2823 . -3) (undo-tree-id2824 . -3) (undo-tree-id2825 . -3) (undo-tree-id2826 . -3) (undo-tree-id2827 . -3) (undo-tree-id2828 . -3) (undo-tree-id2829 . -3) (undo-tree-id2830 . -3) (undo-tree-id2831 . -3) (undo-tree-id2832 . -3) (undo-tree-id2833 . -3) (undo-tree-id2834 . -3) (undo-tree-id2835 . -3) (undo-tree-id2836 . -3) (undo-tree-id2837 . -3) (undo-tree-id2838 . -3) (undo-tree-id2839 . -3) (undo-tree-id2840 . -3) (undo-tree-id2841 . -3) (undo-tree-id2842 . -3) (undo-tree-id2843 . -3) (undo-tree-id2844 . -3) (undo-tree-id2845 . -3) (undo-tree-id2846 . -3) (undo-tree-id2847 . -3) (undo-tree-id2848 . -3) (undo-tree-id2849 . -3) (undo-tree-id2850 . -3) (undo-tree-id2851 . -3) (undo-tree-id2852 . -3) (undo-tree-id2853 . -3) (undo-tree-id2854 . -3) (undo-tree-id2855 . -3) (undo-tree-id2856 . -3) (undo-tree-id2857 . -3) (undo-tree-id2858 . -3) (undo-tree-id2859 . -3) (undo-tree-id2860 . -3) (undo-tree-id2861 . -3) (undo-tree-id2862 . -3) (undo-tree-id2863 . -3) (undo-tree-id2864 . -3) (undo-tree-id2865 . -3) (undo-tree-id2866 . -3) (undo-tree-id2867 . -3) (undo-tree-id2868 . -3) (undo-tree-id2869 . -3) (undo-tree-id2870 . -3) (undo-tree-id2871 . -3) (undo-tree-id2872 . -3) (undo-tree-id2873 . -3) (undo-tree-id2874 . -3) (undo-tree-id2875 . -3) (undo-tree-id2876 . -3) (undo-tree-id2877 . -3) (undo-tree-id2878 . -3) (undo-tree-id2879 . -3) (undo-tree-id2880 . -3) (undo-tree-id2881 . -3) (undo-tree-id2882 . -3) (undo-tree-id2883 . -3) (undo-tree-id2884 . -3) (undo-tree-id2885 . -3) (undo-tree-id2886 . -3) (undo-tree-id2887 . -3) (undo-tree-id2888 . -3) (undo-tree-id2889 . -3) (undo-tree-id2890 . -3) (undo-tree-id2891 . -3) (undo-tree-id2892 . -3) (undo-tree-id2893 . -3) (undo-tree-id2894 . -3) (undo-tree-id2895 . -3) (undo-tree-id2896 . -3) (undo-tree-id2897 . -3) (undo-tree-id2898 . -3) (undo-tree-id2899 . -3) (undo-tree-id2900 . -3) (undo-tree-id2901 . -36) (undo-tree-id2902 . -36) (undo-tree-id2903 . -36)) nil (26077 51273 89167 168000) 0 nil])
([nil nil ((nil face (rainbow-delimiters-depth-2-face) 640 . 651) (nil fontified nil 640 . 651) (640 . 651) (#("V" 0 1 (fontified nil)) . 640) (nil face (rainbow-delimiters-depth-2-face) 640 . 641) (nil fontified nil 640 . 641) (640 . 641) (#("VEC_BNF_TOK" 0 11 (fontified nil)) . -640) (nil face (rainbow-delimiters-depth-2-face) 640 . 651) (nil fontified nil 640 . 651) (640 . 651) (#("VE" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -640) (undo-tree-id3458 . -2) (undo-tree-id3459 . -2) 642 (640 . 642) (640 . 641) (#("std::vector<token_class::bnf_token> " 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-3-face)) 12 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-3-face)) 35 36 (fontified t)) . 640) (undo-tree-id3460 . -35) (t 26077 51273 102937 694000)) nil (26077 51331 803235 291000) 0 nil])
([nil nil ((743 . 754) (#("V" 0 1 (fontified nil)) . 743) (743 . 744) (#("VEC_BNF_TOK" 0 11 (fontified nil)) . -743) (743 . 754) (#("V" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -743) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) 744 (743 . 744) (743 . 744) (#("std::vector<token_class::bnf_token> " 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-2-face)) 12 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (syntax-table (5 . 60) fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t)) . 743) (undo-tree-id2964 . -35) (undo-tree-id2965 . 35) (undo-tree-id2966 . -36) (undo-tree-id2967 . -12) (undo-tree-id2968 . -23) (undo-tree-id2969 . -36) (undo-tree-id2970 . -36) (undo-tree-id2971 . -30) (undo-tree-id2972 . -30) (undo-tree-id2973 . -30) (undo-tree-id2974 . -30) (undo-tree-id2975 . -30) (undo-tree-id2976 . -30) (undo-tree-id2977 . -30) (undo-tree-id2978 . -30) (undo-tree-id2979 . -30) (undo-tree-id2980 . -30) (undo-tree-id2981 . -30) (undo-tree-id2982 . -30) (undo-tree-id2983 . -30) (undo-tree-id2984 . -30) (undo-tree-id2985 . -30) (undo-tree-id2986 . -30) (undo-tree-id2987 . -30) (undo-tree-id2988 . -30) (undo-tree-id2989 . -30) (undo-tree-id2990 . -30) (undo-tree-id2991 . -30) (undo-tree-id2992 . -30) (undo-tree-id2993 . -30) (undo-tree-id2994 . -30) (undo-tree-id2995 . -30) (undo-tree-id2996 . -30) (undo-tree-id2997 . -30) (undo-tree-id2998 . -30) (undo-tree-id2999 . -30) (undo-tree-id3000 . -30) (undo-tree-id3001 . -30) (undo-tree-id3002 . -30) (undo-tree-id3003 . -30) (undo-tree-id3004 . -30) (undo-tree-id3005 . -30) (undo-tree-id3006 . -30) (undo-tree-id3007 . -30) (undo-tree-id3008 . -30) (undo-tree-id3009 . -30) (undo-tree-id3010 . -30) (undo-tree-id3011 . -30) (undo-tree-id3012 . -30) (undo-tree-id3013 . -30) (undo-tree-id3014 . -30) (undo-tree-id3015 . -30) (undo-tree-id3016 . -30) (undo-tree-id3017 . -30) (undo-tree-id3018 . -30) (undo-tree-id3019 . -30) (undo-tree-id3020 . -30) (undo-tree-id3021 . -30) (undo-tree-id3022 . -30) (undo-tree-id3023 . -30) (undo-tree-id3024 . -30) (undo-tree-id3025 . -30) (undo-tree-id3026 . -30) (undo-tree-id3027 . -30) (undo-tree-id3028 . -30) (undo-tree-id3029 . -30) (undo-tree-id3030 . -30) (undo-tree-id3031 . -30) (undo-tree-id3032 . -30) (undo-tree-id3033 . -30) (undo-tree-id3034 . -30) (undo-tree-id3035 . -30) (undo-tree-id3036 . -30) (undo-tree-id3037 . -30) (undo-tree-id3038 . -30) (undo-tree-id3039 . -30) (undo-tree-id3040 . -30) (undo-tree-id3041 . -30) (undo-tree-id3042 . -30) (undo-tree-id3043 . -30) (undo-tree-id3044 . -30) (undo-tree-id3045 . -30) (undo-tree-id3046 . -30) (undo-tree-id3047 . -30) (undo-tree-id3048 . -30) (undo-tree-id3049 . -30) (undo-tree-id3050 . -30) (undo-tree-id3051 . -30) (undo-tree-id3052 . -30) (undo-tree-id3053 . -30) (undo-tree-id3054 . -30) (undo-tree-id3055 . -30) (undo-tree-id3056 . -30) (undo-tree-id3057 . -30) (undo-tree-id3058 . -30) (undo-tree-id3059 . -30) (undo-tree-id3060 . -30) (undo-tree-id3061 . -30) (undo-tree-id3062 . -30) (undo-tree-id3063 . -30) (undo-tree-id3064 . -30) (undo-tree-id3065 . -30) (undo-tree-id3066 . -30) (undo-tree-id3067 . -30) (undo-tree-id3068 . -30) (undo-tree-id3069 . -30) (undo-tree-id3070 . -30) (undo-tree-id3071 . -30) (undo-tree-id3072 . -30) (undo-tree-id3073 . -30) (undo-tree-id3074 . -30) (undo-tree-id3075 . -30) (undo-tree-id3076 . -30) (undo-tree-id3077 . -30) (undo-tree-id3078 . -30) (undo-tree-id3079 . -30) (undo-tree-id3080 . -30) (undo-tree-id3081 . -30) (undo-tree-id3082 . -30) (undo-tree-id3083 . -30) (undo-tree-id3084 . -30) (undo-tree-id3085 . -30) (undo-tree-id3086 . -30) (undo-tree-id3087 . -30) (undo-tree-id3088 . -30) (undo-tree-id3089 . -30) (undo-tree-id3090 . -30) (undo-tree-id3091 . -30) (undo-tree-id3092 . -30) (undo-tree-id3093 . -30) (undo-tree-id3094 . -30) (undo-tree-id3095 . -30) (undo-tree-id3096 . -30) (undo-tree-id3097 . -30) (undo-tree-id3098 . -30) (undo-tree-id3099 . -30) (undo-tree-id3100 . -30) (undo-tree-id3101 . -30) (undo-tree-id3102 . -30) (undo-tree-id3103 . -30) (undo-tree-id3104 . -30) (undo-tree-id3105 . -30) (undo-tree-id3106 . -30) (undo-tree-id3107 . -30) (undo-tree-id3108 . -30) (undo-tree-id3109 . -30) (undo-tree-id3110 . -30) (undo-tree-id3111 . -30) (undo-tree-id3112 . -30) (undo-tree-id3113 . -30) (undo-tree-id3114 . -30) (undo-tree-id3115 . -30) (undo-tree-id3116 . -30) (undo-tree-id3117 . -30) (undo-tree-id3118 . -30) (undo-tree-id3119 . -30) (undo-tree-id3120 . -30) (undo-tree-id3121 . -30) (undo-tree-id3122 . -30) (undo-tree-id3123 . -30) (undo-tree-id3124 . -30) (undo-tree-id3125 . -30) (undo-tree-id3126 . -30) (undo-tree-id3127 . -30) (undo-tree-id3128 . -30) (undo-tree-id3129 . -30) (undo-tree-id3130 . -30) (undo-tree-id3131 . -30) (undo-tree-id3132 . -30) (undo-tree-id3133 . -30) (undo-tree-id3134 . -30) (undo-tree-id3135 . -30) (undo-tree-id3136 . -30) (undo-tree-id3137 . -30) (undo-tree-id3138 . -30) (undo-tree-id3139 . -30) (undo-tree-id3140 . -30) (undo-tree-id3141 . -30) (undo-tree-id3142 . -30) (undo-tree-id3143 . -30) (undo-tree-id3144 . -30) (undo-tree-id3145 . -30) (undo-tree-id3146 . -30) (undo-tree-id3147 . -30) (undo-tree-id3148 . -30) (undo-tree-id3149 . -30) (undo-tree-id3150 . -30) (undo-tree-id3151 . -30) (undo-tree-id3152 . -30) (undo-tree-id3153 . -30) (undo-tree-id3154 . -30) (undo-tree-id3155 . -30) (undo-tree-id3156 . -30) (undo-tree-id3157 . -30) (undo-tree-id3158 . -30) (undo-tree-id3159 . -30) (undo-tree-id3160 . -30) (undo-tree-id3161 . -30) (undo-tree-id3162 . -30) (undo-tree-id3163 . -30) (undo-tree-id3164 . -30) (undo-tree-id3165 . -30) (undo-tree-id3166 . -30) (undo-tree-id3167 . -30) (undo-tree-id3168 . -30) (undo-tree-id3169 . -30) (undo-tree-id3170 . -30) (undo-tree-id3171 . -30) (undo-tree-id3172 . -30) (undo-tree-id3173 . -30) (undo-tree-id3174 . -30) (undo-tree-id3175 . -30) (undo-tree-id3176 . -30) (undo-tree-id3177 . -30) (undo-tree-id3178 . -30) (undo-tree-id3179 . -30) (undo-tree-id3180 . -30) (undo-tree-id3181 . -30) (undo-tree-id3182 . -30) (undo-tree-id3183 . -30) (undo-tree-id3184 . -30) (undo-tree-id3185 . -30) (undo-tree-id3186 . -30) (undo-tree-id3187 . -30) (undo-tree-id3188 . -30) (undo-tree-id3189 . -30) (undo-tree-id3190 . -30) (undo-tree-id3191 . -30) (undo-tree-id3192 . -30) (undo-tree-id3193 . -30) (undo-tree-id3194 . -30) (undo-tree-id3195 . -30) (undo-tree-id3196 . -30) (undo-tree-id3197 . -30) (undo-tree-id3198 . -30) (undo-tree-id3199 . -30) (undo-tree-id3200 . -30) (undo-tree-id3201 . -30) (undo-tree-id3202 . -30) (undo-tree-id3203 . -30) (undo-tree-id3204 . -30) (undo-tree-id3205 . -30) (undo-tree-id3206 . -30) (undo-tree-id3207 . -30) (undo-tree-id3208 . -30) (undo-tree-id3209 . -30) (undo-tree-id3210 . -30) (undo-tree-id3211 . -30) (undo-tree-id3212 . -30) (undo-tree-id3213 . -30) (undo-tree-id3214 . -30) (undo-tree-id3215 . -30) (undo-tree-id3216 . -30) (undo-tree-id3217 . -30) (undo-tree-id3218 . -30) (undo-tree-id3219 . -30) (undo-tree-id3220 . -30) (undo-tree-id3221 . -30) (undo-tree-id3222 . -30) (undo-tree-id3223 . -30) (undo-tree-id3224 . -30) (undo-tree-id3225 . -30) (undo-tree-id3226 . -30) (undo-tree-id3227 . -30) (undo-tree-id3228 . -30) (undo-tree-id3229 . -30) (undo-tree-id3230 . -30) (undo-tree-id3231 . -30) (undo-tree-id3232 . -30) (undo-tree-id3233 . -30) (undo-tree-id3234 . -30) (undo-tree-id3235 . -30) (undo-tree-id3236 . -30) (undo-tree-id3237 . -30) (undo-tree-id3238 . -30) (undo-tree-id3239 . -30) (undo-tree-id3240 . -30) (undo-tree-id3241 . -30) (undo-tree-id3242 . -30) (undo-tree-id3243 . -30) (undo-tree-id3244 . -30) (undo-tree-id3245 . -30) (undo-tree-id3246 . -30) (undo-tree-id3247 . -30) (undo-tree-id3248 . -30) (undo-tree-id3249 . -30) (undo-tree-id3250 . -30) (undo-tree-id3251 . -30) (undo-tree-id3252 . -30) (undo-tree-id3253 . -30) (undo-tree-id3254 . -30) (undo-tree-id3255 . -30) (undo-tree-id3256 . -30) (undo-tree-id3257 . -30) (undo-tree-id3258 . -30) (undo-tree-id3259 . -30) (undo-tree-id3260 . -30) (undo-tree-id3261 . -30) (undo-tree-id3262 . -30) (undo-tree-id3263 . -30) (undo-tree-id3264 . -30) (undo-tree-id3265 . -30) (undo-tree-id3266 . -30) (undo-tree-id3267 . -30) (undo-tree-id3268 . -30) (undo-tree-id3269 . -30) (undo-tree-id3270 . -30) (undo-tree-id3271 . -30) (undo-tree-id3272 . -30) (undo-tree-id3273 . -30) (undo-tree-id3274 . -30) (undo-tree-id3275 . -30) (undo-tree-id3276 . -30) (undo-tree-id3277 . -30) (undo-tree-id3278 . -36) (undo-tree-id3279 . -30) (undo-tree-id3280 . -30) (undo-tree-id3281 . -30) (undo-tree-id3282 . -30) (undo-tree-id3283 . -30) (undo-tree-id3284 . -30) (undo-tree-id3285 . -30) (undo-tree-id3286 . -30) (undo-tree-id3287 . -30) (undo-tree-id3288 . -30) (undo-tree-id3289 . -30) (undo-tree-id3290 . -30) (undo-tree-id3291 . -30) (undo-tree-id3292 . -30) (undo-tree-id3293 . -30) (undo-tree-id3294 . -30) (undo-tree-id3295 . -30) (undo-tree-id3296 . -30) (undo-tree-id3297 . -30) (undo-tree-id3298 . -30) (undo-tree-id3299 . -30) (undo-tree-id3300 . -30) (undo-tree-id3301 . -30) (undo-tree-id3302 . -30) (undo-tree-id3303 . -30) (undo-tree-id3304 . -30) (undo-tree-id3305 . -30) (undo-tree-id3306 . -30) (undo-tree-id3307 . -30) (undo-tree-id3308 . -30) (undo-tree-id3309 . -30) (undo-tree-id3310 . -30) (undo-tree-id3311 . -30) (undo-tree-id3312 . -30) (undo-tree-id3313 . -30) (undo-tree-id3314 . -30) (undo-tree-id3315 . -30) (undo-tree-id3316 . -30) (undo-tree-id3317 . -30) (undo-tree-id3318 . -30) (undo-tree-id3319 . -30) (undo-tree-id3320 . -30) (undo-tree-id3321 . -30) (undo-tree-id3322 . -30) (undo-tree-id3323 . -30) (undo-tree-id3324 . -30) (undo-tree-id3325 . -30) (undo-tree-id3326 . -30) (undo-tree-id3327 . -30) (undo-tree-id3328 . -30) (undo-tree-id3329 . -30) (undo-tree-id3330 . -30) (undo-tree-id3331 . -30) (undo-tree-id3332 . -30) (undo-tree-id3333 . -30) (undo-tree-id3334 . -30) (undo-tree-id3335 . -30) (undo-tree-id3336 . -30) (undo-tree-id3337 . -30) (undo-tree-id3338 . -30) (undo-tree-id3339 . -30) (undo-tree-id3340 . -30) (undo-tree-id3341 . -30) (undo-tree-id3342 . -30) (undo-tree-id3343 . -30) (undo-tree-id3344 . -30) (undo-tree-id3345 . -30) (undo-tree-id3346 . -30) (undo-tree-id3347 . -30) (undo-tree-id3348 . -30) (undo-tree-id3349 . -30) (undo-tree-id3350 . -30) (undo-tree-id3351 . -30) (undo-tree-id3352 . -30) (undo-tree-id3353 . -30) (undo-tree-id3354 . -30) (undo-tree-id3355 . -30) (undo-tree-id3356 . -30) (undo-tree-id3357 . -30) (undo-tree-id3358 . -30) (undo-tree-id3359 . -30) (undo-tree-id3360 . -30) (undo-tree-id3361 . -30) (undo-tree-id3362 . -30) (undo-tree-id3363 . -30) (undo-tree-id3364 . -30) (undo-tree-id3365 . -30) (undo-tree-id3366 . -30) (undo-tree-id3367 . -30) (undo-tree-id3368 . -30) (undo-tree-id3369 . -30) (undo-tree-id3370 . -30) (undo-tree-id3371 . -30) (undo-tree-id3372 . -30) (undo-tree-id3373 . -30) (undo-tree-id3374 . -30) (undo-tree-id3375 . -30) (undo-tree-id3376 . -30) (undo-tree-id3377 . -30) (undo-tree-id3378 . -30) (undo-tree-id3379 . -30) (undo-tree-id3380 . -30) (undo-tree-id3381 . -30) (undo-tree-id3382 . -30) (undo-tree-id3383 . -30) (undo-tree-id3384 . -30) (undo-tree-id3385 . -30) (undo-tree-id3386 . -30) (undo-tree-id3387 . -30) (undo-tree-id3388 . -30) (undo-tree-id3389 . -30) (undo-tree-id3390 . -30) (undo-tree-id3391 . -30) (undo-tree-id3392 . -30) (undo-tree-id3393 . -30) (undo-tree-id3394 . -30) (undo-tree-id3395 . -30) (undo-tree-id3396 . -30) (undo-tree-id3397 . -30) (undo-tree-id3398 . -30) (undo-tree-id3399 . -30) (undo-tree-id3400 . -30) (undo-tree-id3401 . -30) (undo-tree-id3402 . -30) (undo-tree-id3403 . -30) (undo-tree-id3404 . -30) (undo-tree-id3405 . -30) (undo-tree-id3406 . -30) (undo-tree-id3407 . -30) (undo-tree-id3408 . -30) (undo-tree-id3409 . -30) (undo-tree-id3410 . -30) (undo-tree-id3411 . -30) (undo-tree-id3412 . -30) (undo-tree-id3413 . -30) (undo-tree-id3414 . -30) (undo-tree-id3415 . -30) (undo-tree-id3416 . -30) (undo-tree-id3417 . -30) (undo-tree-id3418 . -30) (undo-tree-id3419 . -30) (undo-tree-id3420 . -30) (undo-tree-id3421 . -30) (undo-tree-id3422 . -30) (undo-tree-id3423 . -30) (undo-tree-id3424 . -30) (undo-tree-id3425 . -30) (undo-tree-id3426 . -30) (undo-tree-id3427 . -30) (undo-tree-id3428 . -30) (undo-tree-id3429 . -30) (undo-tree-id3430 . -30) (undo-tree-id3431 . -30) (undo-tree-id3432 . -30) (undo-tree-id3433 . -30) (undo-tree-id3434 . -30) (undo-tree-id3435 . -30) (undo-tree-id3436 . -30) (undo-tree-id3437 . -30) (undo-tree-id3438 . -30) (undo-tree-id3439 . -30) (undo-tree-id3440 . -30) (undo-tree-id3441 . -30) (undo-tree-id3442 . -30) (undo-tree-id3443 . -30) (undo-tree-id3444 . -30) (undo-tree-id3445 . -30) (undo-tree-id3446 . -30) (undo-tree-id3447 . -30) (undo-tree-id3448 . -30) (undo-tree-id3449 . -30) (undo-tree-id3450 . -30) (undo-tree-id3451 . -30) (undo-tree-id3452 . -30) (undo-tree-id3453 . -30) (undo-tree-id3454 . -36) (undo-tree-id3455 . -36) (undo-tree-id3456 . -36) (undo-tree-id3457 . -36)) nil (26077 51331 803217 573000) 0 nil])
([nil nil ((912 . 923) (#("V" 0 1 (fontified nil)) . 912) (912 . 913) (#("VEC_BNF_TOK" 0 11 (fontified nil)) . -912) (912 . 923) (#("V" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -912) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) 913 (912 . 913) (912 . 913) (#("std::vector<token_class::bnf_token> " 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-2-face)) 12 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (syntax-table (5 . 60) fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t)) . 912) (undo-tree-id3837 . -35) (undo-tree-id3838 . -36) (t 26077 51331 812936 253000)) nil (26077 51404 540970 488000) 0 nil])
([nil nil ((nil face (rainbow-delimiters-depth-2-face) 932 . 943) (nil fontified nil 932 . 943) (932 . 943) (#("V" 0 1 (fontified nil)) . 932) (nil face (rainbow-delimiters-depth-2-face) 932 . 933) (nil fontified nil 932 . 933) (932 . 933) (#("VEC_BNF_TOK" 0 11 (fontified nil)) . -932) (nil face (rainbow-delimiters-depth-2-face) 932 . 943) (nil fontified nil 932 . 943) (932 . 943) (#("V" 0 1 (fontified t face font-lock-type-face)) . -932) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) 933 (932 . 933) (932 . 933) (#("std::vector<token_class::bnf_token> " 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-3-face)) 12 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-3-face)) 35 36 (fontified t)) . 932) (undo-tree-id3833 . -35) (undo-tree-id3834 . 35)) nil (26077 51404 540964 627000) 0 nil])
([nil nil ((1025 . 1036) (#("V" 0 1 (fontified nil)) . 1025) (1025 . 1026) (#("VEC_BNF_TOK" 0 11 (fontified nil)) . -1025) (1025 . 1036) (#("V" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1025) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) 1026 (1025 . 1026) (1025 . 1026) (#("std::vector<token_class::bnf_token> " 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-2-face)) 12 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (syntax-table (5 . 60) fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t)) . 1025) (undo-tree-id3724 . -35) (undo-tree-id3725 . 5) (undo-tree-id3726 . -12) (undo-tree-id3727 . -23) (undo-tree-id3728 . -36) (undo-tree-id3729 . -30) (undo-tree-id3730 . -30) (undo-tree-id3731 . -30) (undo-tree-id3732 . -30) (undo-tree-id3733 . -30) (undo-tree-id3734 . -30) (undo-tree-id3735 . -30) (undo-tree-id3736 . -30) (undo-tree-id3737 . -30) (undo-tree-id3738 . -30) (undo-tree-id3739 . -30) (undo-tree-id3740 . -30) (undo-tree-id3741 . -30) (undo-tree-id3742 . -30) (undo-tree-id3743 . -30) (undo-tree-id3744 . -30) (undo-tree-id3745 . -30) (undo-tree-id3746 . -30) (undo-tree-id3747 . -30) (undo-tree-id3748 . -30) (undo-tree-id3749 . -30) (undo-tree-id3750 . -30) (undo-tree-id3751 . -30) (undo-tree-id3752 . -30) (undo-tree-id3753 . -30) (undo-tree-id3754 . -30) (undo-tree-id3755 . -30) (undo-tree-id3756 . -30) (undo-tree-id3757 . -30) (undo-tree-id3758 . -30) (undo-tree-id3759 . -30) (undo-tree-id3760 . -30) (undo-tree-id3761 . -30) (undo-tree-id3762 . -30) (undo-tree-id3763 . -30) (undo-tree-id3764 . -30) (undo-tree-id3765 . -30) (undo-tree-id3766 . -30) (undo-tree-id3767 . -30) (undo-tree-id3768 . -30) (undo-tree-id3769 . -30) (undo-tree-id3770 . -30) (undo-tree-id3771 . -30) (undo-tree-id3772 . -30) (undo-tree-id3773 . -30) (undo-tree-id3774 . -30) (undo-tree-id3775 . -30) (undo-tree-id3776 . -30) (undo-tree-id3777 . -30) (undo-tree-id3778 . -30) (undo-tree-id3779 . -30) (undo-tree-id3780 . -30) (undo-tree-id3781 . -30) (undo-tree-id3782 . -30) (undo-tree-id3783 . -30) (undo-tree-id3784 . -30) (undo-tree-id3785 . -30) (undo-tree-id3786 . -30) (undo-tree-id3787 . -30) (undo-tree-id3788 . -30) (undo-tree-id3789 . -30) (undo-tree-id3790 . -30) (undo-tree-id3791 . -30) (undo-tree-id3792 . -30) (undo-tree-id3793 . -30) (undo-tree-id3794 . -30) (undo-tree-id3795 . -30) (undo-tree-id3796 . -30) (undo-tree-id3797 . -30) (undo-tree-id3798 . -30) (undo-tree-id3799 . -30) (undo-tree-id3800 . -30) (undo-tree-id3801 . -30) (undo-tree-id3802 . -30) (undo-tree-id3803 . -30) (undo-tree-id3804 . -30) (undo-tree-id3805 . -30) (undo-tree-id3806 . -30) (undo-tree-id3807 . -30) (undo-tree-id3808 . -30) (undo-tree-id3809 . -30) (undo-tree-id3810 . -30) (undo-tree-id3811 . -30) (undo-tree-id3812 . -30) (undo-tree-id3813 . -30) (undo-tree-id3814 . -30) (undo-tree-id3815 . -30) (undo-tree-id3816 . -30) (undo-tree-id3817 . -30) (undo-tree-id3818 . -30) (undo-tree-id3819 . -30) (undo-tree-id3820 . -30) (undo-tree-id3821 . -30) (undo-tree-id3822 . -30) (undo-tree-id3823 . -30) (undo-tree-id3824 . -30) (undo-tree-id3825 . -30) (undo-tree-id3826 . -30) (undo-tree-id3827 . -36) (undo-tree-id3828 . -36) (undo-tree-id3829 . -36) (undo-tree-id3830 . -36)) nil (26077 51404 540948 442000) 0 nil])
([nil nil ((nil rear-nonsticky nil 201 . 202) (#("
" 0 1 (c-in-sws t fontified nil)) . -257) (202 . 258) (nil face (rainbow-delimiters-depth-1-face) 201 . 202) (nil fontified t 201 . 202) (nil c-in-sws t 201 . 202) (201 . 202) 158 (t 26077 51404 562934 478000)) nil (26077 51488 820526 533000) 0 nil])
([nil nil ((#("BNF_" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face) 1 2 (fontified t c-in-sws t face font-lock-variable-name-face) 2 3 (fontified t c-in-sws t face font-lock-variable-name-face) 3 4 (fontified t c-in-sws t face font-lock-variable-name-face)) . 214) (undo-tree-id3858 . -3)) nil (26077 51488 820524 658000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -221) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) 222 (221 . 222) (#("h" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -221) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) 222 (218 . 222) (#("p" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -218) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (#("t" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -219) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (#("r" 0 1 (fontified t c-in-sws t face font-lock-variable-name-face)) . -220) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) 221 (217 . 221)) nil (26077 51488 820522 394000) 0 nil])
([nil nil ((252 . 253) (#("G" 0 1 (fontified t c-in-sws t)) . -252) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) 253 (252 . 253) (#("b" 0 1 (fontified t c-in-sws t)) . -247) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (#("n" 0 1 (fontified t c-in-sws t)) . -248) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (#("f" 0 1 (fontified t c-in-sws t)) . -249) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (#("_" 0 1 (fontified t c-in-sws t face font-lock-type-face)) . -250) (undo-tree-id3847 . -1) 251) nil (26077 51488 820510 822000) 0 nil])
([nil nil ((740 . 751) (#("V" 0 1 (fontified nil)) . 740) (740 . 741) (#("VEC_TOK_PTR" 0 11 (fontified nil)) . -740) (740 . 751) (#("V" 0 1 (fontified t face font-lock-type-face)) . -740) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) 741 (740 . 741) (#("B" 0 1 (fontified t face font-lock-type-face)) . -740) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) 741 (740 . 741) (#("std::vector<token_class::token*>" 0 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-3-face)) 12 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 30 (fontified t face font-lock-type-face) 30 31 (fontified t) 31 32 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-3-face))) . 740) (undo-tree-id4082 . -31) (t 26077 51488 832932 421000)) nil (26077 51555 425099 651000) 0 nil])
([nil nil ((1011 . 1022) (#("V" 0 1 (fontified nil)) . 1011) (1011 . 1012) (#("VEC_TOK_PTR" 0 11 (fontified nil)) . -1011) (1011 . 1022) (#("V" 0 1 (fontified t face font-lock-type-face)) . -1011) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) 1012 (1011 . 1012) (1011 . 1012) (#("std::vector<token_class::token*> " 0 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-3-face)) 12 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 30 (fontified t face font-lock-type-face) 30 31 (fontified t) 31 32 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-3-face)) 32 33 (fontified t)) . 1011) (undo-tree-id4071 . -32) (undo-tree-id4072 . -12) (undo-tree-id4073 . -23) (undo-tree-id4074 . -31) (undo-tree-id4075 . -32) (undo-tree-id4076 . -33) (undo-tree-id4077 . -33)) nil (26077 51555 425086 802000) 0 nil])
([nil nil ((#("={token_class::bnf_token::S}," 0 1 (fontified t) 1 2 (fontified t c-type c-not-decl face (rainbow-delimiters-depth-3-face)) 2 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 24 (fontified t face font-lock-constant-face) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-3-face)) 28 29 (fontified t c-type c-decl-arg-start)) . 982) (undo-tree-id4086 . -28) (t 26077 51555 439597 451000)) nil (26077 51603 332717 410000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -1000) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) 1001 (#("{" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -1001) (undo-tree-id4085 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 1002) (982 . 983)) nil (26077 51603 332713 543000) 0 nil])
([nil nil ((apply -3 284 445 undo--wrap-and-run-primitive-undo 284 445 ((286 . 289) 337)) (t 26077 51603 349596 280000)) nil (26077 51794 743220 395000) 0 nil])
([nil nil ((1074 . 1075) (843 . 844) (t 26077 51794 769591 578000)) nil (26077 51861 92401 263000) 0 nil])
([nil nil ((#("," 0 1 (fontified t c-type c-decl-arg-start)) . -1078) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) 1079 (1078 . 1079) (t 26077 51861 106256 624000)) nil (26077 52746 145997 585000) 0 nil])
([nil nil ((910 . 911) (903 . 910) (#("virtu" 0 5 (fontified nil)) . 903) (903 . 908) (#("virtual" 0 7 (fontified nil)) . -903) (903 . 910) (#("virtu" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -903) (undo-tree-id4087 . -5) (undo-tree-id4088 . -5) 908 (907 . 908) (#("/" 0 1 (fontified t)) . -907) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) 908 (907 . 908) (903 . 907) (900 . 903) 899) nil (26077 52746 145994 387000) 0 nil])
([nil nil ((apply -3 901 918 undo--wrap-and-run-primitive-undo 901 918 ((903 . 906) 912))) nil (26077 52746 145978 34000) 0 nil])
([nil nil ((apply 3 901 912 undo--wrap-and-run-primitive-undo 901 912 ((#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (fontified t face font-lock-comment-delimiter-face)) . -903) 915)) (t 26077 52746 182901 562000)) nil (26077 52936 142415 551000) 0 nil])
([nil nil ((914 . 916) (911 . 914)) nil (26077 52936 142415 95000) 0 nil])
([nil nil ((apply -3 65 104 undo--wrap-and-run-primitive-undo 65 104 ((65 . 68) 83))) nil (26077 52936 142414 599000) 0 nil])
([nil nil ((apply yas--snippet-revive 941 969 #s(yas--snippet nil (#s(yas--field 1 950 968 nil nil nil nil nil)) nil 12 nil #s(yas--field 1 950 968 nil nil nil nil nil) nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 950 968 nil nil nil nil nil)) nil 12 nil #s(yas--field 1 950 968 nil nil nil nil nil) nil nil)) (941 . 969) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 941) (941 . 974) (#("f" 0 1 (fontified nil)) . 941) (941 . 942) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 27 (fontified nil) 27 28 (syntax-table (5 . 60) fontified nil)) . -941) (941 . 969) (#("fun" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -941) (undo-tree-id4101 . -3) (undo-tree-id4102 . -3) 944 (943 . 944) (#("b" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -943) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) 944 (941 . 944) (159 . 170) (#("f>" 0 1 (c-in-sws t fontified nil) 1 2 (fontified nil face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 159) (undo-tree-id4105 . -2) (159 . 160) (#("functional>" 0 11 (c-in-sws t fontified nil)) . -159) (159 . 170) (#("fu" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face)) . -159) (undo-tree-id4106 . -2) (undo-tree-id4107 . -2) 161 (159 . 161) (apply yas--snippet-revive 150 160 #s(yas--snippet nil nil #s(yas--exit 159 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 159 nil) 11 nil nil nil nil)) (150 . 160) (#("include <$0>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 11 (fontified nil) 11 12 (syntax-table (5 . 60) fontified nil)) . 150) (undo-tree-id4108 . -12) (150 . 162) (#("i" 0 1 (c-in-sws t fontified nil)) . 150) (undo-tree-id4109 . -1) (150 . 151) (#("include <header>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 15 (fontified nil) 15 16 (syntax-table (5 . 60) fontified nil)) . -150) (undo-tree-id4110 . -16) (150 . 166) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -150) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) 151 (150 . 151) (149 . 150) (148 . 149) 135) nil (26077 52936 142411 496000) 0 nil])
([nil nil ((986 . 987) (#("," 0 1 (fontified t c-type c-decl-arg-start)) . -984) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) 985 (984 . 985) (975 . 984) (#("bnf_token" 0 9 (fontified nil)) . -975) (975 . 984) (973 . 975) (nil fontified nil 962 . 973) (nil face (rainbow-delimiters-depth-3-face) 962 . 973) (962 . 973) (#("t" 0 1 (fontified nil)) . 962) (nil fontified nil 962 . 963) (nil face (rainbow-delimiters-depth-3-face) 962 . 963) (962 . 963) (#("token_class" 0 11 (fontified nil)) . -962) (nil fontified nil 962 . 973) (nil face (rainbow-delimiters-depth-3-face) 962 . 973) (962 . 973) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -962) (undo-tree-id4095 . -2) (undo-tree-id4096 . -2) 964 (962 . 964) (961 . 963) (nil fontified nil 950 . 961) (nil face (rainbow-delimiters-depth-2-face) 950 . 961) (950 . 961) (#("V" 0 1 (fontified nil)) . 950) (nil fontified nil 950 . 951) (nil face (rainbow-delimiters-depth-2-face) 950 . 951) (950 . 951) (#("VEC_BNF_TOK" 0 11 (fontified nil)) . -950) (nil fontified nil 950 . 961) (nil face (rainbow-delimiters-depth-2-face) 950 . 961) (950 . 961) (#("V" 0 1 (fontified t face font-lock-type-face)) . -950) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) 951 (950 . 951) (#("typename Signature" 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 18 (fontified t face font-lock-type-face)) . 950) (undo-tree-id4099 . -17) (undo-tree-id4100 . 18)) nil (26077 52936 142399 35000) 0 nil])
([nil nil ((986 . 988)) nil (26077 52936 142383 616000) 0 nil])
([nil nil ((997 . 1000) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -997) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) 998 (992 . 998) (986 . 992) (t 26077 52936 172896 892000)) nil (26077 52970 232750 788000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 1000) (undo-tree-id4123 . 1) (undo-tree-id4124 . 1) (t 26077 52970 246229 384000)) nil (26077 52995 773329 784000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face font-lock-variable-name-face)) . 1000) (undo-tree-id4119 . 1) (undo-tree-id4120 . 1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1)) nil (26077 52995 773327 377000) 0 nil])
([nil nil ((#("virtual " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 928) (undo-tree-id4116 . -7) (undo-tree-id4117 . -7) (undo-tree-id4118 . -8)) nil (26077 52995 773321 434000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1106 . 1107) (nil fontified nil 1079 . 1107) (1079 . 1107) 1078 (t 26077 52995 789562 90000)) nil (26077 53195 646915 889000) 0 nil])
([nil nil ((1126 . 1128) (1125 . 1126)) nil (26077 53839 149634 607000) 0 nil])
([nil nil ((990 . 991) (#("&" 0 1 (fontified t)) . -990) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) 991 (990 . 991) (nil fontified nil 977 . 990) (977 . 990) (#("sy" 0 2 (fontified nil)) . 977) (nil fontified nil 977 . 979) (977 . 979) (#("synatax_ptr_f" 0 13 (fontified nil)) . -977) (nil fontified nil 977 . 990) (977 . 990) (#("sy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -977) (undo-tree-id4693 . -2) 979 (977 . 979) (976 . 977) (t 26077 53840 489541 360000)) nil (26077 55789 393169 809000) 0 nil] [nil nil ((#("={})=" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-3-face)) 2 3 (fontified t face (rainbow-delimiters-depth-3-face)) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 5 (fontified t)) . 785) (undo-tree-id4689 . -4) (t 26077 53195 679557 192000)) ((785 . 790)) (26077 53837 886893 618000) 0 nil])
([nil nil ((1241 . 1242) (t 26077 55789 406160 282000)) nil (26077 61417 736886 392000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -739) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4128 . -1) (undo-tree-id4130 . -1) (undo-tree-id4132 . -1) (undo-tree-id4134 . -1) (undo-tree-id4136 . -1) (undo-tree-id4138 . -1) (undo-tree-id4140 . -1) (undo-tree-id4142 . -1) (undo-tree-id4144 . -1) (undo-tree-id4146 . -1) (undo-tree-id4148 . -1) (undo-tree-id4150 . -1) (undo-tree-id4152 . -1) (undo-tree-id4154 . -1) (undo-tree-id4156 . -1) (undo-tree-id4158 . -1) (undo-tree-id4160 . -1) (undo-tree-id4162 . -1) (undo-tree-id4164 . -1) (undo-tree-id4166 . -1) (undo-tree-id4168 . -1) (undo-tree-id4170 . -1) (undo-tree-id4172 . -1) (undo-tree-id4174 . -1) (undo-tree-id4176 . -1) (undo-tree-id4178 . -1) (undo-tree-id4180 . -1) (undo-tree-id4182 . -1) (undo-tree-id4184 . -1) (undo-tree-id4186 . -1) (undo-tree-id4188 . -1) (undo-tree-id4190 . -1) (undo-tree-id4192 . -1) (undo-tree-id4194 . -1) (undo-tree-id4196 . -1) (undo-tree-id4198 . -1) (undo-tree-id4200 . -1) (undo-tree-id4202 . -1) (undo-tree-id4204 . -1) (undo-tree-id4206 . -1) (undo-tree-id4208 . -1) (undo-tree-id4210 . -1) (undo-tree-id4212 . -1) (undo-tree-id4214 . -1) (undo-tree-id4216 . -1) (undo-tree-id4218 . -1) (undo-tree-id4220 . -1) (undo-tree-id4222 . -1) (undo-tree-id4224 . -1) (undo-tree-id4226 . -1) (undo-tree-id4228 . -1) (undo-tree-id4230 . -1) (undo-tree-id4232 . -1) (undo-tree-id4234 . -1) (undo-tree-id4236 . -1) (undo-tree-id4238 . -1) (undo-tree-id4240 . -1) (undo-tree-id4242 . -1) (undo-tree-id4244 . -1) (undo-tree-id4246 . -1) (undo-tree-id4248 . -1) (undo-tree-id4250 . -1) (undo-tree-id4252 . -1) (undo-tree-id4254 . -1) (undo-tree-id4256 . -1) (undo-tree-id4258 . -1) (undo-tree-id4260 . -1) (undo-tree-id4262 . -1) (undo-tree-id4264 . -1) (undo-tree-id4266 . -1) (undo-tree-id4268 . -1) (undo-tree-id4270 . -1) (undo-tree-id4272 . -1) (undo-tree-id4274 . -1) (undo-tree-id4276 . -1) (undo-tree-id4278 . -1) (undo-tree-id4280 . -1) (undo-tree-id4282 . -1) (undo-tree-id4284 . -1) (undo-tree-id4286 . -1) (undo-tree-id4288 . -1) (undo-tree-id4290 . -1) (undo-tree-id4292 . -1) (undo-tree-id4294 . -1) (undo-tree-id4296 . -1) (undo-tree-id4298 . -1) (undo-tree-id4300 . -1) (undo-tree-id4302 . -1) (undo-tree-id4304 . -1) (undo-tree-id4306 . -1) (undo-tree-id4308 . -1) (undo-tree-id4310 . -1) (undo-tree-id4312 . -1) (undo-tree-id4314 . -1) (undo-tree-id4316 . -1) (undo-tree-id4318 . -1) (undo-tree-id4320 . -1) (undo-tree-id4322 . -1) (undo-tree-id4324 . -1) (undo-tree-id4326 . -1) (undo-tree-id4328 . -1) (undo-tree-id4330 . -1) (undo-tree-id4332 . -1) (undo-tree-id4334 . -1) (undo-tree-id4336 . -1) (undo-tree-id4338 . -1) (undo-tree-id4340 . -1) (undo-tree-id4342 . -1) (undo-tree-id4344 . -1) (undo-tree-id4346 . -1) (undo-tree-id4348 . -1) (undo-tree-id4350 . -1) (undo-tree-id4352 . -1) (undo-tree-id4354 . -1) (undo-tree-id4356 . -1) (undo-tree-id4358 . -1) (undo-tree-id4360 . -1) (undo-tree-id4362 . -1) (undo-tree-id4364 . -1) (undo-tree-id4366 . -1) (undo-tree-id4368 . -1) (undo-tree-id4370 . -1) (undo-tree-id4372 . -1) (undo-tree-id4374 . -1) (undo-tree-id4376 . -1) (undo-tree-id4378 . -1) (undo-tree-id4380 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -740) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4385 . -1) (undo-tree-id4387 . -1) (undo-tree-id4389 . -1) (undo-tree-id4391 . -1) (undo-tree-id4393 . -1) (undo-tree-id4395 . -1) (undo-tree-id4397 . -1) (undo-tree-id4399 . -1) (undo-tree-id4401 . -1) (undo-tree-id4403 . -1) (undo-tree-id4405 . -1) (undo-tree-id4407 . -1) (undo-tree-id4409 . -1) (undo-tree-id4411 . -1) (undo-tree-id4413 . -1) (undo-tree-id4415 . -1) (undo-tree-id4417 . -1) (undo-tree-id4419 . -1) (undo-tree-id4421 . -1) (undo-tree-id4423 . -1) (undo-tree-id4425 . -1) (undo-tree-id4427 . -1) (undo-tree-id4429 . -1) (undo-tree-id4431 . -1) (undo-tree-id4433 . -1) (undo-tree-id4435 . -1) (undo-tree-id4437 . -1) (undo-tree-id4439 . -1) (undo-tree-id4441 . -1) (undo-tree-id4443 . -1) (undo-tree-id4445 . -1) (undo-tree-id4447 . -1) (undo-tree-id4449 . -1) (undo-tree-id4451 . -1) (undo-tree-id4453 . -1) (undo-tree-id4455 . -1) (undo-tree-id4457 . -1) (undo-tree-id4459 . -1) (undo-tree-id4461 . -1) (undo-tree-id4463 . -1) (undo-tree-id4465 . -1) (undo-tree-id4467 . -1) (undo-tree-id4469 . -1) (undo-tree-id4471 . -1) (undo-tree-id4473 . -1) (undo-tree-id4475 . -1) (undo-tree-id4477 . -1) (undo-tree-id4479 . -1) (undo-tree-id4481 . -1) (undo-tree-id4483 . -1) (undo-tree-id4485 . -1) (undo-tree-id4487 . -1) (undo-tree-id4489 . -1) (undo-tree-id4491 . -1) (undo-tree-id4493 . -1) (undo-tree-id4495 . -1) (undo-tree-id4497 . -1) (undo-tree-id4499 . -1) (undo-tree-id4501 . -1) (undo-tree-id4503 . -1) (undo-tree-id4505 . -1) (undo-tree-id4507 . -1) (undo-tree-id4509 . -1) (undo-tree-id4511 . -1) (undo-tree-id4513 . -1) (undo-tree-id4515 . -1) (undo-tree-id4517 . -1) (undo-tree-id4519 . -1) (undo-tree-id4521 . -1) (undo-tree-id4523 . -1) (undo-tree-id4525 . -1) (undo-tree-id4527 . -1) (undo-tree-id4529 . -1) (undo-tree-id4531 . -1) (undo-tree-id4533 . -1) (undo-tree-id4535 . -1) (undo-tree-id4537 . -1) (undo-tree-id4539 . -1) (undo-tree-id4541 . -1) (undo-tree-id4543 . -1) (undo-tree-id4545 . -1) (undo-tree-id4547 . -1) (undo-tree-id4549 . -1) (undo-tree-id4551 . -1) (undo-tree-id4553 . -1) (#("t" 0 1 (fontified t)) . -741) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4558 . -1) (undo-tree-id4560 . -1) (undo-tree-id4562 . -1) (undo-tree-id4564 . -1) (undo-tree-id4566 . -1) (undo-tree-id4568 . -1) (undo-tree-id4570 . -1) (undo-tree-id4572 . -1) (undo-tree-id4574 . -1) (undo-tree-id4576 . -1) (undo-tree-id4578 . -1) (undo-tree-id4580 . -1) (undo-tree-id4582 . -1) (undo-tree-id4584 . -1) (undo-tree-id4586 . -1) (undo-tree-id4588 . -1) (undo-tree-id4590 . -1) (undo-tree-id4592 . -1) (undo-tree-id4594 . -1) (undo-tree-id4596 . -1) (undo-tree-id4598 . -1) (undo-tree-id4600 . -1) (undo-tree-id4602 . -1) (undo-tree-id4604 . -1) (undo-tree-id4606 . -1) (undo-tree-id4608 . -1) (undo-tree-id4610 . -1) (undo-tree-id4612 . -1) (undo-tree-id4614 . -1) (undo-tree-id4616 . -1) (undo-tree-id4618 . -1) (undo-tree-id4620 . -1) (undo-tree-id4622 . -1) (undo-tree-id4624 . -1) (undo-tree-id4626 . -1) (undo-tree-id4628 . -1) (undo-tree-id4630 . -1) (undo-tree-id4632 . -1) (undo-tree-id4634 . -1) (undo-tree-id4636 . -1) (undo-tree-id4638 . -1) (undo-tree-id4640 . -1) (undo-tree-id4642 . -1) (#("o" 0 1 (fontified t)) . -742) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4646 . -1) (#("k" 0 1 (fontified t)) . -743) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (#("e" 0 1 (fontified t)) . -744) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (#("n" 0 1 (fontified t)) . -745) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) 746 (#("_" 0 1 (fontified t)) . -746) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (#("c" 0 1 (fontified t)) . -747) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (#("l" 0 1 (fontified t)) . -748) (undo-tree-id4662 . -1) (#("a" 0 1 (fontified t)) . -749) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (#("s" 0 1 (fontified t)) . -750) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (#("s" 0 1 (fontified t)) . -751) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (#(":" 0 1 (fontified t)) . -752) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (#(":" 0 1 (fontified t)) . -753) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (#("b" 0 1 (fontified t)) . -754) (undo-tree-id4674 . -1) (#("n" 0 1 (fontified t)) . -755) (undo-tree-id4675 . -1) (#("f" 0 1 (fontified t)) . -756) (undo-tree-id4676 . -1) (#("_" 0 1 (fontified t)) . -757) (undo-tree-id4677 . -1) (#("t" 0 1 (fontified t)) . -758) (undo-tree-id4678 . -1) (#("o" 0 1 (fontified t)) . -759) (undo-tree-id4679 . -1) (#("k" 0 1 (fontified t)) . -760) (undo-tree-id4680 . -1) (#("e" 0 1 (fontified t)) . -761) (undo-tree-id4681 . -1) (#("n" 0 1 (fontified t)) . -762) (undo-tree-id4682 . -1) (#(":" 0 1 (fontified t)) . -763) (undo-tree-id4683 . -1) (#(":" 0 1 (fontified t)) . -764) (undo-tree-id4684 . -1) (#("S" 0 1 (fontified t)) . -765) (undo-tree-id4685 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -766) (undo-tree-id4686 . -1) (undo-tree-id4687 . 1) (undo-tree-id4688 . -1) 767 (786 . 787) (785 . 786) (#(")" 0 1 (fontified nil face font-lock-variable-name-face)) . -785) (785 . 786)) ((#(")" 0 1 (fontified nil face font-lock-variable-name-face)) . 785) (785 . 786) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 785) (#("=" 0 1 (fontified nil)) . 786) (739 . 767) (t 26077 53240 582889 422000)) (26077 53240 557998 224000) 0 nil])
([nil current ((906 . 907)) nil (26077 61417 736882 484000) 0 nil])
nil
nil
