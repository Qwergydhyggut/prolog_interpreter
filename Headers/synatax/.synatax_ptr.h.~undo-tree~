(undo-tree-save-format-version . 1)
"19771f0a4198bb9ebd5e7c6ec7f69d4445247c8a"
[nil nil nil nil (26073 40522 235708 378000) 0 nil]
([nil nil ((65 . 65) (65 . 66) (65 . 65) (65 . 66) (68 . 73) (#("e" 0 1 (fontified nil)) . 68) (undo-tree-id26 . -1) (68 . 69) (#("endif" 0 5 (fontified nil)) . -68) (undo-tree-id27 . -5) (68 . 73) (#("en" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -68) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) 70 (68 . 70) (#("w" 0 1 (face font-lock-preprocessor-face fontified t)) . -68) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 69 (68 . 69) (67 . 68) (#("&" 0 1 (fontified t)) . -67) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 68 (67 . 68) (66 . 66) (66 . 67) (65 . 65) (65 . 66) (64 . 64) (64 . 65) (46 . 64) (45 . 46) (#("B" 0 1 (face font-lock-variable-name-face fontified t)) . -45) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 46 (44 . 46) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -44) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 45 (41 . 45) (apply yas--snippet-revive 34 41 #s(yas--snippet nil nil #s(yas--exit 41 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 41 nil) 1 nil nil nil nil)) (34 . 41) (#("define $0" 0 9 (fontified nil)) . 34) (undo-tree-id42 . -9) (34 . 43) (#("d" 0 1 (fontified nil)) . 34) (undo-tree-id43 . -1) (34 . 35) (#("define macro" 0 12 (fontified nil)) . -34) (undo-tree-id44 . -12) (34 . 46) (#("def" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t) 2 3 (face font-lock-preprocessor-face fontified t)) . -34) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) 37 (34 . 37) (#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -34) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 35 (34 . 35) (33 . 34) (32 . 32) (32 . 33) (30 . 32) (#("P" 0 1 (fontified t)) . -30) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 31 (28 . 31) (#("S" 0 1 (fontified t)) . -28) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("S" 0 1 (fontified t)) . -29) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 30 (29 . 30) (#("W" 0 1 (fontified t)) . -29) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 30 (26 . 30) (#("K" 0 1 (fontified t)) . -26) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 27 (26 . 27) (#("K" 0 1 (fontified t)) . -26) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 27 (25 . 27) (15 . 25) (#("Y" 0 1 (fontified t)) . -15) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("T" 0 1 (fontified t)) . -16) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("T" 0 1 (fontified t)) . -17) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 18 (15 . 18) (9 . 15) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id78 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id79 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id80 . -12) (2 . 14) (#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 3 (2 . 3) (1 . 2) (t 26073 40167 643428 803000)) nil (26073 40522 235701 123000) 0 nil])
([nil nil ((159 . 160) (154 . 158) (nil fontified nil 136 . 154) (136 . 154) (#("to" 0 2 (fontified nil)) . 136) (nil fontified nil 136 . 138) (136 . 138) (#("token_class::token" 0 18 (fontified nil)) . -136) (nil fontified nil 136 . 154) (136 . 154) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -136) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 138 (136 . 138) (135 . 136) (132 . 135) (123 . 132) (#("bnf_token" 0 9 (fontified nil)) . -123) (123 . 132) (121 . 123) (nil fontified nil 110 . 121) (nil face (rainbow-delimiters-depth-2-face) 110 . 121) (110 . 121) (#("to" 0 2 (fontified nil)) . 110) (nil fontified nil 110 . 112) (nil face (rainbow-delimiters-depth-2-face) 110 . 112) (110 . 112) (#("token_class" 0 11 (fontified nil)) . -110) (nil fontified nil 110 . 121) (nil face (rainbow-delimiters-depth-2-face) 110 . 121) (110 . 121) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -110) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 113 (110 . 113) (nil face font-lock-type-face 109 . 111) (nil fontified t 109 . 111) (109 . 111) (102 . 109) (#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -102) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -103) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 104 (101 . 104) (95 . 101) (#("st" 0 2 (fontified nil)) . 95) (95 . 97) (#("static" 0 6 (fontified nil)) . -95) (95 . 101) (#("stati" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -95) (undo-tree-id8 . -5) (undo-tree-id9 . -5) 100 (95 . 100) (97 . 98) (93 . 95) (92 . 94) (91 . 93) (91 . 95) (90 . 90) (90 . 91) (84 . 90) (81 . 84) (#("s" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -82) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -83) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 84 (81 . 84) (78 . 81) (#("x" 0 1 (face font-lock-type-face fontified t)) . -78) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 79 (72 . 79) (66 . 72) (#("st" 0 2 (fontified nil)) . 66) (66 . 68) (#("struct" 0 6 (fontified nil)) . -66) (66 . 72) (#("st" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -66) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) 68 (67 . 68) (#("y" 0 1 (fontified t)) . -67) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 68 (66 . 68)) nil (26073 40522 235644 279000) 0 nil])
([nil nil ((176 . 177) 159) nil (26073 40522 235575 320000) 0 nil])
([nil nil ((127 . 136) (#("bnf_token" 0 9 (fontified nil)) . -127) (127 . 136) (125 . 127) (114 . 125) (#("to" 0 2 (fontified nil)) . 114) (114 . 116) (#("token_class" 0 11 (fontified nil)) . -114) (114 . 125) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -114) (undo-tree-id109 . -2) (undo-tree-id110 . -2) 116 (114 . 116) (107 . 115) (#("c" 0 1 (fontified t)) . -107) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 108 (107 . 108) (106 . 107) (105 . 106) (102 . 105) (102 . 103) (t 26073 40522 250109 840000)) nil (26073 40633 836983 174000) 0 nil])
([nil nil ((98 . 100) (96 . 98) (#("w" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -96) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 97 (93 . 97) (apply yas--snippet-revive 84 94 #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (84 . 94) (#("include \"$0\"" 0 12 (fontified nil)) . 84) (undo-tree-id86 . -12) (84 . 96) (#("i" 0 1 (fontified nil c-in-sws t)) . 84) (undo-tree-id87 . -1) (84 . 85) (#("include \"header\"" 0 16 (fontified nil)) . -84) (undo-tree-id88 . -16) (84 . 100) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -84) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) 86 (84 . 86) (83 . 84) (82 . 82) (82 . 83) (75 . 82) (#("v" 0 1 (fontified nil c-in-sws t)) . 75) (undo-tree-id92 . -1) (75 . 76) (#("vector>" 0 7 (fontified nil c-in-sws t)) . -75) (undo-tree-id93 . -7) (75 . 82) (#("ve" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -75) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) 77 (74 . 77) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . -74) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (nil syntax-table nil 75 . 76) (nil syntax-table (1) 74 . 75) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified t)) . 75) (undo-tree-id99 . -1) (apply yas--snippet-revive 66 76 #s(yas--snippet nil nil #s(yas--exit 75 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 75 nil) 2 nil nil nil nil)) (66 . 76) (#("include \"$0\"" 0 12 (fontified nil)) . 66) (undo-tree-id100 . -12) (66 . 78) (#("i" 0 1 (fontified nil c-in-sws t)) . 66) (undo-tree-id101 . -1) (66 . 67) (#("include \"header\"" 0 16 (fontified nil)) . -66) (undo-tree-id102 . -16) (66 . 82) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -66) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) 68 (67 . 68) (#("m" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -67) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 68 (66 . 68) (65 . 66) (65 . 65) (65 . 66) (65 . 66)) nil (26073 40633 836972 265000) 0 nil])
([nil nil ((466 . 467) (455 . 465) (apply yas--snippet-revive 429 455 #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 3 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (449 . 454) (#("token" 0 5 (fontified nil)) . -449) (449 . 454) (447 . 449) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-3-face) 436 . 447) (436 . 447) (#("to" 0 2 (fontified nil)) . 436) (nil fontified nil 436 . 438) (nil face (rainbow-delimiters-depth-3-face) 436 . 438) (436 . 438) (#("token_class" 0 11 (fontified nil)) . -436) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-3-face) 436 . 447) (436 . 447) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -436) (undo-tree-id0 . -2) 438 (437 . 438) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 437) (436 . 437) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 3 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (429 . 448) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 429) (429 . 453) (#("v" 0 1 (fontified nil)) . 429) (429 . 430) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -429) (429 . 464) (#("v" 0 1 (fontified t)) . -429) (undo-tree-id1 . -1) 430 (429 . 430) (427 . 429) (nil fontified nil 424 . 427) (424 . 427) (#("st" 0 2 (fontified nil)) . 424) (nil fontified nil 424 . 426) (424 . 426) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -424) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 427 (426 . 427) (#("a" 0 1 (fontified t)) . -426) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("d" 0 1 (fontified t)) . -427) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 428 (427 . 428) (424 . 427) (423 . 424) (413 . 423) (#("#" 0 1 (fontified t)) . -413) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 414 (413 . 414) (#("$" 0 1 (fontified t)) . -413) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 414 (412 . 414) (apply yas--snippet-revive 386 412 #s(yas--snippet nil (#s(yas--field 1 393 411 nil nil nil t nil)) nil 2 nil #s(yas--field 1 393 411 nil nil nil t nil) nil nil)) (406 . 411) (#("token" 0 5 (fontified nil)) . -406) (406 . 411) (404 . 406) (nil fontified nil 393 . 404) (nil face (rainbow-delimiters-depth-3-face) 393 . 404) (393 . 404) (#("to" 0 2 (fontified nil)) . 393) (nil fontified nil 393 . 395) (nil face (rainbow-delimiters-depth-3-face) 393 . 395) (393 . 395) (#("token_class" 0 11 (fontified nil)) . -393) (nil fontified nil 393 . 404) (nil face (rainbow-delimiters-depth-3-face) 393 . 404) (393 . 404) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -393) (undo-tree-id12 . -2) 395 (394 . 395) (#("i" 0 1 (fontified t)) . -394) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 395 (394 . 395) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 394) (393 . 394) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 393 411 nil nil nil t nil)) nil 2 nil #s(yas--field 1 393 411 nil nil nil t nil) nil nil)) (386 . 405) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 386) (386 . 410) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -386) (386 . 421) (#("c" 0 1 (fontified t)) . -386) (undo-tree-id15 . -1) 387 (386 . 387) (385 . 386) (384 . 385) (nil fontified nil 381 . 384) (381 . 384) (#("st" 0 2 (fontified nil)) . 381) (nil fontified nil 381 . 383) (381 . 383) (#("std" 0 3 (fontified nil)) . -381) (nil fontified nil 381 . 384) (381 . 384) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -381) (undo-tree-id16 . -2) 383 (381 . 383) (380 . 381) (370 . 380) (369 . 370) (apply yas--snippet-revive 339 369 #s(yas--snippet nil (#s(yas--field 1 346 368 nil nil nil t nil)) nil 1 nil #s(yas--field 1 346 368 nil nil nil t nil) nil nil)) (359 . 368) (#("bnf_token" 0 9 (fontified nil)) . -359) (359 . 368) (357 . 359) (nil fontified nil 346 . 357) (nil face (rainbow-delimiters-depth-3-face) 346 . 357) (346 . 357) (#("to" 0 2 (fontified nil)) . 346) (nil fontified nil 346 . 348) (nil face (rainbow-delimiters-depth-3-face) 346 . 348) (346 . 348) (#("token_class" 0 11 (fontified nil)) . -346) (nil fontified nil 346 . 357) (nil face (rainbow-delimiters-depth-3-face) 346 . 357) (346 . 357) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -346) (undo-tree-id17 . -3) (undo-tree-id18 . -3) 349 (347 . 349) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 347) (346 . 347) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 346 368 nil nil nil t nil)) nil 1 nil #s(yas--field 1 346 368 nil nil nil t nil) nil nil)) (339 . 358) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 339) (339 . 363) (#("v" 0 1 (fontified nil)) . 339) (339 . 340) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -339) (339 . 374) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -339) (undo-tree-id19 . -2) (undo-tree-id20 . -2) 341 (339 . 341) (337 . 339) (336 . 337) (#("x" 0 1 (fontified t)) . -336) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 337 (334 . 337) (143 . 144) (#("g" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -143) (undo-tree-id23 . -1) 144 (135 . 144) (133 . 135) (130 . 133) (apply yas--snippet-revive 121 131 #s(yas--snippet nil nil #s(yas--exit 130 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 130 nil) 0 nil nil nil nil)) (121 . 131) (#("include \"$0\"" 0 12 (fontified nil)) . 121) (undo-tree-id24 . -12) (121 . 133) (#("i" 0 1 (c-in-sws t fontified nil)) . 121) (undo-tree-id25 . -1) (121 . 122) (#("include \"header\"" 0 16 (fontified nil)) . -121) (undo-tree-id26 . -16) (121 . 137) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -121) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 122 (121 . 122) (120 . 121) (#("$" 0 1 (fontified t c-is-sws t)) . -120) (undo-tree-id29 . -1) 121 (120 . 121) (119 . 119) (119 . 120) (303 . 307) (303 . 305) (297 . 303) (#("J" 0 1 (fontified t face font-lock-variable-name-face)) . -297) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 298 (294 . 298) (282 . 294) (#("synatax_tree" 0 12 (fontified nil)) . -282) (282 . 294) (280 . 282) (262 . 280) (#("sy" 0 2 (fontified nil)) . 262) (262 . 264) (#("synatax_tree_class" 0 18 (fontified nil)) . -262) (262 . 280) (#("sy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -262) (undo-tree-id32 . -2) (undo-tree-id33 . -2) 264 (263 . 264) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -263) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -264) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 265 (262 . 265) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -262) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -263) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -264) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#(":" 0 1 (fontified t)) . -265) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#(":" 0 1 (fontified t)) . -266) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 267 (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -267) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -268) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -269) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("m" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -270) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -271) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("c" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -272) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("_" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -273) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("b" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -274) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -275) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -276) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("l" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -277) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 278 (65 . 83) (249 . 249) (249 . 260) (#("atomic_bool" 0 11 (fontified nil)) . -249) (249 . 260) (247 . 249) (244 . 247) (#("st" 0 2 (fontified nil)) . 244) (244 . 246) (#("std" 0 3 (fontified nil)) . -244) (244 . 247) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -244) (undo-tree-id84 . -2) 246 (243 . 246) (237 . 243) (#("st" 0 2 (fontified nil)) . 237) (237 . 239) (#("static" 0 6 (fontified nil)) . -237) (237 . 243) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -237) (undo-tree-id85 . -3) 240 (237 . 240) (234 . 237) (t 26073 40633 846780 992000) 131) nil (26073 42565 587377 266000) 0 nil])
([nil nil ((455 . 456) (411 . 412) (t 26073 42565 593525 190000)) nil (26073 46704 215646 340000) 0 nil])
([nil nil ((#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 174) (undo-tree-id37 . -3) (undo-tree-id38 . -3) 177 (#("s" 0 1 (fontified t)) . -177) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t)) . -178) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t)) . -179) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("t" 0 1 (fontified t)) . -180) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("i" 0 1 (fontified t)) . -181) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . -182) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 183 (#(" " 0 1 (fontified t)) . 183) (undo-tree-id51 . -1) (undo-tree-id52 . -1) 184 (183 . 184) (177 . 183) (#("st" 0 2 (fontified nil)) . 177) (177 . 179) (#("static" 0 6 (fontified nil)) . -177) (177 . 183) (#("stat" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -177) (undo-tree-id53 . -4) (undo-tree-id54 . -4) 181 (178 . 181) (#("y" 0 1 (fontified t)) . -178) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("y" 0 1 (fontified t)) . -179) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 180 (179 . 180) (#("t" 0 1 (fontified t)) . -179) (undo-tree-id59 . -1) (undo-tree-id60 . -1) 180 (178 . 180) (177 . 178) (174 . 177) (t 26073 46704 223690 657000) 173) nil (26074 14349 384755 62000) 0 nil])
([nil nil ((nil rear-nonsticky nil 178 . 179) (#("
" 0 1 (fontified nil)) . -232) (174 . 233) 173) nil (26074 14349 384738 896000) 0 nil])
([nil nil ((217 . 218) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -217) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . -218) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -219) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -220) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 221 (175 . 177) (#("    " 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t)) . -175) (undo-tree-id35 . -4) (undo-tree-id36 . -4) 179) nil (26077 41926 27303 965000) 0 nil])
([nil nil ((326 . 327)) nil (26077 41933 694675 861000) 0 nil] [nil nil ((#("token_class::bnf_token bt," 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 25 (fontified t face font-lock-variable-name-face) 25 26 (fontified t c-type c-decl-arg-start)) . 281) (undo-tree-id1163 . -25) (undo-tree-id1165 . -26) (t 26077 41596 349842 784000)) ((281 . 307)) (26077 41925 208309 544000) 0 nil] [nil nil ((#("token_class::bnf_token bt," 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 25 (fontified t face font-lock-variable-name-face) 25 26 (fontified t c-type c-decl-arg-start)) . 281) (undo-tree-id1 . -26) (undo-tree-id2 . -25) (t 26074 14349 402759 11000)) ((281 . 307)) (26077 41462 572608 538000) 0 nil])
([nil nil ((720 . 721) (718 . 720) (715 . 717) (708 . 715) (apply yas--snippet-revive 681 708 #s(yas--snippet nil (#s(yas--field 1 688 707 nil nil nil t nil)) nil 4 nil #s(yas--field 1 688 707 nil nil nil t nil) nil nil)) (706 . 707) (nil fontified nil 688 . 706) (nil face (rainbow-delimiters-depth-3-face) 688 . 706) (688 . 706) (#("to" 0 2 (fontified nil)) . 688) (nil fontified nil 688 . 690) (nil face (rainbow-delimiters-depth-3-face) 688 . 690) (688 . 690) (#("token_class::token" 0 18 (fontified nil)) . -688) (nil fontified nil 688 . 706) (nil face (rainbow-delimiters-depth-3-face) 688 . 706) (688 . 706) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -688) (undo-tree-id1277 . -2) (undo-tree-id1278 . -2) 690 (689 . 690) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 689) (688 . 689) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 688 707 nil nil nil t nil)) nil 4 nil #s(yas--field 1 688 707 nil nil nil t nil) nil nil)) (681 . 700) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 681) (681 . 705) (#("v" 0 1 (fontified nil)) . 681) (681 . 682) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -681) (681 . 716) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -681) (undo-tree-id1279 . -3) (undo-tree-id1280 . -3) 684 (681 . 684) (679 . 681) (676 . 679) (#("st" 0 2 (fontified nil)) . 676) (676 . 678) (#("std" 0 3 (fontified nil)) . -676) (676 . 679) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -676) (undo-tree-id1281 . -2) (undo-tree-id1282 . -2) 678 (676 . 678) (675 . 676) (673 . 674) (672 . 673) (671 . 672) (nil fontified nil 649 . 671) (nil face (rainbow-delimiters-depth-3-face) 649 . 671) (649 . 671) (#("to" 0 2 (fontified nil)) . 649) (nil fontified nil 649 . 651) (nil face (rainbow-delimiters-depth-3-face) 649 . 651) (649 . 651) (#("token_class::bnf_token" 0 22 (fontified nil)) . -649) (nil fontified nil 649 . 671) (nil face (rainbow-delimiters-depth-3-face) 649 . 671) (649 . 671) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -649) (undo-tree-id1283 . -3) (undo-tree-id1284 . -3) 652 (649 . 652) (648 . 650) (642 . 648) (640 . 642) (apply yas--snippet-revive 610 640 #s(yas--snippet nil (#s(yas--field 1 617 639 nil nil nil t nil)) nil 3 nil #s(yas--field 1 617 639 nil nil nil t nil) nil nil)) (630 . 639) (#("bnf_token" 0 9 (fontified nil)) . -630) (630 . 639) (628 . 630) (nil fontified nil 617 . 628) (nil face (rainbow-delimiters-depth-3-face) 617 . 628) (617 . 628) (#("t" 0 1 (fontified nil)) . 617) (nil fontified nil 617 . 618) (nil face (rainbow-delimiters-depth-3-face) 617 . 618) (617 . 618) (#("token_class" 0 11 (fontified nil)) . -617) (nil fontified nil 617 . 628) (nil face (rainbow-delimiters-depth-3-face) 617 . 628) (617 . 628) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -617) (undo-tree-id1285 . -2) (undo-tree-id1286 . -2) 619 (617 . 619) (#("r" 0 1 (fontified t)) . -617) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (#("i" 0 1 (fontified t)) . -618) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) 619 (618 . 619) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 618) (617 . 618) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 617 639 nil nil nil t nil)) nil 3 nil #s(yas--field 1 617 639 nil nil nil t nil) nil nil)) (610 . 629) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 610) (610 . 634) (#("v" 0 1 (fontified nil)) . 610) (610 . 611) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -610) (610 . 645) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -610) (undo-tree-id1291 . -3) (undo-tree-id1292 . -3) 613 (610 . 613) (608 . 610) (605 . 608) (604 . 606) (596 . 604) (apply yas--snippet-revive 566 596 #s(yas--snippet nil (#s(yas--field 1 573 595 nil nil nil t nil)) nil 2 nil #s(yas--field 1 573 595 nil nil nil t nil) nil nil)) (nil fontified nil 573 . 595) (nil face (rainbow-delimiters-depth-2-face) 573 . 595) (573 . 595) (#("to" 0 2 (fontified nil)) . 573) (nil fontified nil 573 . 575) (nil face (rainbow-delimiters-depth-2-face) 573 . 575) (573 . 575) (#("token_class::bnf_token" 0 22 (fontified nil)) . -573) (nil fontified nil 573 . 595) (nil face (rainbow-delimiters-depth-2-face) 573 . 595) (573 . 595) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -573) (undo-tree-id1293 . -3) (undo-tree-id1294 . -3) 576 (574 . 576) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 574) (573 . 574) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 573 595 nil nil nil t nil)) nil 2 nil #s(yas--field 1 573 595 nil nil nil t nil) nil nil)) (566 . 585) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 566) (566 . 590) (#("v" 0 1 (fontified nil)) . 566) (566 . 567) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -566) (566 . 601) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -566) (undo-tree-id1295 . -3) (undo-tree-id1296 . -3) 569 (566 . 569) (564 . 566) (561 . 564) (553 . 561) (551 . 553) (550 . 552) (549 . 551) (#("    " 0 4 (fontified t)) . 526) 532 (553 . 557) (552 . 552) (552 . 553) (547 . 552) (533 . 547) (#("a" 0 1 (fontified t)) . -533) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#("t" 0 1 (fontified t)) . -534) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("r" 0 1 (fontified t)) . -535) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) 536 (532 . 536) (531 . 532) (t 26077 41933 709834 468000) 531) nil (26077 44509 309896 711000) 0 nil])
([nil nil ((300 . 301) (t 26077 41824 83170 502000)) ((#("*" 0 1 (fontified t)) . 300) (t 26077 41890 533168 864000)) (26077 41890 521594 330000) 0 nil] [nil nil ((#("token_class::token tok" 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 22 (fontified t face font-lock-variable-name-face)) . 281) (undo-tree-id1167 . -21) (undo-tree-id1169 . -1) (undo-tree-id1171 . -1) (undo-tree-id1173 . -1) (undo-tree-id1175 . -1) (undo-tree-id1177 . -1) (undo-tree-id1179 . -1) (undo-tree-id1181 . -1) (undo-tree-id1183 . -1) (undo-tree-id1185 . -1) (undo-tree-id1187 . -1) (undo-tree-id1189 . -1) (undo-tree-id1191 . -1) (undo-tree-id1193 . -1) (undo-tree-id1195 . -1) (undo-tree-id1197 . -1) (undo-tree-id1199 . -1) (undo-tree-id1201 . -1) (undo-tree-id1203 . -1) (undo-tree-id1205 . -1) (undo-tree-id1207 . -1) (undo-tree-id1209 . -1) (undo-tree-id1211 . -1) (undo-tree-id1213 . -1) (undo-tree-id1215 . -1) (undo-tree-id1217 . -1) (undo-tree-id1219 . -1) (undo-tree-id1221 . -1) (undo-tree-id1223 . -1) (undo-tree-id1225 . -1) (undo-tree-id1227 . -1) (undo-tree-id1229 . -1) (undo-tree-id1231 . -1) (undo-tree-id1233 . -1) (undo-tree-id1235 . -1) (undo-tree-id1237 . -1) (undo-tree-id1239 . -1) (undo-tree-id1241 . -1) (undo-tree-id1243 . -1) (undo-tree-id1245 . -1) (undo-tree-id1247 . -1) (undo-tree-id1249 . -1) (undo-tree-id1251 . -1) (undo-tree-id1253 . -1) (undo-tree-id1255 . -1) (undo-tree-id1257 . -1) (undo-tree-id1259 . -1) (undo-tree-id1261 . -1) (undo-tree-id1263 . -1) (undo-tree-id1265 . -1) (undo-tree-id1267 . -1) (undo-tree-id1269 . -1) (undo-tree-id1271 . -1) (undo-tree-id1273 . -1) (undo-tree-id1275 . -1) (t 26077 41746 643172 410000)) ((281 . 303) (t 26077 41785 403171 454000)) (26077 41785 393138 209000) 0 nil])
([nil nil ((#("token_class::token tok" 0 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 22 (fontified t face font-lock-variable-name-face)) . 281) (undo-tree-id3 . -21) (undo-tree-id5 . -22) (t 26077 40925 789859 313000)) ((281 . 303) (t 26077 41324 769849 457000)) (26077 41323 27391 540000) 0 nil])
([nil nil ((723 . 724) (#("    " 0 4 (fontified t)) . 723) (undo-tree-id1303 . -4) (undo-tree-id1304 . -4) 727 (t 26077 44509 346437 571000)) nil (26077 44528 140416 242000) 0 nil])
nil
nil
([nil nil ((240 . 241) (#("f" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -240) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id668 . -1) (undo-tree-id670 . -1) (undo-tree-id672 . -1) (undo-tree-id674 . -1) (undo-tree-id676 . -1) (undo-tree-id678 . -1) (undo-tree-id680 . -1) (undo-tree-id682 . -1) (undo-tree-id684 . -1) (undo-tree-id686 . -1) (undo-tree-id688 . -1) (undo-tree-id690 . -1) (undo-tree-id692 . -1) (undo-tree-id694 . -1) (undo-tree-id696 . -1) (undo-tree-id698 . -1) (undo-tree-id700 . -1) (undo-tree-id702 . -1) (undo-tree-id704 . -1) (undo-tree-id706 . -1) (undo-tree-id708 . -1) (undo-tree-id710 . -1) (undo-tree-id712 . -1) (undo-tree-id714 . -1) (undo-tree-id716 . -1) (undo-tree-id718 . -1) (undo-tree-id720 . -1) (undo-tree-id722 . -1) (undo-tree-id724 . -1) (undo-tree-id726 . -1) (undo-tree-id728 . -1) (undo-tree-id730 . -1) (undo-tree-id732 . -1) (undo-tree-id734 . -1) (undo-tree-id736 . -1) (undo-tree-id738 . -1) (undo-tree-id740 . -1) (undo-tree-id742 . -1) (undo-tree-id744 . -1) (undo-tree-id746 . -1) (undo-tree-id748 . -1) (undo-tree-id750 . -1) (undo-tree-id752 . -1) (undo-tree-id754 . -1) (undo-tree-id756 . -1) (undo-tree-id758 . -1) (undo-tree-id760 . -1) (undo-tree-id762 . -1) (undo-tree-id764 . -1) (undo-tree-id766 . -1) (undo-tree-id768 . -1) (undo-tree-id770 . -1) (undo-tree-id772 . -1) (undo-tree-id774 . -1) (undo-tree-id776 . -1) (undo-tree-id778 . -1) (undo-tree-id780 . -1) (undo-tree-id782 . -1) (undo-tree-id784 . -1) (undo-tree-id786 . -1) (undo-tree-id788 . -1) (undo-tree-id790 . -1) (undo-tree-id792 . -1) (undo-tree-id794 . -1) (undo-tree-id796 . -1) (undo-tree-id798 . -1) (undo-tree-id800 . -1) (undo-tree-id802 . -1) (undo-tree-id804 . -1) (undo-tree-id806 . -1) (undo-tree-id808 . -1) (undo-tree-id810 . -1) (undo-tree-id812 . -1) (undo-tree-id814 . -1) (undo-tree-id816 . -1) (undo-tree-id818 . -1) (undo-tree-id820 . -1) (undo-tree-id822 . -1) (undo-tree-id824 . -1) (undo-tree-id826 . -1) (undo-tree-id828 . -1) (undo-tree-id830 . -1) (undo-tree-id832 . -1) (undo-tree-id834 . -1) (undo-tree-id836 . -1) (undo-tree-id838 . -1) (undo-tree-id840 . -1) (undo-tree-id842 . -1) (undo-tree-id844 . -1) (undo-tree-id846 . -1) (undo-tree-id848 . -1) (undo-tree-id850 . -1) (undo-tree-id852 . -1) (undo-tree-id854 . -1) (undo-tree-id856 . -1) (undo-tree-id858 . -1) (undo-tree-id860 . -1) (undo-tree-id862 . -1) (undo-tree-id864 . -1) (undo-tree-id866 . -1) (undo-tree-id868 . -1) (undo-tree-id870 . -1) (undo-tree-id872 . -1) (undo-tree-id874 . -1) 241 (238 . 241) (#("p" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -238) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -239) (undo-tree-id877 . -1) (undo-tree-id878 . -1) 240 (237 . 240) (237 . 238) (#("std::vector<token_class::bnf_token> " 0 3 (fontified t face font-lock-constant-face) 3 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-2-face)) 12 23 (fontified t face font-lock-constant-face) 23 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (fontified t syntax-table (5 . 60) c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 35 36 (fontified t)) . 237) (undo-tree-id879 . -35) (undo-tree-id881 . -23) (undo-tree-id883 . -36) (undo-tree-id885 . -36)) ((237 . 273) (#(" " 0 1 (fontified nil)) . 237) (undo-tree-id887 . 1) (undo-tree-id888 . 1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("vpi" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 237) (undo-tree-id891 . -3) (undo-tree-id892 . -3) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (238 . 240) (#("oif" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 238) (undo-tree-id1027 . -3) (undo-tree-id1028 . -3) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) (undo-tree-id1049 . -2) (undo-tree-id1050 . -2) (undo-tree-id1051 . -2) (undo-tree-id1052 . -2) (undo-tree-id1053 . -2) (undo-tree-id1054 . -2) (undo-tree-id1055 . -2) (undo-tree-id1056 . -2) (undo-tree-id1057 . -2) (undo-tree-id1058 . -2) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) (undo-tree-id1063 . -2) (undo-tree-id1064 . -2) (undo-tree-id1065 . -2) (undo-tree-id1066 . -2) (undo-tree-id1067 . -2) (undo-tree-id1068 . -2) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) (undo-tree-id1071 . -2) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . -2) (undo-tree-id1077 . -2) (undo-tree-id1078 . -2) (undo-tree-id1079 . -2) (undo-tree-id1080 . -2) (undo-tree-id1081 . -2) (undo-tree-id1082 . -2) (undo-tree-id1083 . -2) (undo-tree-id1084 . -2) (undo-tree-id1085 . -2) (undo-tree-id1086 . -2) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -2) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -2) (undo-tree-id1098 . -2) (undo-tree-id1099 . -2) (undo-tree-id1100 . -2) (undo-tree-id1101 . -2) (undo-tree-id1102 . -2) (undo-tree-id1103 . -2) (undo-tree-id1104 . -2) (undo-tree-id1105 . -2) (undo-tree-id1106 . -2) (undo-tree-id1107 . -2) (undo-tree-id1108 . -2) (undo-tree-id1109 . -2) (undo-tree-id1110 . -2) (undo-tree-id1111 . -2) (undo-tree-id1112 . -2) (undo-tree-id1113 . -2) (undo-tree-id1114 . -2) (undo-tree-id1115 . -2) (undo-tree-id1116 . -2) (undo-tree-id1117 . -2) (undo-tree-id1118 . -2) (undo-tree-id1119 . -2) (undo-tree-id1120 . -2) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -2) (undo-tree-id1124 . -2) (undo-tree-id1125 . -2) (undo-tree-id1126 . -2) (undo-tree-id1127 . -2) (undo-tree-id1128 . -2) (undo-tree-id1129 . -2) (undo-tree-id1130 . -2) (undo-tree-id1131 . -2) (undo-tree-id1132 . -2) (undo-tree-id1133 . -2) (undo-tree-id1134 . -2) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) (undo-tree-id1147 . -2) (undo-tree-id1148 . -2) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -2) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -2) (240 . 241) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 240) (t 26077 41308 243183 197000)) (26077 41308 235764 599000) 0 nil] [nil nil ((#("  static std::vector<token_class::bnf_token> ret_ptr();
" 0 2 (fontified t) 2 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-constant-face) 12 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 21 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-2-face)) 21 32 (fontified t face font-lock-constant-face) 32 34 (fontified t) 34 43 (fontified t face font-lock-type-face) 43 44 (syntax-table (5 . 60) fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t) 45 52 (fontified t face font-lock-function-name-face) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 54 (fontified t face (rainbow-delimiters-depth-2-face)) 54 56 (fontified t)) . 228) (undo-tree-id10 . -9) (undo-tree-id11 . -9) (undo-tree-id12 . -55) 237 (t 26077 41000 236524 152000)) ((228 . 284)) (26077 41291 79597 1000) 0 nil])
([nil nil ((827 . 828) (825 . 827) (820 . 824) (nil fontified nil 802 . 820) (802 . 820) (#("to" 0 2 (fontified nil)) . 802) (nil fontified nil 802 . 804) (802 . 804) (#("token_class::token" 0 18 (fontified nil)) . -802) (nil fontified nil 802 . 820) (802 . 820) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -802) (undo-tree-id1305 . -2) (undo-tree-id1306 . -2) 804 (802 . 804) (801 . 802) (799 . 801) (798 . 799) (789 . 798) (#("bnf_token" 0 9 (fontified nil)) . -789) (789 . 798) (787 . 789) (776 . 787) (#("to" 0 2 (fontified nil)) . 776) (776 . 778) (#("token_class" 0 11 (fontified nil)) . -776) (776 . 787) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -776) (undo-tree-id1307 . -2) (undo-tree-id1308 . -2) 778 (776 . 778) (apply yas--snippet-revive 737 767 #s(yas--snippet nil (#s(yas--field 1 744 766 nil nil nil t nil)) nil 5 nil #s(yas--field 1 744 766 nil nil nil t nil) nil nil)) (757 . 766) (#("bnf_token" 0 9 (fontified nil)) . -757) (757 . 766) (#("b" 0 1 (fontified t)) . -757) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) 758 (757 . 758) (755 . 757) (nil fontified nil 744 . 755) (nil face (rainbow-delimiters-depth-2-face) 744 . 755) (744 . 755) (#("to" 0 2 (fontified nil)) . 744) (nil fontified nil 744 . 746) (nil face (rainbow-delimiters-depth-2-face) 744 . 746) (744 . 746) (#("token_class" 0 11 (fontified nil)) . -744) (nil fontified nil 744 . 755) (nil face (rainbow-delimiters-depth-2-face) 744 . 755) (744 . 755) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -744) (undo-tree-id1311 . -2) (undo-tree-id1312 . -2) 746 (745 . 746) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 745) (744 . 745) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 744 766 nil nil nil t nil)) nil 5 nil #s(yas--field 1 744 766 nil nil nil t nil) nil nil)) (737 . 756) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 737) (737 . 761) (#("v" 0 1 (fontified nil)) . 737) (737 . 738) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -737) (737 . 772) (#("v" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -737) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) 738 (737 . 738) (735 . 737) (732 . 735) (732 . 733) (nil face font-lock-type-face 739 . 741) (nil fontified t 739 . 741) (739 . 741) (738 . 739) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -738) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) 739 (732 . 739) (724 . 732) (721 . 724) (t 26077 44528 153103 771000) 552) nil (26077 44946 586120 150000) 0 nil])
nil
([nil nil ((237 . 241) (#("vo" 0 2 (fontified nil)) . 237) (237 . 239) (#("void" 0 4 (fontified nil)) . -237) (237 . 241) (#("vo" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -237) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 239 (237 . 239) (237 . 238) (#("synatax_tree_class::synatax_tree " 0 18 (fontified t face font-lock-constant-face) 18 20 (fontified t) 20 31 (fontified t face font-lock-type-face) 31 32 (fontified t c-type c-decl-id-start face font-lock-type-face) 32 33 (fontified t)) . 237) (undo-tree-id8 . -32)) ((237 . 270) (#(" " 0 1 (fontified nil)) . 237) (undo-tree-id14 . 1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("vo" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face)) . 237) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (237 . 239) (#("void" 0 4 (fontified nil)) . 237) (237 . 241) (#("vo" 0 2 (fontified nil)) . 237) (237 . 239) (#("void" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 237) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -3) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) (undo-tree-id34 . -3) (undo-tree-id35 . -3) (undo-tree-id36 . -3) (undo-tree-id37 . -3) (undo-tree-id38 . -3) (undo-tree-id39 . -3) (undo-tree-id40 . -3) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) (undo-tree-id77 . -3) (undo-tree-id78 . -3) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -3) (undo-tree-id111 . -3) (undo-tree-id112 . -3) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -3) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -3) (undo-tree-id120 . -3) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) (undo-tree-id190 . -3) (undo-tree-id191 . -3) (undo-tree-id192 . -3) (undo-tree-id193 . -3) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3) (undo-tree-id197 . -3) (undo-tree-id198 . -3) (undo-tree-id199 . -3) (undo-tree-id200 . -3) (undo-tree-id201 . -3) (undo-tree-id202 . -3) (undo-tree-id203 . -3) (undo-tree-id204 . -3) (undo-tree-id205 . -3) (undo-tree-id206 . -3) (undo-tree-id207 . -3) (undo-tree-id208 . -3) (undo-tree-id209 . -3) (undo-tree-id210 . -3) (undo-tree-id211 . -3) (undo-tree-id212 . -3) (undo-tree-id213 . -3) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (undo-tree-id218 . -3) (undo-tree-id219 . -3) (undo-tree-id220 . -3) (undo-tree-id221 . -3) (undo-tree-id222 . -3) (undo-tree-id223 . -3) (undo-tree-id224 . -3) (undo-tree-id225 . -3) (undo-tree-id226 . -3) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (undo-tree-id238 . -3) (undo-tree-id239 . -3) (undo-tree-id240 . -3) (undo-tree-id241 . -3) (undo-tree-id242 . -3) (undo-tree-id243 . -3) (undo-tree-id244 . -3) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) (undo-tree-id249 . -3) (undo-tree-id250 . -3) (undo-tree-id251 . -3) (undo-tree-id252 . -3) (undo-tree-id253 . -3) (undo-tree-id254 . -3) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -3) (undo-tree-id271 . -3) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) (undo-tree-id353 . -3) (undo-tree-id354 . -3) (undo-tree-id355 . -3) (undo-tree-id356 . -3) (undo-tree-id357 . -3) (undo-tree-id358 . -3) (undo-tree-id359 . -3) (undo-tree-id360 . -3) (undo-tree-id361 . -3) (undo-tree-id362 . -3) (undo-tree-id363 . -3) (undo-tree-id364 . -3) (undo-tree-id365 . -3) (undo-tree-id366 . -3) (undo-tree-id367 . -3) (undo-tree-id368 . -3) (undo-tree-id369 . -3) (undo-tree-id370 . -3) (undo-tree-id371 . -3) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -3) (undo-tree-id392 . -3) (undo-tree-id393 . -3) (undo-tree-id394 . -3) (undo-tree-id395 . -3) (undo-tree-id396 . -3) (undo-tree-id397 . -3) (undo-tree-id398 . -3) (undo-tree-id399 . -3) (undo-tree-id400 . -3) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -3) (undo-tree-id404 . -3) (undo-tree-id405 . -3) (undo-tree-id406 . -3) (undo-tree-id407 . -3) (undo-tree-id408 . -3) (undo-tree-id409 . -3) (undo-tree-id410 . -3) (undo-tree-id411 . -3) (undo-tree-id412 . -3) (undo-tree-id413 . -3) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -3) (undo-tree-id582 . -3) (undo-tree-id583 . -3) (undo-tree-id584 . -3) (undo-tree-id585 . -3) (undo-tree-id586 . -3) (undo-tree-id587 . -3) (undo-tree-id588 . -3) (undo-tree-id589 . -3) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) (undo-tree-id596 . -3) (undo-tree-id597 . -3) (undo-tree-id598 . -3) (undo-tree-id599 . -3) (undo-tree-id600 . -3) (undo-tree-id601 . -3) (undo-tree-id602 . -3) (undo-tree-id603 . -3) (undo-tree-id604 . -3) (undo-tree-id605 . -3) (undo-tree-id606 . -3) (undo-tree-id607 . -3) (undo-tree-id608 . -3) (undo-tree-id609 . -3) (undo-tree-id610 . -3) (undo-tree-id611 . -3) (undo-tree-id612 . -3) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -3) (undo-tree-id616 . -3) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -3) (undo-tree-id620 . -3) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (t 26077 41248 963184 657000)) (26077 41248 951517 566000) 0 nil])
([nil nil ((874 . 875) (872 . 874) (858 . 872) (857 . 858) (839 . 857) (#("tok" 0 3 (fontified nil)) . 839) (839 . 842) (#("token_class::token" 0 18 (fontified nil)) . -839) (839 . 857) (#("tok" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -839) (undo-tree-id1317 . -3) (undo-tree-id1318 . -3) 842 (839 . 842) (838 . 839) (831 . 838) (#("v" 0 1 (fontified nil)) . 831) (831 . 832) (#("virtual" 0 7 (fontified nil)) . -831) (831 . 838) (#("vi" 0 1 (fontified t) 1 2 (fontified t)) . -831) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) 833 (831 . 833) (828 . 831) (t 26077 44946 609760 127000) 827) nil (26077 45144 486345 995000) 0 nil])
nil
([nil current ((874 . 876) (t 26077 45144 496421 922000)) nil (26077 45494 777839 224000) 0 nil])
nil
