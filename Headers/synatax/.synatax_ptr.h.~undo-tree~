(undo-tree-save-format-version . 1)
"f85d44ecfc1629b01ae6dfed84f7bf3c84b26822"
[nil nil nil nil (26073 40522 235708 378000) 0 nil]
([nil nil ((65 . 65) (65 . 66) (65 . 65) (65 . 66) (68 . 73) (#("e" 0 1 (fontified nil)) . 68) (undo-tree-id26 . -1) (68 . 69) (#("endif" 0 5 (fontified nil)) . -68) (undo-tree-id27 . -5) (68 . 73) (#("en" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -68) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) 70 (68 . 70) (#("w" 0 1 (face font-lock-preprocessor-face fontified t)) . -68) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 69 (68 . 69) (67 . 68) (#("&" 0 1 (fontified t)) . -67) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 68 (67 . 68) (66 . 66) (66 . 67) (65 . 65) (65 . 66) (64 . 64) (64 . 65) (46 . 64) (45 . 46) (#("B" 0 1 (face font-lock-variable-name-face fontified t)) . -45) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 46 (44 . 46) (#("T" 0 1 (face font-lock-variable-name-face fontified t)) . -44) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 45 (41 . 45) (apply yas--snippet-revive 34 41 #s(yas--snippet nil nil #s(yas--exit 41 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 41 nil) 1 nil nil nil nil)) (34 . 41) (#("define $0" 0 9 (fontified nil)) . 34) (undo-tree-id42 . -9) (34 . 43) (#("d" 0 1 (fontified nil)) . 34) (undo-tree-id43 . -1) (34 . 35) (#("define macro" 0 12 (fontified nil)) . -34) (undo-tree-id44 . -12) (34 . 46) (#("def" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t) 2 3 (face font-lock-preprocessor-face fontified t)) . -34) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -3) 37 (34 . 37) (#("s" 0 1 (face font-lock-preprocessor-face fontified t)) . -34) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 35 (34 . 35) (33 . 34) (32 . 32) (32 . 33) (30 . 32) (#("P" 0 1 (fontified t)) . -30) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 31 (28 . 31) (#("S" 0 1 (fontified t)) . -28) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("S" 0 1 (fontified t)) . -29) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 30 (29 . 30) (#("W" 0 1 (fontified t)) . -29) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 30 (26 . 30) (#("K" 0 1 (fontified t)) . -26) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 27 (26 . 27) (#("K" 0 1 (fontified t)) . -26) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 27 (25 . 27) (15 . 25) (#("Y" 0 1 (fontified t)) . -15) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("T" 0 1 (fontified t)) . -16) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("T" 0 1 (fontified t)) . -17) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) 18 (15 . 18) (9 . 15) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 0 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id78 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id79 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id80 . -12) (2 . 14) (#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 3 (2 . 3) (1 . 2) (t 26073 40167 643428 803000)) nil (26073 40522 235701 123000) 0 nil])
([nil nil ((159 . 160) (154 . 158) (nil fontified nil 136 . 154) (136 . 154) (#("to" 0 2 (fontified nil)) . 136) (nil fontified nil 136 . 138) (136 . 138) (#("token_class::token" 0 18 (fontified nil)) . -136) (nil fontified nil 136 . 154) (136 . 154) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -136) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 138 (136 . 138) (135 . 136) (132 . 135) (123 . 132) (#("bnf_token" 0 9 (fontified nil)) . -123) (123 . 132) (121 . 123) (nil fontified nil 110 . 121) (nil face (rainbow-delimiters-depth-2-face) 110 . 121) (110 . 121) (#("to" 0 2 (fontified nil)) . 110) (nil fontified nil 110 . 112) (nil face (rainbow-delimiters-depth-2-face) 110 . 112) (110 . 112) (#("token_class" 0 11 (fontified nil)) . -110) (nil fontified nil 110 . 121) (nil face (rainbow-delimiters-depth-2-face) 110 . 121) (110 . 121) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -110) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 113 (110 . 113) (nil face font-lock-type-face 109 . 111) (nil fontified t 109 . 111) (109 . 111) (102 . 109) (#("p" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -102) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -103) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 104 (101 . 104) (95 . 101) (#("st" 0 2 (fontified nil)) . 95) (95 . 97) (#("static" 0 6 (fontified nil)) . -95) (95 . 101) (#("stati" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -95) (undo-tree-id8 . -5) (undo-tree-id9 . -5) 100 (95 . 100) (97 . 98) (93 . 95) (92 . 94) (91 . 93) (91 . 95) (90 . 90) (90 . 91) (84 . 90) (81 . 84) (#("s" 0 1 (face font-lock-type-face fontified t)) . -81) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -82) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -83) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 84 (81 . 84) (78 . 81) (#("x" 0 1 (face font-lock-type-face fontified t)) . -78) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 79 (72 . 79) (66 . 72) (#("st" 0 2 (fontified nil)) . 66) (66 . 68) (#("struct" 0 6 (fontified nil)) . -66) (66 . 72) (#("st" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -66) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) 68 (67 . 68) (#("y" 0 1 (fontified t)) . -67) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 68 (66 . 68)) nil (26073 40522 235644 279000) 0 nil])
([nil nil ((176 . 177) 159) nil (26073 40522 235575 320000) 0 nil])
([nil nil ((127 . 136) (#("bnf_token" 0 9 (fontified nil)) . -127) (127 . 136) (125 . 127) (114 . 125) (#("to" 0 2 (fontified nil)) . 114) (114 . 116) (#("token_class" 0 11 (fontified nil)) . -114) (114 . 125) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -114) (undo-tree-id109 . -2) (undo-tree-id110 . -2) 116 (114 . 116) (107 . 115) (#("c" 0 1 (fontified t)) . -107) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 108 (107 . 108) (106 . 107) (105 . 106) (102 . 105) (102 . 103) (t 26073 40522 250109 840000)) nil (26073 40633 836983 174000) 0 nil])
([nil nil ((98 . 100) (96 . 98) (#("w" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -96) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 97 (93 . 97) (apply yas--snippet-revive 84 94 #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 93 nil) 3 nil nil nil nil)) (84 . 94) (#("include \"$0\"" 0 12 (fontified nil)) . 84) (undo-tree-id86 . -12) (84 . 96) (#("i" 0 1 (fontified nil c-in-sws t)) . 84) (undo-tree-id87 . -1) (84 . 85) (#("include \"header\"" 0 16 (fontified nil)) . -84) (undo-tree-id88 . -16) (84 . 100) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -84) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) 86 (84 . 86) (83 . 84) (82 . 82) (82 . 83) (75 . 82) (#("v" 0 1 (fontified nil c-in-sws t)) . 75) (undo-tree-id92 . -1) (75 . 76) (#("vector>" 0 7 (fontified nil c-in-sws t)) . -75) (undo-tree-id93 . -7) (75 . 82) (#("ve" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -75) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) 77 (74 . 77) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified nil)) . -74) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (nil syntax-table nil 75 . 76) (nil syntax-table (1) 74 . 75) (#("\"" 0 1 (c-in-sws t face font-lock-string-face fontified t)) . 75) (undo-tree-id99 . -1) (apply yas--snippet-revive 66 76 #s(yas--snippet nil nil #s(yas--exit 75 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 75 nil) 2 nil nil nil nil)) (66 . 76) (#("include \"$0\"" 0 12 (fontified nil)) . 66) (undo-tree-id100 . -12) (66 . 78) (#("i" 0 1 (fontified nil c-in-sws t)) . 66) (undo-tree-id101 . -1) (66 . 67) (#("include \"header\"" 0 16 (fontified nil)) . -66) (undo-tree-id102 . -16) (66 . 82) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -66) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) 68 (67 . 68) (#("m" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -67) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) 68 (66 . 68) (65 . 66) (65 . 65) (65 . 66) (65 . 66)) nil (26073 40633 836972 265000) 0 nil])
([nil nil ((466 . 467) (455 . 465) (apply yas--snippet-revive 429 455 #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 3 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (449 . 454) (#("token" 0 5 (fontified nil)) . -449) (449 . 454) (447 . 449) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-3-face) 436 . 447) (436 . 447) (#("to" 0 2 (fontified nil)) . 436) (nil fontified nil 436 . 438) (nil face (rainbow-delimiters-depth-3-face) 436 . 438) (436 . 438) (#("token_class" 0 11 (fontified nil)) . -436) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-3-face) 436 . 447) (436 . 447) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -436) (undo-tree-id0 . -2) 438 (437 . 438) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 437) (436 . 437) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 3 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (429 . 448) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 429) (429 . 453) (#("v" 0 1 (fontified nil)) . 429) (429 . 430) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -429) (429 . 464) (#("v" 0 1 (fontified t)) . -429) (undo-tree-id1 . -1) 430 (429 . 430) (427 . 429) (nil fontified nil 424 . 427) (424 . 427) (#("st" 0 2 (fontified nil)) . 424) (nil fontified nil 424 . 426) (424 . 426) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -424) (undo-tree-id2 . -3) (undo-tree-id3 . -3) 427 (426 . 427) (#("a" 0 1 (fontified t)) . -426) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("d" 0 1 (fontified t)) . -427) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 428 (427 . 428) (424 . 427) (423 . 424) (413 . 423) (#("#" 0 1 (fontified t)) . -413) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 414 (413 . 414) (#("$" 0 1 (fontified t)) . -413) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 414 (412 . 414) (apply yas--snippet-revive 386 412 #s(yas--snippet nil (#s(yas--field 1 393 411 nil nil nil t nil)) nil 2 nil #s(yas--field 1 393 411 nil nil nil t nil) nil nil)) (406 . 411) (#("token" 0 5 (fontified nil)) . -406) (406 . 411) (404 . 406) (nil fontified nil 393 . 404) (nil face (rainbow-delimiters-depth-3-face) 393 . 404) (393 . 404) (#("to" 0 2 (fontified nil)) . 393) (nil fontified nil 393 . 395) (nil face (rainbow-delimiters-depth-3-face) 393 . 395) (393 . 395) (#("token_class" 0 11 (fontified nil)) . -393) (nil fontified nil 393 . 404) (nil face (rainbow-delimiters-depth-3-face) 393 . 404) (393 . 404) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -393) (undo-tree-id12 . -2) 395 (394 . 395) (#("i" 0 1 (fontified t)) . -394) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 395 (394 . 395) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 394) (393 . 394) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 393 411 nil nil nil t nil)) nil 2 nil #s(yas--field 1 393 411 nil nil nil t nil) nil nil)) (386 . 405) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 386) (386 . 410) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -386) (386 . 421) (#("c" 0 1 (fontified t)) . -386) (undo-tree-id15 . -1) 387 (386 . 387) (385 . 386) (384 . 385) (nil fontified nil 381 . 384) (381 . 384) (#("st" 0 2 (fontified nil)) . 381) (nil fontified nil 381 . 383) (381 . 383) (#("std" 0 3 (fontified nil)) . -381) (nil fontified nil 381 . 384) (381 . 384) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -381) (undo-tree-id16 . -2) 383 (381 . 383) (380 . 381) (370 . 380) (369 . 370) (apply yas--snippet-revive 339 369 #s(yas--snippet nil (#s(yas--field 1 346 368 nil nil nil t nil)) nil 1 nil #s(yas--field 1 346 368 nil nil nil t nil) nil nil)) (359 . 368) (#("bnf_token" 0 9 (fontified nil)) . -359) (359 . 368) (357 . 359) (nil fontified nil 346 . 357) (nil face (rainbow-delimiters-depth-3-face) 346 . 357) (346 . 357) (#("to" 0 2 (fontified nil)) . 346) (nil fontified nil 346 . 348) (nil face (rainbow-delimiters-depth-3-face) 346 . 348) (346 . 348) (#("token_class" 0 11 (fontified nil)) . -346) (nil fontified nil 346 . 357) (nil face (rainbow-delimiters-depth-3-face) 346 . 357) (346 . 357) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -346) (undo-tree-id17 . -3) (undo-tree-id18 . -3) 349 (347 . 349) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 347) (346 . 347) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 346 368 nil nil nil t nil)) nil 1 nil #s(yas--field 1 346 368 nil nil nil t nil) nil nil)) (339 . 358) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 339) (339 . 363) (#("v" 0 1 (fontified nil)) . 339) (339 . 340) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -339) (339 . 374) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -339) (undo-tree-id19 . -2) (undo-tree-id20 . -2) 341 (339 . 341) (337 . 339) (336 . 337) (#("x" 0 1 (fontified t)) . -336) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 337 (334 . 337) (143 . 144) (#("g" 0 1 (fontified t c-in-sws t face font-lock-string-face)) . -143) (undo-tree-id23 . -1) 144 (135 . 144) (133 . 135) (130 . 133) (apply yas--snippet-revive 121 131 #s(yas--snippet nil nil #s(yas--exit 130 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 130 nil) 0 nil nil nil nil)) (121 . 131) (#("include \"$0\"" 0 12 (fontified nil)) . 121) (undo-tree-id24 . -12) (121 . 133) (#("i" 0 1 (c-in-sws t fontified nil)) . 121) (undo-tree-id25 . -1) (121 . 122) (#("include \"header\"" 0 16 (fontified nil)) . -121) (undo-tree-id26 . -16) (121 . 137) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -121) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 122 (121 . 122) (120 . 121) (#("$" 0 1 (fontified t c-is-sws t)) . -120) (undo-tree-id29 . -1) 121 (120 . 121) (119 . 119) (119 . 120) (303 . 307) (303 . 305) (297 . 303) (#("J" 0 1 (fontified t face font-lock-variable-name-face)) . -297) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 298 (294 . 298) (282 . 294) (#("synatax_tree" 0 12 (fontified nil)) . -282) (282 . 294) (280 . 282) (262 . 280) (#("sy" 0 2 (fontified nil)) . 262) (262 . 264) (#("synatax_tree_class" 0 18 (fontified nil)) . -262) (262 . 280) (#("sy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -262) (undo-tree-id32 . -2) (undo-tree-id33 . -2) 264 (263 . 264) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -263) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -264) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 265 (262 . 265) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -262) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -263) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -264) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#(":" 0 1 (fontified t)) . -265) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#(":" 0 1 (fontified t)) . -266) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 267 (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -267) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("t" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -268) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -269) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("m" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -270) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("i" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -271) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("c" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -272) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("_" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -273) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("b" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -274) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -275) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("o" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -276) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (#("l" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -277) (undo-tree-id82 . -1) (undo-tree-id83 . -1) 278 (65 . 83) (249 . 249) (249 . 260) (#("atomic_bool" 0 11 (fontified nil)) . -249) (249 . 260) (247 . 249) (244 . 247) (#("st" 0 2 (fontified nil)) . 244) (244 . 246) (#("std" 0 3 (fontified nil)) . -244) (244 . 247) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -244) (undo-tree-id84 . -2) 246 (243 . 246) (237 . 243) (#("st" 0 2 (fontified nil)) . 237) (237 . 239) (#("static" 0 6 (fontified nil)) . -237) (237 . 243) (#("sta" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -237) (undo-tree-id85 . -3) 240 (237 . 240) (234 . 237) (t 26073 40633 846780 992000) 131) nil (26073 42565 587377 266000) 0 nil])
([nil current ((455 . 456) (411 . 412) (t 26073 42565 593525 190000)) nil (26073 46704 215646 340000) 0 nil])
nil
