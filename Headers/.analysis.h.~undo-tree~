(undo-tree-save-format-version . 1)
"705382e60e6fbf6f6318ebb0edc074ea54d04800"
[nil nil nil nil (26076 17723 73818 68000) 0 nil]
([nil nil ((69 . 77) (nil syntax-table nil 69 . 70) (nil syntax-table (1) 68 . 69) (#("t\"" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face font-lock-string-face fontified nil)) . 69) (undo-tree-id0 . -2) (undo-tree-id1 . 1) (undo-tree-id2 . -2) (69 . 70) (#("token.h\"" 0 8 (fontified nil)) . -69) (nil syntax-table nil 78 . 79) (nil syntax-table (1) 77 . 78) (69 . 77) (#("tok" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -69) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) 72 (69 . 72) (apply yas--snippet-revive 60 70 #s(yas--snippet nil nil #s(yas--exit 69 nil) 11 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 69 nil) 11 nil nil nil nil)) (60 . 70) (#("include \"$0\"" 0 12 (fontified nil)) . 60) (undo-tree-id6 . -12) (60 . 72) (#("i" 0 1 (fontified nil c-in-sws t)) . 60) (undo-tree-id7 . -1) (60 . 61) (#("include \"header\"" 0 16 (fontified nil)) . -60) (undo-tree-id8 . -16) (60 . 76) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -60) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) 62 (60 . 62) (59 . 60) (59 . 59) (59 . 60) (59 . 59) (59 . 60) (120 . 126) (#("st" 0 2 (fontified nil)) . 120) (120 . 122) (#("static" 0 6 (fontified nil)) . -120) (120 . 126) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -120) (undo-tree-id12 . -2) (undo-tree-id13 . -2) 122 (121 . 122) (#("r" 0 1 (fontified t)) . -121) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("t" 0 1 (fontified t)) . -122) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 123 (120 . 123) (120 . 121) (138 . 139) (136 . 138) (127 . 136) (125 . 127) (124 . 125) (120 . 124) (#("v" 0 1 (fontified nil)) . 120) (120 . 121) (#("void" 0 4 (fontified nil)) . -120) (120 . 124) (#("voi" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -120) (undo-tree-id18 . -3) (undo-tree-id19 . -3) 123 (120 . 123) (#("a" 0 1 (fontified t)) . -120) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("n" 0 1 (fontified t)) . -121) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("a" 0 1 (fontified t)) . -122) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("l" 0 1 (fontified t)) . -123) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("y" 0 1 (fontified t)) . -124) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("s" 0 1 (fontified t)) . -125) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("i" 0 1 (fontified t)) . -126) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("s" 0 1 (fontified t)) . -127) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 128 (120 . 128) (#("a" 0 1 (fontified nil)) . 120) (120 . 121) (#("analysis" 0 8 (fontified nil)) . -120) (120 . 128) (#("an" 0 1 (fontified t) 1 2 (fontified t)) . -120) (undo-tree-id36 . -2) (undo-tree-id37 . -2) 122 (120 . 122) (115 . 120) (115 . 120) (106 . 108) (#("    " 0 4 (fontified t)) . 106) 117 (apply yas--snippet-revive 110 117 #s(yas--snippet nil nil nil 10 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 10 nil nil nil nil)) (110 . 117) (#("public:" 0 7 (fontified nil)) . 110) (110 . 117) (#("pu" 0 2 (fontified nil)) . 110) (110 . 112) (#("public:" 0 7 (fontified nil)) . -110) (110 . 117) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -110) (undo-tree-id38 . -2) (undo-tree-id39 . -2) 112 (110 . 112) (105 . 110) (114 . 115) (#("g" 0 1 (fontified t)) . -113) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 114 (113 . 114) (111 . 113) (106 . 110) (105 . 107) (102 . 104) (#("    " 0 4 (fontified nil)) . 102) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (106 . 108) (101 . 106) (#("_" 0 1 (fontified t)) . -101) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("m" 0 1 (fontified t)) . -102) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("o" 0 1 (fontified t)) . -103) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . -104) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 105 (93 . 105) (#("a" 0 1 (fontified nil)) . 93) (93 . 94) (#("analysis_mod" 0 12 (fontified nil)) . -93) (93 . 105) (#("analysis" 0 1 (face font-lock-variable-name-face fontified t) 1 2 (face font-lock-variable-name-face fontified t) 2 3 (face font-lock-variable-name-face fontified t) 3 4 (face font-lock-variable-name-face fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 6 (face font-lock-variable-name-face fontified t) 6 7 (face font-lock-variable-name-face fontified t) 7 8 (face font-lock-variable-name-face fontified t)) . -93) (undo-tree-id52 . -8) (undo-tree-id53 . -8) 101 (92 . 101) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 92) (undo-tree-id54 . -2) (undo-tree-id55 . -2) 94 (93 . 94) (91 . 93) (#("e" 0 1 (fontified t)) . -91) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("e" 0 1 (fontified t)) . -92) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 93 (87 . 93) (84 . 87) (84 . 87) (#("    " 0 4 (fontified t)) . 88) (#("    " 0 4 (fontified t)) . 83) (83 . 87) (82 . 82) (82 . 83) (#(" " 0 1 (fontified t)) . 82) (undo-tree-id60 . -1) 83 (apply yas--snippet-revive 60 93 #s(yas--snippet nil (#s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil))) #s(yas--exit 87 nil) 9 nil #s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil)) nil nil)) (80 . 82) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -80) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 81 (76 . 81) (71 . 76) (#("identifier" 0 10 (face font-lock-variable-name-face fontified nil)) . 71) (70 . 71) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil))) #s(yas--exit 87 nil) 9 nil #s(yas--field 1 70 82 nil nil nil t #s(yas--exit 87 nil)) nil nil)) (60 . 91) (#("namespace ${1:identifier} {
  $0
    }" 0 38 (fontified nil)) . 60) (93 . 97) (88 . 90) (60 . 92) (#("na" 0 2 (fontified nil)) . 60) (60 . 62) (#("namespace identifier {declarations}" 0 35 (fontified nil)) . -60) (60 . 95) (#("na" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -60) (undo-tree-id63 . -2) (undo-tree-id64 . -2) 62 (60 . 62) (59 . 59) (59 . 60) (62 . 67) (#("e" 0 1 (fontified nil)) . 62) (undo-tree-id65 . -1) (62 . 63) (#("endif" 0 5 (fontified nil)) . -62) (undo-tree-id66 . -5) (62 . 67) (#("en" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -62) (undo-tree-id67 . -2) (undo-tree-id68 . -2) (undo-tree-id69 . -2) 64 (62 . 64) (61 . 62) (60 . 60) (60 . 61) (59 . 59) (59 . 60) (58 . 58) (58 . 59) (54 . 58) (53 . 54) (#("Y" 0 1 (face font-lock-variable-name-face fontified t)) . -53) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("U" 0 1 (face font-lock-variable-name-face fontified t)) . -54) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 55 (53 . 55) (#("I" 0 1 (face font-lock-variable-name-face fontified t)) . -53) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 54 (51 . 54) (#("X" 0 1 (face font-lock-variable-name-face fontified t)) . -51) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 52 (38 . 52) (apply yas--snippet-revive 31 38 #s(yas--snippet nil nil #s(yas--exit 38 nil) 8 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 38 nil) 8 nil nil nil nil)) (31 . 38) (#("define $0" 0 9 (fontified nil)) . 31) (undo-tree-id82 . -9) (31 . 40) (#("d" 0 1 (fontified nil)) . 31) (undo-tree-id83 . -1) (31 . 32) (#("define macro" 0 12 (fontified nil)) . -31) (undo-tree-id84 . -12) (31 . 43) (#("de" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -31) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) 33 (31 . 33) (30 . 31) (29 . 29) (29 . 30) (25 . 29) (#("I" 0 1 (fontified t)) . -25) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) 26 (22 . 26) (#("X" 0 1 (fontified t)) . -22) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 23 (19 . 23) (9 . 19) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 7 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id94 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id95 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id96 . -12) (2 . 14) (#("i" 0 1 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 3 (2 . 3) (1 . 2) (t 26076 16663 143314 671000)) nil (26076 17723 73798 676000) 0 nil])
([nil nil ((197 . 198) 76) nil (26076 17723 73191 982000) 0 nil])
([nil nil ((203 . 206) (194 . 203) (#("bnf_token" 0 9 (fontified nil)) . -194) (194 . 203) (192 . 194) (nil fontified nil 181 . 192) (nil face (rainbow-delimiters-depth-3-face) 181 . 192) (181 . 192) (#("to" 0 2 (fontified nil)) . 181) (nil fontified nil 181 . 183) (nil face (rainbow-delimiters-depth-3-face) 181 . 183) (181 . 183) (#("token_class" 0 11 (fontified nil)) . -181) (nil fontified nil 181 . 192) (nil face (rainbow-delimiters-depth-3-face) 181 . 192) (181 . 192) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -181) (undo-tree-id100 . -2) (undo-tree-id101 . -2) 183 (181 . 183) (#("s" 0 1 (fontified t)) . -181) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("t" 0 1 (fontified t)) . -182) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("d" 0 1 (fontified t)) . -183) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#(":" 0 1 (fontified t)) . -184) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#(":" 0 1 (fontified t)) . -185) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("t" 0 1 (fontified t)) . -186) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("r" 0 1 (fontified t)) . -187) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("y" 0 1 (fontified t)) . -188) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("_" 0 1 (fontified t)) . -189) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("t" 0 1 (fontified t)) . -190) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("o" 0 1 (fontified t)) . -191) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("_" 0 1 (fontified t)) . -192) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("l" 0 1 (fontified t)) . -193) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("o" 0 1 (fontified t)) . -194) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("c" 0 1 (fontified t)) . -195) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("k" 0 1 (fontified t)) . -196) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("_" 0 1 (fontified t)) . -197) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (#("t" 0 1 (fontified t)) . -198) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 199 (78 . 95) (nil fontified nil 164 . 182) (nil face (rainbow-delimiters-depth-3-face) 164 . 182) (164 . 182) (#("to" 0 2 (fontified nil)) . 164) (nil fontified nil 164 . 166) (nil face (rainbow-delimiters-depth-3-face) 164 . 166) (164 . 166) (#("std::try_to_lock_t" 0 18 (fontified nil)) . -164) (nil fontified nil 164 . 182) (nil face (rainbow-delimiters-depth-3-face) 164 . 182) (164 . 182) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -164) (undo-tree-id138 . -3) (undo-tree-id139 . -3) 167 (164 . 167) (t 26076 17723 86626 621000)) nil (26076 17815 64623 973000) 0 nil])
([nil nil ((138 . 143) (t 26076 17815 76624 780000)) nil (26076 17879 336817 493000) 0 nil])
([nil nil ((apply -6 78 102 undo--wrap-and-run-primitive-undo 78 102 ((nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 97 . 100) (nil c-in-sws t 97 . 100) (nil fontified t 97 . 100) (97 . 100) (78 . 81) 95)) (t 26076 17879 343290 149000)) nil (26076 17938 366786 613000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -220) (undo-tree-id509 . -4) (undo-tree-id510 . -4) 224 (t 26076 17938 386622 285000)) nil (26076 22598 282605 349000) 0 nil])
([nil nil ((290 . 292) (#("cz" 0 2 (fontified nil)) . 290) (290 . 292) (#("cz" 0 1 (fontified t) 1 2 (fontified t)) . -290) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) 292 (290 . 292) (289 . 291) (248 . 249) (245 . 248) (106 . 113) (#("st>" 0 2 (fontified nil c-in-sws t) 2 3 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60) fontified nil)) . 106) (undo-tree-id421 . -3) (undo-tree-id422 . 1) (nil fontified nil 106 . 108) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 106 . 108) (nil c-in-sws t 106 . 108) (106 . 108) (#("string>" 0 7 (fontified nil c-in-sws t)) . -106) (nil fontified nil 106 . 113) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 106 . 113) (nil c-in-sws t 106 . 113) (106 . 113) (#("string" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t) 3 4 (face font-lock-string-face c-in-sws t fontified t) 4 5 (face font-lock-string-face c-in-sws t fontified t) 5 6 (face font-lock-string-face c-in-sws t fontified t)) . -106) (undo-tree-id423 . -6) (undo-tree-id424 . -6) 112 (106 . 112) (apply yas--snippet-revive 97 107 #s(yas--snippet nil nil #s(yas--exit 106 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 106 nil) 18 nil nil nil nil)) (97 . 107) (#("include <$0>" 0 12 (fontified nil)) . 97) (undo-tree-id425 . -12) (97 . 109) (#("i" 0 1 (fontified nil c-in-sws t)) . 97) (undo-tree-id426 . -1) (97 . 98) (#("include <header>" 0 16 (fontified nil)) . -97) (undo-tree-id427 . -16) (97 . 113) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -97) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) 99 (97 . 99) (96 . 97) (95 . 95) (95 . 96) (220 . 227) (213 . 220) (212 . 213) (207 . 212) (204 . 206) (203 . 204) (199 . 203) (198 . 200) (194 . 198) (#("e" 0 1 (fontified nil)) . 194) (194 . 195) (#("enum" 0 4 (fontified nil)) . -194) (194 . 198) (#("e" 0 1 (fontified t)) . -194) (undo-tree-id431 . -1) (undo-tree-id432 . -1) 195 (194 . 195) (200 . 201) (#("g" 0 1 (fontified t)) . -199) (undo-tree-id433 . -1) (undo-tree-id434 . -1) 200 (199 . 200) (195 . 199) (188 . 194) (187 . 189) (182 . 186) (#("      " 0 6 (fontified nil)) . 182) (undo-tree-id435 . -6) (undo-tree-id436 . -6) (188 . 190) (181 . 188) (#("_" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -181) (undo-tree-id437 . -1) (undo-tree-id438 . -1) 182 (181 . 182) (#("s" 0 1 (face font-lock-type-face fontified t)) . -181) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (#("_" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -182) (undo-tree-id441 . -1) (undo-tree-id442 . -1) 183 (179 . 183) (178 . 179) (172 . 178) (#("st" 0 2 (fontified nil)) . 172) (172 . 174) (#("struct" 0 6 (fontified nil)) . -172) (172 . 178) (#("stru" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -172) (undo-tree-id443 . -4) (undo-tree-id444 . -4) 176 (174 . 176) (#("a" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -174) (undo-tree-id445 . -1) (undo-tree-id446 . -1) 175 (173 . 175) (#("r" 0 1 (fontified t)) . -173) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -174) (undo-tree-id449 . -1) (undo-tree-id450 . -1) 175 (172 . 175) (#("s" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -172) (undo-tree-id451 . -1) (undo-tree-id452 . -1) 173 (172 . 173) (211 . 212) (167 . 172) (168 . 170) (#("    " 0 4 (fontified t)) . 168) 179 (apply yas--snippet-revive 172 179 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (172 . 179) (#("public:" 0 7 (fontified nil)) . 172) (172 . 179) (#("p" 0 1 (fontified nil)) . 172) (172 . 173) (#("public:" 0 7 (fontified nil)) . -172) (172 . 179) (#("pu" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -172) (undo-tree-id453 . -2) (undo-tree-id454 . -2) 174 (172 . 174) (167 . 172) (#(">" 0 1 (fontified t)) . -190) (undo-tree-id455 . -1) 191 (apply yas--snippet-revive 184 191 #s(yas--snippet nil (#s(yas--field 1 190 190 nil nil nil t nil)) nil 16 nil #s(yas--field 1 190 190 nil nil nil t nil) nil nil)) (#("<" 0 1 (fontified t)) . -190) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . 1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) 191 (#("t" 0 1 (fontified t)) . -191) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("o" 0 1 (fontified t)) . -192) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (#("k" 0 1 (fontified t)) . -193) (undo-tree-id465 . -1) (undo-tree-id466 . -1) 194 (192 . 194) (#("typename Tp" 0 11 (fontified nil)) . 192) (191 . 192) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 190 190 nil nil nil t nil)) nil 16 nil #s(yas--field 1 190 190 nil nil nil t nil) nil nil)) (184 . 203) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 184) (184 . 208) (#("v" 0 1 (fontified nil)) . 184) (184 . 185) (#("vector<typename Tp, typename Alloc>" 0 35 (fontified nil)) . -184) (184 . 219) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -184) (undo-tree-id467 . -2) (undo-tree-id468 . -2) 186 (185 . 186) (#("w" 0 1 (fontified t)) . -185) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (#("e" 0 1 (fontified t)) . -186) (undo-tree-id471 . -1) (undo-tree-id472 . -1) 187 (184 . 187) (182 . 184) (179 . 182) (#("st" 0 2 (fontified nil)) . 179) (179 . 181) (#("std" 0 3 (fontified nil)) . -179) (179 . 182) (#("st" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -179) (undo-tree-id473 . -2) (undo-tree-id474 . -2) 181 (178 . 181) (#("a" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -184) (undo-tree-id475 . -1) (undo-tree-id476 . -1) 185 (179 . 185) (#("s" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -179) (undo-tree-id477 . -1) (undo-tree-id478 . -1) 180 (172 . 180) (173 . 175) (174 . 175) (168 . 172) (167 . 169) (164 . 166) (164 . 166) (164 . 169) (#("    " 0 4 (fontified t)) . 164) (undo-tree-id479 . -4) (undo-tree-id480 . -4) 168 (163 . 168) (160 . 163) (#("c" 0 1 (fontified t)) . -160) (undo-tree-id481 . -1) (undo-tree-id482 . -1) 161 (160 . 161) (154 . 160) (#("s" 0 1 (fontified t)) . -154) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("t" 0 1 (fontified t)) . -155) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("a" 0 1 (fontified t)) . -156) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("c" 0 1 (fontified t)) . -157) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("j" 0 1 (fontified t)) . -158) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("k" 0 1 (fontified t)) . -159) (undo-tree-id493 . -1) (undo-tree-id494 . -1) 160 (154 . 160) (88 . 95) (#("v" 0 1 (fontified nil c-in-sws t)) . 88) (undo-tree-id495 . -1) (88 . 89) (#("vector>" 0 7 (fontified nil c-in-sws t)) . -88) (undo-tree-id496 . -7) (88 . 95) (#("vec" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -88) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) 91 (87 . 91) (#("\"" 0 1 (face font-lock-string-face c-in-sws t fontified nil)) . -87) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (nil syntax-table nil 88 . 89) (nil syntax-table (1) 87 . 88) (#("\"" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 88) (undo-tree-id502 . -1) (apply yas--snippet-revive 79 89 #s(yas--snippet nil nil #s(yas--exit 88 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 88 nil) 15 nil nil nil nil)) (79 . 89) (#("include \"$0\"" 0 12 (fontified nil)) . 79) (undo-tree-id503 . -12) (79 . 91) (#("i" 0 1 (fontified nil c-in-sws t)) . 79) (undo-tree-id504 . -1) (79 . 80) (#("include \"header\"" 0 16 (fontified nil)) . -79) (undo-tree-id505 . -16) (79 . 95) (#("i" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -79) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) 80 (79 . 80) (78 . 79) (77 . 77) (77 . 78) (130 . 136) (128 . 130) (128 . 129)) nil (26076 22618 471119 430000) 0 nil])
([nil nil (247) nil (26076 22631 834655 48000) 0 nil] [nil nil ((232 . 238) (232 . 233) 248 (t 26076 22598 369861 869000)) ((#("
" 0 1 (fontified nil)) . 232) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (#("      " 0 6 (fontified t)) . 232) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6)) (26076 22618 468826 383000) 0 nil])
([nil nil ((232 . 238) (#("    " 0 4 (fontified nil)) . 232) (240 . 241) (232 . 236) (#("      " 0 6 (fontified nil)) . 232) (undo-tree-id516 . -6) (241 . 242) (239 . 241) (#("y" 0 1 (face font-lock-type-face fontified t)) . -239) (undo-tree-id517 . -1) (undo-tree-id518 . -1) 240 (238 . 240) (231 . 238) (#("
       " 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t)) . 231) (undo-tree-id519 . -8) (undo-tree-id520 . -8) 239 (238 . 239) (t 26076 22598 369861 869000)) nil (26076 22631 834651 438000) 0 nil])
nil
([nil nil ((378 . 379) (377 . 378) (372 . 377) (363 . 372) (#("cz" 0 2 (fontified nil)) . 363) (363 . 365) (#("czs_stack" 0 9 (fontified nil)) . -363) (363 . 372) (#("czs" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -363) (undo-tree-id521 . -3) (undo-tree-id522 . -3) 366 (356 . 366) (351 . 356) (t 26076 22631 843194 531000) 350) nil (26076 22783 558525 607000) 0 nil])
([nil nil ((284 . 285) (281 . 284) (280 . 281) (#("&" 0 1 (fontified t)) . -280) (undo-tree-id523 . -1) (undo-tree-id524 . -1) 281 (279 . 281) (261 . 279) (#("to" 0 2 (fontified nil)) . 261) (261 . 263) (#("token_class::token" 0 18 (fontified nil)) . -261) (261 . 279) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -261) (undo-tree-id525 . -2) (undo-tree-id526 . -2) 263 (261 . 263) (254 . 261) (t 26076 22783 606524 819000) 253) nil (26076 23160 116755 870000) 0 nil])
([nil nil ((apply -6 383 473 undo--wrap-and-run-primitive-undo 383 473 ((413 . 416) (387 . 390) 411)) (t 26076 23160 123183 930000)) nil (26076 23233 733125 146000) 0 nil])
([nil nil ((319 . 320) (#("m" 0 1 (face font-lock-variable-name-face fontified t)) . -319) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) 320 (320 . 321) (317 . 320) (307 . 317) (302 . 307) (t 26076 23233 779849 125000) 297) nil (26076 23306 885801 236000) 0 nil])
([nil nil ((#("      enum{Atom,OP} type;
" 0 6 (fontified t) 6 9 (face font-lock-keyword-face fontified t) 9 10 (face font-lock-keyword-face fontified t) 10 11 (face (rainbow-delimiters-depth-4-face) c-type c-not-decl fontified t) 11 12 (face font-lock-variable-name-face fontified t) 12 13 (face font-lock-variable-name-face fontified t) 13 14 (face font-lock-variable-name-face fontified t) 14 15 (face font-lock-variable-name-face fontified t) 15 16 (c-type c-decl-id-start fontified t) 16 17 (face font-lock-variable-name-face fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (face (rainbow-delimiters-depth-4-face) c-type c-decl-id-start fontified t) 19 20 (fontified t) 20 21 (face font-lock-variable-name-face fontified t) 21 22 (face font-lock-variable-name-face fontified t) 22 23 (face font-lock-variable-name-face fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 25 (fontified t) 25 26 (fontified t)) . 206) (undo-tree-id714 . -16) (undo-tree-id715 . -16) (undo-tree-id716 . -26) (undo-tree-id717 . -26) (undo-tree-id718 . -11) (undo-tree-id719 . -16) (undo-tree-id720 . -20) (undo-tree-id721 . -11) (undo-tree-id722 . -16) (undo-tree-id723 . -20) (undo-tree-id724 . -16) (undo-tree-id725 . -18) (undo-tree-id726 . -16) (undo-tree-id727 . -16) (undo-tree-id728 . -16) (undo-tree-id729 . -16) (undo-tree-id730 . -16) (undo-tree-id731 . -16) (undo-tree-id732 . -16) (undo-tree-id733 . -16) (undo-tree-id734 . -16) (undo-tree-id735 . -16) (undo-tree-id736 . -16) (undo-tree-id737 . -16) (undo-tree-id738 . -16) (undo-tree-id739 . -16) (undo-tree-id740 . -16) (undo-tree-id741 . -16) (undo-tree-id742 . -16) (undo-tree-id743 . -16) (undo-tree-id744 . -16) (undo-tree-id745 . -16) (undo-tree-id746 . -16) (undo-tree-id747 . -16) (undo-tree-id748 . -16) (undo-tree-id749 . -16) (undo-tree-id750 . -16) (undo-tree-id751 . -16) (undo-tree-id752 . -16) (undo-tree-id753 . -16) (undo-tree-id754 . -16) (undo-tree-id755 . -16) (undo-tree-id756 . -16) (undo-tree-id757 . -16) (undo-tree-id758 . -16) (undo-tree-id759 . -16) (undo-tree-id760 . -16) (undo-tree-id761 . -16) (undo-tree-id762 . -16) (undo-tree-id763 . -16) (undo-tree-id764 . -16) (undo-tree-id765 . -16) (undo-tree-id766 . -16) (undo-tree-id767 . -16) (undo-tree-id768 . -16) (undo-tree-id769 . -16) (undo-tree-id770 . -16) (undo-tree-id771 . -16) (undo-tree-id772 . -16) (undo-tree-id773 . -16) (undo-tree-id774 . -16) (undo-tree-id775 . -16) (undo-tree-id776 . -16) (undo-tree-id777 . -26) (undo-tree-id778 . -25) 222 (t 26076 23306 893180 987000)) nil (26076 23443 469609 735000) 0 nil])
([nil nil ((nil rear-nonsticky nil 282 . 283) (#("
" 0 1 (fontified nil)) . -302) (276 . 303) 275) nil (26076 23443 468739 88000) 0 nil])
([nil nil ((223 . 224) (212 . 223) (205 . 212) (307 . 309) (288 . 289) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 288) (undo-tree-id705 . -2) (undo-tree-id706 . -2) 290 (#(";" 0 1 (fontified t)) . -290) (undo-tree-id707 . -1) (undo-tree-id708 . -1) 291 (#(" " 0 1 (fontified t)) . 291) (undo-tree-id709 . -1) 292 (apply yas--snippet-revive 281 291 #s(yas--snippet nil (#s(yas--field 1 289 289 nil nil nil t #s(yas--exit 290 nil))) #s(yas--exit 290 nil) 19 nil #s(yas--field 1 289 289 nil nil nil t #s(yas--exit 290 nil)) nil nil)) (#("type" 0 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-type-start fontified t)) . 289) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 289 289 nil nil nil t #s(yas--exit 290 nil))) #s(yas--exit 290 nil) 19 nil #s(yas--field 1 289 289 nil nil nil t #s(yas--exit 290 nil)) nil nil)) (281 . 295) (#("typedef ${1:type} $0;" 0 21 (fontified nil)) . 281) (281 . 302) (#("ty" 0 2 (fontified nil)) . 281) (281 . 283) (#("typedef type name;" 0 18 (fontified nil)) . -281) (281 . 299) (#("typ" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -281) (undo-tree-id710 . -3) (undo-tree-id711 . -3) 284 (281 . 284) (281 . 282) (277 . 281) (#("      " 0 5 (fontified t) 5 6 (rear-nonsticky t fontified t)) . -277) (undo-tree-id712 . -6) (undo-tree-id713 . -6) 283) nil (26076 23443 468733 436000) 0 nil])
([nil nil ((#("    typedef enum{Atom,OP} type_e;
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (face font-lock-keyword-face fontified t) 16 17 (face (rainbow-delimiters-depth-3-face) c-type c-not-decl fontified t) 17 18 (face font-lock-variable-name-face fontified t) 18 19 (face font-lock-variable-name-face fontified t) 19 20 (face font-lock-variable-name-face fontified t) 20 21 (face font-lock-variable-name-face fontified t) 21 22 (c-type c-decl-id-start fontified t) 22 23 (face font-lock-variable-name-face fontified t) 23 24 (face font-lock-variable-name-face fontified t) 24 25 (face (rainbow-delimiters-depth-3-face) c-type c-decl-type-start fontified t) 25 26 (fontified t) 26 27 (face font-lock-type-face fontified t) 27 28 (face font-lock-type-face fontified t) 28 29 (face font-lock-type-face fontified t) 29 30 (face font-lock-type-face fontified t) 30 31 (face font-lock-type-face fontified t) 31 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 34 (fontified t)) . 296) (undo-tree-id779 . -17) (undo-tree-id780 . -17) (undo-tree-id781 . -34) (undo-tree-id782 . -34) (undo-tree-id783 . -33) (undo-tree-id784 . -17) (undo-tree-id785 . -22) (undo-tree-id786 . -26) (undo-tree-id787 . -17) (undo-tree-id788 . -22) (undo-tree-id789 . -26) (undo-tree-id790 . -17) (undo-tree-id791 . -17) (undo-tree-id792 . -17) (undo-tree-id793 . -17) (undo-tree-id794 . -17) (undo-tree-id795 . -17) (undo-tree-id796 . -17) (undo-tree-id797 . -17) (undo-tree-id798 . -17) (undo-tree-id799 . -17) (undo-tree-id800 . -17) (undo-tree-id801 . -17) (undo-tree-id802 . -17) (undo-tree-id803 . -17) (undo-tree-id804 . -17) (undo-tree-id805 . -17) (undo-tree-id806 . -17) (undo-tree-id807 . -17) (undo-tree-id808 . -17) (undo-tree-id809 . -17) (undo-tree-id810 . -17) (undo-tree-id811 . -17) (undo-tree-id812 . -17) (undo-tree-id813 . -17) (undo-tree-id814 . -17) (undo-tree-id815 . -17) (undo-tree-id816 . -17) (undo-tree-id817 . -17) (undo-tree-id818 . -17) (undo-tree-id819 . -17) (undo-tree-id820 . -17) (undo-tree-id821 . -17) (undo-tree-id822 . -17) (undo-tree-id823 . -17) (undo-tree-id824 . -17) (undo-tree-id825 . -17) (undo-tree-id826 . -17) (undo-tree-id827 . -17) (undo-tree-id828 . -17) (undo-tree-id829 . -17) (undo-tree-id830 . -17) (undo-tree-id831 . -17) (undo-tree-id832 . -17) (undo-tree-id833 . -17) (undo-tree-id834 . -17) (undo-tree-id835 . -17) (undo-tree-id836 . -17) (undo-tree-id837 . -17) (undo-tree-id838 . -17) (undo-tree-id839 . -17) (undo-tree-id840 . -17) (undo-tree-id841 . -17) (undo-tree-id842 . -17) (undo-tree-id843 . -17) (undo-tree-id844 . -17) (undo-tree-id845 . -17) (undo-tree-id846 . -17) (undo-tree-id847 . -17) (undo-tree-id848 . -17) (undo-tree-id849 . -17) (undo-tree-id850 . -17) (undo-tree-id851 . -17) (undo-tree-id852 . -17) (undo-tree-id853 . -17) (undo-tree-id854 . -17) (undo-tree-id855 . -17) (undo-tree-id856 . -17) (undo-tree-id857 . -17) (undo-tree-id858 . -17) (undo-tree-id859 . -17) (undo-tree-id860 . -17) (undo-tree-id861 . -17) (undo-tree-id862 . -17) (undo-tree-id863 . -17) (undo-tree-id864 . -17) (undo-tree-id865 . -21) (undo-tree-id866 . -17) (undo-tree-id867 . -17) (undo-tree-id868 . -17) (undo-tree-id869 . -17) (undo-tree-id870 . -17) (undo-tree-id871 . -17) (undo-tree-id872 . -17) (undo-tree-id873 . -17) (undo-tree-id874 . -17) (undo-tree-id875 . -17) (undo-tree-id876 . -17) (undo-tree-id877 . -17) (undo-tree-id878 . -17) (undo-tree-id879 . -17) (undo-tree-id880 . -17) (undo-tree-id881 . -17) (undo-tree-id882 . -17) (undo-tree-id883 . -17) (undo-tree-id884 . -17) (undo-tree-id885 . -17) (undo-tree-id886 . -17) (undo-tree-id887 . -17) (undo-tree-id888 . -17) (undo-tree-id889 . -17) (undo-tree-id890 . -17) (undo-tree-id891 . -17) (undo-tree-id892 . -17) (undo-tree-id893 . -17) (undo-tree-id894 . -17) (undo-tree-id895 . -17) (undo-tree-id896 . -17) (undo-tree-id897 . -17) (undo-tree-id898 . -17) (undo-tree-id899 . -17) (undo-tree-id900 . -17) (undo-tree-id901 . -17) (undo-tree-id902 . -17) (undo-tree-id903 . -17) (undo-tree-id904 . -17) (undo-tree-id905 . -17) (undo-tree-id906 . -17) (undo-tree-id907 . -17) (undo-tree-id908 . -17) (undo-tree-id909 . -17) (undo-tree-id910 . -17) (undo-tree-id911 . -17) (undo-tree-id912 . -17) (undo-tree-id913 . -17) (undo-tree-id914 . -17) (undo-tree-id915 . -17) (undo-tree-id916 . -17) (undo-tree-id917 . -17) (undo-tree-id918 . -17) (undo-tree-id919 . -17) (undo-tree-id920 . -17) (undo-tree-id921 . -17) (undo-tree-id922 . -17) (undo-tree-id923 . -17) (undo-tree-id924 . -17) (undo-tree-id925 . -17) (undo-tree-id926 . -17) (undo-tree-id927 . -17) (undo-tree-id928 . -17) (undo-tree-id929 . -17) (undo-tree-id930 . -17) (undo-tree-id931 . -17) (undo-tree-id932 . -17) (undo-tree-id933 . -17) (undo-tree-id934 . -17) (undo-tree-id935 . -17) (undo-tree-id936 . -17) (undo-tree-id937 . -17) (undo-tree-id938 . -17) (undo-tree-id939 . -17) (undo-tree-id940 . -17) (undo-tree-id941 . -17) (undo-tree-id942 . -17) (undo-tree-id943 . -17) (undo-tree-id944 . -17) (undo-tree-id945 . -17) (undo-tree-id946 . -17) (undo-tree-id947 . -17) (undo-tree-id948 . -17) (undo-tree-id949 . -17) (undo-tree-id950 . -17) (undo-tree-id951 . -17) (undo-tree-id952 . -17) (undo-tree-id953 . -17) (undo-tree-id954 . -17) (undo-tree-id955 . -17) (undo-tree-id956 . -17) (undo-tree-id957 . -17) (undo-tree-id958 . -17) (undo-tree-id959 . -17) (undo-tree-id960 . -17) (undo-tree-id961 . -17) (undo-tree-id962 . -17) (undo-tree-id963 . -17) (undo-tree-id964 . -17) (undo-tree-id965 . -17) (undo-tree-id966 . -17) (undo-tree-id967 . -17) (undo-tree-id968 . -17) (undo-tree-id969 . -17) (undo-tree-id970 . -17) (undo-tree-id971 . -17) (undo-tree-id972 . -17) (undo-tree-id973 . -17) (undo-tree-id974 . -17) (undo-tree-id975 . -17) (undo-tree-id976 . -17) (undo-tree-id977 . -17) (undo-tree-id978 . -17) (undo-tree-id979 . -17) (undo-tree-id980 . -17) (undo-tree-id981 . -17) (undo-tree-id982 . -17) (undo-tree-id983 . -17) (undo-tree-id984 . -17) (undo-tree-id985 . -17) (undo-tree-id986 . -17) (undo-tree-id987 . -17) (undo-tree-id988 . -17) (undo-tree-id989 . -17) (undo-tree-id990 . -17) (undo-tree-id991 . -17) (undo-tree-id992 . -17) (undo-tree-id993 . -17) (undo-tree-id994 . -17) (undo-tree-id995 . -17) (undo-tree-id996 . -17) (undo-tree-id997 . -17) (undo-tree-id998 . -17) (undo-tree-id999 . -17) (undo-tree-id1000 . -17) (undo-tree-id1001 . -17) (undo-tree-id1002 . -17) (undo-tree-id1003 . -17) (undo-tree-id1004 . -17) (undo-tree-id1005 . -17) (undo-tree-id1006 . -17) (undo-tree-id1007 . -17) (undo-tree-id1008 . -17) (undo-tree-id1009 . -17) (undo-tree-id1010 . -17) (undo-tree-id1011 . -17) (undo-tree-id1012 . -17) (undo-tree-id1013 . -17) (undo-tree-id1014 . -17) (undo-tree-id1015 . -17) (undo-tree-id1016 . -17) (undo-tree-id1017 . -17) (undo-tree-id1018 . -17) (undo-tree-id1019 . -17) (undo-tree-id1020 . -17) (undo-tree-id1021 . -17) (undo-tree-id1022 . -17) (undo-tree-id1023 . -17) (undo-tree-id1024 . -17) (undo-tree-id1025 . -17) (undo-tree-id1026 . -17) (undo-tree-id1027 . -17) (undo-tree-id1028 . -17) (undo-tree-id1029 . -17) (undo-tree-id1030 . -17) (undo-tree-id1031 . -17) (undo-tree-id1032 . -17) (undo-tree-id1033 . -17) (undo-tree-id1034 . -17) (undo-tree-id1035 . -17) (undo-tree-id1036 . -17) (undo-tree-id1037 . -17) (undo-tree-id1038 . -17) (undo-tree-id1039 . -17) (undo-tree-id1040 . -17) (undo-tree-id1041 . -17) (undo-tree-id1042 . -17) (undo-tree-id1043 . -17) (undo-tree-id1044 . -17) (undo-tree-id1045 . -17) (undo-tree-id1046 . -17) (undo-tree-id1047 . -17) (undo-tree-id1048 . -17) (undo-tree-id1049 . -17) (undo-tree-id1050 . -17) (undo-tree-id1051 . -17) (undo-tree-id1052 . -17) (undo-tree-id1053 . -17) (undo-tree-id1054 . -17) (undo-tree-id1055 . -17) (undo-tree-id1056 . -17) (undo-tree-id1057 . -17) (undo-tree-id1058 . -17) (undo-tree-id1059 . -17) (undo-tree-id1060 . -17) (undo-tree-id1061 . -17) (undo-tree-id1062 . -17) (undo-tree-id1063 . -17) (undo-tree-id1064 . -17) (undo-tree-id1065 . -17) (undo-tree-id1066 . -17) (undo-tree-id1067 . -17) (undo-tree-id1068 . -17) (undo-tree-id1069 . -17) (undo-tree-id1070 . -17) (undo-tree-id1071 . -17) (undo-tree-id1072 . -17) (undo-tree-id1073 . -17) (undo-tree-id1074 . -17) (undo-tree-id1075 . -17) (undo-tree-id1076 . -17) (undo-tree-id1077 . -17) (undo-tree-id1078 . -17) (undo-tree-id1079 . -17) (undo-tree-id1080 . -17) (undo-tree-id1081 . -17) (undo-tree-id1082 . -17) (undo-tree-id1083 . -17) (undo-tree-id1084 . -17) (undo-tree-id1085 . -17) (undo-tree-id1086 . -17) (undo-tree-id1087 . -17) (undo-tree-id1088 . -17) (undo-tree-id1089 . -17) (undo-tree-id1090 . -17) (undo-tree-id1091 . -17) (undo-tree-id1092 . -17) (undo-tree-id1093 . -17) (undo-tree-id1094 . -17) (undo-tree-id1095 . -17) (undo-tree-id1096 . -17) (undo-tree-id1097 . -17) (undo-tree-id1098 . -17) (undo-tree-id1099 . -17) (undo-tree-id1100 . -17) (undo-tree-id1101 . -17) (undo-tree-id1102 . -17) (undo-tree-id1103 . -17) (undo-tree-id1104 . -17) (undo-tree-id1105 . -17) (undo-tree-id1106 . -17) (undo-tree-id1107 . -17) (undo-tree-id1108 . -17) (undo-tree-id1109 . -17) (undo-tree-id1110 . -17) (undo-tree-id1111 . -17) (undo-tree-id1112 . -17) (undo-tree-id1113 . -34) 313 (t 26076 23443 479844 915000)) nil (26076 23517 109867 108000) 0 nil])
([nil nil ((nil rear-nonsticky nil 167 . 168) (#("
" 0 1 (fontified nil)) . -197) (163 . 198) 162) nil (26076 23521 841487 135000) 0 nil] [nil nil ((nil rear-nonsticky nil 185 . 186) (#("
" 0 1 (fontified nil)) . -215) (181 . 216) 165) ((#("
    typedef enum{Atom,OP} type_e;
" 0 1 (fontified nil) 1 4 (fontified nil) 4 5 (rear-nonsticky nil fontified nil) 5 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-keyword-face fontified nil) 12 13 (fontified nil) 13 16 (face font-lock-keyword-face fontified nil) 16 17 (face font-lock-keyword-face fontified nil) 17 18 (face (rainbow-delimiters-depth-2-face) c-type c-not-decl fontified nil) 18 19 (face font-lock-variable-name-face fontified nil) 19 20 (face font-lock-variable-name-face fontified nil) 20 21 (face font-lock-variable-name-face fontified nil) 21 22 (face font-lock-variable-name-face fontified nil) 22 23 (c-type c-decl-id-start fontified nil) 23 24 (face font-lock-variable-name-face fontified nil) 24 25 (face font-lock-variable-name-face fontified nil) 25 26 (face (rainbow-delimiters-depth-2-face) c-type c-decl-type-start fontified nil) 26 27 (fontified nil) 27 28 (face font-lock-type-face fontified nil) 28 29 (face font-lock-type-face fontified nil) 29 30 (face font-lock-type-face fontified nil) 30 31 (face font-lock-type-face fontified nil) 31 32 (face font-lock-type-face fontified nil) 32 33 (face font-lock-type-face fontified nil) 33 34 (fontified nil) 34 35 (fontified nil)) . 181) (undo-tree-id1120 . -5) (undo-tree-id1121 . -5) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -34) (undo-tree-id1126 . -1) (undo-tree-id1127 . -5) (undo-tree-id1128 . -12) (undo-tree-id1129 . -5) (215 . 216) (nil rear-nonsticky t 185 . 186)) (26076 23517 105979 768000) 0 nil] [nil nil ((185 . 190) 184) ((#("
    " 0 5 (fontified t)) . 185) (undo-tree-id1114 . -5) (undo-tree-id1115 . -5) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -5)) (26076 23510 743071 408000) 0 nil])
([nil nil ((163 . 166) (#("
    " 0 1 (fontified t) 1 4 (fontified t) 4 5 (rear-nonsticky t fontified t)) . 163) (undo-tree-id1130 . -5) (undo-tree-id1131 . -5) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -5) (undo-tree-id1136 . -5) (undo-tree-id1137 . -5) (undo-tree-id1138 . -5) (undo-tree-id1139 . -5) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -5) (undo-tree-id1143 . -5) (undo-tree-id1144 . -5) (undo-tree-id1145 . -5) (undo-tree-id1146 . -5) (undo-tree-id1147 . -5) (undo-tree-id1148 . -5) (undo-tree-id1149 . -5) (undo-tree-id1150 . -5) (undo-tree-id1151 . -5) (undo-tree-id1152 . -5) (undo-tree-id1153 . -5) (undo-tree-id1154 . -5) (undo-tree-id1155 . -5) (undo-tree-id1156 . -5) (undo-tree-id1157 . -5) (undo-tree-id1158 . -5) (undo-tree-id1159 . -5) (undo-tree-id1160 . -5) (undo-tree-id1161 . -5) (undo-tree-id1162 . -5) (undo-tree-id1163 . -5) (undo-tree-id1164 . -5) (undo-tree-id1165 . -5) (undo-tree-id1166 . -5) (undo-tree-id1167 . -5) (undo-tree-id1168 . -5) (undo-tree-id1169 . -5) (undo-tree-id1170 . -5) (undo-tree-id1171 . -5) (undo-tree-id1172 . -5) (undo-tree-id1173 . -5) (undo-tree-id1174 . -5) (undo-tree-id1175 . -5) (undo-tree-id1176 . -5) (undo-tree-id1177 . -5) (undo-tree-id1178 . -5) (undo-tree-id1179 . -5) (undo-tree-id1180 . -5) (undo-tree-id1181 . -5) (undo-tree-id1182 . -5) (undo-tree-id1183 . -5) (undo-tree-id1184 . -5) (undo-tree-id1185 . -5) (undo-tree-id1186 . -5) (undo-tree-id1187 . -5) (undo-tree-id1188 . -5) (undo-tree-id1189 . -5) (undo-tree-id1190 . -5) (undo-tree-id1191 . -5) (undo-tree-id1192 . -5) (undo-tree-id1193 . -5) (undo-tree-id1194 . -5) (undo-tree-id1195 . -5) (undo-tree-id1196 . -5) (undo-tree-id1197 . -5) (undo-tree-id1198 . -5) (undo-tree-id1199 . -5) (undo-tree-id1200 . -5) (undo-tree-id1201 . -5) (undo-tree-id1202 . -5) (undo-tree-id1203 . -5) (undo-tree-id1204 . -5) (undo-tree-id1205 . -5) (undo-tree-id1206 . -5) (undo-tree-id1207 . -5) (undo-tree-id1208 . -5) (undo-tree-id1209 . -5) (undo-tree-id1210 . -5) (undo-tree-id1211 . -5) (undo-tree-id1212 . -5) (undo-tree-id1213 . -5) (undo-tree-id1214 . -5) (undo-tree-id1215 . -5) (undo-tree-id1216 . -5) (undo-tree-id1217 . -5) (undo-tree-id1218 . -5) (undo-tree-id1219 . -5) (undo-tree-id1220 . -5) (undo-tree-id1221 . -5) (undo-tree-id1222 . -5) (undo-tree-id1223 . -5) (undo-tree-id1224 . -5) (undo-tree-id1225 . -5) (undo-tree-id1226 . -5) (undo-tree-id1227 . -5) (undo-tree-id1228 . -5) (undo-tree-id1229 . -5) (undo-tree-id1230 . -5) (undo-tree-id1231 . -5) (undo-tree-id1232 . -5) (undo-tree-id1233 . -5) (undo-tree-id1234 . -5) (undo-tree-id1235 . -5) (undo-tree-id1236 . -5) (undo-tree-id1237 . -5) (undo-tree-id1238 . -5) (undo-tree-id1239 . -5) (undo-tree-id1240 . -5) (undo-tree-id1241 . -5) (undo-tree-id1242 . -5) (undo-tree-id1243 . -5) (undo-tree-id1244 . -5) (undo-tree-id1245 . -5) (undo-tree-id1246 . -5) (undo-tree-id1247 . -5) (undo-tree-id1248 . -5) (undo-tree-id1249 . -5) (undo-tree-id1250 . -5) (undo-tree-id1251 . -5) (undo-tree-id1252 . -5) (undo-tree-id1253 . -5) (undo-tree-id1254 . -5) (undo-tree-id1255 . -5) (undo-tree-id1256 . -5) (undo-tree-id1257 . -5) (undo-tree-id1258 . -5) (undo-tree-id1259 . -5) (undo-tree-id1260 . -5) (undo-tree-id1261 . -5) (undo-tree-id1262 . -5) (undo-tree-id1263 . -5) (undo-tree-id1264 . -5) (undo-tree-id1265 . -5) (undo-tree-id1266 . -5) (undo-tree-id1267 . -5) (undo-tree-id1268 . -5) (undo-tree-id1269 . -5) (undo-tree-id1270 . -5) (undo-tree-id1271 . -5) (undo-tree-id1272 . -5) (undo-tree-id1273 . -5) (undo-tree-id1274 . -5) (undo-tree-id1275 . -5) (undo-tree-id1276 . -5) (undo-tree-id1277 . -5) (undo-tree-id1278 . -5) (undo-tree-id1279 . -5) (undo-tree-id1280 . -5) (undo-tree-id1281 . -5) (undo-tree-id1282 . -5) (undo-tree-id1283 . -5) (undo-tree-id1284 . -5) (undo-tree-id1285 . -5) (undo-tree-id1286 . -5) (undo-tree-id1287 . -5) (undo-tree-id1288 . -5) (undo-tree-id1289 . -5) (undo-tree-id1290 . -5) (undo-tree-id1291 . -5) (undo-tree-id1292 . -5) (undo-tree-id1293 . -5) (undo-tree-id1294 . -5) (undo-tree-id1295 . -5) (undo-tree-id1296 . -5) (undo-tree-id1297 . -5) (undo-tree-id1298 . -5) (undo-tree-id1299 . -5) (undo-tree-id1300 . -5) (undo-tree-id1301 . -5) (undo-tree-id1302 . -5) (undo-tree-id1303 . -5) (undo-tree-id1304 . -5) (undo-tree-id1305 . -5) (undo-tree-id1306 . -5) (undo-tree-id1307 . -5) (undo-tree-id1308 . -5) (undo-tree-id1309 . -5) (undo-tree-id1310 . -5) (undo-tree-id1311 . -5) (undo-tree-id1312 . -5) (undo-tree-id1313 . -5) (undo-tree-id1314 . -5) (undo-tree-id1315 . -5) (undo-tree-id1316 . -5) (undo-tree-id1317 . -5) (undo-tree-id1318 . -5) (undo-tree-id1319 . -5) (undo-tree-id1320 . -5) (undo-tree-id1321 . -5) (undo-tree-id1322 . -5) (undo-tree-id1323 . -5) (undo-tree-id1324 . -5) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -1) (undo-tree-id1332 . -5) (undo-tree-id1333 . -5) (undo-tree-id1334 . -5) (undo-tree-id1335 . -5) (undo-tree-id1336 . -5) (undo-tree-id1337 . -5) (undo-tree-id1338 . -5) (undo-tree-id1339 . -5) (undo-tree-id1340 . -5) (undo-tree-id1341 . -5) (undo-tree-id1342 . -5) (undo-tree-id1343 . -5) (undo-tree-id1344 . -5) (undo-tree-id1345 . -5) (undo-tree-id1346 . -5) (undo-tree-id1347 . -5) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) (undo-tree-id1351 . -5) (undo-tree-id1352 . -5) (undo-tree-id1353 . -5) (undo-tree-id1354 . -5) (undo-tree-id1355 . -5) (undo-tree-id1356 . -5) (undo-tree-id1357 . -5) 168) nil (26076 23521 841476 676000) 0 nil])
nil
nil
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . 206) (t 26076 23521 863176 679000)) nil (26076 23698 364884 847000) 0 nil])
([nil nil ((205 . 206)) nil (26076 23698 364880 735000) 0 nil])
([nil nil ((#("  public:
" 0 2 (fontified t) 2 8 (face font-lock-constant-face fontified t) 8 9 (c-type c-decl-end fontified t) 9 10 (fontified t)) . 318) (undo-tree-id1358 . -8) (undo-tree-id1359 . -8) (undo-tree-id1360 . -9) 326 (t 26076 23698 389839 813000)) nil (26076 23835 445729 412000) 0 nil])
([nil nil ((nil rear-nonsticky nil 219 . 220) (#("
" 0 1 (fontified nil)) . -227) (217 . 228) 216) nil (26076 23835 445717 89000) 0 nil])
([nil nil ((187 . 191) (186 . 187) (t 26076 23835 466503 743000)) nil (26076 24648 448421 630000) 0 nil])
([nil nil ((420 . 421) (416 . 420) (415 . 416) (apply yas--snippet-revive 396 415 #s(yas--snippet nil (#s(yas--field 1 403 414 nil nil nil t nil)) nil 22 nil #s(yas--field 1 403 414 nil nil nil t nil) nil nil)) (408 . 414) (#("string" 0 6 (fontified nil)) . -408) (408 . 414) (406 . 408) (405 . 406) (404 . 405) (#("typename Tp" 0 11 (fontified nil)) . 404) (403 . 404) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 403 414 nil nil nil t nil)) nil 22 nil #s(yas--field 1 403 414 nil nil nil t nil) nil nil)) (396 . 415) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 396) (396 . 420) (#("v" 0 1 (fontified nil)) . 396) (396 . 397) (#("vector<typename Tp, typename Alloc>" 0 35 (fontified nil)) . -396) (396 . 431) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -396) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) 398 (397 . 398) (#("c" 0 1 (fontified t)) . -397) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) 398 (396 . 398) (#("V" 0 1 (fontified t)) . -396) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("e" 0 1 (fontified t)) . -397) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (#("c" 0 1 (fontified t)) . -398) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) 399 (396 . 399) (385 . 391) (#("    " 0 4 (fontified nil)) . 385) (393 . 394) (385 . 389) (#("      " 0 6 (fontified nil)) . 385) (394 . 395) (392 . 394) (391 . 392) (384 . 391) (383 . 384) (380 . 383) (#("n" 0 1 (fontified t)) . -380) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (#("l" 0 1 (fontified t)) . -381) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (#("e" 0 1 (fontified t)) . -382) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) 383 (382 . 383) (377 . 382) (371 . 377) (#("string" 0 6 (fontified nil)) . -371) (371 . 377) (360 . 366) (#("    " 0 4 (fontified nil)) . 360) (368 . 369) (360 . 364) (#("      " 0 6 (fontified nil)) . 360) (369 . 370) (366 . 369) (367 . 371) (368 . 369) (360 . 366) (359 . 361) (354 . 358) (#("      " 0 6 (fontified nil)) . 354) (undo-tree-id1377 . -6) (undo-tree-id1378 . -6) (360 . 362) (353 . 360) (344 . 353) (337 . 344) (332 . 337) (t 26076 24648 456487 489000) 331) nil (26076 25712 979751 146000) 0 nil])
([nil nil ((519 . 520) (516 . 519) (515 . 516) (apply yas--snippet-revive 498 515 #s(yas--snippet nil (#s(yas--field 1 505 514 nil nil nil t nil)) nil 23 nil #s(yas--field 1 505 514 nil nil nil t nil) nil nil)) (505 . 514) (#("sq" 0 2 (fontified nil)) . 505) (505 . 507) (#("sql_shuju" 0 9 (fontified nil)) . -505) (505 . 514) (#("sql_shu" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) . -505) (undo-tree-id1379 . -7) (undo-tree-id1380 . -7) 512 (505 . 512) (#("a" 0 1 (fontified t)) . -505) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("w" 0 1 (fontified t)) . -506) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) 507 (506 . 507) (#("typename Tp" 0 11 (fontified nil)) . 506) (505 . 506) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 505 514 nil nil nil t nil)) nil 23 nil #s(yas--field 1 505 514 nil nil nil t nil) nil nil)) (498 . 517) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 498) (498 . 522) (#("v" 0 1 (fontified nil)) . 498) (498 . 499) (#("vector<typename Tp, typename Alloc>" 0 35 (fontified nil)) . -498) (498 . 533) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -498) (undo-tree-id1385 . -2) (undo-tree-id1386 . -2) 500 (498 . 500) (496 . 498) (494 . 496) (#("y" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -494) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) 495 (494 . 495) (#("y" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -494) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -495) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) 496 (486 . 496) (481 . 486) (t 26076 25712 993132 873000) 480) nil (26076 25748 566754 117000) 0 nil])
([nil nil ((498 . 501) (498 . 499) (#("vector<" 0 7 (fontified t)) . 498) (undo-tree-id1663 . -6) (undo-tree-id1664 . -6) (undo-tree-id1665 . -7) (undo-tree-id1666 . -7) (t 26076 25748 593132 162000)) nil (26076 26340 283986 899000) 0 nil])
([nil nil ((124 . 128) (#("m" 0 1 (fontified nil c-in-sws t)) . 124) (undo-tree-id1393 . -1) (124 . 125) (#("map>" 0 4 (fontified nil c-in-sws t)) . -124) (undo-tree-id1394 . -4) (124 . 128) (#("ma" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -124) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -2) (undo-tree-id1399 . -2) (undo-tree-id1400 . -2) (undo-tree-id1401 . -2) (undo-tree-id1402 . -2) (undo-tree-id1403 . -2) (undo-tree-id1404 . -2) (undo-tree-id1405 . -2) (undo-tree-id1406 . -2) (undo-tree-id1407 . -2) (undo-tree-id1408 . -2) (undo-tree-id1409 . -2) (undo-tree-id1410 . -2) (undo-tree-id1411 . -2) (undo-tree-id1412 . -2) (undo-tree-id1413 . -2) (undo-tree-id1414 . -2) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1419 . -2) (undo-tree-id1420 . -2) (undo-tree-id1421 . -2) (undo-tree-id1422 . -2) (undo-tree-id1423 . -2) (undo-tree-id1424 . -2) (undo-tree-id1425 . -2) (undo-tree-id1426 . -2) (undo-tree-id1427 . -2) (undo-tree-id1428 . -2) (undo-tree-id1429 . -2) (undo-tree-id1430 . -2) (undo-tree-id1431 . -2) (undo-tree-id1432 . -2) (undo-tree-id1433 . -2) (undo-tree-id1434 . -2) (undo-tree-id1435 . -2) (undo-tree-id1436 . -2) (undo-tree-id1437 . -2) (undo-tree-id1438 . -2) (undo-tree-id1439 . -2) (undo-tree-id1440 . -2) (undo-tree-id1441 . -2) (undo-tree-id1442 . -2) (undo-tree-id1443 . -2) (undo-tree-id1444 . -2) (undo-tree-id1445 . -2) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) (undo-tree-id1448 . -2) (undo-tree-id1449 . -2) (undo-tree-id1450 . -2) (undo-tree-id1451 . -2) (undo-tree-id1452 . -2) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (undo-tree-id1455 . -2) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (undo-tree-id1468 . -2) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -2) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) (undo-tree-id1496 . -2) 126 (123 . 126) (#("\"" 0 1 (face font-lock-string-face c-in-sws t fontified nil)) . -123) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (nil syntax-table nil 124 . 125) (nil syntax-table (1) 123 . 124) (#("\"" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . 124) (undo-tree-id1649 . -1) (undo-tree-id1650 . 1) (undo-tree-id1651 . -1) (#("m" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -124) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("a" 0 1 (face font-lock-string-face c-in-sws t fontified t)) . -125) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) 126 (124 . 126) (apply yas--snippet-revive 115 125 #s(yas--snippet nil nil #s(yas--exit 124 nil) 24 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 124 nil) 24 nil nil nil nil)) (115 . 125) (#("include \"$0\"" 0 12 (fontified nil)) . 115) (undo-tree-id1657 . -12) (115 . 127) (#("i" 0 1 (fontified nil c-in-sws t)) . 115) (undo-tree-id1658 . -1) (115 . 116) (#("include \"header\"" 0 16 (fontified nil)) . -115) (undo-tree-id1659 . -16) (115 . 131) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -115) (undo-tree-id1660 . -2) (undo-tree-id1661 . -2) (undo-tree-id1662 . -2) 117 (115 . 117) (114 . 115) (114 . 115) 132) nil (26076 26340 283971 146000) 0 nil])
([nil nil ((517 . 520) (517 . 518) (t 26076 26340 293120 346000)) nil (26076 26349 514538 715000) 0 nil])
([nil nil ((517 . 520) (#("st" 0 2 (fontified nil)) . 517) (517 . 519) (#("std" 0 3 (fontified nil)) . -517) (517 . 520) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -517) (undo-tree-id1667 . -2) (undo-tree-id1668 . -2) (undo-tree-id1669 . -2) (undo-tree-id1670 . -2) (undo-tree-id1671 . -2) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) (undo-tree-id1674 . -2) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) (undo-tree-id1679 . -2) (undo-tree-id1680 . -2) (undo-tree-id1681 . -2) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) (undo-tree-id1684 . -2) (undo-tree-id1685 . -2) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (undo-tree-id1693 . -2) (undo-tree-id1694 . -2) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) (undo-tree-id1714 . -2) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) (undo-tree-id1720 . -2) (undo-tree-id1721 . -2) (undo-tree-id1722 . -2) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -2) (undo-tree-id1726 . -2) (undo-tree-id1727 . -2) (undo-tree-id1728 . -2) (undo-tree-id1729 . -2) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -2) (undo-tree-id1747 . -2) (undo-tree-id1748 . -2) (undo-tree-id1749 . -2) (undo-tree-id1750 . -2) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -2) (undo-tree-id1761 . -2) (undo-tree-id1762 . -2) (undo-tree-id1763 . -2) (undo-tree-id1764 . -2) (undo-tree-id1765 . -2) (undo-tree-id1766 . -2) 519 (517 . 519) (517 . 519) (520 . 523) (t 26076 26349 526453 495000)) nil (26076 52077 776312 446000) 0 nil])
([nil current ((207 . 210) (206 . 207) (t 26076 52079 472595 309000)) nil (26078 58440 835174 923000) 0 nil] [nil nil ((nil rear-nonsticky nil 346 . 347) (#("
" 0 1 (fontified nil)) . -371) (340 . 372) 332 (t 26076 26447 556451 527000)) ((#("
      token_class::token *tok;
" 0 1 (fontified t) 1 6 (fontified nil) 6 7 (rear-nonsticky nil fontified nil) 7 25 (fontified nil) 25 26 (fontified nil) 26 27 (fontified nil) 27 28 (fontified nil) 28 29 (fontified nil) 29 30 (fontified nil) 30 31 (fontified nil) 31 32 (fontified nil)) . 340) (undo-tree-id1768 . -30) (undo-tree-id1769 . -30) (undo-tree-id1770 . 2) (undo-tree-id1771 . -1) (undo-tree-id1772 . -31) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . 2) (undo-tree-id1776 . -30) (undo-tree-id1777 . -30) (undo-tree-id1778 . -30) (undo-tree-id1779 . -30) (undo-tree-id1780 . -30) (undo-tree-id1781 . -30) (undo-tree-id1782 . -30) (undo-tree-id1783 . -30) (undo-tree-id1784 . -30) (undo-tree-id1785 . -30) (undo-tree-id1786 . -30) (undo-tree-id1787 . -30) (undo-tree-id1788 . -30) (undo-tree-id1789 . -30) (undo-tree-id1790 . -30) (undo-tree-id1791 . -30) (undo-tree-id1792 . -30) (undo-tree-id1793 . -30) (undo-tree-id1794 . -30) (undo-tree-id1795 . -30) (undo-tree-id1796 . -30) (undo-tree-id1797 . -30) (undo-tree-id1798 . -30) (undo-tree-id1799 . -30) (undo-tree-id1800 . -30) (undo-tree-id1801 . -30) (undo-tree-id1802 . -30) (undo-tree-id1803 . -30) (undo-tree-id1804 . -30) (undo-tree-id1805 . -30) (undo-tree-id1806 . -30) (undo-tree-id1807 . -30) (undo-tree-id1808 . -30) (undo-tree-id1809 . -30) (undo-tree-id1810 . -30) (undo-tree-id1811 . -30) (undo-tree-id1812 . -30) (undo-tree-id1813 . -30) (undo-tree-id1814 . -30) (undo-tree-id1815 . -30) (undo-tree-id1816 . -30) (undo-tree-id1817 . -30) (undo-tree-id1818 . -30) (undo-tree-id1819 . -30) (undo-tree-id1820 . -30) (undo-tree-id1821 . -30) (undo-tree-id1822 . -30) (undo-tree-id1823 . -30) (undo-tree-id1824 . -30) (undo-tree-id1825 . -30) (undo-tree-id1826 . -30) (undo-tree-id1827 . -30) (undo-tree-id1828 . -30) (undo-tree-id1829 . -30) (undo-tree-id1830 . -30) (undo-tree-id1831 . -30) (undo-tree-id1832 . -30) (undo-tree-id1833 . -30) (undo-tree-id1834 . -30) (undo-tree-id1835 . -30) (undo-tree-id1836 . -30) (undo-tree-id1837 . -30) (undo-tree-id1838 . -30) (undo-tree-id1839 . -30) (undo-tree-id1840 . -30) (undo-tree-id1841 . -30) (undo-tree-id1842 . -30) (undo-tree-id1843 . -30) (undo-tree-id1844 . -30) (undo-tree-id1845 . -30) (undo-tree-id1846 . -30) (undo-tree-id1847 . -30) (undo-tree-id1848 . -30) (undo-tree-id1849 . -30) (undo-tree-id1850 . -30) (undo-tree-id1851 . -30) (undo-tree-id1852 . -30) (undo-tree-id1853 . -30) (undo-tree-id1854 . -30) (undo-tree-id1855 . -30) (undo-tree-id1856 . -30) (undo-tree-id1857 . -30) (undo-tree-id1858 . -30) (undo-tree-id1859 . -30) (undo-tree-id1860 . -30) (undo-tree-id1861 . -30) (undo-tree-id1862 . -30) (undo-tree-id1863 . -30) (undo-tree-id1864 . -30) (undo-tree-id1865 . -30) (undo-tree-id1866 . -30) (undo-tree-id1867 . -30) (undo-tree-id1868 . -30) (undo-tree-id1869 . -30) (undo-tree-id1870 . -30) (undo-tree-id1871 . -30) (undo-tree-id1872 . -30) (undo-tree-id1873 . -30) (undo-tree-id1874 . -30) (undo-tree-id1875 . -30) (undo-tree-id1876 . -30) (undo-tree-id1877 . -30) (undo-tree-id1878 . -30) (undo-tree-id1879 . -30) (undo-tree-id1880 . -30) (undo-tree-id1881 . -30) (undo-tree-id1882 . -30) (undo-tree-id1883 . -30) (undo-tree-id1884 . -30) (undo-tree-id1885 . -30) (undo-tree-id1886 . -30) (undo-tree-id1887 . -30) (undo-tree-id1888 . -30) (undo-tree-id1889 . -30) (undo-tree-id1890 . -30) (undo-tree-id1891 . -30) (undo-tree-id1892 . -30) (undo-tree-id1893 . -30) (undo-tree-id1894 . -30) (undo-tree-id1895 . -30) (undo-tree-id1896 . -30) (undo-tree-id1897 . -30) (undo-tree-id1898 . -30) (undo-tree-id1899 . -30) (undo-tree-id1900 . -30) (undo-tree-id1901 . -30) (undo-tree-id1902 . -30) (undo-tree-id1903 . -30) (undo-tree-id1904 . -30) (undo-tree-id1905 . -30) (undo-tree-id1906 . -30) (undo-tree-id1907 . -30) (undo-tree-id1908 . -30) (undo-tree-id1909 . -30) (undo-tree-id1910 . -30) (undo-tree-id1911 . -30) (undo-tree-id1912 . -30) (undo-tree-id1913 . -30) (undo-tree-id1914 . -30) (undo-tree-id1915 . -30) (undo-tree-id1916 . -30) (undo-tree-id1917 . -30) (undo-tree-id1918 . -30) (undo-tree-id1919 . -30) (undo-tree-id1920 . -30) (undo-tree-id1921 . -30) (undo-tree-id1922 . -30) (undo-tree-id1923 . -30) (undo-tree-id1924 . -30) (undo-tree-id1925 . -30) (undo-tree-id1926 . -30) (undo-tree-id1927 . -30) (undo-tree-id1928 . -30) (undo-tree-id1929 . -30) (undo-tree-id1930 . -30) (undo-tree-id1931 . -30) (undo-tree-id1932 . -30) (undo-tree-id1933 . -30) (undo-tree-id1934 . -30) (undo-tree-id1935 . -30) (undo-tree-id1936 . -30) (undo-tree-id1937 . -30) (undo-tree-id1938 . -30) (undo-tree-id1939 . -30) (undo-tree-id1940 . -30) (undo-tree-id1941 . -30) (undo-tree-id1942 . -30) (undo-tree-id1943 . -30) (undo-tree-id1944 . -30) (undo-tree-id1945 . -30) (undo-tree-id1946 . -30) (undo-tree-id1947 . -30) (undo-tree-id1948 . -30) (undo-tree-id1949 . -30) (undo-tree-id1950 . -30) (undo-tree-id1951 . -30) (undo-tree-id1952 . -30) (undo-tree-id1953 . -30) (undo-tree-id1954 . -30) (undo-tree-id1955 . -30) (undo-tree-id1956 . -30) (undo-tree-id1957 . -30) (undo-tree-id1958 . -30) (undo-tree-id1959 . -30) (undo-tree-id1960 . -30) (undo-tree-id1961 . -30) (undo-tree-id1962 . -30) (undo-tree-id1963 . -30) (undo-tree-id1964 . -30) (undo-tree-id1965 . -30) (undo-tree-id1966 . -30) (undo-tree-id1967 . -30) (undo-tree-id1968 . -30) (undo-tree-id1969 . -30) (undo-tree-id1970 . -30) (undo-tree-id1971 . -30) (undo-tree-id1972 . -30) (undo-tree-id1973 . -30) (undo-tree-id1974 . -30) (undo-tree-id1975 . -30) (undo-tree-id1976 . -30) (undo-tree-id1977 . -30) (undo-tree-id1978 . -30) (undo-tree-id1979 . -30) (undo-tree-id1980 . -30) (undo-tree-id1981 . -30) (undo-tree-id1982 . -30) (undo-tree-id1983 . -30) (undo-tree-id1984 . -30) (undo-tree-id1985 . -30) (undo-tree-id1986 . -30) (undo-tree-id1987 . -30) (undo-tree-id1988 . -30) (undo-tree-id1989 . -30) (undo-tree-id1990 . -30) (undo-tree-id1991 . -30) (undo-tree-id1992 . -30) (undo-tree-id1993 . -30) (undo-tree-id1994 . -30) (undo-tree-id1995 . -30) (undo-tree-id1996 . -30) (undo-tree-id1997 . -30) (undo-tree-id1998 . -30) (undo-tree-id1999 . -30) (undo-tree-id2000 . -30) (undo-tree-id2001 . -30) (undo-tree-id2002 . -30) (undo-tree-id2003 . -30) (undo-tree-id2004 . -30) (undo-tree-id2005 . -30) (undo-tree-id2006 . -30) (undo-tree-id2007 . -30) (undo-tree-id2008 . -30) (undo-tree-id2009 . -30) (undo-tree-id2010 . -30) (undo-tree-id2011 . -30) (undo-tree-id2012 . -30) (undo-tree-id2013 . -30) (undo-tree-id2014 . -30) (undo-tree-id2015 . -30) (undo-tree-id2016 . -30) (undo-tree-id2017 . -30) (undo-tree-id2018 . -30) (undo-tree-id2019 . -30) (undo-tree-id2020 . -30) (undo-tree-id2021 . -30) (undo-tree-id2022 . -30) (undo-tree-id2023 . -30) (undo-tree-id2024 . -30) (undo-tree-id2025 . -30) (undo-tree-id2026 . -27) (undo-tree-id2027 . -30) (undo-tree-id2028 . -30) (undo-tree-id2029 . -30) (undo-tree-id2030 . -30) (undo-tree-id2031 . -30) (undo-tree-id2032 . -30) (undo-tree-id2033 . -30) (undo-tree-id2034 . -30) (undo-tree-id2035 . -30) (undo-tree-id2036 . -30) (undo-tree-id2037 . -30) (undo-tree-id2038 . -30) (undo-tree-id2039 . -30) (undo-tree-id2040 . -30) (undo-tree-id2041 . -30) (undo-tree-id2042 . -30) (undo-tree-id2043 . -30) (undo-tree-id2044 . -30) (undo-tree-id2045 . -30) (undo-tree-id2046 . -30) (undo-tree-id2047 . -30) (undo-tree-id2048 . -30) (undo-tree-id2049 . -30) (undo-tree-id2050 . -30) (undo-tree-id2051 . -30) (undo-tree-id2052 . -30) (undo-tree-id2053 . -30) (undo-tree-id2054 . -30) (undo-tree-id2055 . -30) (undo-tree-id2056 . -30) (undo-tree-id2057 . -30) (undo-tree-id2058 . -30) (undo-tree-id2059 . -30) (undo-tree-id2060 . -30) (undo-tree-id2061 . -30) (undo-tree-id2062 . -30) (undo-tree-id2063 . -30) (undo-tree-id2064 . -30) (undo-tree-id2065 . -30) (undo-tree-id2066 . -30) (undo-tree-id2067 . -30) (undo-tree-id2068 . -30) (undo-tree-id2069 . -30) (undo-tree-id2070 . -30) (undo-tree-id2071 . -30) (undo-tree-id2072 . -30) (undo-tree-id2073 . -30) (undo-tree-id2074 . -30) (undo-tree-id2075 . -30) (undo-tree-id2076 . -30) (undo-tree-id2077 . -30) (undo-tree-id2078 . -30) (undo-tree-id2079 . -30) (undo-tree-id2080 . -30) (undo-tree-id2081 . -30) (undo-tree-id2082 . -30) (undo-tree-id2083 . -30) (undo-tree-id2084 . -30) (undo-tree-id2085 . -30) (undo-tree-id2086 . -30) (undo-tree-id2087 . -30) (undo-tree-id2088 . -30) (undo-tree-id2089 . -30) (undo-tree-id2090 . -30) (undo-tree-id2091 . -30) (undo-tree-id2092 . -30) (undo-tree-id2093 . -30) (undo-tree-id2094 . -30) (undo-tree-id2095 . -30) (undo-tree-id2096 . -30) (undo-tree-id2097 . -30) (undo-tree-id2098 . -30) (undo-tree-id2099 . -30) (undo-tree-id2100 . -30) (undo-tree-id2101 . -30) (undo-tree-id2102 . -30) (undo-tree-id2103 . -30) (undo-tree-id2104 . -30) (undo-tree-id2105 . -30) (undo-tree-id2106 . -30) (undo-tree-id2107 . -30) (undo-tree-id2108 . -30) (undo-tree-id2109 . -30) (undo-tree-id2110 . -30) (undo-tree-id2111 . -30) (undo-tree-id2112 . -30) (undo-tree-id2113 . -30) (undo-tree-id2114 . -30) (undo-tree-id2115 . -30) (undo-tree-id2116 . -30) (undo-tree-id2117 . -30) (undo-tree-id2118 . -30) (undo-tree-id2119 . -30) (undo-tree-id2120 . -30) (undo-tree-id2121 . -30) (undo-tree-id2122 . -30) (undo-tree-id2123 . -30) (undo-tree-id2124 . -30) (undo-tree-id2125 . -30) (undo-tree-id2126 . -30) (undo-tree-id2127 . -30) (undo-tree-id2128 . -30) (undo-tree-id2129 . -30) (undo-tree-id2130 . -30) (undo-tree-id2131 . -30) (undo-tree-id2132 . -30) (undo-tree-id2133 . -30) (undo-tree-id2134 . -30) (undo-tree-id2135 . -30) (undo-tree-id2136 . -30) (undo-tree-id2137 . -30) (undo-tree-id2138 . -30) (undo-tree-id2139 . -30) (undo-tree-id2140 . -30) (undo-tree-id2141 . -30) (undo-tree-id2142 . -30) (undo-tree-id2143 . -30) (undo-tree-id2144 . -30) (undo-tree-id2145 . -30) (undo-tree-id2146 . -30) (undo-tree-id2147 . -30) (undo-tree-id2148 . -30) (undo-tree-id2149 . -30) (undo-tree-id2150 . -30) (undo-tree-id2151 . -30) (undo-tree-id2152 . -30) (undo-tree-id2153 . -30) (undo-tree-id2154 . -30) (undo-tree-id2155 . -30) (undo-tree-id2156 . -30) (undo-tree-id2157 . -30) (undo-tree-id2158 . -30) (undo-tree-id2159 . -30) (undo-tree-id2160 . -30) (undo-tree-id2161 . -30) (undo-tree-id2162 . -30) (undo-tree-id2163 . -30) (undo-tree-id2164 . -30) (undo-tree-id2165 . -30) (undo-tree-id2166 . -30) (undo-tree-id2167 . -30) (undo-tree-id2168 . -30) (undo-tree-id2169 . -30) (undo-tree-id2170 . -30) (undo-tree-id2171 . -30) (undo-tree-id2172 . -30) (undo-tree-id2173 . -30) (undo-tree-id2174 . -30) (undo-tree-id2175 . -30) (undo-tree-id2176 . -30) (undo-tree-id2177 . -30) (undo-tree-id2178 . -30) (undo-tree-id2179 . -30) (undo-tree-id2180 . -30) (undo-tree-id2181 . -30) (undo-tree-id2182 . -30) (undo-tree-id2183 . -30) (undo-tree-id2184 . -30) (undo-tree-id2185 . -30) (undo-tree-id2186 . -30) (undo-tree-id2187 . -30) (undo-tree-id2188 . -30) (undo-tree-id2189 . -30) (undo-tree-id2190 . -30) (undo-tree-id2191 . -30) (undo-tree-id2192 . -30) (undo-tree-id2193 . -30) (undo-tree-id2194 . -30) (undo-tree-id2195 . -30) (undo-tree-id2196 . -30) (undo-tree-id2197 . -30) (undo-tree-id2198 . -30) (undo-tree-id2199 . -30) (undo-tree-id2200 . -30) (undo-tree-id2201 . -30) (undo-tree-id2202 . -1) (undo-tree-id2203 . -30) (undo-tree-id2204 . -30) (undo-tree-id2205 . -30) (undo-tree-id2206 . -30) (undo-tree-id2207 . -30) (undo-tree-id2208 . -30) (undo-tree-id2209 . -30) (undo-tree-id2210 . -30) (undo-tree-id2211 . -30) (undo-tree-id2212 . -30) (undo-tree-id2213 . -30) (undo-tree-id2214 . -30) (undo-tree-id2215 . -30) (undo-tree-id2216 . -30) (undo-tree-id2217 . -30) (undo-tree-id2218 . -30) (undo-tree-id2219 . -30) (undo-tree-id2220 . -30) (undo-tree-id2221 . -30) (undo-tree-id2222 . -30) (undo-tree-id2223 . -30) (undo-tree-id2224 . -30) (undo-tree-id2225 . -30) (undo-tree-id2226 . -30) (undo-tree-id2227 . -30) (undo-tree-id2228 . -30) (undo-tree-id2229 . -30) (undo-tree-id2230 . -30) (undo-tree-id2231 . -30) (undo-tree-id2232 . -30) (undo-tree-id2233 . -30) (undo-tree-id2234 . -30) (undo-tree-id2235 . -30) (undo-tree-id2236 . -30) (undo-tree-id2237 . -30) (undo-tree-id2238 . -30) (undo-tree-id2239 . -30) (undo-tree-id2240 . -30) (undo-tree-id2241 . -30) (undo-tree-id2242 . -30) (undo-tree-id2243 . -30) (undo-tree-id2244 . -30) (undo-tree-id2245 . -30) (undo-tree-id2246 . -30) (undo-tree-id2247 . -30) (undo-tree-id2248 . -30) (undo-tree-id2249 . -30) (undo-tree-id2250 . -30) (undo-tree-id2251 . -30) (undo-tree-id2252 . -30) (undo-tree-id2253 . -30) (undo-tree-id2254 . -30) (undo-tree-id2255 . -30) (undo-tree-id2256 . -30) (undo-tree-id2257 . -30) (undo-tree-id2258 . -30) (undo-tree-id2259 . -30) (undo-tree-id2260 . -30) (undo-tree-id2261 . -30) (undo-tree-id2262 . -30) (undo-tree-id2263 . -30) (undo-tree-id2264 . -30) (undo-tree-id2265 . -30) (undo-tree-id2266 . -30) (undo-tree-id2267 . -30) (undo-tree-id2268 . -30) (undo-tree-id2269 . -30) (undo-tree-id2270 . -30) (undo-tree-id2271 . -30) (undo-tree-id2272 . -30) (undo-tree-id2273 . -30) (undo-tree-id2274 . -30) (undo-tree-id2275 . -30) (undo-tree-id2276 . -30) (undo-tree-id2277 . -30) (371 . 372) (nil rear-nonsticky t 346 . 347)) (26076 52077 328744 535000) 0 nil])
nil
([nil nil ((370 . 371)) ((#("1" 0 1 (fontified t)) . 370) (undo-tree-id1767 . -1) (t 26076 52055 235929 135000)) (26076 52055 217060 329000) 0 nil])
nil
