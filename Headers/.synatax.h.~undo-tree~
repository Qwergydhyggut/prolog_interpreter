(undo-tree-save-format-version . 1)
"6393bfe33d1e4bf03c473cee9b0b53345892894b"
[nil nil nil nil (26070 17710 558644 495000) 0 nil]
([nil nil ((70 . 71) (68 . 70) (63 . 68) (59 . 63) (#("voi" 0 3 (fontified nil)) . 59) (59 . 62) (#("void" 0 1 (face font-lock-type-face c-is-sws t fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t)) . -59) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 63 (59 . 63) (58 . 58) (58 . 59) (57 . 57) (57 . 58) (57 . 57) (57 . 58) (60 . 65) (#("e" 0 1 (fontified nil)) . 60) (undo-tree-id2 . -1) (60 . 61) (#("endif" 0 5 (fontified nil)) . -60) (undo-tree-id3 . -5) (60 . 65) (#("en" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -60) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) 62 (60 . 62) (59 . 60) (58 . 58) (58 . 59) (57 . 57) (57 . 58) (56 . 56) (56 . 57) (54 . 56) (48 . 54) (#("M" 0 1 (face font-lock-variable-name-face fontified t)) . -48) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 49 (37 . 49) (apply yas--snippet-revive 30 37 #s(yas--snippet nil nil #s(yas--exit 37 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 37 nil) 34 nil nil nil nil)) (30 . 37) (#("define $0" 0 9 (fontified nil)) . 30) (undo-tree-id10 . -9) (30 . 39) (#("d" 0 1 (fontified nil)) . 30) (undo-tree-id11 . -1) (30 . 31) (#("define macro" 0 12 (fontified nil)) . -30) (undo-tree-id12 . -12) (30 . 42) (#("de" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t)) . -30) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) 32 (30 . 32) (29 . 30) (28 . 28) (28 . 29) (20 . 28) (#("M" 0 1 (fontified t)) . -20) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 21 (19 . 21) (#("O" 0 1 (fontified t)) . -19) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 20 (9 . 20) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 33 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id22 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id23 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id24 . -12) (2 . 14) (#("ifn" 0 1 (face font-lock-preprocessor-face fontified t) 1 2 (face font-lock-preprocessor-face fontified t) 2 3 (face font-lock-preprocessor-face fontified t)) . -2) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) 5 (3 . 5) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -3) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 4 (2 . 4) (1 . 2) (#("$" 0 1 (fontified t)) . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 2 (1 . 2) (t 26070 17144 886096 539000)) nil (26070 17710 558638 199000) 0 nil])
([nil nil ((80 . 81) 70) nil (26070 17710 558578 312000) 0 nil])
([nil nil ((68 . 73) (t 26070 17710 616085 210000)) nil (26070 17770 780488 79000) 0 nil])
([nil nil ((apply -6 59 84 undo--wrap-and-run-primitive-undo 59 84 ((79 . 82) (59 . 62) 77)) (t 26070 17770 796084 5000)) nil (26070 62257 65885 664000) 0 nil])
([nil nil ((156 . 157) (154 . 156) (144 . 154) (#("sy" 0 2 (fontified nil)) . 144) (144 . 146) (#("synax_read" 0 10 (fontified nil)) . -144) (144 . 154) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -144) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 146 (144 . 146) (140 . 144) (#("  " 0 2 (fontified nil)) . -140) (undo-tree-id2 . -2) (#("  " 0 2 (fontified t)) . 142) (#("m" 0 1 (fontified t face font-lock-constant-face)) . -132) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 133 (132 . 133) (130 . 132) (#("    " 0 4 (fontified t)) . -130) (undo-tree-id5 . -4) (undo-tree-id6 . -4) 134 (141 . 146) (apply yas--snippet-revive 134 141 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (134 . 141) (#("public:" 0 7 (fontified nil)) . 134) (134 . 141) (#("p" 0 1 (fontified nil)) . 134) (134 . 135) (#("public:" 0 7 (fontified nil)) . -134) (134 . 141) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -134) (undo-tree-id7 . -2) (undo-tree-id8 . -2) 136 (134 . 136) (129 . 134) (129 . 134) (138 . 139) (135 . 137) (130 . 134) (129 . 131) (126 . 128) (#("    " 0 4 (fontified nil)) . 126) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (130 . 132) (125 . 130) (120 . 125) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -120) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 121 (117 . 121) (114 . 117) (109 . 114) (#("cla" 0 3 (fontified nil)) . 109) (109 . 112) (#("class" 0 5 (fontified nil)) . -109) (109 . 114) (#("cla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -109) (undo-tree-id13 . -3) (undo-tree-id14 . -3) 112 (109 . 112) (117 . 118) (106 . 109) (106 . 109) (#("    " 0 4 (fontified t)) . 110) (#("    " 0 4 (fontified t)) . 105) (105 . 109) (104 . 104) (104 . 105) (#(" " 0 1 (fontified t)) . 104) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 105 (apply yas--snippet-revive 83 115 #s(yas--snippet nil (#s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil))) #s(yas--exit 109 nil) 0 nil #s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil)) nil nil)) (95 . 104) (94 . 95) (#("identifier" 0 10 (fontified nil face font-lock-variable-name-face)) . 94) (93 . 94) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil))) #s(yas--exit 109 nil) 0 nil #s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil)) nil nil)) (83 . 114) (#("namespace ${1:identifier} {
  $0
    }" 0 1 (c-is-sws t fontified nil) 1 38 (fontified nil)) . 83) (116 . 120) (111 . 113) (83 . 115) (#("na" 0 1 (c-is-sws t fontified nil) 1 2 (fontified nil)) . 83) (83 . 85) (#("namespace identifier {declarations}" 0 1 (c-is-sws t fontified nil) 1 35 (fontified nil)) . -83) (83 . 118) (#("na" 0 1 (fontified t c-is-sws t) 1 2 (fontified t)) . -83) (undo-tree-id17 . -2) (undo-tree-id18 . -2) 85 (83 . 85) (82 . 83) 59) nil (26070 62257 65878 735000) 0 nil])
([nil nil ((150 . 152) (119 . 121) (t 26070 62257 79987 495000)) nil (26070 62449 418214 73000) 0 nil])
([nil nil ((86 . 101) (nil syntax-table nil 86 . 87) (nil syntax-table (1) 85 . 86) (#("sy\"" 0 2 (c-in-sws t fontified nil) 2 3 (fontified nil face font-lock-string-face c-in-sws t)) . 86) (undo-tree-id82 . -3) (undo-tree-id83 . 1) (undo-tree-id84 . -3) (86 . 88) (#("synatax_tree.h\"" 0 15 (fontified nil)) . -86) (nil syntax-table nil 102 . 103) (nil syntax-table (1) 101 . 102) (86 . 101) (#("sy" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face)) . -86) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) 88 (86 . 88) (apply yas--snippet-revive 77 87 #s(yas--snippet nil nil #s(yas--exit 86 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 86 nil) 14 nil nil nil nil)) (77 . 87) (#("include \"$0\"" 0 12 (fontified nil)) . 77) (undo-tree-id98 . -12) (77 . 89) (#("i" 0 1 (c-in-sws t fontified nil)) . 77) (undo-tree-id99 . -1) (77 . 78) (#("include \"header\"" 0 16 (fontified nil)) . -77) (undo-tree-id100 . -16) (77 . 93) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -77) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) 79 (77 . 79) (76 . 77) (75 . 75) (75 . 76) (67 . 75) (nil syntax-table nil 67 . 68) (nil syntax-table (1) 66 . 67) (#("t\"" 0 1 (c-in-sws t fontified nil) 1 2 (fontified nil face font-lock-string-face c-in-sws t)) . 67) (undo-tree-id104 . -2) (67 . 68) (#("token.h\"" 0 8 (fontified nil)) . -67) (nil syntax-table nil 76 . 77) (nil syntax-table (1) 75 . 76) (67 . 75) (#("tok" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face)) . -67) (undo-tree-id105 . -3) (undo-tree-id106 . -3) 70 (67 . 70) (apply yas--snippet-revive 58 68 #s(yas--snippet nil nil #s(yas--exit 67 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 67 nil) 13 nil nil nil nil)) (58 . 68) (#("include \"$0\"" 0 12 (fontified nil)) . 58) (undo-tree-id107 . -12) (58 . 70) (#("i" 0 1 (c-in-sws t fontified nil)) . 58) (undo-tree-id108 . -1) (58 . 59) (#("include \"header\"" 0 16 (fontified nil)) . -58) (undo-tree-id109 . -16) (58 . 74) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -58) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) 60 (58 . 60) (57 . 58) (57 . 57) (57 . 58) (161 . 166) (t 26070 62449 423316 136000) 151) nil (26070 64500 499246 648000) 0 nil])
([nil nil ((305 . 306) (299 . 304) (#("token" 0 5 (fontified nil)) . -299) (299 . 304) (297 . 299) (286 . 297) (#("to" 0 2 (fontified nil)) . 286) (286 . 288) (#("token_class" 0 11 (fontified nil)) . -286) (286 . 297) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -286) (undo-tree-id19 . -2) (undo-tree-id20 . -2) 288 (286 . 288) (#("y" 0 1 (fontified t)) . -286) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 287 (286 . 287) (285 . 287) (283 . 285) (275 . 283) (#("o" 0 1 (fontified nil)) . 275) (275 . 276) (#("operator" 0 8 (fontified nil)) . -275) (275 . 283) (#("op" 0 1 (fontified t) 1 2 (fontified t)) . -275) (undo-tree-id23 . -2) (undo-tree-id24 . -2) 277 (274 . 277) (apply yas--snippet-revive 229 274 #s(yas--snippet nil (#s(yas--field 1 241 273 nil nil nil t nil)) nil 16 nil #s(yas--field 1 241 273 nil nil nil t nil) nil nil)) (261 . 273) (#("synatax_tree" 0 12 (fontified nil)) . -261) (261 . 273) (259 . 261) (241 . 259) (#("sy" 0 2 (fontified nil)) . 241) (241 . 243) (#("synatax_tree_class" 0 18 (fontified nil)) . -241) (241 . 259) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -241) (undo-tree-id25 . -2) (undo-tree-id26 . -2) 243 (241 . 243) (#("t" 0 1 (fontified t)) . -241) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("o" 0 1 (fontified t)) . -242) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("k" 0 1 (fontified t)) . -243) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("e" 0 1 (fontified t)) . -244) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("n" 0 1 (fontified t)) . -245) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("_" 0 1 (fontified t)) . -246) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("c" 0 1 (fontified t)) . -247) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("l" 0 1 (fontified t)) . -248) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t)) . -249) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("s" 0 1 (fontified t)) . -250) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("s" 0 1 (fontified t)) . -251) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#(":" 0 1 (fontified t)) . -252) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#(":" 0 1 (fontified t)) . -253) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("t" 0 1 (fontified t)) . -254) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("o" 0 1 (fontified t)) . -255) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("k" 0 1 (fontified t)) . -256) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("e" 0 1 (fontified t)) . -257) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("n" 0 1 (fontified t)) . -258) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 259 (254 . 259) (#("token" 0 5 (fontified nil)) . -254) (254 . 259) (252 . 254) (241 . 252) (#("t" 0 1 (fontified nil)) . 241) (241 . 242) (#("token_class" 0 11 (fontified nil)) . -241) (241 . 252) (#("t" 0 1 (fontified t)) . -241) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 242 (#("typename Tp" 0 11 (fontified nil)) . 242) (241 . 242) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 241 273 nil nil nil t nil)) nil 16 nil #s(yas--field 1 241 273 nil nil nil t nil) nil nil)) (229 . 253) (#("std::vector<${1:typename Tp}>" 0 29 (fontified nil)) . 229) (229 . 258) (#("v" 0 1 (fontified nil)) . 229) (229 . 230) (#("std::vector<typename Tp, typename Alloc>" 0 40 (fontified nil)) . -229) (229 . 269) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -229) (undo-tree-id65 . -3) (undo-tree-id66 . -3) 232 (229 . 232) (112 . 119) (#("v>" 0 1 (c-in-sws t fontified nil) 1 2 (fontified nil syntax-table (5 . 60) face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 112) (undo-tree-id67 . -2) (nil fontified nil 112 . 113) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 112 . 113) (nil c-in-sws t 112 . 113) (112 . 113) (#("vector>" 0 7 (c-in-sws t fontified nil)) . -112) (nil fontified nil 112 . 119) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 112 . 119) (nil c-in-sws t 112 . 119) (112 . 119) (#("vec" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face) 2 3 (fontified t c-in-sws t face font-lock-string-face)) . -112) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 115 (112 . 115) (apply yas--snippet-revive 103 113 #s(yas--snippet nil nil #s(yas--exit 112 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 112 nil) 15 nil nil nil nil)) (103 . 113) (#("include <$0>" 0 12 (fontified nil)) . 103) (undo-tree-id70 . -12) (103 . 115) (#("i" 0 1 (c-in-sws t fontified nil)) . 103) (undo-tree-id71 . -1) (103 . 104) (#("include <header>" 0 16 (fontified nil)) . -103) (undo-tree-id72 . -16) (103 . 119) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -103) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) 105 (104 . 105) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -104) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 105 (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -105) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 106 (103 . 106) (102 . 103) (102 . 102) (102 . 103)) nil (26070 64500 499096 11000) 0 nil])
([nil nil ((311 . 316) (t 26070 64500 513266 130000) 310) nil (26070 64515 178893 335000) 0 nil])
([nil nil ((130 . 141) (#("f>" 0 1 (c-in-sws t fontified nil) 1 2 (fontified nil syntax-table (5 . 60) face (rainbow-delimiters-depth-1-face font-lock-string-face) c-in-sws t)) . 130) (undo-tree-id176 . -2) (undo-tree-id177 . 1) (nil fontified nil 130 . 131) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 130 . 131) (nil c-in-sws t 130 . 131) (130 . 131) (#("functional>" 0 11 (c-in-sws t fontified nil)) . -130) (nil fontified nil 130 . 141) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 130 . 141) (nil c-in-sws t 130 . 141) (130 . 141) (#("fu" 0 1 (fontified t c-in-sws t face font-lock-string-face) 1 2 (fontified t c-in-sws t face font-lock-string-face)) . -130) (undo-tree-id178 . -2) (undo-tree-id179 . -2) 132 (130 . 132) (apply yas--snippet-revive 121 131 #s(yas--snippet nil nil #s(yas--exit 130 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 130 nil) 18 nil nil nil nil)) (121 . 131) (#("include <$0>" 0 12 (fontified nil)) . 121) (undo-tree-id180 . -12) (121 . 133) (#("i" 0 1 (c-in-sws t fontified nil)) . 121) (undo-tree-id181 . -1) (121 . 122) (#("include <header>" 0 16 (fontified nil)) . -121) (undo-tree-id182 . -16) (121 . 137) (#("i" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -121) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 122 (121 . 122) (120 . 121) (120 . 120) (120 . 121) (322 . 327) (312 . 314) (#("    " 0 4 (fontified t)) . 312) 324 (apply yas--snippet-revive 316 324 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (316 . 324) (#("private:" 0 8 (fontified nil)) . 316) (316 . 324) (#("p" 0 1 (fontified nil)) . 316) (316 . 317) (#("private:" 0 8 (fontified nil)) . -316) (316 . 324) (#("pr" 0 1 (fontified t) 1 2 (fontified t)) . -316) (undo-tree-id186 . -2) (undo-tree-id187 . -2) 318 (316 . 318)) nil (26070 64567 105682 258000) 0 nil] [nil nil ((316 . 317)) ((#("o" 0 1 (fontified t)) . 316) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1)) (26070 64515 176744 115000) 0 nil])
([nil nil ((349 . 350)) nil (26070 64567 105670 384000) 0 nil])
nil
([nil nil ((#("f" 0 1 (fontified t)) . -349) (undo-tree-id174 . -1) (undo-tree-id175 . -1) 350) nil (26070 64567 105669 703000) 0 nil])
([nil nil ((349 . 350)) nil (26070 64567 105668 147000) 0 nil])
([nil nil ((349 . 352) (#("s" 0 1 (fontified nil)) . 349) (349 . 350) (#("std" 0 3 (fontified nil)) . -349) (349 . 352) (#("s" 0 1 (fontified t)) . -349) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 350) nil (26070 64567 105667 217000) 0 nil])
([nil nil ((345 . 349) (#("  " 0 2 (fontified nil)) . 345) (351 . 352) (345 . 347) (#("    " 0 4 (fontified nil)) . 345) (352 . 353)) nil (26070 64596 959735 99000) 0 nil])
([nil nil ((349 . 351)) nil (26070 64604 795937 586000) 0 nil] [nil nil ((354 . 356)) ((#("fu" 0 1 (fontified t) 1 2 (fontified t)) . 354) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -2) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2)) (26070 64596 96631 871000) 0 nil])
([nil nil ((231 . 237) (#("c" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -231) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#("l" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -232) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -233) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -234) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("s" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -235) (undo-tree-id580 . -1) 236 (267 . 268) (262 . 266) 263 (255 . 261) (254 . 256) (249 . 253) (#("      " 0 6 (fontified nil)) . 249) (undo-tree-id581 . -6) (undo-tree-id582 . -6) (255 . 257) (248 . 255) (245 . 248) (#("f" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -245) (undo-tree-id583 . -1) (undo-tree-id584 . -1) 246 (245 . 246) (#("f" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -245) (undo-tree-id585 . -1) (undo-tree-id586 . -1) 246 (245 . 246) (#("r" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -245) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("e" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -246) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("a" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -247) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("d" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -248) (undo-tree-id593 . -1) (undo-tree-id594 . -1) 249 (237 . 249) (#("s" 0 1 (fontified nil)) . 237) (237 . 238) (#("synatax_read" 0 12 (fontified nil)) . -237) (237 . 249) (#("sy" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -237) (undo-tree-id595 . -2) (undo-tree-id596 . -2) 239 (237 . 239) (236 . 237) (231 . 236) (#("cl" 0 2 (fontified nil)) . 231) (231 . 233) (#("class" 0 5 (fontified nil)) . -231) (231 . 236) (#("cl" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -231) (undo-tree-id597 . -2) (undo-tree-id598 . -2) 233 (231 . 233) (227 . 231) (227 . 228) 232 (t 26070 64604 803263 582000)) nil (26070 64739 545472 351000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil)) (354 . 382) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 354) (354 . 387) (#("f" 0 1 (fontified nil)) . 354) (354 . 355) (#("function<typename Signature>" 0 28 (fontified nil)) . -354) (354 . 382) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -354) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) 356) ((354 . 356) (#("function<typename Signature>" 0 28 (fontified nil)) . 354) (354 . 382) (#("f" 0 1 (fontified nil)) . 354) (354 . 355) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 354) (354 . 387) (#("function<typename Signature>" 0 28 (fontified t)) . 354) (undo-tree-id188 . -9) (undo-tree-id189 . -9) (undo-tree-id190 . -9) (undo-tree-id191 . -18) (undo-tree-id192 . -27) (undo-tree-id193 . -18) (undo-tree-id194 . -27) (undo-tree-id195 . -9) (undo-tree-id196 . -9) (undo-tree-id197 . -9) (undo-tree-id198 . -9) (undo-tree-id199 . -9) (undo-tree-id200 . -9) (undo-tree-id201 . -9) (undo-tree-id202 . -9) (undo-tree-id203 . -9) (undo-tree-id204 . -9) (undo-tree-id205 . -9) (undo-tree-id206 . -9) (undo-tree-id207 . -9) (undo-tree-id208 . -9) (undo-tree-id209 . -9) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -9) (undo-tree-id215 . -9) (undo-tree-id216 . -9) (undo-tree-id217 . -9) (undo-tree-id218 . -9) (undo-tree-id219 . -9) (undo-tree-id220 . -9) (undo-tree-id221 . -9) (undo-tree-id222 . -9) (undo-tree-id223 . -9) (undo-tree-id224 . -9) (undo-tree-id225 . -9) (undo-tree-id226 . -9) (undo-tree-id227 . -9) (undo-tree-id228 . -9) (undo-tree-id229 . -9) (undo-tree-id230 . -9) (undo-tree-id231 . -9) (undo-tree-id232 . -9) (undo-tree-id233 . -9) (undo-tree-id234 . -9) (undo-tree-id235 . -9) (undo-tree-id236 . -9) (undo-tree-id237 . -9) (undo-tree-id238 . -9) (undo-tree-id239 . -9) (undo-tree-id240 . -9) (undo-tree-id241 . -9) (undo-tree-id242 . -9) (undo-tree-id243 . -9) (undo-tree-id244 . -9) (undo-tree-id245 . -9) (undo-tree-id246 . -9) (undo-tree-id247 . -9) (undo-tree-id248 . -9) (undo-tree-id249 . -9) (undo-tree-id250 . -9) (undo-tree-id251 . -9) (undo-tree-id252 . -9) (undo-tree-id253 . -9) (undo-tree-id254 . -9) (undo-tree-id255 . -9) (undo-tree-id256 . -9) (undo-tree-id257 . -9) (undo-tree-id258 . -9) (undo-tree-id259 . -9) (undo-tree-id260 . -9) (undo-tree-id261 . -9) (undo-tree-id262 . -9) (undo-tree-id263 . -9) (undo-tree-id264 . -9) (undo-tree-id265 . -9) (undo-tree-id266 . -9) (undo-tree-id267 . -9) (undo-tree-id268 . -9) (undo-tree-id269 . -9) (undo-tree-id270 . -9) (undo-tree-id271 . -9) (undo-tree-id272 . -9) (undo-tree-id273 . -9) (undo-tree-id274 . -9) (undo-tree-id275 . -9) (undo-tree-id276 . -9) (undo-tree-id277 . -9) (undo-tree-id278 . -9) (undo-tree-id279 . -9) (undo-tree-id280 . -9) (undo-tree-id281 . -9) (undo-tree-id282 . -9) (undo-tree-id283 . -9) (undo-tree-id284 . -9) (undo-tree-id285 . -9) (undo-tree-id286 . -9) (undo-tree-id287 . -9) (undo-tree-id288 . -9) (undo-tree-id289 . -9) (undo-tree-id290 . -9) (undo-tree-id291 . -9) (undo-tree-id292 . -9) (undo-tree-id293 . -9) (undo-tree-id294 . -9) (undo-tree-id295 . -9) (undo-tree-id296 . -9) (undo-tree-id297 . -9) (undo-tree-id298 . -9) (undo-tree-id299 . -9) (undo-tree-id300 . -9) (undo-tree-id301 . -9) (undo-tree-id302 . -9) (undo-tree-id303 . -9) (undo-tree-id304 . -9) (undo-tree-id305 . -9) (undo-tree-id306 . -9) (undo-tree-id307 . -9) (undo-tree-id308 . -9) (undo-tree-id309 . -9) (undo-tree-id310 . -9) (undo-tree-id311 . -9) (undo-tree-id312 . -9) (undo-tree-id313 . -9) (undo-tree-id314 . -9) (undo-tree-id315 . -9) (undo-tree-id316 . -9) (undo-tree-id317 . -9) (undo-tree-id318 . -9) (undo-tree-id319 . -9) (undo-tree-id320 . -9) (undo-tree-id321 . -9) (undo-tree-id322 . -9) (undo-tree-id323 . -9) (undo-tree-id324 . -9) (undo-tree-id325 . -9) (undo-tree-id326 . -9) (undo-tree-id327 . -9) (apply yas--snippet-revive 354 382 #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil))) (26070 64567 105726 525000) 0 nil])
([nil nil ((152 . 155) (apply yas--snippet-revive 143 153 #s(yas--snippet nil nil #s(yas--exit 152 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 152 nil) 20 nil nil nil nil)) (143 . 153) (#("include <$0>" 0 12 (fontified nil)) . 143) (undo-tree-id599 . -12) (143 . 155) (#("i" 0 1 (c-in-sws t fontified nil)) . 143) (undo-tree-id600 . -1) (143 . 144) (#("include <header>" 0 16 (fontified nil)) . -143) (undo-tree-id601 . -16) (143 . 159) (#("in" 0 1 (fontified t c-in-sws t face font-lock-preprocessor-face) 1 2 (fontified t c-in-sws t face font-lock-preprocessor-face)) . -143) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . -2) 145 (143 . 145) (142 . 143) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 141 . 142) (nil fontified t 141 . 142) (nil c-in-sws t 141 . 142) (141 . 142) (t 26070 64739 553260 301000) 125) nil (26070 64868 764013 436000) 0 nil])
([nil nil ((apply yas--snippet-revive 354 382 #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil))) (26070 64567 104550 227000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -269) (undo-tree-id624 . -1) 270 (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -343) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . 1) (undo-tree-id628 . -1) (#(";" 0 1 (fontified t)) . -344) (undo-tree-id629 . -1) (undo-tree-id630 . -1) 345 (337 . 338) (apply yas--snippet-revive 310 336 #s(yas--snippet nil (#s(yas--field 1 317 335 nil nil nil t nil)) nil 21 nil #s(yas--field 1 317 335 nil nil nil t nil) nil nil)) (317 . 335) (#("to" 0 2 (fontified nil)) . 317) (317 . 319) (#("token_class::token" 0 18 (fontified nil)) . -317) (317 . 335) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -317) (undo-tree-id631 . -2) (undo-tree-id632 . -2) 319 (318 . 319) (#("typename Tp" 0 11 (fontified nil)) . 318) (317 . 318) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 317 335 nil nil nil t nil)) nil 21 nil #s(yas--field 1 317 335 nil nil nil t nil) nil nil)) (310 . 329) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 310) (310 . 334) (#("v" 0 1 (fontified nil)) . 310) (310 . 311) (#("vector<typename Tp, typename Alloc>" 0 35 (fontified nil)) . -310) (310 . 345) (#("vecto" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -310) (undo-tree-id633 . -5) (undo-tree-id634 . -5) 315 (310 . 315) (308 . 310) (305 . 308) (#("st" 0 2 (fontified nil)) . 305) (305 . 307) (#("std" 0 3 (fontified nil)) . -305) (305 . 308) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -305) (undo-tree-id635 . -2) (undo-tree-id636 . -2) 307 (305 . 307) (304 . 305) (299 . 304) (#("token" 0 5 (fontified nil)) . -299) (299 . 304) (297 . 299) (286 . 297) (#("to" 0 2 (fontified nil)) . 286) (286 . 288) (#("token_class" 0 11 (fontified nil)) . -286) (286 . 297) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -286) (undo-tree-id637 . -3) (undo-tree-id638 . -3) 289 (286 . 289) (282 . 287) (271 . 277) (#("    " 0 4 (fontified nil)) . 271) (279 . 280) (271 . 275) (#("     " 0 5 (fontified nil)) . 271) (undo-tree-id639 . -5) (undo-tree-id640 . -5) (279 . 280) (276 . 279) (#("t" 0 1 (fontified t)) . -276) (undo-tree-id641 . -1) (undo-tree-id642 . -1) 277 (276 . 277) (#(" " 0 1 (fontified t)) . 276) (t 26070 64868 773257 153000)) nil (26070 65390 719196 740000) 0 nil])
nil
([nil nil ((#("    struct synatax_dnf
" 0 4 (fontified t) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 18 (fontified t face font-lock-type-face) 18 19 (fontified t face font-lock-type-face) 19 20 (fontified t face font-lock-type-face) 20 21 (fontified t face font-lock-type-face) 21 22 (fontified t c-type c-decl-id-start face font-lock-type-face) 22 23 (fontified t)) . 242) (undo-tree-id620 . 19) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -22) 245) nil (26070 65390 719182 838000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 242) (undo-tree-id616 . 5) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -4) 245) nil (26070 65390 719180 310000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 310) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -4) 313) nil (26070 65390 719177 604000) 0 nil])
([nil nil ((326 . 327) (324 . 326) (316 . 324) (#("t" 0 1 (fontified t)) . -316) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("y" 0 1 (fontified t)) . -317) (undo-tree-id607 . -1) (undo-tree-id608 . -1) 318 (317 . 318) (#("u" 0 1 (fontified t)) . -317) (undo-tree-id609 . -1) (undo-tree-id610 . -1) 318 (315 . 318) (246 . 252) (#("st" 0 2 (fontified nil)) . 246) (246 . 248) (#("static" 0 6 (fontified nil)) . -246) (246 . 252) (#("sta" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -246) (undo-tree-id611 . -3) (undo-tree-id612 . -3) 249 (246 . 249)) nil (26070 65390 719172 252000) 0 nil])
([nil current ((#(" " 0 1 (fontified t)) . 253) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (t 26070 65390 819911 61000)) nil (26070 65423 462047 423000) 0 nil])
nil
