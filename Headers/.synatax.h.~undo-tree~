(undo-tree-save-format-version . 1)
"385c6de97163a6be3ba35e775f6a0267a2047c41"
[nil nil nil nil (26070 17710 558644 495000) 0 (:visualizer [7 0 1 #<marker in no buffer>])]
([nil nil ((70 . 71) (68 . 70) (63 . 68) (59 . 63) (#("voi" 0 3 (fontified nil)) . 59) (59 . 62) (#("void" 0 1 (fontified t c-is-sws t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . -59) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 63 (59 . 63) (58 . 58) (58 . 59) (57 . 57) (57 . 58) (57 . 57) (57 . 58) (60 . 65) (#("e" 0 1 (fontified nil)) . 60) (undo-tree-id2 . -1) (60 . 61) (#("endif" 0 5 (fontified nil)) . -60) (undo-tree-id3 . -5) (60 . 65) (#("en" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -60) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) 62 (60 . 62) (59 . 60) (58 . 58) (58 . 59) (57 . 57) (57 . 58) (56 . 56) (56 . 57) (54 . 56) (48 . 54) (#("M" 0 1 (fontified t face font-lock-variable-name-face)) . -48) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 49 (37 . 49) (apply yas--snippet-revive 30 37 #s(yas--snippet nil nil #s(yas--exit 37 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 37 nil) 34 nil nil nil nil)) (30 . 37) (#("define $0" 0 9 (fontified nil)) . 30) (undo-tree-id10 . -9) (30 . 39) (#("d" 0 1 (fontified nil)) . 30) (undo-tree-id11 . -1) (30 . 31) (#("define macro" 0 12 (fontified nil)) . -30) (undo-tree-id12 . -12) (30 . 42) (#("de" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -30) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) 32 (30 . 32) (29 . 30) (28 . 28) (28 . 29) (20 . 28) (#("M" 0 1 (fontified t)) . -20) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 21 (19 . 21) (#("O" 0 1 (fontified t)) . -19) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 20 (9 . 20) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 33 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id22 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id23 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id24 . -12) (2 . 14) (#("ifn" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face) 2 3 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) 5 (3 . 5) (#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . -3) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 4 (2 . 4) (1 . 2) (#("$" 0 1 (fontified t)) . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 2 (1 . 2) (t 26070 17144 886096 539000)) nil (26070 17710 558638 199000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((80 . 81) 70) nil (26070 17710 558578 312000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((68 . 73) (t 26070 17710 616085 210000)) nil (26070 17770 780488 79000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((apply -6 59 84 undo--wrap-and-run-primitive-undo 59 84 ((79 . 82) (59 . 62) 77)) (t 26070 17770 796084 5000)) nil (26070 62257 65885 664000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((156 . 157) (154 . 156) (144 . 154) (#("sy" 0 2 (fontified nil)) . 144) (144 . 146) (#("synax_read" 0 10 (fontified nil)) . -144) (144 . 154) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -144) (undo-tree-id0 . -2) (undo-tree-id1 . -2) 146 (144 . 146) (140 . 144) (#("  " 0 2 (fontified nil)) . -140) (undo-tree-id2 . -2) (#("  " 0 2 (fontified t)) . 142) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -132) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 133 (132 . 133) (130 . 132) (#("    " 0 4 (fontified t)) . -130) (undo-tree-id5 . -4) (undo-tree-id6 . -4) 134 (141 . 146) (apply yas--snippet-revive 134 141 #s(yas--snippet nil nil nil 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 1 nil nil nil nil)) (134 . 141) (#("public:" 0 7 (fontified nil)) . 134) (134 . 141) (#("p" 0 1 (fontified nil)) . 134) (134 . 135) (#("public:" 0 7 (fontified nil)) . -134) (134 . 141) (#("pu" 0 1 (fontified t) 1 2 (fontified t)) . -134) (undo-tree-id7 . -2) (undo-tree-id8 . -2) 136 (134 . 136) (129 . 134) (129 . 134) (138 . 139) (135 . 137) (130 . 134) (129 . 131) (126 . 128) (#("    " 0 4 (fontified nil)) . 126) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (130 . 132) (125 . 130) (120 . 125) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -120) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 121 (117 . 121) (114 . 117) (109 . 114) (#("cla" 0 3 (fontified nil)) . 109) (109 . 112) (#("class" 0 5 (fontified nil)) . -109) (109 . 114) (#("cla" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -109) (undo-tree-id13 . -3) (undo-tree-id14 . -3) 112 (109 . 112) (117 . 118) (106 . 109) (106 . 109) (#("    " 0 4 (fontified t)) . 110) (#("    " 0 4 (fontified t)) . 105) (105 . 109) (104 . 104) (104 . 105) (#(" " 0 1 (fontified t)) . 104) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 105 (apply yas--snippet-revive 83 115 #s(yas--snippet nil (#s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil))) #s(yas--exit 109 nil) 0 nil #s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil)) nil nil)) (95 . 104) (94 . 95) (#("identifier" 0 10 (face font-lock-variable-name-face fontified nil)) . 94) (93 . 94) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil))) #s(yas--exit 109 nil) 0 nil #s(yas--field 1 93 104 nil nil nil t #s(yas--exit 109 nil)) nil nil)) (83 . 114) (#("namespace ${1:identifier} {
  $0
    }" 0 1 (fontified nil c-is-sws t) 1 38 (fontified nil)) . 83) (116 . 120) (111 . 113) (83 . 115) (#("na" 0 1 (fontified nil c-is-sws t) 1 2 (fontified nil)) . 83) (83 . 85) (#("namespace identifier {declarations}" 0 1 (fontified nil c-is-sws t) 1 35 (fontified nil)) . -83) (83 . 118) (#("na" 0 1 (c-is-sws t fontified t) 1 2 (fontified t)) . -83) (undo-tree-id17 . -2) (undo-tree-id18 . -2) 85 (83 . 85) (82 . 83) 59) nil (26070 62257 65878 735000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((150 . 152) (119 . 121) (t 26070 62257 79987 495000)) nil (26070 62449 418214 73000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((86 . 101) (nil syntax-table nil 86 . 87) (nil syntax-table (1) 85 . 86) (#("sy\"" 0 2 (fontified nil c-in-sws t) 2 3 (c-in-sws t face font-lock-string-face fontified nil)) . 86) (undo-tree-id82 . -3) (undo-tree-id83 . 1) (undo-tree-id84 . -3) (86 . 88) (#("synatax_tree.h\"" 0 15 (fontified nil)) . -86) (nil syntax-table nil 102 . 103) (nil syntax-table (1) 101 . 102) (86 . 101) (#("sy" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -86) (undo-tree-id85 . -2) (undo-tree-id86 . -2) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -2) (undo-tree-id96 . -2) (undo-tree-id97 . -2) 88 (86 . 88) (apply yas--snippet-revive 77 87 #s(yas--snippet nil nil #s(yas--exit 86 nil) 14 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 86 nil) 14 nil nil nil nil)) (77 . 87) (#("include \"$0\"" 0 12 (fontified nil)) . 77) (undo-tree-id98 . -12) (77 . 89) (#("i" 0 1 (fontified nil c-in-sws t)) . 77) (undo-tree-id99 . -1) (77 . 78) (#("include \"header\"" 0 16 (fontified nil)) . -77) (undo-tree-id100 . -16) (77 . 93) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -77) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -2) 79 (77 . 79) (76 . 77) (75 . 75) (75 . 76) (67 . 75) (nil syntax-table nil 67 . 68) (nil syntax-table (1) 66 . 67) (#("t\"" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face font-lock-string-face fontified nil)) . 67) (undo-tree-id104 . -2) (67 . 68) (#("token.h\"" 0 8 (fontified nil)) . -67) (nil syntax-table nil 76 . 77) (nil syntax-table (1) 75 . 76) (67 . 75) (#("tok" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -67) (undo-tree-id105 . -3) (undo-tree-id106 . -3) 70 (67 . 70) (apply yas--snippet-revive 58 68 #s(yas--snippet nil nil #s(yas--exit 67 nil) 13 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 67 nil) 13 nil nil nil nil)) (58 . 68) (#("include \"$0\"" 0 12 (fontified nil)) . 58) (undo-tree-id107 . -12) (58 . 70) (#("i" 0 1 (fontified nil c-in-sws t)) . 58) (undo-tree-id108 . -1) (58 . 59) (#("include \"header\"" 0 16 (fontified nil)) . -58) (undo-tree-id109 . -16) (58 . 74) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -58) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) 60 (58 . 60) (57 . 58) (57 . 57) (57 . 58) (161 . 166) (t 26070 62449 423316 136000) 151) nil (26070 64500 499246 648000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((305 . 306) (299 . 304) (#("token" 0 5 (fontified nil)) . -299) (299 . 304) (297 . 299) (286 . 297) (#("to" 0 2 (fontified nil)) . 286) (286 . 288) (#("token_class" 0 11 (fontified nil)) . -286) (286 . 297) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -286) (undo-tree-id19 . -2) (undo-tree-id20 . -2) 288 (286 . 288) (#("y" 0 1 (fontified t)) . -286) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 287 (286 . 287) (285 . 287) (283 . 285) (275 . 283) (#("o" 0 1 (fontified nil)) . 275) (275 . 276) (#("operator" 0 8 (fontified nil)) . -275) (275 . 283) (#("op" 0 1 (fontified t) 1 2 (fontified t)) . -275) (undo-tree-id23 . -2) (undo-tree-id24 . -2) 277 (274 . 277) (apply yas--snippet-revive 229 274 #s(yas--snippet nil (#s(yas--field 1 241 273 nil nil nil t nil)) nil 16 nil #s(yas--field 1 241 273 nil nil nil t nil) nil nil)) (261 . 273) (#("synatax_tree" 0 12 (fontified nil)) . -261) (261 . 273) (259 . 261) (241 . 259) (#("sy" 0 2 (fontified nil)) . 241) (241 . 243) (#("synatax_tree_class" 0 18 (fontified nil)) . -241) (241 . 259) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -241) (undo-tree-id25 . -2) (undo-tree-id26 . -2) 243 (241 . 243) (#("t" 0 1 (fontified t)) . -241) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("o" 0 1 (fontified t)) . -242) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("k" 0 1 (fontified t)) . -243) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("e" 0 1 (fontified t)) . -244) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("n" 0 1 (fontified t)) . -245) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("_" 0 1 (fontified t)) . -246) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("c" 0 1 (fontified t)) . -247) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("l" 0 1 (fontified t)) . -248) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t)) . -249) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("s" 0 1 (fontified t)) . -250) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("s" 0 1 (fontified t)) . -251) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#(":" 0 1 (fontified t)) . -252) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#(":" 0 1 (fontified t)) . -253) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("t" 0 1 (fontified t)) . -254) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("o" 0 1 (fontified t)) . -255) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("k" 0 1 (fontified t)) . -256) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("e" 0 1 (fontified t)) . -257) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("n" 0 1 (fontified t)) . -258) (undo-tree-id61 . -1) (undo-tree-id62 . -1) 259 (254 . 259) (#("token" 0 5 (fontified nil)) . -254) (254 . 259) (252 . 254) (241 . 252) (#("t" 0 1 (fontified nil)) . 241) (241 . 242) (#("token_class" 0 11 (fontified nil)) . -241) (241 . 252) (#("t" 0 1 (fontified t)) . -241) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 242 (#("typename Tp" 0 11 (fontified nil)) . 242) (241 . 242) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 241 273 nil nil nil t nil)) nil 16 nil #s(yas--field 1 241 273 nil nil nil t nil) nil nil)) (229 . 253) (#("std::vector<${1:typename Tp}>" 0 29 (fontified nil)) . 229) (229 . 258) (#("v" 0 1 (fontified nil)) . 229) (229 . 230) (#("std::vector<typename Tp, typename Alloc>" 0 40 (fontified nil)) . -229) (229 . 269) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -229) (undo-tree-id65 . -3) (undo-tree-id66 . -3) 232 (229 . 232) (112 . 119) (#("v>" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60) fontified nil)) . 112) (undo-tree-id67 . -2) (nil fontified nil 112 . 113) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 112 . 113) (nil c-in-sws t 112 . 113) (112 . 113) (#("vector>" 0 7 (fontified nil c-in-sws t)) . -112) (nil fontified nil 112 . 119) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 112 . 119) (nil c-in-sws t 112 . 119) (112 . 119) (#("vec" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t) 2 3 (face font-lock-string-face c-in-sws t fontified t)) . -112) (undo-tree-id68 . -3) (undo-tree-id69 . -3) 115 (112 . 115) (apply yas--snippet-revive 103 113 #s(yas--snippet nil nil #s(yas--exit 112 nil) 15 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 112 nil) 15 nil nil nil nil)) (103 . 113) (#("include <$0>" 0 12 (fontified nil)) . 103) (undo-tree-id70 . -12) (103 . 115) (#("i" 0 1 (fontified nil c-in-sws t)) . 103) (undo-tree-id71 . -1) (103 . 104) (#("include <header>" 0 16 (fontified nil)) . -103) (undo-tree-id72 . -16) (103 . 119) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -103) (undo-tree-id73 . -2) (undo-tree-id74 . -2) (undo-tree-id75 . -2) 105 (104 . 105) (#("i" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -104) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 105 (#("i" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -105) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 106 (103 . 106) (102 . 103) (102 . 102) (102 . 103)) nil (26070 64500 499096 11000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((311 . 316) (t 26070 64500 513266 130000) 310) nil (26070 64515 178893 335000) 0 (:visualizer [7 0 1 #<marker in no buffer>])])
([nil nil ((130 . 141) (#("f>" 0 1 (fontified nil c-in-sws t) 1 2 (c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60) fontified nil)) . 130) (undo-tree-id176 . -2) (undo-tree-id177 . 1) (nil fontified nil 130 . 131) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 130 . 131) (nil c-in-sws t 130 . 131) (130 . 131) (#("functional>" 0 11 (fontified nil c-in-sws t)) . -130) (nil fontified nil 130 . 141) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 130 . 141) (nil c-in-sws t 130 . 141) (130 . 141) (#("fu" 0 1 (face font-lock-string-face c-in-sws t fontified t) 1 2 (face font-lock-string-face c-in-sws t fontified t)) . -130) (undo-tree-id178 . -2) (undo-tree-id179 . -2) 132 (130 . 132) (apply yas--snippet-revive 121 131 #s(yas--snippet nil nil #s(yas--exit 130 nil) 18 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 130 nil) 18 nil nil nil nil)) (121 . 131) (#("include <$0>" 0 12 (fontified nil)) . 121) (undo-tree-id180 . -12) (121 . 133) (#("i" 0 1 (fontified nil c-in-sws t)) . 121) (undo-tree-id181 . -1) (121 . 122) (#("include <header>" 0 16 (fontified nil)) . -121) (undo-tree-id182 . -16) (121 . 137) (#("i" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -121) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) 122 (121 . 122) (120 . 121) (120 . 120) (120 . 121) (322 . 327) (312 . 314) (#("    " 0 4 (fontified t)) . 312) 324 (apply yas--snippet-revive 316 324 #s(yas--snippet nil nil nil 17 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil nil 17 nil nil nil nil)) (316 . 324) (#("private:" 0 8 (fontified nil)) . 316) (316 . 324) (#("p" 0 1 (fontified nil)) . 316) (316 . 317) (#("private:" 0 8 (fontified nil)) . -316) (316 . 324) (#("pr" 0 1 (fontified t) 1 2 (fontified t)) . -316) (undo-tree-id186 . -2) (undo-tree-id187 . -2) 318 (316 . 318)) nil (26070 64567 105682 258000) 0 (:visualizer [6 0 1 #<marker in no buffer>])] [nil nil ((316 . 317)) ((#("o" 0 1 (fontified t)) . 316) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1)) (26070 64515 176744 115000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((349 . 350)) nil (26070 64567 105670 384000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
nil
([nil nil ((#("f" 0 1 (fontified t)) . -349) (undo-tree-id174 . -1) (undo-tree-id175 . -1) 350) nil (26070 64567 105669 703000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((349 . 350)) nil (26070 64567 105668 147000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((349 . 352) (#("s" 0 1 (fontified nil)) . 349) (349 . 350) (#("std" 0 3 (fontified nil)) . -349) (349 . 352) (#("s" 0 1 (fontified t)) . -349) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 350) nil (26070 64567 105667 217000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((345 . 349) (#("  " 0 2 (fontified nil)) . 345) (351 . 352) (345 . 347) (#("    " 0 4 (fontified nil)) . 345) (352 . 353)) nil (26070 64596 959735 99000) 0 (:visualizer [6 0 1 #<marker in no buffer>])])
([nil nil ((349 . 351)) nil (26070 64604 795937 586000) 0 (:visualizer [5 0 1 #<marker in no buffer>])] [nil nil ((354 . 356)) ((#("fu" 0 1 (fontified t) 1 2 (fontified t)) . 354) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -2) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) (undo-tree-id491 . -2) (undo-tree-id492 . -2) (undo-tree-id493 . -2) (undo-tree-id494 . -2) (undo-tree-id495 . -2) (undo-tree-id496 . -2) (undo-tree-id497 . -2) (undo-tree-id498 . -2) (undo-tree-id499 . -2) (undo-tree-id500 . -2) (undo-tree-id501 . -2) (undo-tree-id502 . -2) (undo-tree-id503 . -2) (undo-tree-id504 . -2) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -2) (undo-tree-id518 . -2) (undo-tree-id519 . -2) (undo-tree-id520 . -2) (undo-tree-id521 . -2) (undo-tree-id522 . -2) (undo-tree-id523 . -2) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2) (undo-tree-id552 . -2) (undo-tree-id553 . -2) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -2) (undo-tree-id566 . -2) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -2)) (26070 64596 96631 871000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((231 . 237) (#("c" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -231) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (#("l" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -232) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("a" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -233) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("s" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -234) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("s" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -235) (undo-tree-id580 . -1) 236 (267 . 268) (262 . 266) 263 (255 . 261) (254 . 256) (249 . 253) (#("      " 0 6 (fontified nil)) . 249) (undo-tree-id581 . -6) (undo-tree-id582 . -6) (255 . 257) (248 . 255) (245 . 248) (#("f" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -245) (undo-tree-id583 . -1) (undo-tree-id584 . -1) 246 (245 . 246) (#("f" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -245) (undo-tree-id585 . -1) (undo-tree-id586 . -1) 246 (245 . 246) (#("r" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -245) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#("e" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -246) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (#("a" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -247) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (#("d" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -248) (undo-tree-id593 . -1) (undo-tree-id594 . -1) 249 (237 . 249) (#("s" 0 1 (fontified nil)) . 237) (237 . 238) (#("synatax_read" 0 12 (fontified nil)) . -237) (237 . 249) (#("sy" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -237) (undo-tree-id595 . -2) (undo-tree-id596 . -2) 239 (237 . 239) (236 . 237) (231 . 236) (#("cl" 0 2 (fontified nil)) . 231) (231 . 233) (#("class" 0 5 (fontified nil)) . -231) (231 . 236) (#("cl" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -231) (undo-tree-id597 . -2) (undo-tree-id598 . -2) 233 (231 . 233) (227 . 231) (227 . 228) 232 (t 26070 64604 803263 582000)) nil (26070 64739 545472 351000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil)) (354 . 382) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 354) (354 . 387) (#("f" 0 1 (fontified nil)) . 354) (354 . 355) (#("function<typename Signature>" 0 28 (fontified nil)) . -354) (354 . 382) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -354) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) 356) ((354 . 356) (#("function<typename Signature>" 0 28 (fontified nil)) . 354) (354 . 382) (#("f" 0 1 (fontified nil)) . 354) (354 . 355) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 354) (354 . 387) (#("function<typename Signature>" 0 28 (fontified t)) . 354) (undo-tree-id188 . -9) (undo-tree-id189 . -9) (undo-tree-id190 . -9) (undo-tree-id191 . -18) (undo-tree-id192 . -27) (undo-tree-id193 . -18) (undo-tree-id194 . -27) (undo-tree-id195 . -9) (undo-tree-id196 . -9) (undo-tree-id197 . -9) (undo-tree-id198 . -9) (undo-tree-id199 . -9) (undo-tree-id200 . -9) (undo-tree-id201 . -9) (undo-tree-id202 . -9) (undo-tree-id203 . -9) (undo-tree-id204 . -9) (undo-tree-id205 . -9) (undo-tree-id206 . -9) (undo-tree-id207 . -9) (undo-tree-id208 . -9) (undo-tree-id209 . -9) (undo-tree-id210 . -9) (undo-tree-id211 . -9) (undo-tree-id212 . -9) (undo-tree-id213 . -9) (undo-tree-id214 . -9) (undo-tree-id215 . -9) (undo-tree-id216 . -9) (undo-tree-id217 . -9) (undo-tree-id218 . -9) (undo-tree-id219 . -9) (undo-tree-id220 . -9) (undo-tree-id221 . -9) (undo-tree-id222 . -9) (undo-tree-id223 . -9) (undo-tree-id224 . -9) (undo-tree-id225 . -9) (undo-tree-id226 . -9) (undo-tree-id227 . -9) (undo-tree-id228 . -9) (undo-tree-id229 . -9) (undo-tree-id230 . -9) (undo-tree-id231 . -9) (undo-tree-id232 . -9) (undo-tree-id233 . -9) (undo-tree-id234 . -9) (undo-tree-id235 . -9) (undo-tree-id236 . -9) (undo-tree-id237 . -9) (undo-tree-id238 . -9) (undo-tree-id239 . -9) (undo-tree-id240 . -9) (undo-tree-id241 . -9) (undo-tree-id242 . -9) (undo-tree-id243 . -9) (undo-tree-id244 . -9) (undo-tree-id245 . -9) (undo-tree-id246 . -9) (undo-tree-id247 . -9) (undo-tree-id248 . -9) (undo-tree-id249 . -9) (undo-tree-id250 . -9) (undo-tree-id251 . -9) (undo-tree-id252 . -9) (undo-tree-id253 . -9) (undo-tree-id254 . -9) (undo-tree-id255 . -9) (undo-tree-id256 . -9) (undo-tree-id257 . -9) (undo-tree-id258 . -9) (undo-tree-id259 . -9) (undo-tree-id260 . -9) (undo-tree-id261 . -9) (undo-tree-id262 . -9) (undo-tree-id263 . -9) (undo-tree-id264 . -9) (undo-tree-id265 . -9) (undo-tree-id266 . -9) (undo-tree-id267 . -9) (undo-tree-id268 . -9) (undo-tree-id269 . -9) (undo-tree-id270 . -9) (undo-tree-id271 . -9) (undo-tree-id272 . -9) (undo-tree-id273 . -9) (undo-tree-id274 . -9) (undo-tree-id275 . -9) (undo-tree-id276 . -9) (undo-tree-id277 . -9) (undo-tree-id278 . -9) (undo-tree-id279 . -9) (undo-tree-id280 . -9) (undo-tree-id281 . -9) (undo-tree-id282 . -9) (undo-tree-id283 . -9) (undo-tree-id284 . -9) (undo-tree-id285 . -9) (undo-tree-id286 . -9) (undo-tree-id287 . -9) (undo-tree-id288 . -9) (undo-tree-id289 . -9) (undo-tree-id290 . -9) (undo-tree-id291 . -9) (undo-tree-id292 . -9) (undo-tree-id293 . -9) (undo-tree-id294 . -9) (undo-tree-id295 . -9) (undo-tree-id296 . -9) (undo-tree-id297 . -9) (undo-tree-id298 . -9) (undo-tree-id299 . -9) (undo-tree-id300 . -9) (undo-tree-id301 . -9) (undo-tree-id302 . -9) (undo-tree-id303 . -9) (undo-tree-id304 . -9) (undo-tree-id305 . -9) (undo-tree-id306 . -9) (undo-tree-id307 . -9) (undo-tree-id308 . -9) (undo-tree-id309 . -9) (undo-tree-id310 . -9) (undo-tree-id311 . -9) (undo-tree-id312 . -9) (undo-tree-id313 . -9) (undo-tree-id314 . -9) (undo-tree-id315 . -9) (undo-tree-id316 . -9) (undo-tree-id317 . -9) (undo-tree-id318 . -9) (undo-tree-id319 . -9) (undo-tree-id320 . -9) (undo-tree-id321 . -9) (undo-tree-id322 . -9) (undo-tree-id323 . -9) (undo-tree-id324 . -9) (undo-tree-id325 . -9) (undo-tree-id326 . -9) (undo-tree-id327 . -9) (apply yas--snippet-revive 354 382 #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil))) (26070 64567 105726 525000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((152 . 155) (apply yas--snippet-revive 143 153 #s(yas--snippet nil nil #s(yas--exit 152 nil) 20 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 152 nil) 20 nil nil nil nil)) (143 . 153) (#("include <$0>" 0 12 (fontified nil)) . 143) (undo-tree-id599 . -12) (143 . 155) (#("i" 0 1 (fontified nil c-in-sws t)) . 143) (undo-tree-id600 . -1) (143 . 144) (#("include <header>" 0 16 (fontified nil)) . -143) (undo-tree-id601 . -16) (143 . 159) (#("in" 0 1 (face font-lock-preprocessor-face c-in-sws t fontified t) 1 2 (face font-lock-preprocessor-face c-in-sws t fontified t)) . -143) (undo-tree-id602 . -2) (undo-tree-id603 . -2) (undo-tree-id604 . -2) 145 (143 . 145) (142 . 143) (nil face (rainbow-delimiters-depth-1-face font-lock-string-face) 141 . 142) (nil fontified t 141 . 142) (nil c-in-sws t 141 . 142) (141 . 142) (t 26070 64739 553260 301000) 125) nil (26070 64868 764013 436000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 354 382 #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil))) ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 363 381 nil nil nil nil nil)) nil 19 nil #s(yas--field 1 363 381 nil nil nil nil nil) nil nil))) (26070 64567 104550 227000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -269) (undo-tree-id624 . -1) 270 (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -343) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . 1) (undo-tree-id628 . -1) (#(";" 0 1 (fontified t)) . -344) (undo-tree-id629 . -1) (undo-tree-id630 . -1) 345 (337 . 338) (apply yas--snippet-revive 310 336 #s(yas--snippet nil (#s(yas--field 1 317 335 nil nil nil t nil)) nil 21 nil #s(yas--field 1 317 335 nil nil nil t nil) nil nil)) (317 . 335) (#("to" 0 2 (fontified nil)) . 317) (317 . 319) (#("token_class::token" 0 18 (fontified nil)) . -317) (317 . 335) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -317) (undo-tree-id631 . -2) (undo-tree-id632 . -2) 319 (318 . 319) (#("typename Tp" 0 11 (fontified nil)) . 318) (317 . 318) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 317 335 nil nil nil t nil)) nil 21 nil #s(yas--field 1 317 335 nil nil nil t nil) nil nil)) (310 . 329) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 310) (310 . 334) (#("v" 0 1 (fontified nil)) . 310) (310 . 311) (#("vector<typename Tp, typename Alloc>" 0 35 (fontified nil)) . -310) (310 . 345) (#("vecto" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -310) (undo-tree-id633 . -5) (undo-tree-id634 . -5) 315 (310 . 315) (308 . 310) (305 . 308) (#("st" 0 2 (fontified nil)) . 305) (305 . 307) (#("std" 0 3 (fontified nil)) . -305) (305 . 308) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -305) (undo-tree-id635 . -2) (undo-tree-id636 . -2) 307 (305 . 307) (304 . 305) (299 . 304) (#("token" 0 5 (fontified nil)) . -299) (299 . 304) (297 . 299) (286 . 297) (#("to" 0 2 (fontified nil)) . 286) (286 . 288) (#("token_class" 0 11 (fontified nil)) . -286) (286 . 297) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -286) (undo-tree-id637 . -3) (undo-tree-id638 . -3) 289 (286 . 289) (282 . 287) (271 . 277) (#("    " 0 4 (fontified nil)) . 271) (279 . 280) (271 . 275) (#("     " 0 5 (fontified nil)) . 271) (undo-tree-id639 . -5) (undo-tree-id640 . -5) (279 . 280) (276 . 279) (#("t" 0 1 (fontified t)) . -276) (undo-tree-id641 . -1) (undo-tree-id642 . -1) 277 (276 . 277) (#(" " 0 1 (fontified t)) . 276) (t 26070 64868 773257 153000)) nil (26070 65390 719196 740000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
nil
([nil nil ((#("    struct synatax_dnf
" 0 4 (fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (face font-lock-keyword-face fontified t) 7 8 (face font-lock-keyword-face fontified t) 8 9 (face font-lock-keyword-face fontified t) 9 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 18 (face font-lock-type-face fontified t) 18 19 (face font-lock-type-face fontified t) 19 20 (face font-lock-type-face fontified t) 20 21 (face font-lock-type-face fontified t) 21 22 (face font-lock-type-face c-type c-decl-id-start fontified t) 22 23 (fontified t)) . 242) (undo-tree-id620 . 19) (undo-tree-id621 . -3) (undo-tree-id622 . -3) (undo-tree-id623 . -22) 245) nil (26070 65390 719182 838000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 242) (undo-tree-id616 . 5) (undo-tree-id617 . -3) (undo-tree-id618 . -3) (undo-tree-id619 . -4) 245) nil (26070 65390 719180 310000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 310) (undo-tree-id613 . -3) (undo-tree-id614 . -3) (undo-tree-id615 . -4) 313) nil (26070 65390 719177 604000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((326 . 327) (324 . 326) (316 . 324) (#("t" 0 1 (fontified t)) . -316) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (#("y" 0 1 (fontified t)) . -317) (undo-tree-id607 . -1) (undo-tree-id608 . -1) 318 (317 . 318) (#("u" 0 1 (fontified t)) . -317) (undo-tree-id609 . -1) (undo-tree-id610 . -1) 318 (315 . 318) (246 . 252) (#("st" 0 2 (fontified nil)) . 246) (246 . 248) (#("static" 0 6 (fontified nil)) . -246) (246 . 252) (#("sta" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -246) (undo-tree-id611 . -3) (undo-tree-id612 . -3) 249 (246 . 249)) nil (26070 65390 719172 252000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 253) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (t 26070 65390 819911 61000)) nil (26070 65423 462047 423000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((231 . 236) (t 26070 65423 479910 264000) 228) nil (26072 17478 286173 870000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((327 . 328) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -327) (undo-tree-id0 . -1) 328 (t 26072 17478 313320 585000)) nil (26072 17644 171680 254000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("t" 0 1 (fontified t)) . -319) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("o" 0 1 (fontified t)) . -320) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("k" 0 1 (fontified t)) . -321) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (#("e" 0 1 (fontified t)) . -322) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("n" 0 1 (fontified t)) . -323) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 324 (315 . 324) (#("_" 0 1 (fontified nil)) . 315) (315 . 316) (#("bnf_token" 0 9 (fontified nil)) . -315) (315 . 324) (#("_" 0 1 (fontified t)) . -315) (undo-tree-id11 . -1) (undo-tree-id12 . -1) 316 (315 . 316) (#("_" 0 1 (fontified t)) . -283) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("t" 0 1 (fontified t)) . -284) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("o" 0 1 (fontified t)) . -285) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("k" 0 1 (fontified t)) . -286) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("e" 0 1 (fontified t)) . -287) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("n" 0 1 (fontified t)) . -288) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 289 (280 . 289) (#("bnf_token" 0 9 (fontified nil)) . -280) (280 . 289) (280 . 281) (t 26072 17644 183316 555000)) nil (26072 18236 323031 847000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("    static std::map<token_class::bnf_token,std::vector<token_class::bnf_token>> synatax_bnf;
" 0 4 (fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 14 (fontified t face font-lock-constant-face) 14 16 (fontified t) 16 19 (fontified t face font-lock-type-face) 19 20 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-3-face)) 20 31 (fontified t face font-lock-constant-face) 31 33 (fontified t) 33 36 (fontified t) 36 37 (fontified t) 37 42 (fontified t) 42 43 (fontified t c-type c-<>-arg-sep) 43 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 55 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-4-face)) 55 66 (fontified t face font-lock-constant-face) 66 68 (fontified t) 68 72 (fontified t) 72 77 (fontified t) 77 78 (fontified t syntax-table (5 . 60) face (rainbow-delimiters-depth-4-face)) 78 79 (fontified t syntax-table (5 . 60) c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 79 80 (fontified t) 80 88 (fontified t face font-lock-variable-name-face) 88 89 (fontified t face font-lock-variable-name-face) 89 91 (fontified t face font-lock-variable-name-face) 91 92 (fontified t c-type c-decl-id-start) 92 93 (fontified t)) . 247) (undo-tree-id31 . 21) (undo-tree-id32 . -71) (undo-tree-id33 . -71) (undo-tree-id34 . -80) (undo-tree-id35 . -92) 318 (t 26072 18236 336635 549000)) nil (26072 18543 909033 676000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 368 . 369) (#("
" 0 1 (fontified nil)) . -457) (364 . 458) 363) nil (26072 18543 909028 152000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("A" 0 1 (fontified t)) . -236) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("A" 0 1 (fontified t)) . -237) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 238 (236 . 238)) nil (26072 18543 909026 270000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((430 . 439) (#("bnf_token" 0 9 (fontified nil)) . -430) (430 . 439) (428 . 430) (nil face (rainbow-delimiters-depth-4-face) 417 . 428) (nil fontified nil 417 . 428) (417 . 428) (#("to" 0 2 (fontified nil)) . 417) (nil face (rainbow-delimiters-depth-4-face) 417 . 419) (nil fontified nil 417 . 419) (417 . 419) (#("token_class" 0 11 (fontified nil)) . -417) (nil face (rainbow-delimiters-depth-4-face) 417 . 428) (nil fontified nil 417 . 428) (417 . 428) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -417) (undo-tree-id25 . -2) (undo-tree-id26 . -2) 419 (417 . 419) (417 . 418) (413 . 416) (411 . 413) (408 . 411) (408 . 409) (444 . 445)) nil (26072 18899 590451 767000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("token" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 307) (298 . 307) (#("_" 0 1 (fontified nil)) . 298) (298 . 299) (#("bnf_token" 0 9 (fontified nil)) . 298) (298 . 307) (#("_" 0 1 (fontified nil)) . 298) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (298 . 299) (317 . 326) (#("bnf_token" 0 9 (fontified nil)) . 317) (317 . 326) (#("b" 0 1 (fontified nil)) . 317) (304 . 318) (#("to" 0 2 (fontified nil)) . 304) (304 . 306) (#("token_class" 0 11 (fontified nil)) . 304) (304 . 315) (#("to" 0 1 (fontified nil) 1 2 (fontified nil)) . 304) (304 . 306) (285 . 303) (#("to" 0 2 (fontified nil)) . 285) (285 . 287) (#("token_class::token" 0 18 (fontified nil)) . 285) (285 . 303) (#("tok" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 285) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (285 . 288) (287 . 288) (285 . 286) (271 . 286) (apply yas--snippet-revive 241 271 #s(yas--snippet nil (#s(yas--field 1 248 248 nil nil nil t nil)) nil 5 nil #s(yas--field 1 248 248 nil nil nil t nil) nil nil)) (261 . 270) (#("bnf_token" 0 9 (fontified nil)) . 261) (259 . 270) (nil face (rainbow-delimiters-depth-3-face) 248 . 259) (248 . 259) (#("to" 0 2 (fontified nil face nil)) . 248) (undo-tree-id692 . 2) (nil face (rainbow-delimiters-depth-3-face) 248 . 250) (248 . 250) (#("token_class" 0 11 (fontified nil face nil)) . 248) (undo-tree-id693 . 11) (nil face (rainbow-delimiters-depth-3-face) 248 . 259) (248 . 259) (#("to" 0 1 (fontified nil) 1 2 (fontified nil)) . 248) (undo-tree-id694 . 1) (undo-tree-id695 . -1) (249 . 250) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 249) (undo-tree-id696 . 11) (undo-tree-id697 . -1) (undo-tree-id698 . 11) (248 . 249) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 248 248 nil nil nil t nil)) nil 5 nil #s(yas--field 1 248 248 nil nil nil t nil) nil nil)) (241 . 260) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 241) (241 . 265) (#("v" 0 1 (fontified nil)) . 241) (241 . 242) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (fontified nil syntax-table (4 . 62)) 7 18 (fontified nil) 18 19 (fontified nil c-type c-<>-arg-sep) 19 34 (fontified nil) 34 35 (fontified nil syntax-table (5 . 60))) . 241) (241 . 276) (#("vec" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 241) (undo-tree-id699 . -3) (undo-tree-id700 . -3) (241 . 244) (232 . 236) (#("  " 0 2 (fontified nil)) . 232) (238 . 239) (232 . 234) (#("    " 0 4 (fontified nil)) . 232) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -4) (undo-tree-id713 . -4) (undo-tree-id714 . -4) (undo-tree-id715 . -4) (undo-tree-id716 . -4) (undo-tree-id717 . -4) (undo-tree-id718 . -4) (undo-tree-id719 . -4) (undo-tree-id720 . -4) (undo-tree-id721 . -4) (undo-tree-id722 . -4) (undo-tree-id723 . -4) (undo-tree-id724 . -4) (undo-tree-id725 . -4) (undo-tree-id726 . -4) (undo-tree-id727 . -4) (undo-tree-id728 . -4) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -4) (undo-tree-id732 . -4) (undo-tree-id733 . -4) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -4) (undo-tree-id743 . -4) (undo-tree-id744 . -4) (undo-tree-id745 . -4) (undo-tree-id746 . -4) (undo-tree-id747 . -4) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (undo-tree-id752 . -4) (undo-tree-id753 . -4) (undo-tree-id754 . -4) (undo-tree-id755 . -4) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) (undo-tree-id762 . -4) (undo-tree-id763 . -4) (undo-tree-id764 . -4) (undo-tree-id765 . -4) (undo-tree-id766 . -4) (undo-tree-id767 . -4) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) (undo-tree-id772 . -4) (undo-tree-id773 . -4) (undo-tree-id774 . -4) (undo-tree-id775 . -4) (undo-tree-id776 . -4) (undo-tree-id777 . -4) (undo-tree-id778 . -4) (undo-tree-id779 . -4) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) (undo-tree-id784 . -4) (undo-tree-id785 . -4) (undo-tree-id786 . -4) (undo-tree-id787 . -4) (undo-tree-id788 . -4) (undo-tree-id789 . -4) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -4) (undo-tree-id896 . -4) (undo-tree-id897 . -4) (undo-tree-id898 . -4) (undo-tree-id899 . -4) (undo-tree-id900 . -4) (undo-tree-id901 . -4) (undo-tree-id902 . -4) (undo-tree-id903 . -4) (undo-tree-id904 . -4) (undo-tree-id905 . -4) (undo-tree-id906 . -4) (undo-tree-id907 . -4) (undo-tree-id908 . -4) (undo-tree-id909 . -4) (undo-tree-id910 . -4) (undo-tree-id911 . -4) (undo-tree-id912 . -4) (undo-tree-id913 . -4) (undo-tree-id914 . -4) (undo-tree-id915 . -4) (undo-tree-id916 . -4) (236 . 240) (#("st" 0 2 (fontified nil)) . 236) (236 . 238) (#("std" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 236) (undo-tree-id917 . -3) (undo-tree-id918 . -3) (236 . 239)) ((#("std" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 236) (undo-tree-id123 . -3) (undo-tree-id124 . -3) (236 . 239) (#("st" 0 2 (fontified nil)) . 236) (236 . 238) (#("std" 0 3 (fontified nil face font-lock-constant-face)) . 236) (undo-tree-id125 . -3) (undo-tree-id126 . -3) (undo-tree-id127 . -3) (undo-tree-id128 . -3) (undo-tree-id129 . -3) (undo-tree-id130 . -3) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -3) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -3) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (undo-tree-id165 . -3) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -3) (undo-tree-id173 . -3) (undo-tree-id174 . -3) (undo-tree-id175 . -3) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (undo-tree-id180 . -3) (undo-tree-id181 . -3) (undo-tree-id182 . -3) (undo-tree-id183 . -3) (undo-tree-id184 . -3) (undo-tree-id185 . -3) (undo-tree-id186 . -3) (#(":" 0 1 (fontified nil)) . 239) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (232 . 236) (#("  " 0 2 (fontified nil)) . 232) (#(":" 0 1 (fontified nil)) . 238) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (232 . 234) (#("    " 0 4 (fontified nil)) . 232) (#("vec" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 241) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (241 . 244) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (fontified nil syntax-table (4 . 62)) 7 18 (fontified nil) 18 19 (fontified nil c-type c-<>-arg-sep) 19 34 (fontified nil) 34 35 (fontified nil syntax-table (5 . 60))) . 241) (241 . 276) (#("v" 0 1 (fontified nil)) . 241) (241 . 242) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 241) (241 . 265) (#("vector<typename Tp>" 0 6 (fontified nil face font-lock-type-face) 6 7 (fontified nil face (rainbow-delimiters-depth-3-face) syntax-table (4 . 62)) 7 15 (fontified nil face font-lock-keyword-face) 15 16 (fontified nil) 16 18 (fontified nil face font-lock-type-face) 18 19 (fontified nil face (rainbow-delimiters-depth-3-face) syntax-table (5 . 60))) . 241) (undo-tree-id313 . -19) (undo-tree-id314 . -7) (undo-tree-id315 . -19) (undo-tree-id316 . -19) (undo-tree-id317 . -19) (undo-tree-id318 . -19) (undo-tree-id319 . -19) (undo-tree-id320 . -19) (undo-tree-id321 . -19) (undo-tree-id322 . -19) (undo-tree-id323 . -19) (undo-tree-id324 . -19) (undo-tree-id325 . -19) (undo-tree-id326 . -19) (undo-tree-id327 . -19) (undo-tree-id328 . -19) (undo-tree-id329 . -19) (undo-tree-id330 . -19) (undo-tree-id331 . -19) (undo-tree-id332 . -19) (undo-tree-id333 . -19) (undo-tree-id334 . -19) (undo-tree-id335 . -19) (undo-tree-id336 . -19) (undo-tree-id337 . -19) (undo-tree-id338 . -19) (undo-tree-id339 . -19) (undo-tree-id340 . -19) (undo-tree-id341 . -19) (undo-tree-id342 . -19) (undo-tree-id343 . -19) (undo-tree-id344 . -19) (undo-tree-id345 . -19) (undo-tree-id346 . -19) (undo-tree-id347 . -19) (undo-tree-id348 . -19) (undo-tree-id349 . -19) (undo-tree-id350 . -19) (undo-tree-id351 . -19) (undo-tree-id352 . -19) (undo-tree-id353 . -19) (undo-tree-id354 . -19) (undo-tree-id355 . -19) (undo-tree-id356 . -19) (undo-tree-id357 . -19) (undo-tree-id358 . -19) (undo-tree-id359 . -19) (undo-tree-id360 . -19) (undo-tree-id361 . -19) (undo-tree-id362 . -19) (undo-tree-id363 . -19) (undo-tree-id364 . -19) (undo-tree-id365 . -19) (undo-tree-id366 . -19) (undo-tree-id367 . -19) (undo-tree-id368 . -19) (undo-tree-id369 . -19) (undo-tree-id370 . -19) (undo-tree-id371 . -19) (undo-tree-id372 . -19) (undo-tree-id373 . -19) (undo-tree-id374 . -19) (apply yas--snippet-revive 241 260 #s(yas--snippet nil (#s(yas--field 1 248 248 nil nil nil t nil)) nil 5 nil #s(yas--field 1 248 248 nil nil nil t nil) nil nil)) (#("t" 0 1 (fontified nil)) . 248) (249 . 260) (#("o" 0 1 (fontified nil)) . 249) (248 . 250) (#("token_class" 0 11 (fontified nil face (rainbow-delimiters-depth-3-face))) . 248) (nil face nil 248 . 259) (248 . 259) (#("to" 0 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 248) (nil face nil 248 . 250) (248 . 250) (#("token_class" 0 11 (fontified nil face (rainbow-delimiters-depth-3-face))) . 248) (undo-tree-id375 . -11) (nil face font-lock-constant-face 248 . 259) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 259) (undo-tree-id376 . -2) (#("bnf_token" 0 9 (fontified nil)) . 261) (261 . 270) (#("bnf_token" 0 9 (fontified nil)) . 261) (undo-tree-id377 . -9) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 248 248 nil nil nil t nil)) nil 5 nil #s(yas--field 1 248 248 nil nil nil t nil) nil nil)) (#(" " 0 1 (fontified nil)) . 271) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("init_ret_fun" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil)) . 272) (undo-tree-id439 . -12) (undo-tree-id440 . -12) (undo-tree-id441 . -12) (undo-tree-id442 . -12) (undo-tree-id443 . -12) (undo-tree-id444 . -12) (undo-tree-id445 . -12) (undo-tree-id446 . -12) (undo-tree-id447 . -12) (undo-tree-id448 . -12) (undo-tree-id449 . -12) (undo-tree-id450 . -12) (undo-tree-id451 . -12) (undo-tree-id452 . -12) (undo-tree-id453 . -12) (undo-tree-id454 . -12) (undo-tree-id455 . -12) (undo-tree-id456 . -12) (undo-tree-id457 . -12) (undo-tree-id458 . -12) (undo-tree-id459 . -12) (undo-tree-id460 . -12) (undo-tree-id461 . -12) (undo-tree-id462 . -12) (undo-tree-id463 . -12) (undo-tree-id464 . -12) (undo-tree-id465 . -12) (undo-tree-id466 . -12) (undo-tree-id467 . -12) (undo-tree-id468 . -12) (undo-tree-id469 . -12) (undo-tree-id470 . -12) (undo-tree-id471 . -12) (undo-tree-id472 . -12) (undo-tree-id473 . -12) (undo-tree-id474 . -12) (undo-tree-id475 . -12) (undo-tree-id476 . -12) (undo-tree-id477 . -12) (undo-tree-id478 . -12) (undo-tree-id479 . -12) (undo-tree-id480 . -12) (undo-tree-id481 . -12) (undo-tree-id482 . -12) (undo-tree-id483 . -12) (undo-tree-id484 . -12) (undo-tree-id485 . -12) (undo-tree-id486 . -12) (undo-tree-id487 . -12) (undo-tree-id488 . -12) (undo-tree-id489 . -12) (undo-tree-id490 . -12) (undo-tree-id491 . -12) (undo-tree-id492 . -12) (undo-tree-id493 . -12) (undo-tree-id494 . -12) (undo-tree-id495 . -12) (undo-tree-id496 . -12) (undo-tree-id497 . -12) (undo-tree-id498 . -12) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 284) (undo-tree-id499 . -1) (undo-tree-id500 . 1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . 1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (#("," 0 1 (fontified nil)) . 285) (undo-tree-id561 . 1) (undo-tree-id562 . 1) (#(";" 0 1 (fontified nil)) . 287) (#("tok" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 285) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (285 . 288) (#("token_class::token" 0 18 (fontified nil)) . 285) (285 . 303) (#("to" 0 2 (fontified nil)) . 285) (285 . 287) (#("token_class::token" 0 11 (fontified nil face font-lock-constant-face) 11 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (fontified nil)) . 285) (undo-tree-id565 . -13) (undo-tree-id566 . -13) (undo-tree-id567 . -13) (undo-tree-id568 . -13) (undo-tree-id569 . -13) (undo-tree-id570 . 5) (undo-tree-id571 . -13) (undo-tree-id572 . -13) (undo-tree-id573 . -13) (undo-tree-id574 . -13) (undo-tree-id575 . -13) (undo-tree-id576 . -13) (undo-tree-id577 . -13) (undo-tree-id578 . -13) (undo-tree-id579 . -13) (undo-tree-id580 . -13) (undo-tree-id581 . -13) (undo-tree-id582 . -13) (undo-tree-id583 . -13) (undo-tree-id584 . -13) (undo-tree-id585 . -13) (undo-tree-id586 . -13) (undo-tree-id587 . -13) (undo-tree-id588 . -13) (undo-tree-id589 . -13) (undo-tree-id590 . -13) (undo-tree-id591 . -13) (undo-tree-id592 . -13) (undo-tree-id593 . -13) (undo-tree-id594 . -13) (undo-tree-id595 . -13) (undo-tree-id596 . -13) (undo-tree-id597 . -13) (undo-tree-id598 . -13) (undo-tree-id599 . -13) (undo-tree-id600 . -13) (undo-tree-id601 . -13) (undo-tree-id602 . -13) (undo-tree-id603 . -13) (undo-tree-id604 . -13) (undo-tree-id605 . -13) (undo-tree-id606 . -13) (undo-tree-id607 . -13) (undo-tree-id608 . -13) (undo-tree-id609 . -13) (undo-tree-id610 . -13) (undo-tree-id611 . -13) (undo-tree-id612 . -13) (undo-tree-id613 . -13) (undo-tree-id614 . -13) (undo-tree-id615 . -13) (undo-tree-id616 . -13) (undo-tree-id617 . -13) (undo-tree-id618 . -13) (undo-tree-id619 . -13) (undo-tree-id620 . -13) (undo-tree-id621 . -13) (undo-tree-id622 . -13) (undo-tree-id623 . -13) (undo-tree-id624 . -13) (undo-tree-id625 . -13) (#("to" 0 1 (fontified nil) 1 2 (fontified nil)) . 304) (304 . 306) (#("token_class" 0 11 (fontified nil)) . 304) (304 . 315) (#("to" 0 2 (fontified nil)) . 304) (304 . 306) (#("token_class" 0 11 (fontified nil face font-lock-constant-face)) . 304) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 315) (#("b" 0 1 (fontified nil)) . 317) (317 . 318) (#("bnf_token" 0 9 (fontified nil)) . 317) (317 . 326) (#("bnf_token" 0 9 (fontified nil)) . 317) (#("_" 0 1 (fontified nil)) . 298) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (298 . 299) (#("bnf_token" 0 9 (fontified nil)) . 298) (298 . 307) (#("_" 0 1 (fontified nil)) . 298) (298 . 299) (#("bnf_token" 0 8 (fontified nil) 8 9 (fontified nil)) . 298) (undo-tree-id628 . -8) (undo-tree-id629 . -8) (undo-tree-id630 . -8) (undo-tree-id631 . -8) (undo-tree-id632 . -8) (undo-tree-id633 . 1) (undo-tree-id634 . -8) (undo-tree-id635 . -8) (undo-tree-id636 . -8) (undo-tree-id637 . -8) (undo-tree-id638 . -8) (undo-tree-id639 . -8) (undo-tree-id640 . -8) (undo-tree-id641 . -8) (undo-tree-id642 . -8) (undo-tree-id643 . -8) (undo-tree-id644 . -8) (undo-tree-id645 . -8) (undo-tree-id646 . -8) (undo-tree-id647 . -8) (undo-tree-id648 . -8) (undo-tree-id649 . -8) (undo-tree-id650 . -8) (undo-tree-id651 . -8) (undo-tree-id652 . -8) (undo-tree-id653 . -8) (undo-tree-id654 . -8) (undo-tree-id655 . -8) (undo-tree-id656 . -8) (undo-tree-id657 . -8) (undo-tree-id658 . -8) (undo-tree-id659 . -8) (undo-tree-id660 . -8) (undo-tree-id661 . -8) (undo-tree-id662 . -8) (undo-tree-id663 . -8) (undo-tree-id664 . -8) (undo-tree-id665 . -8) (undo-tree-id666 . -8) (undo-tree-id667 . -8) (undo-tree-id668 . -8) (undo-tree-id669 . -8) (undo-tree-id670 . -8) (undo-tree-id671 . -8) (undo-tree-id672 . -8) (undo-tree-id673 . -8) (undo-tree-id674 . -8) (undo-tree-id675 . -8) (undo-tree-id676 . -8) (undo-tree-id677 . -8) (undo-tree-id678 . -8) (undo-tree-id679 . -8) (undo-tree-id680 . -8) (undo-tree-id681 . -8) (undo-tree-id682 . -8) (undo-tree-id683 . -8) (undo-tree-id684 . -8) (undo-tree-id685 . -8) (undo-tree-id686 . -8) (undo-tree-id687 . -8) (307 . 312) (t 26072 18854 936620 529000)) (26072 18902 335559 623000) 0 (:visualizer [5 0 1 #<marker in no buffer>])])
([nil nil ((#("    static std::map<token_class::bnf_token,std::map<token_class::bnf_token,std::vector<token_class::bnf_token>>> synatax_bnf;
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 14 (fontified t face font-lock-constant-face) 14 16 (fontified t) 16 19 (fontified t face font-lock-type-face) 19 20 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-3-face)) 20 31 (fontified t face font-lock-constant-face) 31 33 (fontified t) 33 36 (fontified t) 36 37 (fontified t) 37 42 (fontified t) 42 43 (fontified t c-type c-<>-arg-sep) 43 44 (fontified t face font-lock-constant-face) 44 45 (fontified t face font-lock-constant-face) 45 46 (fontified t face font-lock-constant-face) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t face font-lock-type-face) 49 50 (fontified t face font-lock-type-face) 50 51 (fontified t face font-lock-type-face) 51 52 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-4-face)) 52 63 (fontified t face font-lock-constant-face) 63 64 (fontified t) 64 65 (fontified t) 65 74 (fontified t) 74 75 (fontified t c-type c-<>-arg-sep) 75 78 (fontified t face font-lock-constant-face) 78 80 (fontified t) 80 86 (fontified t face font-lock-type-face) 86 87 (syntax-table (4 . 62) fontified t face (rainbow-delimiters-depth-5-face)) 87 98 (fontified t face font-lock-constant-face) 98 100 (fontified t) 100 104 (fontified t) 104 109 (fontified t) 109 110 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-5-face)) 110 111 (syntax-table (5 . 60) fontified t face (rainbow-delimiters-depth-4-face)) 111 112 (syntax-table (5 . 60) fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 112 113 (fontified t) 113 121 (fontified t face font-lock-variable-name-face) 121 122 (fontified t face font-lock-variable-name-face) 122 124 (fontified t face font-lock-variable-name-face) 124 125 (fontified t) 125 126 (fontified t)) . 461) (undo-tree-id919 . -126) (undo-tree-id920 . -126) (undo-tree-id921 . -125) (undo-tree-id922 . -75) (undo-tree-id923 . -75) (undo-tree-id924 . -113) (undo-tree-id925 . -75) (undo-tree-id926 . -75) (undo-tree-id927 . -75) (undo-tree-id928 . -75) (undo-tree-id929 . -75) (undo-tree-id930 . -75) (undo-tree-id931 . -75) (undo-tree-id932 . -75) (undo-tree-id933 . -75) (undo-tree-id934 . -75) (undo-tree-id935 . -75) (undo-tree-id936 . -75) (undo-tree-id937 . -75) (undo-tree-id938 . -75) (undo-tree-id939 . -75) (undo-tree-id940 . -75) (undo-tree-id941 . -75) (undo-tree-id942 . -75) (undo-tree-id943 . -75) (undo-tree-id944 . -75) (undo-tree-id945 . -75) (undo-tree-id946 . -75) (undo-tree-id947 . -75) (undo-tree-id948 . -75) (undo-tree-id949 . -75) (undo-tree-id950 . -75) (undo-tree-id951 . -75) (undo-tree-id952 . -75) (undo-tree-id953 . -75) (undo-tree-id954 . -75) (undo-tree-id955 . -75) (undo-tree-id956 . -75) (undo-tree-id957 . -75) (undo-tree-id958 . -75) (undo-tree-id959 . -75) (undo-tree-id960 . -75) (undo-tree-id961 . -75) (undo-tree-id962 . -75) (undo-tree-id963 . -75) (undo-tree-id964 . -75) (undo-tree-id965 . -75) (undo-tree-id966 . -75) (undo-tree-id967 . -75) (undo-tree-id968 . -75) (undo-tree-id969 . -75) (undo-tree-id970 . -75) (undo-tree-id971 . -75) (undo-tree-id972 . -75) (undo-tree-id973 . -75) (undo-tree-id974 . -75) (undo-tree-id975 . -75) (undo-tree-id976 . -75) (undo-tree-id977 . -75) (undo-tree-id978 . -75) (undo-tree-id979 . -75) (undo-tree-id980 . -75) (undo-tree-id981 . -75) (undo-tree-id982 . -75) (undo-tree-id983 . -75) (undo-tree-id984 . -75) (undo-tree-id985 . -75) (undo-tree-id986 . -75) (undo-tree-id987 . -75) (undo-tree-id988 . -75) (undo-tree-id989 . -75) (undo-tree-id990 . -75) (undo-tree-id991 . -75) (undo-tree-id992 . -75) (undo-tree-id993 . -75) (undo-tree-id994 . -75) (undo-tree-id995 . -75) (undo-tree-id996 . -75) (undo-tree-id997 . -75) (undo-tree-id998 . -75) (undo-tree-id999 . -75) (undo-tree-id1000 . -75) (undo-tree-id1001 . -75) (undo-tree-id1002 . -75) (undo-tree-id1003 . -75) (undo-tree-id1004 . -75) (undo-tree-id1005 . -75) (undo-tree-id1006 . -75) (undo-tree-id1007 . -75) (undo-tree-id1008 . -75) (undo-tree-id1009 . -75) (undo-tree-id1010 . -75) (undo-tree-id1011 . -75) (undo-tree-id1012 . -75) (undo-tree-id1013 . -75) (undo-tree-id1014 . -75) (undo-tree-id1015 . -75) (undo-tree-id1016 . -75) (undo-tree-id1017 . -75) (undo-tree-id1018 . -75) (undo-tree-id1019 . -75) (undo-tree-id1020 . -75) (undo-tree-id1021 . -75) (undo-tree-id1022 . -75) (undo-tree-id1023 . -75) (undo-tree-id1024 . -75) (undo-tree-id1025 . -75) (undo-tree-id1026 . -75) (undo-tree-id1027 . -75) (undo-tree-id1028 . -75) (undo-tree-id1029 . -75) (undo-tree-id1030 . -75) (undo-tree-id1031 . -75) (undo-tree-id1032 . -75) (undo-tree-id1033 . -75) (undo-tree-id1034 . -75) (undo-tree-id1035 . -75) (undo-tree-id1036 . -75) (undo-tree-id1037 . -75) (undo-tree-id1038 . -75) (undo-tree-id1039 . -75) (undo-tree-id1040 . -75) (undo-tree-id1041 . -75) (undo-tree-id1042 . -75) (undo-tree-id1043 . -75) (undo-tree-id1044 . -75) (undo-tree-id1045 . -75) (undo-tree-id1046 . -75) (undo-tree-id1047 . -75) (undo-tree-id1048 . -75) (undo-tree-id1049 . -75) (undo-tree-id1050 . -75) (undo-tree-id1051 . -75) (undo-tree-id1052 . -75) (undo-tree-id1053 . -75) (undo-tree-id1054 . -75) (undo-tree-id1055 . -75) (undo-tree-id1056 . -75) (undo-tree-id1057 . -75) (undo-tree-id1058 . -75) (undo-tree-id1059 . -75) (undo-tree-id1060 . -75) (undo-tree-id1061 . -75) (undo-tree-id1062 . -75) (undo-tree-id1063 . -75) (undo-tree-id1064 . -75) (undo-tree-id1065 . -75) (undo-tree-id1066 . -75) (undo-tree-id1067 . -75) (undo-tree-id1068 . -75) (undo-tree-id1069 . -75) (undo-tree-id1070 . -75) (undo-tree-id1071 . -75) (undo-tree-id1072 . -75) (undo-tree-id1073 . -75) (undo-tree-id1074 . -75) (undo-tree-id1075 . -75) (undo-tree-id1076 . -75) (undo-tree-id1077 . -75) (undo-tree-id1078 . -75) (undo-tree-id1079 . -75) (undo-tree-id1080 . -75) (undo-tree-id1081 . -75) (undo-tree-id1082 . -75) (undo-tree-id1083 . -75) (undo-tree-id1084 . -75) (undo-tree-id1085 . -75) (undo-tree-id1086 . -75) (undo-tree-id1087 . -75) (undo-tree-id1088 . -75) (undo-tree-id1089 . -75) (undo-tree-id1090 . -75) (undo-tree-id1091 . -75) (undo-tree-id1092 . -75) (undo-tree-id1093 . -75) (undo-tree-id1094 . -75) (undo-tree-id1095 . -75) (undo-tree-id1096 . -75) (undo-tree-id1097 . -75) (undo-tree-id1098 . -75) (undo-tree-id1099 . -75) (undo-tree-id1100 . -75) (undo-tree-id1101 . -75) (undo-tree-id1102 . -75) (undo-tree-id1103 . -75) (undo-tree-id1104 . -75) (undo-tree-id1105 . -11) (undo-tree-id1106 . -14) (undo-tree-id1107 . -43) (undo-tree-id1108 . -46) (undo-tree-id1109 . -75) (undo-tree-id1110 . -78) (undo-tree-id1111 . -75) (undo-tree-id1112 . -75) (undo-tree-id1113 . -75) (undo-tree-id1114 . -75) (undo-tree-id1115 . -75) (undo-tree-id1116 . -75) (undo-tree-id1117 . -75) (undo-tree-id1118 . -75) (undo-tree-id1119 . -75) (undo-tree-id1120 . -75) (undo-tree-id1121 . -75) (undo-tree-id1122 . -75) (undo-tree-id1123 . -75) (undo-tree-id1124 . -75) (undo-tree-id1125 . -75) (undo-tree-id1126 . -75) (undo-tree-id1127 . -75) (undo-tree-id1128 . -75) (undo-tree-id1129 . -75) (undo-tree-id1130 . -75) (undo-tree-id1131 . -75) (undo-tree-id1132 . -75) (undo-tree-id1133 . -75) (undo-tree-id1134 . -75) (undo-tree-id1135 . -75) (undo-tree-id1136 . -75) (undo-tree-id1137 . -75) (undo-tree-id1138 . -75) (undo-tree-id1139 . -75) (undo-tree-id1140 . -75) (undo-tree-id1141 . -75) (undo-tree-id1142 . -75) (undo-tree-id1143 . -75) (undo-tree-id1144 . -75) (undo-tree-id1145 . -75) (undo-tree-id1146 . -75) (undo-tree-id1147 . -75) (undo-tree-id1148 . -75) (undo-tree-id1149 . -75) (undo-tree-id1150 . -75) (undo-tree-id1151 . -75) (undo-tree-id1152 . -75) (undo-tree-id1153 . -75) (undo-tree-id1154 . -75) (undo-tree-id1155 . -75) (undo-tree-id1156 . -75) (undo-tree-id1157 . -75) (undo-tree-id1158 . -75) (undo-tree-id1159 . -75) (undo-tree-id1160 . -75) (undo-tree-id1161 . -75) (undo-tree-id1162 . -75) (undo-tree-id1163 . -75) (undo-tree-id1164 . -75) (undo-tree-id1165 . -75) (undo-tree-id1166 . -75) (undo-tree-id1167 . -75) (undo-tree-id1168 . -75) (undo-tree-id1169 . -75) (undo-tree-id1170 . -75) (undo-tree-id1171 . -75) (undo-tree-id1172 . -75) (undo-tree-id1173 . -75) (undo-tree-id1174 . -75) (undo-tree-id1175 . -75) (undo-tree-id1176 . -75) (undo-tree-id1177 . -75) (undo-tree-id1178 . -75) (undo-tree-id1179 . -75) (undo-tree-id1180 . -75) (undo-tree-id1181 . -75) (undo-tree-id1182 . -75) (undo-tree-id1183 . -75) (undo-tree-id1184 . -75) (undo-tree-id1185 . -75) (undo-tree-id1186 . -75) (undo-tree-id1187 . -75) (undo-tree-id1188 . -75) (undo-tree-id1189 . -75) (undo-tree-id1190 . -75) (undo-tree-id1191 . -75) (undo-tree-id1192 . -75) (undo-tree-id1193 . -75) (undo-tree-id1194 . -75) (undo-tree-id1195 . -75) (undo-tree-id1196 . -75) (undo-tree-id1197 . -75) (undo-tree-id1198 . -75) (undo-tree-id1199 . -75) (undo-tree-id1200 . -75) (undo-tree-id1201 . -75) (undo-tree-id1202 . -75) (undo-tree-id1203 . -75) (undo-tree-id1204 . -75) (undo-tree-id1205 . -75) (undo-tree-id1206 . -75) (undo-tree-id1207 . -75) (undo-tree-id1208 . -75) (undo-tree-id1209 . -75) (undo-tree-id1210 . -75) (undo-tree-id1211 . -75) (undo-tree-id1212 . -75) (undo-tree-id1213 . -75) (undo-tree-id1214 . -75) (undo-tree-id1215 . -75) (undo-tree-id1216 . -75) (undo-tree-id1217 . -75) (undo-tree-id1218 . -75) (undo-tree-id1219 . -75) (undo-tree-id1220 . -75) (undo-tree-id1221 . -75) (undo-tree-id1222 . -75) (undo-tree-id1223 . -75) (undo-tree-id1224 . -75) (undo-tree-id1225 . -75) (undo-tree-id1226 . -75) (undo-tree-id1227 . -75) (undo-tree-id1228 . -75) (undo-tree-id1229 . -75) (undo-tree-id1230 . -75) (undo-tree-id1231 . -75) (undo-tree-id1232 . -75) (undo-tree-id1233 . -75) (undo-tree-id1234 . -75) (undo-tree-id1235 . -75) (undo-tree-id1236 . -75) (undo-tree-id1237 . -75) (undo-tree-id1238 . -75) (undo-tree-id1239 . -75) (undo-tree-id1240 . -75) (undo-tree-id1241 . -75) (undo-tree-id1242 . -75) (undo-tree-id1243 . -75) (undo-tree-id1244 . -75) (undo-tree-id1245 . -75) (undo-tree-id1246 . -75) (undo-tree-id1247 . -75) (undo-tree-id1248 . -75) (undo-tree-id1249 . -75) (undo-tree-id1250 . -75) (undo-tree-id1251 . -75) (undo-tree-id1252 . -75) (undo-tree-id1253 . -75) (undo-tree-id1254 . -75) (undo-tree-id1255 . -75) (undo-tree-id1256 . -75) (undo-tree-id1257 . -75) (undo-tree-id1258 . -75) (undo-tree-id1259 . -75) (undo-tree-id1260 . -75) (undo-tree-id1261 . -75) (undo-tree-id1262 . -75) (undo-tree-id1263 . -75) (undo-tree-id1264 . -75) (undo-tree-id1265 . -75) (undo-tree-id1266 . -75) (undo-tree-id1267 . -75) (undo-tree-id1268 . -75) (undo-tree-id1269 . -75) (undo-tree-id1270 . -75) (undo-tree-id1271 . -75) (undo-tree-id1272 . -75) (undo-tree-id1273 . -75) (undo-tree-id1274 . -75) (undo-tree-id1275 . -75) (undo-tree-id1276 . -75) (undo-tree-id1277 . -75) (undo-tree-id1278 . -75) (undo-tree-id1279 . -75) (undo-tree-id1280 . -75) (undo-tree-id1281 . -75) (undo-tree-id1282 . -75) (undo-tree-id1283 . -75) (undo-tree-id1284 . -75) (undo-tree-id1285 . -75) (undo-tree-id1286 . -75) (undo-tree-id1287 . -75) (undo-tree-id1288 . -75) (undo-tree-id1289 . -75) (undo-tree-id1290 . -75) (undo-tree-id1291 . -126) 536 (t 26072 18854 936620 529000)) nil (26072 19137 598568 62000) 0 (:visualizer [4 0 1 #<marker in no buffer>])] [nil nil ((306 . 308) (t 26072 18854 936620 529000)) ((#("yy" 0 1 (fontified t) 1 2 (fontified t)) . 306) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2)) (26072 18899 529681 457000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((333 . 336) (308 . 310) (307 . 308) (t 26072 19137 619947 19000)) nil (26072 22079 699555 429000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
nil
([nil nil ((336 . 337) (t 26072 22079 713209 168000)) nil (26072 22152 34389 848000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((apply 2 468 478 undo--wrap-and-run-primitive-undo 468 478 ((#("//" 0 1 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1 2 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -472) 480)) (t 26072 22152 49874 84000)) nil (26072 22297 958351 431000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((477 . 480)) nil (26072 22297 958350 602000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 486 568 nil nil nil t nil)) nil 11 nil #s(yas--field 1 486 568 nil nil nil t nil) nil nil)) (477 . 505) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 477) (477 . 510) (#("fu" 0 2 (fontified nil)) . 477) (477 . 479) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 27 (fontified nil) 27 28 (syntax-table (5 . 60) fontified nil)) . -477) (477 . 505) (#("fun" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -477) (undo-tree-id1536 . -3) (undo-tree-id1537 . -3) 480) nil (26072 22297 958349 430000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((487 . 489) (#("typename Signature" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 18 (fontified nil face font-lock-type-face)) . 487) (undo-tree-id1535 . -18) (486 . 487)) nil (26072 22297 958347 408000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((489 . 491)) nil (26072 22297 958346 396000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((491 . 494)) nil (26072 22297 958345 892000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 498 520 nil nil nil t nil)) nil 12 nil #s(yas--field 1 498 520 nil nil nil t nil) #s(yas--field 1 486 568 nil nil nil t nil) nil)) (491 . 510) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 491) (undo-tree-id1529 . -24) (491 . 515) (#("v" 0 1 (fontified nil)) . 491) (undo-tree-id1530 . -1) (491 . 492) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -491) (undo-tree-id1531 . -35) (491 . 526) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -491) (undo-tree-id1532 . -3) (undo-tree-id1533 . -3) (undo-tree-id1534 . -3) 494) nil (26072 22297 958344 784000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((499 . 500) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 499) (498 . 499)) nil (26072 22297 958341 2000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((nil fontified nil 498 . 509) (nil face (rainbow-delimiters-depth-4-face) 498 . 509) (498 . 509) (#("to" 0 2 (fontified nil)) . 498) (nil fontified nil 498 . 500) (nil face (rainbow-delimiters-depth-4-face) 498 . 500) (498 . 500) (#("token_class" 0 11 (fontified nil)) . -498) (nil fontified nil 498 . 509) (nil face (rainbow-delimiters-depth-4-face) 498 . 509) (498 . 509) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -498) (undo-tree-id1527 . -2) (undo-tree-id1528 . -2) 500) nil (26072 22297 958340 88000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((509 . 511)) nil (26072 22297 958337 771000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((511 . 520) (#("bnf_token" 0 9 (fontified nil)) . -511) (511 . 520)) nil (26072 22297 958337 274000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((apply yas--snippet-revive 491 521 #s(yas--snippet nil (#s(yas--field 1 498 520 nil nil nil t nil)) nil 12 nil #s(yas--field 1 498 520 nil nil nil t nil) #s(yas--field 1 486 568 nil nil nil t nil) nil))) nil (26072 22297 958336 680000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((nil fontified t 521 . 523) (nil face (rainbow-delimiters-depth-4-face) 521 . 523) (521 . 523)) nil (26072 22297 958336 127000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((522 . 524)) nil (26072 22297 958335 418000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((#("i" 0 1 (fontified t)) . -523) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) 524) nil (26072 22297 958334 673000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((523 . 524)) nil (26072 22297 970626 673000) 0 (:visualizer [4 0 1 #<marker in no buffer>])])
([nil nil ((469 . 476) (#("re" 0 2 (fontified nil)) . 469) (469 . 471) (#("ret_fun" 0 7 (fontified nil)) . -469) (469 . 476) (#("ret_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -469) (undo-tree-id1551 . -4) (undo-tree-id1552 . -4) 473 (469 . 473) (464 . 469) (apply yas--snippet-revive 372 464 #s(yas--snippet nil (#s(yas--field 1 381 463 nil nil nil t nil)) nil 14 nil #s(yas--field 1 381 463 nil nil nil t nil) nil nil)) (nil fontified nil 440 . 462) (440 . 462) (#("to" 0 2 (fontified nil)) . 440) (nil fontified nil 440 . 442) (440 . 442) (#("token_class::bnf_token" 0 22 (fontified nil)) . -440) (nil fontified nil 440 . 462) (440 . 462) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -440) (undo-tree-id1553 . -2) (undo-tree-id1554 . -2) 442 (440 . 442) (439 . 440) (nil fontified nil 417 . 439) (nil face (rainbow-delimiters-depth-5-face) 417 . 439) (417 . 439) (#("to" 0 2 (fontified nil)) . 417) (nil fontified nil 417 . 419) (nil face (rainbow-delimiters-depth-5-face) 417 . 419) (417 . 419) (#("token_class::bnf_token" 0 22 (fontified nil)) . -417) (nil fontified nil 417 . 439) (nil face (rainbow-delimiters-depth-5-face) 417 . 439) (417 . 439) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -417) (undo-tree-id1555 . -3) (undo-tree-id1556 . -3) 420 (417 . 420) (nil fontified t 416 . 418) (nil face (rainbow-delimiters-depth-5-face) 416 . 418) (416 . 418) (apply yas--snippet-revive 386 416 #s(yas--snippet nil (#s(yas--field 1 393 415 nil nil nil t nil)) nil 15 nil #s(yas--field 1 393 415 nil nil nil t nil) #s(yas--field 1 381 463 nil nil nil t nil) nil)) (nil fontified nil 393 . 415) (nil face (rainbow-delimiters-depth-5-face) 393 . 415) (393 . 415) (#("to" 0 2 (fontified nil)) . 393) (nil fontified nil 393 . 395) (nil face (rainbow-delimiters-depth-5-face) 393 . 395) (393 . 395) (#("token_class::bnf_token" 0 22 (fontified nil)) . -393) (nil fontified nil 393 . 415) (nil face (rainbow-delimiters-depth-5-face) 393 . 415) (393 . 415) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -393) (undo-tree-id1557 . -2) (undo-tree-id1558 . -2) 395 (394 . 395) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 394) (393 . 394) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 393 415 nil nil nil t nil)) nil 15 nil #s(yas--field 1 393 415 nil nil nil t nil) #s(yas--field 1 381 463 nil nil nil t nil) nil)) (386 . 405) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 386) (386 . 410) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -386) (386 . 421) (384 . 386) (382 . 384) (#("typename Signature" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 18 (fontified nil face font-lock-type-face)) . 382) (381 . 382) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 381 463 nil nil nil t nil)) nil 14 nil #s(yas--field 1 381 463 nil nil nil t nil) nil nil)) (372 . 400) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 372) (372 . 405) (#("f" 0 1 (fontified nil)) . 372) (372 . 373) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 27 (fontified nil) 27 28 (syntax-table (5 . 60) fontified nil)) . -372) (372 . 400) (#("fu" 0 1 (fontified t) 1 2 (fontified t)) . -372) (undo-tree-id1559 . -2) (undo-tree-id1560 . -2) 374 (372 . 374) (370 . 372) (367 . 370) (574 . 577) (570 . 574) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -570) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -571) (undo-tree-id1563 . -1) 572 (572 . 573) (569 . 572) (apply yas--snippet-revive 477 569 #s(yas--snippet nil (#s(yas--field 1 486 568 nil nil nil t nil)) nil 11 nil #s(yas--field 1 486 568 nil nil nil t nil) nil nil)) (nil fontified nil 545 . 567) (545 . 567) (#("to" 0 2 (fontified nil)) . 545) (nil fontified nil 545 . 547) (545 . 547) (#("token_class::bnf_token" 0 22 (fontified nil)) . -545) (nil fontified nil 545 . 567) (545 . 567) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -545) (undo-tree-id1564 . -2) (undo-tree-id1565 . -2) 547 (545 . 547) (#("y" 0 1 (fontified t)) . -545) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) 546 (545 . 546) (544 . 545) (nil fontified nil 522 . 544) (nil face (rainbow-delimiters-depth-4-face) 522 . 544) (522 . 544) (#("tok" 0 3 (fontified nil)) . 522) (nil fontified nil 522 . 525) (nil face (rainbow-delimiters-depth-4-face) 522 . 525) (522 . 525) (#("token_class::bnf_token" 0 22 (fontified nil)) . -522) (nil fontified nil 522 . 544) (nil face (rainbow-delimiters-depth-4-face) 522 . 544) (522 . 544) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -522) (undo-tree-id1568 . -3) (undo-tree-id1569 . -3) 525 (524 . 525)) nil (26072 22390 334146 697000) 0 (:visualizer [3 0 1 #<marker in no buffer>])] [nil nil ((102 . 120) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 535 540 nil nil nil nil #s(yas--field 2 542 556 nil nil nil nil nil)) #s(yas--field 2 542 556 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 535 540 nil nil nil nil #s(yas--field 2 542 556 nil nil nil nil nil)) #s(yas--field 1 486 568 nil nil nil t nil) nil)) (522 . 557) (#("std::tolower(${1:CharT}, ${2:const locale &})" 0 45 (fontified nil)) . 522) (nil fontified nil 522 . 567) (nil face (rainbow-delimiters-depth-4-face) 522 . 567) (522 . 567) (#("to" 0 2 (fontified nil)) . 522) (nil fontified nil 522 . 524) (nil face (rainbow-delimiters-depth-4-face) 522 . 524) (522 . 524) (#("std::tolower(CharT, const locale &)" 0 35 (fontified nil)) . -522) (nil fontified nil 522 . 557) (nil face (rainbow-delimiters-depth-4-face) 522 . 557) (522 . 557) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -522) (undo-tree-id1292 . -2) (undo-tree-id1293 . -2) (undo-tree-id1294 . -2) (undo-tree-id1295 . -2) (undo-tree-id1296 . -2) (undo-tree-id1297 . -2) (undo-tree-id1298 . -2) (undo-tree-id1299 . -2) (undo-tree-id1300 . -2) (undo-tree-id1301 . -2) (undo-tree-id1302 . -2) (undo-tree-id1303 . -2) (undo-tree-id1304 . -2) (undo-tree-id1305 . -2) (undo-tree-id1306 . -2) (undo-tree-id1307 . -2) (undo-tree-id1308 . -2) (undo-tree-id1309 . -2) (undo-tree-id1310 . -2) (undo-tree-id1311 . -2) (undo-tree-id1312 . -2) (undo-tree-id1313 . -2) (undo-tree-id1314 . -2) (undo-tree-id1315 . -2) (undo-tree-id1316 . -2) (undo-tree-id1317 . -2) (undo-tree-id1318 . -2) (undo-tree-id1319 . -2) (undo-tree-id1320 . -2) (undo-tree-id1321 . -2) (undo-tree-id1322 . -2) (undo-tree-id1323 . -2) (undo-tree-id1324 . -2) (undo-tree-id1325 . -2) (undo-tree-id1326 . -2) (undo-tree-id1327 . -2) (undo-tree-id1328 . -2) (undo-tree-id1329 . -2) (undo-tree-id1330 . -2) (undo-tree-id1331 . -2) (undo-tree-id1332 . -2) (undo-tree-id1333 . -2) (undo-tree-id1334 . -2) (undo-tree-id1335 . -2) (undo-tree-id1336 . -2) (undo-tree-id1337 . -2) (undo-tree-id1338 . -2) (undo-tree-id1339 . -2) (undo-tree-id1340 . -2) (undo-tree-id1341 . -2) (undo-tree-id1342 . -2) (undo-tree-id1343 . -2) (undo-tree-id1344 . -2) (undo-tree-id1345 . -2) (undo-tree-id1346 . -2) (undo-tree-id1347 . -2) (undo-tree-id1348 . -2) (undo-tree-id1349 . -2) (undo-tree-id1350 . -2) (undo-tree-id1351 . -2) (undo-tree-id1352 . -2) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -2) (undo-tree-id1357 . -2) (undo-tree-id1358 . -2) (undo-tree-id1359 . -2) (undo-tree-id1360 . -2) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . -1) (undo-tree-id1366 . -2) (undo-tree-id1367 . -2) (undo-tree-id1368 . -2) (undo-tree-id1369 . -2) (undo-tree-id1370 . -2) (undo-tree-id1371 . -2) (undo-tree-id1372 . -2) (undo-tree-id1373 . -2) (undo-tree-id1374 . -2) (undo-tree-id1375 . -2) (undo-tree-id1376 . -2) (undo-tree-id1377 . -2) (undo-tree-id1378 . -2) (undo-tree-id1379 . -2) (undo-tree-id1380 . -2) (undo-tree-id1381 . -2) (undo-tree-id1382 . -2) (undo-tree-id1383 . -2) (undo-tree-id1384 . -2) (undo-tree-id1385 . -2) (undo-tree-id1386 . -2) (undo-tree-id1387 . -2) (undo-tree-id1388 . -2) (undo-tree-id1389 . -2) (undo-tree-id1390 . -2) (undo-tree-id1391 . -2) (undo-tree-id1392 . -2) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -2) (undo-tree-id1396 . -2) (undo-tree-id1397 . -2) (undo-tree-id1398 . -2) (undo-tree-id1399 . -2) (undo-tree-id1400 . -2) (undo-tree-id1401 . -2) (undo-tree-id1402 . -2) (undo-tree-id1403 . -2) (undo-tree-id1404 . -2) (undo-tree-id1405 . -2) (undo-tree-id1406 . -2) (undo-tree-id1407 . -2) (undo-tree-id1408 . -2) (undo-tree-id1409 . -2) (undo-tree-id1410 . -2) (undo-tree-id1411 . -2) (undo-tree-id1412 . -2) (undo-tree-id1413 . -2) (undo-tree-id1414 . -2) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) (undo-tree-id1417 . -2) (undo-tree-id1418 . -2) (undo-tree-id1419 . -2) (undo-tree-id1420 . -2) (undo-tree-id1421 . -2) (undo-tree-id1422 . -2) (undo-tree-id1423 . -2) (undo-tree-id1424 . -2) (undo-tree-id1425 . -2) (undo-tree-id1426 . -2) (undo-tree-id1427 . -2) (undo-tree-id1428 . -2) (undo-tree-id1429 . -2) (undo-tree-id1430 . -2) (undo-tree-id1431 . -2) (undo-tree-id1432 . -2) (undo-tree-id1433 . -2) (undo-tree-id1434 . -2) (undo-tree-id1435 . -2) (undo-tree-id1436 . -2) (undo-tree-id1437 . -2) (undo-tree-id1438 . -2) (undo-tree-id1439 . -2) (undo-tree-id1440 . -2) (undo-tree-id1441 . -2) (undo-tree-id1442 . -2) (undo-tree-id1443 . -2) (undo-tree-id1444 . -2) (undo-tree-id1445 . -2) (undo-tree-id1446 . -2) (undo-tree-id1447 . -2) (undo-tree-id1448 . -2) (undo-tree-id1449 . -2) (undo-tree-id1450 . -2) (undo-tree-id1451 . -2) (undo-tree-id1452 . -2) (undo-tree-id1453 . -2) (undo-tree-id1454 . -2) (undo-tree-id1455 . -2) (undo-tree-id1456 . -2) (undo-tree-id1457 . -2) (undo-tree-id1458 . -2) (undo-tree-id1459 . -2) (undo-tree-id1460 . -2) (undo-tree-id1461 . -2) (undo-tree-id1462 . -2) (undo-tree-id1463 . -2) (undo-tree-id1464 . -2) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . -2) (undo-tree-id1468 . -2) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -2) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -2) (undo-tree-id1486 . -2) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . -2) (undo-tree-id1490 . -2) (undo-tree-id1491 . -2) (undo-tree-id1492 . -2) (undo-tree-id1493 . -2) (undo-tree-id1494 . -2) (undo-tree-id1495 . -2) (undo-tree-id1496 . -2) (undo-tree-id1497 . -2) (undo-tree-id1498 . -2) (undo-tree-id1499 . -2) (undo-tree-id1500 . -2) (undo-tree-id1501 . -2) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -2) (undo-tree-id1509 . -2) (undo-tree-id1510 . -2) (undo-tree-id1511 . -2) (undo-tree-id1512 . -2) (undo-tree-id1513 . -2) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -2) (undo-tree-id1517 . -2) (undo-tree-id1518 . -2) (undo-tree-id1519 . -2) (undo-tree-id1520 . -2) (undo-tree-id1521 . -2) (undo-tree-id1522 . -2) (undo-tree-id1523 . -2) (undo-tree-id1524 . -2) 524) ((522 . 524) (#("std::tolower(CharT, const locale &)" 0 35 (fontified nil face (rainbow-delimiters-depth-4-face))) . 522) (nil face nil 522 . 557) (522 . 557) (#("to" 0 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 522) (nil face nil 522 . 524) (522 . 524) (#("std::tolower(${1:CharT}, ${2:const locale &})" 0 45 (fontified nil face (rainbow-delimiters-depth-4-face))) . 522) (nil face nil 522 . 567) (522 . 567) (#("std::tolower(CharT, const locale &)" 0 3 (fontified t face font-lock-constant-face) 3 12 (fontified t) 12 13 (fontified t c-type c-decl-arg-start face (rainbow-delimiters-depth-5-face)) 13 18 (fontified t) 18 19 (fontified t c-type c-decl-arg-start) 19 20 (fontified t) 20 25 (fontified t face font-lock-keyword-face) 25 26 (fontified t) 26 32 (fontified t face font-lock-type-face) 32 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-5-face))) . 522) (undo-tree-id1538 . -13) (undo-tree-id1539 . -13) (undo-tree-id1540 . -13) (undo-tree-id1541 . -20) (undo-tree-id1542 . -25) (undo-tree-id1543 . -13) (undo-tree-id1544 . -18) (undo-tree-id1545 . -13) (apply yas--snippet-revive 522 557 #s(yas--snippet nil (#s(yas--field 1 535 540 nil nil nil nil #s(yas--field 2 542 556 nil nil nil nil nil)) #s(yas--field 2 542 556 nil nil nil nil nil)) nil 13 nil #s(yas--field 1 535 540 nil nil nil nil #s(yas--field 2 542 556 nil nil nil nil nil)) #s(yas--field 1 486 568 nil nil nil t nil) nil)) (#("#include <cctype>
" 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-preprocessor-face) 1 8 (c-in-sws t fontified t face font-lock-preprocessor-face) 8 9 (c-in-sws t fontified t) 9 10 (c-in-sws t fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62)) 10 16 (c-in-sws t fontified t face font-lock-string-face) 16 17 (c-in-sws t fontified t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60)) 17 18 (c-in-sws t fontified t)) . 102) (undo-tree-id1546 . -17) (undo-tree-id1547 . -18) (undo-tree-id1548 . -18) (undo-tree-id1549 . 9) (undo-tree-id1550 . -17)) (26072 22297 958324 286000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("r" 0 1 (fontified t)) . -469) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (#("e" 0 1 (fontified t)) . -470) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (#("t" 0 1 (fontified t)) . -471) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (#("_" 0 1 (fontified t)) . -472) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (#("f" 0 1 (fontified t)) . -473) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (#("u" 0 1 (fontified t)) . -474) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (#("n" 0 1 (fontified t)) . -475) (undo-tree-id1584 . -1) 476 (t 26072 22390 366535 13000)) nil (26072 22418 70964 555000) 0 (:visualizer [3 0 1 #<marker in no buffer>])])
nil
([nil nil ((469 . 472)) nil (26072 22418 70954 885000) 0 (:visualizer [3 0 1 #<marker in no buffer>])])
([nil nil ((#("u" 0 1 (fontified t)) . -471) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) 472) nil (26072 22418 70953 885000) 0 (:visualizer [3 0 1 #<marker in no buffer>])])
([nil nil ((471 . 481)) nil (26072 22418 70944 183000) 0 (:visualizer [3 0 1 #<marker in no buffer>])])
([nil nil ((#("=" 0 1 (fontified t)) . -468) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (#("i" 0 1 (fontified t)) . -469) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (#("n" 0 1 (fontified t)) . -470) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (#("i" 0 1 (fontified t)) . -471) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (#("t" 0 1 (fontified t)) . -472) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (#("_" 0 1 (fontified t)) . -473) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (#("r" 0 1 (fontified t)) . -474) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (#("e" 0 1 (fontified t)) . -475) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (#("t" 0 1 (fontified t)) . -476) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (#("_" 0 1 (fontified t)) . -477) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (#("f" 0 1 (fontified t)) . -478) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (#("u" 0 1 (fontified t)) . -479) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (#("n" 0 1 (fontified t)) . -480) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) 481 (t 26072 22418 93201 9000)) nil (26072 23628 273936 672000) 0 (:visualizer [3 0 1 #<marker in no buffer>])])
([nil nil ((679 . 691) (#("ptr" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 679) (678 . 682)) ((#("=ptr" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 678) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (679 . 682) (#("ini" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 679) (undo-tree-id6164 . -3) (#("t_ret_fun" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . 682) (undo-tree-id6165 . 1) (undo-tree-id6166 . -9)) (26072 23630 815522 569000) 0 (:visualizer [1 1 1 #<marker in no buffer>])] [nil nil ((468 . 481) (t 26072 22431 976534 5000)) ((#("=init_ret_fun" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 468) (undo-tree-id1625 . -1) (undo-tree-id1626 . -13) (t 26072 22604 879863 172000)) (26072 22604 865320 390000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil (338) nil (26072 23655 569907 520000) 0 nil] [nil nil ((#("t" 0 1 (fontified t)) . -671) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1636 . -1) (#("o" 0 1 (fontified t)) . -672) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("k" 0 1 (fontified t)) . -673) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) 674 (#("e" 0 1 (fontified t)) . -674) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (#("n" 0 1 (fontified t)) . -675) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (#("_" 0 1 (fontified t)) . -676) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (#("c" 0 1 (fontified t)) . -677) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (#("l" 0 1 (fontified t)) . -678) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("a" 0 1 (fontified t)) . -679) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (#("s" 0 1 (fontified t)) . -680) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (#("s" 0 1 (fontified t)) . -681) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (#(":" 0 1 (fontified t)) . -682) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#(":" 0 1 (fontified t)) . -683) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#("b" 0 1 (fontified t)) . -684) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (#("n" 0 1 (fontified t)) . -685) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (#("f" 0 1 (fontified t)) . -686) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("_" 0 1 (fontified t)) . -687) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (#("t" 0 1 (fontified t)) . -688) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("o" 0 1 (fontified t)) . -689) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("k" 0 1 (fontified t)) . -690) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("e" 0 1 (fontified t)) . -691) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -692) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("," 0 1 (fontified t c-type c-decl-arg-start)) . -693) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("t" 0 1 (fontified t)) . -694) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) 695 (#("o" 0 1 (fontified t)) . -695) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("k" 0 1 (fontified t)) . -696) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (#("e" 0 1 (fontified t)) . -697) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (#("n" 0 1 (fontified t)) . -698) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (#("_" 0 1 (fontified t)) . -699) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (#("c" 0 1 (fontified t)) . -700) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (#("l" 0 1 (fontified t)) . -701) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (#("a" 0 1 (fontified t)) . -702) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#("s" 0 1 (fontified t)) . -703) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (#("s" 0 1 (fontified t)) . -704) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#(":" 0 1 (fontified t)) . -705) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (#(":" 0 1 (fontified t)) . -706) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (#("b" 0 1 (fontified t)) . -707) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (#("n" 0 1 (fontified t)) . -708) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (#("f" 0 1 (fontified t)) . -709) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (#("_" 0 1 (fontified t)) . -710) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("t" 0 1 (fontified t)) . -711) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (#("o" 0 1 (fontified t)) . -712) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (#("k" 0 1 (fontified t)) . -713) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (#("e" 0 1 (fontified t)) . -714) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -715) (undo-tree-id1727 . -1) 716 (727 . 731) (#("i" 0 1 (fontified t)) . -727) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (#("n" 0 1 (fontified t)) . -728) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (#("i" 0 1 (fontified t)) . -729) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (#("t" 0 1 (fontified t)) . -730) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (#("_" 0 1 (fontified t)) . -731) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (#("r" 0 1 (fontified t)) . -732) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (#("e" 0 1 (fontified t)) . -733) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (#("t" 0 1 (fontified t)) . -734) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (#("_" 0 1 (fontified t)) . -735) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("f" 0 1 (fontified t)) . -736) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (#("u" 0 1 (fontified t)) . -737) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (#("n" 0 1 (fontified t)) . -738) (undo-tree-id1750 . 1) (undo-tree-id1751 . -1) 739 (386 . 387) (384 . 386) (379 . 384) (apply yas--snippet-revive 349 379 #s(yas--snippet nil (#s(yas--field 1 356 356 nil nil nil t nil)) nil 18 nil #s(yas--field 1 356 356 nil nil nil t nil) nil nil)) (369 . 378) (#("bnf_token" 0 9 (fontified nil)) . -369) (369 . 378) (367 . 369) (nil fontified nil 356 . 367) (nil face (rainbow-delimiters-depth-3-face) 356 . 367) (356 . 367) (#("to" 0 2 (fontified nil)) . 356) (nil fontified nil 356 . 358) (nil face (rainbow-delimiters-depth-3-face) 356 . 358) (356 . 358) (#("token_class" 0 11 (fontified nil)) . -356) (nil fontified nil 356 . 367) (nil face (rainbow-delimiters-depth-3-face) 356 . 367) (356 . 367) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -356) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) 359 (357 . 359) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 357) (356 . 357) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 356 356 nil nil nil t nil)) nil 18 nil #s(yas--field 1 356 356 nil nil nil t nil) nil nil)) (349 . 368) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 349) (349 . 373) (#("v" 0 1 (fontified nil)) . 349) (349 . 350) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -349) (349 . 384) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -349) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) 352 (349 . 352) (340 . 344) (#("  " 0 2 (fontified nil)) . 340) (346 . 347) (340 . 342) (#("    " 0 4 (fontified nil)) . 340) (347 . 348) (345 . 347) (344 . 345) (339 . 344) (t 26072 22691 253194 403000) 338) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 339) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -5) (undo-tree-id4990 . -5) (undo-tree-id4991 . -5) (undo-tree-id4992 . -5) (undo-tree-id4993 . -1) (undo-tree-id4994 . -5) (undo-tree-id4995 . -5) (undo-tree-id4996 . -5) (undo-tree-id4997 . -5) (undo-tree-id4998 . -5) (undo-tree-id4999 . -5) (undo-tree-id5000 . -5) (undo-tree-id5001 . -5) (undo-tree-id5002 . -5) (undo-tree-id5003 . -5) (undo-tree-id5004 . -5) (undo-tree-id5005 . -5) (undo-tree-id5006 . -5) (undo-tree-id5007 . -5) (undo-tree-id5008 . -5) (undo-tree-id5009 . -5) (undo-tree-id5010 . -5) (undo-tree-id5011 . -5) (undo-tree-id5012 . -5) (undo-tree-id5013 . -5) (undo-tree-id5014 . -5) (undo-tree-id5015 . -5) (undo-tree-id5016 . -5) (undo-tree-id5017 . -5) (undo-tree-id5018 . -5) (undo-tree-id5019 . -5) (undo-tree-id5020 . -5) (undo-tree-id5021 . -5) (undo-tree-id5022 . -5) (undo-tree-id5023 . -5) (undo-tree-id5024 . -5) (undo-tree-id5025 . -5) (undo-tree-id5026 . -5) (undo-tree-id5027 . -5) (undo-tree-id5028 . -5) (undo-tree-id5029 . -5) (undo-tree-id5030 . -5) (undo-tree-id5031 . -5) (undo-tree-id5032 . -5) (undo-tree-id5033 . -5) (undo-tree-id5034 . -5) (undo-tree-id5035 . -5) (undo-tree-id5036 . -5) (undo-tree-id5037 . -5) (undo-tree-id5038 . -5) (undo-tree-id5039 . -5) (undo-tree-id5040 . -5) (undo-tree-id5041 . -5) (undo-tree-id5042 . -5) (undo-tree-id5043 . -5) (undo-tree-id5044 . -5) (undo-tree-id5045 . -5) (undo-tree-id5046 . -5) (undo-tree-id5047 . -5) (undo-tree-id5048 . -5) (undo-tree-id5049 . -5) (undo-tree-id5050 . -5) (undo-tree-id5051 . -5) (undo-tree-id5052 . -5) (undo-tree-id5053 . -5) (undo-tree-id5054 . -5) (undo-tree-id5055 . -5) (undo-tree-id5056 . -5) (undo-tree-id5057 . -5) (undo-tree-id5058 . -5) (undo-tree-id5059 . -5) (undo-tree-id5060 . -5) (undo-tree-id5061 . -5) (undo-tree-id5062 . -5) (undo-tree-id5063 . -5) (undo-tree-id5064 . -5) (undo-tree-id5065 . -5) (undo-tree-id5066 . -5) (undo-tree-id5067 . -5) (undo-tree-id5068 . -5) (undo-tree-id5069 . -5) (undo-tree-id5070 . -5) (undo-tree-id5071 . -5) (undo-tree-id5072 . -5) (undo-tree-id5073 . -5) (undo-tree-id5074 . -5) (undo-tree-id5075 . -5) (undo-tree-id5076 . -5) (undo-tree-id5077 . -5) (undo-tree-id5078 . -5) (undo-tree-id5079 . -5) (undo-tree-id5080 . -5) (undo-tree-id5081 . -5) (undo-tree-id5082 . -5) (undo-tree-id5083 . -5) (undo-tree-id5084 . -5) (undo-tree-id5085 . -5) (undo-tree-id5086 . -5) (undo-tree-id5087 . -5) (undo-tree-id5088 . -5) (undo-tree-id5089 . -5) (undo-tree-id5090 . -5) (undo-tree-id5091 . -5) (undo-tree-id5092 . -5) (undo-tree-id5093 . -5) (undo-tree-id5094 . -5) (undo-tree-id5095 . -5) (undo-tree-id5096 . -5) (undo-tree-id5097 . -5) (undo-tree-id5098 . -5) (undo-tree-id5099 . -5) (undo-tree-id5100 . -5) (undo-tree-id5101 . -5) (undo-tree-id5102 . -5) (undo-tree-id5103 . -5) (undo-tree-id5104 . -5) (undo-tree-id5105 . -5) (undo-tree-id5106 . -5) (undo-tree-id5107 . -5) (undo-tree-id5108 . -5) (undo-tree-id5109 . -5) (undo-tree-id5110 . -5) (undo-tree-id5111 . -5) (undo-tree-id5112 . -5) (undo-tree-id5113 . -5) (undo-tree-id5114 . -5) (undo-tree-id5115 . -5) (undo-tree-id5116 . -5) (undo-tree-id5117 . -5) (undo-tree-id5118 . -5) (undo-tree-id5119 . -5) (undo-tree-id5120 . -5) (undo-tree-id5121 . -5) (undo-tree-id5122 . -5) (undo-tree-id5123 . -5) (undo-tree-id5124 . -5) (undo-tree-id5125 . -5) (undo-tree-id5126 . -5) (undo-tree-id5127 . -5) (undo-tree-id5128 . -5) (undo-tree-id5129 . -5) (undo-tree-id5130 . -5) (undo-tree-id5131 . -5) (undo-tree-id5132 . -5) (undo-tree-id5133 . -5) (undo-tree-id5134 . -5) (undo-tree-id5135 . -5) (undo-tree-id5136 . -5) (undo-tree-id5137 . -5) (undo-tree-id5138 . -5) (undo-tree-id5139 . -5) (undo-tree-id5140 . -5) (undo-tree-id5141 . -5) (undo-tree-id5142 . -5) (undo-tree-id5143 . -5) (undo-tree-id5144 . -5) (undo-tree-id5145 . -5) (undo-tree-id5146 . -5) (undo-tree-id5147 . -5) (undo-tree-id5148 . -5) (undo-tree-id5149 . -5) (undo-tree-id5150 . -5) (undo-tree-id5151 . -5) (undo-tree-id5152 . -5) (undo-tree-id5153 . -5) (undo-tree-id5154 . -5) (undo-tree-id5155 . -5) (undo-tree-id5156 . -5) (undo-tree-id5157 . -5) (undo-tree-id5158 . -5) (undo-tree-id5159 . -5) (undo-tree-id5160 . -5) (undo-tree-id5161 . -5) (undo-tree-id5162 . -5) (undo-tree-id5163 . -5) (undo-tree-id5164 . -5) (undo-tree-id5165 . -5) (undo-tree-id5166 . -5) (undo-tree-id5167 . -5) (undo-tree-id5168 . -5) (undo-tree-id5169 . -5) (undo-tree-id5170 . -5) (undo-tree-id5171 . -5) (undo-tree-id5172 . -5) (undo-tree-id5173 . -5) (undo-tree-id5174 . -5) (undo-tree-id5175 . -5) (undo-tree-id5176 . -5) (undo-tree-id5177 . -5) (undo-tree-id5178 . -5) (undo-tree-id5179 . -5) (undo-tree-id5180 . -5) (undo-tree-id5181 . -5) (undo-tree-id5182 . -5) (#("s" 0 1 (fontified nil face font-lock-constant-face)) . 344) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1) (undo-tree-id5324 . -1) (undo-tree-id5325 . -1) (undo-tree-id5326 . -1) (undo-tree-id5327 . -1) (undo-tree-id5328 . -1) (undo-tree-id5329 . -1) (undo-tree-id5330 . -1) (undo-tree-id5331 . -1) (undo-tree-id5332 . -1) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) (undo-tree-id5344 . -1) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -1) (undo-tree-id5353 . -1) (undo-tree-id5354 . -1) (undo-tree-id5355 . -1) (undo-tree-id5356 . -1) (undo-tree-id5357 . -1) (undo-tree-id5358 . -1) (undo-tree-id5359 . -1) (undo-tree-id5360 . -1) (undo-tree-id5361 . -1) (undo-tree-id5362 . -1) (undo-tree-id5363 . -1) (undo-tree-id5364 . -1) (undo-tree-id5365 . -1) (undo-tree-id5366 . -1) (undo-tree-id5367 . -1) (undo-tree-id5368 . -1) (undo-tree-id5369 . -1) (undo-tree-id5370 . -1) (undo-tree-id5371 . -1) (undo-tree-id5372 . -1) (undo-tree-id5373 . -1) (undo-tree-id5374 . -1) (undo-tree-id5375 . -1) (#("td" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face)) . 345) (undo-tree-id5376 . -2) (undo-tree-id5377 . -2) (undo-tree-id5378 . -2) (undo-tree-id5379 . -2) (undo-tree-id5380 . -2) (undo-tree-id5381 . -2) (undo-tree-id5382 . -2) (undo-tree-id5383 . -2) (undo-tree-id5384 . -2) (undo-tree-id5385 . -2) (undo-tree-id5386 . -2) (undo-tree-id5387 . -2) (undo-tree-id5388 . -2) (undo-tree-id5389 . -2) (undo-tree-id5390 . -2) (undo-tree-id5391 . -2) (undo-tree-id5392 . -2) (undo-tree-id5393 . -2) (undo-tree-id5394 . -2) (undo-tree-id5395 . -2) (undo-tree-id5396 . -2) (undo-tree-id5397 . -2) (undo-tree-id5398 . -2) (undo-tree-id5399 . -2) (undo-tree-id5400 . -2) (undo-tree-id5401 . -2) (undo-tree-id5402 . -2) (undo-tree-id5403 . -2) (undo-tree-id5404 . -2) (undo-tree-id5405 . -2) (undo-tree-id5406 . -2) (undo-tree-id5407 . -2) (undo-tree-id5408 . -2) (undo-tree-id5409 . -2) (undo-tree-id5410 . -2) (undo-tree-id5411 . -2) (undo-tree-id5412 . -2) (undo-tree-id5413 . -2) (undo-tree-id5414 . -2) (undo-tree-id5415 . -2) (undo-tree-id5416 . -2) (undo-tree-id5417 . -2) (undo-tree-id5418 . -2) (undo-tree-id5419 . -2) (undo-tree-id5420 . -2) (undo-tree-id5421 . -2) (undo-tree-id5422 . -2) (undo-tree-id5423 . -2) (undo-tree-id5424 . -2) (undo-tree-id5425 . -2) (undo-tree-id5426 . -2) (undo-tree-id5427 . -2) (undo-tree-id5428 . -2) (undo-tree-id5429 . -2) (undo-tree-id5430 . -2) (undo-tree-id5431 . -2) (undo-tree-id5432 . -2) (undo-tree-id5433 . -2) (undo-tree-id5434 . -2) (undo-tree-id5435 . -2) (undo-tree-id5436 . -2) (undo-tree-id5437 . -2) (undo-tree-id5438 . -2) (undo-tree-id5439 . -2) (undo-tree-id5440 . -2) (undo-tree-id5441 . -2) (undo-tree-id5442 . -2) (undo-tree-id5443 . -2) (undo-tree-id5444 . -2) (undo-tree-id5445 . -2) (undo-tree-id5446 . -2) (undo-tree-id5447 . -2) (undo-tree-id5448 . -2) (undo-tree-id5449 . -2) (undo-tree-id5450 . -2) (undo-tree-id5451 . -2) (undo-tree-id5452 . -2) (undo-tree-id5453 . -2) (undo-tree-id5454 . -2) (undo-tree-id5455 . -2) (undo-tree-id5456 . -2) (undo-tree-id5457 . -2) (undo-tree-id5458 . -2) (undo-tree-id5459 . -2) (undo-tree-id5460 . -2) (undo-tree-id5461 . -2) (undo-tree-id5462 . -2) (undo-tree-id5463 . -2) (undo-tree-id5464 . -2) (undo-tree-id5465 . -2) (undo-tree-id5466 . -2) (undo-tree-id5467 . -2) (undo-tree-id5468 . -2) (undo-tree-id5469 . -2) (undo-tree-id5470 . -2) (undo-tree-id5471 . -2) (undo-tree-id5472 . -2) (undo-tree-id5473 . -2) (undo-tree-id5474 . -2) (undo-tree-id5475 . -2) (undo-tree-id5476 . -2) (undo-tree-id5477 . -2) (undo-tree-id5478 . -2) (undo-tree-id5479 . -2) (undo-tree-id5480 . -2) (undo-tree-id5481 . -2) (undo-tree-id5482 . -2) (undo-tree-id5483 . -2) (undo-tree-id5484 . -2) (undo-tree-id5485 . -2) (undo-tree-id5486 . -2) (undo-tree-id5487 . -2) (undo-tree-id5488 . -2) (undo-tree-id5489 . -2) (undo-tree-id5490 . -2) (undo-tree-id5491 . -2) (undo-tree-id5492 . -2) (undo-tree-id5493 . -2) (undo-tree-id5494 . -2) (undo-tree-id5495 . -2) (undo-tree-id5496 . -2) (undo-tree-id5497 . -2) (undo-tree-id5498 . -2) (undo-tree-id5499 . -2) (undo-tree-id5500 . -2) (undo-tree-id5501 . -2) (undo-tree-id5502 . -2) (undo-tree-id5503 . -2) (undo-tree-id5504 . -2) (undo-tree-id5505 . -2) (undo-tree-id5506 . -2) (undo-tree-id5507 . -2) (undo-tree-id5508 . -2) (undo-tree-id5509 . -2) (undo-tree-id5510 . -2) (undo-tree-id5511 . -2) (undo-tree-id5512 . -2) (undo-tree-id5513 . -2) (undo-tree-id5514 . -2) (undo-tree-id5515 . -2) (undo-tree-id5516 . -2) (undo-tree-id5517 . -2) (undo-tree-id5518 . -2) (undo-tree-id5519 . -2) (undo-tree-id5520 . -2) (undo-tree-id5521 . -2) (undo-tree-id5522 . -2) (undo-tree-id5523 . -2) (undo-tree-id5524 . -2) (undo-tree-id5525 . -2) (undo-tree-id5526 . -2) (undo-tree-id5527 . -2) (undo-tree-id5528 . -2) (undo-tree-id5529 . -2) (undo-tree-id5530 . -2) (undo-tree-id5531 . -2) (undo-tree-id5532 . -2) (undo-tree-id5533 . -2) (undo-tree-id5534 . -2) (undo-tree-id5535 . -2) (undo-tree-id5536 . -2) (undo-tree-id5537 . -2) (undo-tree-id5538 . -2) (undo-tree-id5539 . -2) (undo-tree-id5540 . -2) (undo-tree-id5541 . -2) (undo-tree-id5542 . -2) (undo-tree-id5543 . -2) (undo-tree-id5544 . -2) (undo-tree-id5545 . -2) (undo-tree-id5546 . -2) (undo-tree-id5547 . -2) (undo-tree-id5548 . -2) (undo-tree-id5549 . -2) (undo-tree-id5550 . -2) (undo-tree-id5551 . -2) (undo-tree-id5552 . -2) (undo-tree-id5553 . -2) (undo-tree-id5554 . -2) (undo-tree-id5555 . -2) (undo-tree-id5556 . -2) (undo-tree-id5557 . -2) (undo-tree-id5558 . -2) (undo-tree-id5559 . -2) (undo-tree-id5560 . -2) (undo-tree-id5561 . -2) (undo-tree-id5562 . -2) (undo-tree-id5563 . -2) (undo-tree-id5564 . -2) (undo-tree-id5565 . -2) (undo-tree-id5566 . -2) (undo-tree-id5567 . -2) (undo-tree-id5568 . -2) (#(":" 0 1 (fontified nil)) . 347) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) (undo-tree-id5739 . -1) (undo-tree-id5740 . -1) (undo-tree-id5741 . -1) (undo-tree-id5742 . -1) (undo-tree-id5743 . -1) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (340 . 344) (#("  " 0 2 (fontified nil)) . 340) (#(":" 0 1 (fontified nil)) . 346) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) (undo-tree-id5777 . -1) (undo-tree-id5778 . -1) (undo-tree-id5779 . -1) (undo-tree-id5780 . -1) (undo-tree-id5781 . -1) (undo-tree-id5782 . -1) (undo-tree-id5783 . -1) (undo-tree-id5784 . -1) (undo-tree-id5785 . -1) (undo-tree-id5786 . -1) (undo-tree-id5787 . -1) (undo-tree-id5788 . -1) (undo-tree-id5789 . -1) (undo-tree-id5790 . -1) (undo-tree-id5791 . -1) (undo-tree-id5792 . -1) (undo-tree-id5793 . -1) (undo-tree-id5794 . -1) (undo-tree-id5795 . -1) (undo-tree-id5796 . -1) (undo-tree-id5797 . -1) (undo-tree-id5798 . -1) (undo-tree-id5799 . -1) (undo-tree-id5800 . -1) (undo-tree-id5801 . -1) (undo-tree-id5802 . -1) (undo-tree-id5803 . -1) (undo-tree-id5804 . -1) (undo-tree-id5805 . -1) (undo-tree-id5806 . -1) (undo-tree-id5807 . -1) (undo-tree-id5808 . -1) (undo-tree-id5809 . -1) (undo-tree-id5810 . -1) (undo-tree-id5811 . -1) (undo-tree-id5812 . -1) (undo-tree-id5813 . -1) (undo-tree-id5814 . -1) (undo-tree-id5815 . -1) (undo-tree-id5816 . -1) (undo-tree-id5817 . -1) (undo-tree-id5818 . -1) (undo-tree-id5819 . -1) (undo-tree-id5820 . -1) (undo-tree-id5821 . -1) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) (undo-tree-id5885 . -1) (undo-tree-id5886 . -1) (undo-tree-id5887 . -1) (undo-tree-id5888 . -1) (undo-tree-id5889 . -1) (undo-tree-id5890 . -1) (undo-tree-id5891 . -1) (undo-tree-id5892 . -1) (undo-tree-id5893 . -1) (undo-tree-id5894 . -1) (undo-tree-id5895 . -1) (undo-tree-id5896 . -1) (undo-tree-id5897 . -1) (undo-tree-id5898 . -1) (undo-tree-id5899 . -1) (undo-tree-id5900 . -1) (undo-tree-id5901 . -1) (undo-tree-id5902 . -1) (undo-tree-id5903 . -1) (undo-tree-id5904 . -1) (undo-tree-id5905 . -1) (undo-tree-id5906 . -1) (undo-tree-id5907 . -1) (undo-tree-id5908 . -1) (undo-tree-id5909 . -1) (undo-tree-id5910 . -1) (undo-tree-id5911 . -1) (undo-tree-id5912 . -1) (undo-tree-id5913 . -1) (undo-tree-id5914 . -1) (undo-tree-id5915 . -1) (undo-tree-id5916 . -1) (undo-tree-id5917 . -1) (undo-tree-id5918 . -1) (undo-tree-id5919 . -1) (undo-tree-id5920 . -1) (undo-tree-id5921 . -1) (undo-tree-id5922 . -1) (undo-tree-id5923 . -1) (undo-tree-id5924 . -1) (undo-tree-id5925 . -1) (undo-tree-id5926 . -1) (undo-tree-id5927 . -1) (undo-tree-id5928 . -1) (undo-tree-id5929 . -1) (undo-tree-id5930 . -1) (undo-tree-id5931 . -1) (undo-tree-id5932 . -1) (undo-tree-id5933 . -1) (undo-tree-id5934 . -1) (undo-tree-id5935 . -1) (undo-tree-id5936 . -1) (undo-tree-id5937 . -1) (undo-tree-id5938 . -1) (undo-tree-id5939 . -1) (undo-tree-id5940 . -1) (undo-tree-id5941 . -1) (undo-tree-id5942 . -1) (undo-tree-id5943 . -1) (undo-tree-id5944 . -1) (undo-tree-id5945 . -1) (undo-tree-id5946 . -1) (undo-tree-id5947 . -1) (undo-tree-id5948 . -1) (undo-tree-id5949 . -1) (undo-tree-id5950 . -1) (undo-tree-id5951 . -1) (undo-tree-id5952 . -1) (undo-tree-id5953 . -1) (undo-tree-id5954 . -1) (340 . 342) (#("    " 0 4 (fontified nil)) . 340) (#("vec" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 349) (undo-tree-id5955 . -3) (undo-tree-id5956 . -3) (349 . 352) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (fontified nil syntax-table (4 . 62)) 7 18 (fontified nil) 18 19 (fontified nil c-type c-<>-arg-sep) 19 34 (fontified nil) 34 35 (fontified nil syntax-table (5 . 60))) . 349) (349 . 384) (#("v" 0 1 (fontified nil)) . 349) (349 . 350) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 349) (349 . 373) (#("vector<typename Tp>" 0 6 (fontified nil face font-lock-type-face) 6 7 (fontified nil face (rainbow-delimiters-depth-3-face) syntax-table (4 . 62)) 7 15 (fontified nil face font-lock-keyword-face) 15 16 (fontified nil) 16 18 (fontified nil face font-lock-type-face) 18 19 (fontified nil c-type c-decl-id-start face (rainbow-delimiters-depth-3-face) syntax-table (5 . 60))) . 349) (undo-tree-id5957 . -7) (undo-tree-id5958 . -19) (undo-tree-id5959 . -19) (undo-tree-id5960 . -19) (undo-tree-id5961 . -19) (undo-tree-id5962 . -19) (undo-tree-id5963 . -19) (undo-tree-id5964 . -19) (undo-tree-id5965 . -19) (undo-tree-id5966 . -19) (undo-tree-id5967 . -19) (undo-tree-id5968 . -19) (undo-tree-id5969 . -19) (undo-tree-id5970 . -19) (undo-tree-id5971 . -19) (undo-tree-id5972 . -19) (undo-tree-id5973 . -19) (undo-tree-id5974 . -19) (undo-tree-id5975 . -19) (undo-tree-id5976 . -19) (undo-tree-id5977 . -19) (undo-tree-id5978 . -19) (undo-tree-id5979 . -19) (undo-tree-id5980 . -19) (undo-tree-id5981 . -19) (undo-tree-id5982 . -19) (undo-tree-id5983 . -19) (undo-tree-id5984 . -19) (undo-tree-id5985 . -19) (undo-tree-id5986 . -19) (undo-tree-id5987 . -19) (undo-tree-id5988 . -19) (undo-tree-id5989 . -19) (undo-tree-id5990 . -19) (undo-tree-id5991 . -19) (undo-tree-id5992 . -19) (undo-tree-id5993 . -19) (undo-tree-id5994 . -19) (undo-tree-id5995 . -19) (undo-tree-id5996 . -19) (undo-tree-id5997 . -19) (undo-tree-id5998 . -19) (undo-tree-id5999 . -19) (undo-tree-id6000 . -19) (undo-tree-id6001 . -19) (undo-tree-id6002 . -19) (undo-tree-id6003 . -19) (undo-tree-id6004 . -19) (undo-tree-id6005 . -19) (undo-tree-id6006 . -19) (undo-tree-id6007 . -19) (undo-tree-id6008 . -19) (undo-tree-id6009 . -19) (undo-tree-id6010 . -19) (undo-tree-id6011 . -19) (undo-tree-id6012 . -19) (undo-tree-id6013 . -19) (undo-tree-id6014 . -19) (undo-tree-id6015 . -19) (undo-tree-id6016 . -19) (undo-tree-id6017 . -19) (undo-tree-id6018 . -19) (undo-tree-id6019 . -19) (undo-tree-id6020 . -19) (undo-tree-id6021 . -19) (undo-tree-id6022 . -19) (undo-tree-id6023 . -19) (undo-tree-id6024 . -19) (undo-tree-id6025 . -19) (undo-tree-id6026 . -19) (undo-tree-id6027 . -19) (undo-tree-id6028 . -19) (undo-tree-id6029 . -19) (undo-tree-id6030 . -19) (undo-tree-id6031 . -19) (undo-tree-id6032 . -19) (undo-tree-id6033 . -19) (undo-tree-id6034 . -19) (undo-tree-id6035 . -19) (undo-tree-id6036 . -19) (undo-tree-id6037 . -19) (undo-tree-id6038 . -19) (undo-tree-id6039 . -19) (undo-tree-id6040 . -19) (undo-tree-id6041 . -19) (undo-tree-id6042 . -19) (undo-tree-id6043 . -19) (undo-tree-id6044 . -19) (undo-tree-id6045 . -19) (undo-tree-id6046 . -19) (undo-tree-id6047 . -19) (undo-tree-id6048 . -19) (undo-tree-id6049 . -19) (undo-tree-id6050 . -19) (undo-tree-id6051 . -19) (undo-tree-id6052 . -19) (undo-tree-id6053 . -19) (undo-tree-id6054 . -19) (undo-tree-id6055 . -19) (undo-tree-id6056 . -19) (undo-tree-id6057 . -19) (undo-tree-id6058 . -19) (undo-tree-id6059 . -19) (undo-tree-id6060 . -19) (undo-tree-id6061 . -19) (undo-tree-id6062 . -19) (undo-tree-id6063 . -19) (undo-tree-id6064 . -19) (undo-tree-id6065 . -19) (undo-tree-id6066 . -19) (undo-tree-id6067 . -19) (undo-tree-id6068 . -19) (undo-tree-id6069 . -19) (undo-tree-id6070 . -19) (undo-tree-id6071 . -19) (undo-tree-id6072 . -19) (undo-tree-id6073 . -19) (undo-tree-id6074 . -19) (undo-tree-id6075 . -19) (undo-tree-id6076 . -19) (undo-tree-id6077 . -19) (undo-tree-id6078 . -19) (undo-tree-id6079 . -19) (undo-tree-id6080 . -19) (undo-tree-id6081 . -19) (undo-tree-id6082 . -19) (undo-tree-id6083 . -19) (undo-tree-id6084 . -19) (undo-tree-id6085 . -19) (undo-tree-id6086 . -19) (undo-tree-id6087 . -19) (undo-tree-id6088 . -19) (undo-tree-id6089 . -19) (undo-tree-id6090 . -19) (undo-tree-id6091 . -19) (undo-tree-id6092 . -19) (undo-tree-id6093 . -19) (undo-tree-id6094 . -19) (undo-tree-id6095 . -19) (undo-tree-id6096 . -19) (undo-tree-id6097 . -19) (undo-tree-id6098 . -19) (undo-tree-id6099 . -19) (undo-tree-id6100 . -19) (undo-tree-id6101 . -19) (undo-tree-id6102 . -19) (undo-tree-id6103 . -19) (undo-tree-id6104 . -19) (undo-tree-id6105 . -19) (undo-tree-id6106 . -19) (undo-tree-id6107 . -19) (undo-tree-id6108 . -19) (undo-tree-id6109 . -19) (undo-tree-id6110 . -19) (undo-tree-id6111 . -19) (undo-tree-id6112 . -19) (undo-tree-id6113 . -19) (undo-tree-id6114 . -19) (undo-tree-id6115 . -19) (undo-tree-id6116 . -19) (undo-tree-id6117 . -19) (undo-tree-id6118 . -19) (undo-tree-id6119 . -19) (undo-tree-id6120 . -19) (undo-tree-id6121 . -19) (undo-tree-id6122 . -19) (undo-tree-id6123 . -19) (undo-tree-id6124 . -19) (undo-tree-id6125 . -19) (undo-tree-id6126 . -19) (undo-tree-id6127 . -19) (undo-tree-id6128 . -19) (undo-tree-id6129 . -19) (undo-tree-id6130 . -19) (undo-tree-id6131 . -19) (undo-tree-id6132 . -19) (undo-tree-id6133 . -19) (undo-tree-id6134 . -19) (undo-tree-id6135 . -19) (undo-tree-id6136 . -19) (undo-tree-id6137 . -19) (undo-tree-id6138 . -19) (undo-tree-id6139 . -19) (undo-tree-id6140 . -19) (undo-tree-id6141 . -19) (undo-tree-id6142 . -19) (undo-tree-id6143 . -19) (undo-tree-id6144 . -19) (undo-tree-id6145 . -19) (undo-tree-id6146 . -19) (undo-tree-id6147 . -19) (undo-tree-id6148 . -19) (undo-tree-id6149 . -19) (apply yas--snippet-revive 349 368 #s(yas--snippet nil (#s(yas--field 1 356 356 nil nil nil t nil)) nil 18 nil #s(yas--field 1 356 356 nil nil nil t nil) nil nil)) (#("t" 0 1 (fontified nil)) . 356) (357 . 368) (#("ok" 0 1 (fontified nil) 1 2 (fontified nil)) . 357) (356 . 359) (#("token_class" 0 11 (fontified nil face (rainbow-delimiters-depth-3-face))) . 356) (nil face nil 356 . 367) (356 . 367) (#("to" 0 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 356) (nil face nil 356 . 358) (356 . 358) (#("token_class" 0 11 (fontified nil face (rainbow-delimiters-depth-3-face))) . 356) (undo-tree-id6150 . -11) (nil face font-lock-constant-face 356 . 367) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 367) (undo-tree-id6151 . -2) (#("bnf_token" 0 9 (fontified nil)) . 369) (369 . 378) (#("bnf_token" 0 9 (fontified nil face font-lock-type-face)) . 369) (undo-tree-id6152 . -9) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 356 356 nil nil nil t nil)) nil 18 nil #s(yas--field 1 356 356 nil nil nil t nil) nil nil)) (#(" mdzz" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-function-name-face) 2 3 (fontified nil face font-lock-function-name-face) 3 4 (fontified nil face font-lock-function-name-face) 4 5 (fontified nil face font-lock-function-name-face)) . 379) (undo-tree-id6153 . -1) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 384) (#(";" 0 1 (fontified t)) . 386) (727 . 739) (#("mdzz" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 727) (undo-tree-id6154 . 4) (undo-tree-id6155 . -3) (undo-tree-id6156 . -4) (undo-tree-id6157 . -4) (671 . 716)) (26072 23626 65585 510000) 0 (:visualizer [1 1 1 #<marker in no buffer>])])
nil
([nil nil ((236 . 242) (#("st" 0 2 (fontified nil)) . 236) (236 . 238) (#("static" 0 6 (fontified nil)) . -236) (236 . 242) (#("stat" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -236) (undo-tree-id6167 . -4) (undo-tree-id6168 . -4) (undo-tree-id6169 . -4) (undo-tree-id6170 . -4) (undo-tree-id6171 . -4) (undo-tree-id6172 . -4) (undo-tree-id6173 . -4) (undo-tree-id6174 . -4) (undo-tree-id6175 . -4) (undo-tree-id6176 . -4) (undo-tree-id6177 . -4) (undo-tree-id6178 . -4) (undo-tree-id6179 . -4) (undo-tree-id6180 . -4) (undo-tree-id6181 . -4) (undo-tree-id6182 . -4) (undo-tree-id6183 . -4) (undo-tree-id6184 . -4) (undo-tree-id6185 . -4) (undo-tree-id6186 . -4) 240 (236 . 240) (236 . 237) (#("O" 0 1 (fontified t face font-lock-constant-face)) . -236) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) 237 (236 . 237)) nil (26072 23655 569903 848000) 0 nil])
([nil nil ((#("std::vector<token_class::bnf_token>" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-3-face)) 12 23 (fontified t face font-lock-constant-face) 23 24 (fontified t) 24 25 (fontified t) 25 34 (fontified t face font-lock-type-face) 34 35 (fontified t syntax-table (5 . 60) c-type c-decl-id-start face (rainbow-delimiters-depth-3-face))) . 344) (undo-tree-id1936 . -34) (undo-tree-id1937 . -12) (undo-tree-id1938 . -35) (undo-tree-id1939 . -35) 379 (t 26072 23066 476518 723000)) ((344 . 379)) (26072 23625 784578 706000) 0 (:visualizer [1 1 1 #<marker in no buffer>])])
([nil nil ((479 . 488) (475 . 479) (t 26072 23655 586504 464000)) nil (26072 23744 453161 110000) 0 nil])
([nil nil ((nil fontified nil 604 . 608) (nil face (rainbow-delimiters-depth-3-face) 604 . 608) (604 . 608) (#("boo" 0 3 (fontified nil)) . 604) (nil fontified nil 604 . 607) (nil face (rainbow-delimiters-depth-3-face) 604 . 607) (604 . 607) (#("bool" 0 4 (fontified nil)) . -604) (nil fontified nil 604 . 608) (nil face (rainbow-delimiters-depth-3-face) 604 . 608) (604 . 608) (#("boo" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -604) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) 607 (604 . 607) (#("s" 0 1 (fontified t)) . -604) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (#("t" 0 1 (fontified t)) . -605) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (#("d" 0 1 (fontified t)) . -606) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (#(":" 0 1 (fontified t)) . -607) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#(":" 0 1 (fontified t)) . -608) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (#("v" 0 1 (fontified t)) . -609) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (#("e" 0 1 (fontified t)) . -610) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (#("c" 0 1 (fontified t)) . -611) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (#("t" 0 1 (fontified t)) . -612) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) 613 (#("o" 0 1 (fontified t)) . -613) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (#("r" 0 1 (fontified t)) . -614) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (#("<" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -615) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#("t" 0 1 (fontified t)) . -616) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (#("o" 0 1 (fontified t)) . -617) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) 618 (#("k" 0 1 (fontified t)) . -618) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (#("e" 0 1 (fontified t)) . -619) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (#("n" 0 1 (fontified t)) . -620) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (#("_" 0 1 (fontified t)) . -621) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (#("c" 0 1 (fontified t)) . -622) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (#("l" 0 1 (fontified t)) . -623) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (#("a" 0 1 (fontified t)) . -624) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (#("s" 0 1 (fontified t)) . -625) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (#("s" 0 1 (fontified t)) . -626) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (#(":" 0 1 (fontified t)) . -627) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (#(":" 0 1 (fontified t)) . -628) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#("b" 0 1 (fontified t)) . -629) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (#("n" 0 1 (fontified t)) . -630) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (#("f" 0 1 (fontified t)) . -631) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (#("_" 0 1 (fontified t)) . -632) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (#("t" 0 1 (fontified t)) . -633) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (#("o" 0 1 (fontified t)) . -634) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("k" 0 1 (fontified t)) . -635) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (#("e" 0 1 (fontified t)) . -636) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (#("n" 0 1 (fontified t)) . -637) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (#(">" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -638) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . 1) (undo-tree-id1933 . -1) 639 (344 . 348) (#("bool" 0 4 (fontified nil)) . 344) (344 . 348) (#("bool" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -344) (undo-tree-id1934 . -4) (undo-tree-id1935 . -4) 348 (344 . 348)) ((#("bool" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face)) . 344) (344 . 348) (#("bool" 0 4 (fontified nil)) . 344) (344 . 348) (#("bool" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 344) (604 . 639) (#("boo" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 604) (604 . 607) (#("bool" 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 604) (nil face nil 604 . 608) (604 . 608) (#("boo" 0 3 (fontified nil face (rainbow-delimiters-depth-3-face))) . 604) (nil face nil 604 . 607) (604 . 607) (#("bool" 0 4 (fontified nil face (rainbow-delimiters-depth-3-face))) . 604) (undo-tree-id4985 . -4) (undo-tree-id4986 . -4) (nil face font-lock-type-face 604 . 608) (nil fontified t 604 . 608)) (26072 23625 426832 693000) 0 (:visualizer [1 1 1 #<marker in no buffer>])])
([nil nil ((#("=" 0 1 (fontified t)) . -698) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (#("i" 0 1 (fontified t)) . -699) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (#("n" 0 1 (fontified t)) . -700) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (#("i" 0 1 (fontified t)) . -701) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (#("t" 0 1 (fontified t)) . -702) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (#("_" 0 1 (fontified t)) . -703) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (#("r" 0 1 (fontified t)) . -704) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (#("e" 0 1 (fontified t)) . -705) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (#("t" 0 1 (fontified t)) . -706) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (#("_" 0 1 (fontified t)) . -707) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (#("f" 0 1 (fontified t)) . -708) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (#("u" 0 1 (fontified t)) . -709) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (#("n" 0 1 (fontified t)) . -710) (undo-tree-id6217 . -1) 711 (t 26072 23744 466502 311000)) nil (26072 23913 666470 136000) 0 nil])
([nil nil ((625 . 626) (620 . 621) 624) ((#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . 620) (undo-tree-id4899 . -1) (undo-tree-id4900 . 1) (undo-tree-id4901 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 625) (undo-tree-id4902 . 1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . 1) (undo-tree-id4984 . -1)) (26072 23625 109603 893000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((609 . 621) (#("sy" 0 2 (fontified nil)) . 609) (609 . 611) (#("synatax_read" 0 12 (fontified nil)) . -609) (609 . 621) (#("sy" 0 1 (fontified t face font-lock-function-name-face) 1 2 (fontified t face font-lock-function-name-face)) . -609) (undo-tree-id1974 . -2) (undo-tree-id1975 . -2) 611 (609 . 611) (608 . 610)) ((#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 608) (undo-tree-id2628 . 1) (undo-tree-id2629 . -2) (undo-tree-id2630 . -2) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . 1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . 1) (undo-tree-id2875 . -2) (undo-tree-id2876 . 2) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -2) (undo-tree-id2959 . -2) (undo-tree-id2960 . -2) (undo-tree-id2961 . -2) (undo-tree-id2962 . -2) (undo-tree-id2963 . -2) (undo-tree-id2964 . -2) (undo-tree-id2965 . -2) (undo-tree-id2966 . -2) (undo-tree-id2967 . -2) (undo-tree-id2968 . -2) (undo-tree-id2969 . -2) (undo-tree-id2970 . -2) (undo-tree-id2971 . -2) (undo-tree-id2972 . -2) (undo-tree-id2973 . -2) (undo-tree-id2974 . -2) (undo-tree-id2975 . -2) (undo-tree-id2976 . -2) (undo-tree-id2977 . -2) (undo-tree-id2978 . -2) (undo-tree-id2979 . -2) (undo-tree-id2980 . -2) (undo-tree-id2981 . -2) (undo-tree-id2982 . -2) (undo-tree-id2983 . -2) (undo-tree-id2984 . -2) (undo-tree-id2985 . -2) (undo-tree-id2986 . -2) (undo-tree-id2987 . -2) (undo-tree-id2988 . -2) (undo-tree-id2989 . -2) (undo-tree-id2990 . -2) (undo-tree-id2991 . -2) (undo-tree-id2992 . -2) (undo-tree-id2993 . -2) (undo-tree-id2994 . -2) (undo-tree-id2995 . -2) (undo-tree-id2996 . -2) (undo-tree-id2997 . -2) (undo-tree-id2998 . -2) (undo-tree-id2999 . -2) (undo-tree-id3000 . -2) (undo-tree-id3001 . -2) (undo-tree-id3002 . -2) (undo-tree-id3003 . -2) (undo-tree-id3004 . -2) (undo-tree-id3005 . -2) (undo-tree-id3006 . -2) (undo-tree-id3007 . -2) (undo-tree-id3008 . -2) (undo-tree-id3009 . -2) (undo-tree-id3010 . -2) (undo-tree-id3011 . -2) (undo-tree-id3012 . -2) (undo-tree-id3013 . -2) (undo-tree-id3014 . -2) (undo-tree-id3015 . -2) (undo-tree-id3016 . -2) (undo-tree-id3017 . -2) (undo-tree-id3018 . -2) (undo-tree-id3019 . -2) (undo-tree-id3020 . -2) (undo-tree-id3021 . -2) (undo-tree-id3022 . -2) (undo-tree-id3023 . -2) (undo-tree-id3024 . -2) (undo-tree-id3025 . -2) (undo-tree-id3026 . -2) (undo-tree-id3027 . -2) (undo-tree-id3028 . -2) (undo-tree-id3029 . -2) (undo-tree-id3030 . -2) (undo-tree-id3031 . -2) (undo-tree-id3032 . -2) (undo-tree-id3033 . -2) (undo-tree-id3034 . -2) (undo-tree-id3035 . -2) (undo-tree-id3036 . -2) (undo-tree-id3037 . -2) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) (undo-tree-id3215 . -1) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (#("sy" 0 1 (fontified nil face font-lock-function-name-face) 1 2 (fontified nil face font-lock-function-name-face)) . 609) (undo-tree-id3228 . -2) (undo-tree-id3229 . -2) (609 . 611) (#("synatax_read" 0 12 (fontified nil)) . 609) (609 . 621) (#("sy" 0 2 (fontified nil)) . 609) (609 . 611) (#("synatax_read" 0 12 (fontified t face font-lock-function-name-face)) . 609) (undo-tree-id3230 . -12) (undo-tree-id3231 . -12) (undo-tree-id3232 . -12) (undo-tree-id3233 . -12) (undo-tree-id3234 . -12) (undo-tree-id3235 . -12) (undo-tree-id3236 . -12) (undo-tree-id3237 . -12) (undo-tree-id3238 . -12) (undo-tree-id3239 . -12) (undo-tree-id3240 . -12) (undo-tree-id3241 . -12) (undo-tree-id3242 . -12) (undo-tree-id3243 . -12) (undo-tree-id3244 . -12) (undo-tree-id3245 . -12) (undo-tree-id3246 . -12) (undo-tree-id3247 . -12) (undo-tree-id3248 . -12) (undo-tree-id3249 . -12) (undo-tree-id3250 . -12) (undo-tree-id3251 . -12) (undo-tree-id3252 . -12) (undo-tree-id3253 . -12) (undo-tree-id3254 . -12) (undo-tree-id3255 . -12) (undo-tree-id3256 . -12) (undo-tree-id3257 . -12) (undo-tree-id3258 . -12) (undo-tree-id3259 . -12) (undo-tree-id3260 . -12) (undo-tree-id3261 . -12) (undo-tree-id3262 . -12) (undo-tree-id3263 . -12) (undo-tree-id3264 . -12) (undo-tree-id3265 . -12) (undo-tree-id3266 . -12) (undo-tree-id3267 . -12) (undo-tree-id3268 . -12) (undo-tree-id3269 . -12) (undo-tree-id3270 . -12) (undo-tree-id3271 . -12) (undo-tree-id3272 . -12) (undo-tree-id3273 . -12) (undo-tree-id3274 . -12) (undo-tree-id3275 . -12) (undo-tree-id3276 . -12) (undo-tree-id3277 . -12) (undo-tree-id3278 . -12) (undo-tree-id3279 . -12) (undo-tree-id3280 . -12) (undo-tree-id3281 . -12) (undo-tree-id3282 . -12) (undo-tree-id3283 . -12) (undo-tree-id3284 . -12) (undo-tree-id3285 . -12) (undo-tree-id3286 . -12) (undo-tree-id3287 . -12) (undo-tree-id3288 . -12) (undo-tree-id3289 . -12) (undo-tree-id3290 . -12) (undo-tree-id3291 . -12) (undo-tree-id3292 . -12) (undo-tree-id3293 . -12) (undo-tree-id3294 . -12) (undo-tree-id3295 . -12) (undo-tree-id3296 . -12) (undo-tree-id3297 . -12) (undo-tree-id3298 . -12) (undo-tree-id3299 . -12) (undo-tree-id3300 . -12) (undo-tree-id3301 . -12) (undo-tree-id3302 . -12) (undo-tree-id3303 . -12) (undo-tree-id3304 . -12) (undo-tree-id3305 . -12) (undo-tree-id3306 . -12) (undo-tree-id3307 . -12) (undo-tree-id3308 . -12) (undo-tree-id3309 . -12) (undo-tree-id3310 . -12) (undo-tree-id3311 . -12) (undo-tree-id3312 . -12) (undo-tree-id3313 . -12) (undo-tree-id3314 . -12) (undo-tree-id3315 . -12) (undo-tree-id3316 . -12) (undo-tree-id3317 . -12) (undo-tree-id3318 . -12) (undo-tree-id3319 . -12) (undo-tree-id3320 . -12) (undo-tree-id3321 . -12) (undo-tree-id3322 . -12) (undo-tree-id3323 . -12) (undo-tree-id3324 . -12) (undo-tree-id3325 . -12) (undo-tree-id3326 . -12) (undo-tree-id3327 . -12) (undo-tree-id3328 . -12) (undo-tree-id3329 . -12) (undo-tree-id3330 . -12) (undo-tree-id3331 . -12) (undo-tree-id3332 . -12) (undo-tree-id3333 . -12) (undo-tree-id3334 . -12) (undo-tree-id3335 . -12) (undo-tree-id3336 . -12) (undo-tree-id3337 . -12) (undo-tree-id3338 . -12) (undo-tree-id3339 . -12) (undo-tree-id3340 . -12) (undo-tree-id3341 . -12) (undo-tree-id3342 . -12) (undo-tree-id3343 . -12) (undo-tree-id3344 . -12) (undo-tree-id3345 . -12) (undo-tree-id3346 . -12) (undo-tree-id3347 . -12) (undo-tree-id3348 . -12) (undo-tree-id3349 . -12) (undo-tree-id3350 . -12) (undo-tree-id3351 . -12) (undo-tree-id3352 . -12) (undo-tree-id3353 . -12) (undo-tree-id3354 . -12) (undo-tree-id3355 . -12) (undo-tree-id3356 . -12) (undo-tree-id3357 . -12) (undo-tree-id3358 . -12) (undo-tree-id3359 . -12) (undo-tree-id3360 . -12) (undo-tree-id3361 . -12) (undo-tree-id3362 . -12) (undo-tree-id3363 . -12) (undo-tree-id3364 . -12) (undo-tree-id3365 . -12) (undo-tree-id3366 . -12) (undo-tree-id3367 . -12) (undo-tree-id3368 . -12) (undo-tree-id3369 . -12) (undo-tree-id3370 . -12) (undo-tree-id3371 . -12) (undo-tree-id3372 . -12) (undo-tree-id3373 . -12) (undo-tree-id3374 . -12) (undo-tree-id3375 . -12) (undo-tree-id3376 . -12) (undo-tree-id3377 . -12) (undo-tree-id3378 . -12) (undo-tree-id3379 . -12) (undo-tree-id3380 . -12) (undo-tree-id3381 . -12) (undo-tree-id3382 . -12) (undo-tree-id3383 . -12) (undo-tree-id3384 . -12) (undo-tree-id3385 . -12) (undo-tree-id3386 . -12) (undo-tree-id3387 . -12) (undo-tree-id3388 . -12) (undo-tree-id3389 . -12) (undo-tree-id3390 . -12) (undo-tree-id3391 . -12) (undo-tree-id3392 . -12) (undo-tree-id3393 . -12) (undo-tree-id3394 . -12) (undo-tree-id3395 . -12) (undo-tree-id3396 . -12) (undo-tree-id3397 . -12) (undo-tree-id3398 . -12) (undo-tree-id3399 . -12) (undo-tree-id3400 . -12) (undo-tree-id3401 . -12) (undo-tree-id3402 . -12) (undo-tree-id3403 . -12) (undo-tree-id3404 . -12) (undo-tree-id3405 . -12) (undo-tree-id3406 . -12) (undo-tree-id3407 . -12) (undo-tree-id3408 . -12) (undo-tree-id3409 . -12) (undo-tree-id3410 . -12) (undo-tree-id3411 . -12) (undo-tree-id3412 . -12) (undo-tree-id3413 . -12) (undo-tree-id3414 . -12) (undo-tree-id3415 . -12) (undo-tree-id3416 . -12) (undo-tree-id3417 . -12) (undo-tree-id3418 . -12) (undo-tree-id3419 . -12) (undo-tree-id3420 . -12) (undo-tree-id3421 . -12) (undo-tree-id3422 . -12) (undo-tree-id3423 . -12) (undo-tree-id3424 . -12) (undo-tree-id3425 . -12) (undo-tree-id3426 . -12) (undo-tree-id3427 . -12) (undo-tree-id3428 . -12) (undo-tree-id3429 . -12) (undo-tree-id3430 . -12) (undo-tree-id3431 . -12) (undo-tree-id3432 . -12) (undo-tree-id3433 . -12) (undo-tree-id3434 . -12) (undo-tree-id3435 . -12) (undo-tree-id3436 . -12) (undo-tree-id3437 . -12) (undo-tree-id3438 . -12) (undo-tree-id3439 . -12) (undo-tree-id3440 . -12) (undo-tree-id3441 . -12) (undo-tree-id3442 . -12) (undo-tree-id3443 . -12) (undo-tree-id3444 . -12) (undo-tree-id3445 . -12) (undo-tree-id3446 . -12) (undo-tree-id3447 . -12) (undo-tree-id3448 . -12) (undo-tree-id3449 . -12) (undo-tree-id3450 . -12) (undo-tree-id3451 . -12) (undo-tree-id3452 . -12) (undo-tree-id3453 . -12) (undo-tree-id3454 . -12) (undo-tree-id3455 . -12) (undo-tree-id3456 . -12) (undo-tree-id3457 . -12) (undo-tree-id3458 . -12) (undo-tree-id3459 . -12) (undo-tree-id3460 . -12) (undo-tree-id3461 . -12) (undo-tree-id3462 . -12) (undo-tree-id3463 . -12) (undo-tree-id3464 . -12) (undo-tree-id3465 . -12) (undo-tree-id3466 . -12) (undo-tree-id3467 . -12) (undo-tree-id3468 . -12) (undo-tree-id3469 . -12) (undo-tree-id3470 . -12) (undo-tree-id3471 . -12) (undo-tree-id3472 . -12) (undo-tree-id3473 . -12) (undo-tree-id3474 . -12) (undo-tree-id3475 . -12) (undo-tree-id3476 . -12) (undo-tree-id3477 . -12) (undo-tree-id3478 . -12) (undo-tree-id3479 . -12) (undo-tree-id3480 . -12) (undo-tree-id3481 . -12) (undo-tree-id3482 . -12) (undo-tree-id3483 . -12) (undo-tree-id3484 . -12) (undo-tree-id3485 . -12) (undo-tree-id3486 . -12) (undo-tree-id3487 . -12) (undo-tree-id3488 . -12) (undo-tree-id3489 . -12) (undo-tree-id3490 . -12) (undo-tree-id3491 . -12) (undo-tree-id3492 . -12) (undo-tree-id3493 . -12) (undo-tree-id3494 . -12) (undo-tree-id3495 . -12) (undo-tree-id3496 . -12) (undo-tree-id3497 . -12) (undo-tree-id3498 . -12) (undo-tree-id3499 . -12) (undo-tree-id3500 . -12) (undo-tree-id3501 . -12) (undo-tree-id3502 . -12) (undo-tree-id3503 . -12) (undo-tree-id3504 . -12) (undo-tree-id3505 . -12) (undo-tree-id3506 . -12) (undo-tree-id3507 . -12) (undo-tree-id3508 . -12) (undo-tree-id3509 . -12) (undo-tree-id3510 . -12) (undo-tree-id3511 . -12) (undo-tree-id3512 . -12) (undo-tree-id3513 . -12) (undo-tree-id3514 . -12) (undo-tree-id3515 . -12) (undo-tree-id3516 . -12) (undo-tree-id3517 . -12) (undo-tree-id3518 . -12) (undo-tree-id3519 . -12) (undo-tree-id3520 . -12) (undo-tree-id3521 . -12) (undo-tree-id3522 . -12) (undo-tree-id3523 . -12) (undo-tree-id3524 . -12) (undo-tree-id3525 . -12) (undo-tree-id3526 . -12) (undo-tree-id3527 . -12) (undo-tree-id3528 . -12) (undo-tree-id3529 . -12) (undo-tree-id3530 . -12) (undo-tree-id3531 . -12) (undo-tree-id3532 . -12) (undo-tree-id3533 . -12) (undo-tree-id3534 . -12) (undo-tree-id3535 . -12) (undo-tree-id3536 . -12) (undo-tree-id3537 . -12) (undo-tree-id3538 . -12) (undo-tree-id3539 . -12) (undo-tree-id3540 . -12) (undo-tree-id3541 . -12) (undo-tree-id3542 . -12) (undo-tree-id3543 . -12) (undo-tree-id3544 . -12) (undo-tree-id3545 . -12) (undo-tree-id3546 . -12) (undo-tree-id3547 . -12) (undo-tree-id3548 . -12) (undo-tree-id3549 . -12) (undo-tree-id3550 . -12) (undo-tree-id3551 . -12) (undo-tree-id3552 . -12) (undo-tree-id3553 . -12) (undo-tree-id3554 . -12) (undo-tree-id3555 . -12) (undo-tree-id3556 . -12) (undo-tree-id3557 . -12) (undo-tree-id3558 . -12) (undo-tree-id3559 . -12) (undo-tree-id3560 . -12) (undo-tree-id3561 . -12) (undo-tree-id3562 . -12) (undo-tree-id3563 . -12) (undo-tree-id3564 . -12) (undo-tree-id3565 . -12) (undo-tree-id3566 . -12) (undo-tree-id3567 . -12) (undo-tree-id3568 . -12) (undo-tree-id3569 . -12) (undo-tree-id3570 . -12) (undo-tree-id3571 . -12) (undo-tree-id3572 . -12) (undo-tree-id3573 . -12) (undo-tree-id3574 . -12) (undo-tree-id3575 . -12) (undo-tree-id3576 . -12) (undo-tree-id3577 . -12) (undo-tree-id3578 . -12) (undo-tree-id3579 . -12) (undo-tree-id3580 . -12) (undo-tree-id3581 . -12) (undo-tree-id3582 . -12) (undo-tree-id3583 . -12) (undo-tree-id3584 . -12) (undo-tree-id3585 . -12) (undo-tree-id3586 . -12) (undo-tree-id3587 . -12) (undo-tree-id3588 . -12) (undo-tree-id3589 . -12) (undo-tree-id3590 . -12) (undo-tree-id3591 . -12) (undo-tree-id3592 . -12) (undo-tree-id3593 . -12) (undo-tree-id3594 . -12) (undo-tree-id3595 . -12) (undo-tree-id3596 . -12) (undo-tree-id3597 . -12) (undo-tree-id3598 . -12) (undo-tree-id3599 . -12) (undo-tree-id3600 . -12) (undo-tree-id3601 . -12) (undo-tree-id3602 . -12) (undo-tree-id3603 . -12) (undo-tree-id3604 . -12) (undo-tree-id3605 . -12) (undo-tree-id3606 . -12) (undo-tree-id3607 . -12) (undo-tree-id3608 . -12) (undo-tree-id3609 . -12) (undo-tree-id3610 . -12) (undo-tree-id3611 . -12) (undo-tree-id3612 . -12) (undo-tree-id3613 . -12) (undo-tree-id3614 . -12) (undo-tree-id3615 . -12) (undo-tree-id3616 . -12) (undo-tree-id3617 . -12) (undo-tree-id3618 . -12) (undo-tree-id3619 . -12) (undo-tree-id3620 . -12) (undo-tree-id3621 . -12) (undo-tree-id3622 . -12) (undo-tree-id3623 . -12) (undo-tree-id3624 . -12) (undo-tree-id3625 . -12) (undo-tree-id3626 . -12) (undo-tree-id3627 . -12) (undo-tree-id3628 . -12) (undo-tree-id3629 . -12) (undo-tree-id3630 . -12) (undo-tree-id3631 . -12) (undo-tree-id3632 . -12) (undo-tree-id3633 . -12) (undo-tree-id3634 . -12) (undo-tree-id3635 . -12) (undo-tree-id3636 . -12) (undo-tree-id3637 . -12) (undo-tree-id3638 . -12) (undo-tree-id3639 . -12) (undo-tree-id3640 . -12) (undo-tree-id3641 . -12) (undo-tree-id3642 . -12) (undo-tree-id3643 . -12) (undo-tree-id3644 . -12) (undo-tree-id3645 . -12) (undo-tree-id3646 . -12) (undo-tree-id3647 . -12) (undo-tree-id3648 . -12) (undo-tree-id3649 . -12) (undo-tree-id3650 . -12) (undo-tree-id3651 . -12) (undo-tree-id3652 . -12) (undo-tree-id3653 . -12) (undo-tree-id3654 . -12) (undo-tree-id3655 . -12) (undo-tree-id3656 . -12) (undo-tree-id3657 . -12) (undo-tree-id3658 . -12) (undo-tree-id3659 . -12) (undo-tree-id3660 . -12) (undo-tree-id3661 . -12) (undo-tree-id3662 . -12) (undo-tree-id3663 . -12) (undo-tree-id3664 . -12) (undo-tree-id3665 . -12) (undo-tree-id3666 . -12) (undo-tree-id3667 . -12) (undo-tree-id3668 . -12) (undo-tree-id3669 . -12) (undo-tree-id3670 . -12) (undo-tree-id3671 . -12) (undo-tree-id3672 . -12) (undo-tree-id3673 . -12) (undo-tree-id3674 . -12) (undo-tree-id3675 . -12) (undo-tree-id3676 . -12) (undo-tree-id3677 . -12) (undo-tree-id3678 . -12) (undo-tree-id3679 . -12) (undo-tree-id3680 . -12) (undo-tree-id3681 . -12) (undo-tree-id3682 . -12) (undo-tree-id3683 . -12) (undo-tree-id3684 . -12) (undo-tree-id3685 . -12) (undo-tree-id3686 . -12) (undo-tree-id3687 . -12) (undo-tree-id3688 . -12) (undo-tree-id3689 . -12) (undo-tree-id3690 . -12) (undo-tree-id3691 . -12) (undo-tree-id3692 . -12) (undo-tree-id3693 . -12) (undo-tree-id3694 . -12) (undo-tree-id3695 . -12) (undo-tree-id3696 . -12) (undo-tree-id3697 . -12) (undo-tree-id3698 . -12) (undo-tree-id3699 . -12) (undo-tree-id3700 . -12) (undo-tree-id3701 . -12) (undo-tree-id3702 . -12) (undo-tree-id3703 . -12) (undo-tree-id3704 . -12) (undo-tree-id3705 . -12) (undo-tree-id3706 . -12) (undo-tree-id3707 . -12) (undo-tree-id3708 . -12) (undo-tree-id3709 . -12) (undo-tree-id3710 . -12) (undo-tree-id3711 . -12) (undo-tree-id3712 . -12) (undo-tree-id3713 . -12) (undo-tree-id3714 . -12) (undo-tree-id3715 . -12) (undo-tree-id3716 . -12) (undo-tree-id3717 . -12) (undo-tree-id3718 . -12) (undo-tree-id3719 . -12) (undo-tree-id3720 . -12) (undo-tree-id3721 . -12) (undo-tree-id3722 . -12) (undo-tree-id3723 . -12) (undo-tree-id3724 . -12) (undo-tree-id3725 . -12) (undo-tree-id3726 . -12) (undo-tree-id3727 . -12) (undo-tree-id3728 . -12) (undo-tree-id3729 . -12) (undo-tree-id3730 . -12) (undo-tree-id3731 . -12) (undo-tree-id3732 . -12) (undo-tree-id3733 . -12) (undo-tree-id3734 . -12) (undo-tree-id3735 . -12) (undo-tree-id3736 . -12) (undo-tree-id3737 . -12) (undo-tree-id3738 . -12) (undo-tree-id3739 . -12) (undo-tree-id3740 . -12)) (26072 23461 210503 892000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((620 . 632) (#("sy" 0 2 (fontified nil)) . 620) (620 . 622) (#("synatax_read" 0 12 (fontified nil)) . -620) (620 . 632) (#("sy" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face)) . -620) (undo-tree-id1940 . -2) (undo-tree-id1941 . -2) 622 (620 . 622) (620 . 622) (t 26072 23192 719849 16000)) ((#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 620) (undo-tree-id1943 . 2) (#("sy" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face)) . 620) (undo-tree-id1944 . -2) (undo-tree-id1945 . -2) (620 . 622) (#("synatax_read" 0 12 (fontified nil)) . 620) (620 . 632) (#("sy" 0 2 (fontified nil)) . 620) (620 . 622) (#("synatax_read" 0 12 (fontified t face font-lock-constant-face)) . 620) (undo-tree-id1946 . -11) (undo-tree-id1947 . -11) (undo-tree-id1948 . -11) (undo-tree-id1949 . -11) (undo-tree-id1950 . -11) (undo-tree-id1951 . -11) (undo-tree-id1952 . -11) (undo-tree-id1953 . -11) (undo-tree-id1954 . -11) (undo-tree-id1955 . -11) (undo-tree-id1956 . -11) (undo-tree-id1957 . -11) (undo-tree-id1958 . -11) (undo-tree-id1959 . -11) (undo-tree-id1960 . -11) (undo-tree-id1961 . -11) (undo-tree-id1962 . -11) (undo-tree-id1963 . -11) (undo-tree-id1964 . -11) (undo-tree-id1965 . -11) (undo-tree-id1966 . -11) (undo-tree-id1967 . -11) (undo-tree-id1968 . -11) (undo-tree-id1969 . -11) (undo-tree-id1970 . -11) (undo-tree-id1971 . -11) (undo-tree-id1972 . -11) (undo-tree-id1973 . -11) (t 26072 23229 73181 467000)) (26072 23229 62559 115000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((571 . 574) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -571) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (undo-tree-id7090 . -1) (undo-tree-id7091 . -1) (undo-tree-id7092 . -1) (undo-tree-id7093 . -1) (undo-tree-id7094 . -1) (undo-tree-id7095 . -1) (undo-tree-id7096 . -1) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) (undo-tree-id7105 . -1) (undo-tree-id7106 . -1) (undo-tree-id7107 . -1) (undo-tree-id7108 . -1) (undo-tree-id7109 . -1) (undo-tree-id7110 . -1) (undo-tree-id7111 . -1) (undo-tree-id7112 . -1) (undo-tree-id7113 . -1) (undo-tree-id7114 . -1) (undo-tree-id7115 . -1) (undo-tree-id7116 . -1) (undo-tree-id7117 . -1) (undo-tree-id7118 . -1) (undo-tree-id7119 . -1) (undo-tree-id7120 . -1) (undo-tree-id7121 . -1) (undo-tree-id7122 . -1) (undo-tree-id7123 . -1) (undo-tree-id7124 . -1) (undo-tree-id7125 . -1) (undo-tree-id7126 . -1) (undo-tree-id7127 . -1) (undo-tree-id7128 . -1) (undo-tree-id7129 . -1) (undo-tree-id7130 . -1) (undo-tree-id7131 . -1) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) (undo-tree-id7139 . -1) (undo-tree-id7140 . -1) (undo-tree-id7141 . -1) (undo-tree-id7142 . -1) (undo-tree-id7143 . -1) (undo-tree-id7144 . -1) (undo-tree-id7145 . -1) (undo-tree-id7146 . -1) (undo-tree-id7147 . -1) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1) (undo-tree-id7213 . -1) (undo-tree-id7214 . -1) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1) (undo-tree-id7230 . -1) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -572) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (undo-tree-id7277 . -1) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -1) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) 573 (570 . 573) (t 26072 23761 743168 560000)) nil (26072 24115 998985 462000) 0 nil] [nil nil ((346 . 351) (t 26072 23761 743168 560000) 340) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 346) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -5) (undo-tree-id6619 . -5) (undo-tree-id6620 . -5) (undo-tree-id6621 . -5) (undo-tree-id6622 . -5) (undo-tree-id6623 . -5) (undo-tree-id6624 . -5) (undo-tree-id6625 . -5) (undo-tree-id6626 . -5) (undo-tree-id6627 . -5) (undo-tree-id6628 . -5) (undo-tree-id6629 . -5) (undo-tree-id6630 . -5) (undo-tree-id6631 . -5) (undo-tree-id6632 . -5) (undo-tree-id6633 . -5) (undo-tree-id6634 . -5) (undo-tree-id6635 . -5) (undo-tree-id6636 . -5) (undo-tree-id6637 . -5) (undo-tree-id6638 . -5) (undo-tree-id6639 . -5) (undo-tree-id6640 . -5) (undo-tree-id6641 . -5) (undo-tree-id6642 . -5) (undo-tree-id6643 . -5) (undo-tree-id6644 . -5) (undo-tree-id6645 . -5) (undo-tree-id6646 . -5) (undo-tree-id6647 . -5) (undo-tree-id6648 . -5) (undo-tree-id6649 . -5) (undo-tree-id6650 . -5) (undo-tree-id6651 . -5) (undo-tree-id6652 . -5) (undo-tree-id6653 . -5) (undo-tree-id6654 . -5) (undo-tree-id6655 . -5) (undo-tree-id6656 . -5) (undo-tree-id6657 . -5) (undo-tree-id6658 . -5) (undo-tree-id6659 . -5) (undo-tree-id6660 . -5) (undo-tree-id6661 . -5) (undo-tree-id6662 . -5) (undo-tree-id6663 . -5) (undo-tree-id6664 . -5) (undo-tree-id6665 . -5) (undo-tree-id6666 . -5) (undo-tree-id6667 . -5) (undo-tree-id6668 . -5) (undo-tree-id6669 . -5) (undo-tree-id6670 . -5) (undo-tree-id6671 . -5) (undo-tree-id6672 . -5) (undo-tree-id6673 . -5) (undo-tree-id6674 . -5) (undo-tree-id6675 . -5) (undo-tree-id6676 . -5) (undo-tree-id6677 . -5) (undo-tree-id6678 . -5) (undo-tree-id6679 . -5) (undo-tree-id6680 . -5) (undo-tree-id6681 . -5) (undo-tree-id6682 . -5) (undo-tree-id6683 . -5) (undo-tree-id6684 . -5) (undo-tree-id6685 . -5) (undo-tree-id6686 . -5) (undo-tree-id6687 . -5) (undo-tree-id6688 . -5) (undo-tree-id6689 . -5) (undo-tree-id6690 . -5) (undo-tree-id6691 . -5) (undo-tree-id6692 . -5) (undo-tree-id6693 . -5) (undo-tree-id6694 . -5) (undo-tree-id6695 . -5) (undo-tree-id6696 . -5) (undo-tree-id6697 . -5) (undo-tree-id6698 . -5) (undo-tree-id6699 . -5) (undo-tree-id6700 . -5) (undo-tree-id6701 . -5) (undo-tree-id6702 . -5) (undo-tree-id6703 . -5) (undo-tree-id6704 . -5) (undo-tree-id6705 . -5) (undo-tree-id6706 . -5) (undo-tree-id6707 . -5) (undo-tree-id6708 . -5) (undo-tree-id6709 . -5) (undo-tree-id6710 . -5) (undo-tree-id6711 . -5) (undo-tree-id6712 . -5) (undo-tree-id6713 . -5) (undo-tree-id6714 . -5) (undo-tree-id6715 . -5) (undo-tree-id6716 . -5) (undo-tree-id6717 . -5) (undo-tree-id6718 . -5) (undo-tree-id6719 . -5) (undo-tree-id6720 . -5) (undo-tree-id6721 . -5) (undo-tree-id6722 . -5) (undo-tree-id6723 . -5) (undo-tree-id6724 . -5) (undo-tree-id6725 . -5) (undo-tree-id6726 . -5) (undo-tree-id6727 . -5) (undo-tree-id6728 . -5) (undo-tree-id6729 . -5) (undo-tree-id6730 . -5) (undo-tree-id6731 . -5) (undo-tree-id6732 . -5) (undo-tree-id6733 . -5) (undo-tree-id6734 . -5) (undo-tree-id6735 . -5) (undo-tree-id6736 . -5) (undo-tree-id6737 . -5) (undo-tree-id6738 . -5) (undo-tree-id6739 . -5) (undo-tree-id6740 . -5) (undo-tree-id6741 . -5) (undo-tree-id6742 . -5) (undo-tree-id6743 . -5) (undo-tree-id6744 . -5) (undo-tree-id6745 . -5) (undo-tree-id6746 . -5) (undo-tree-id6747 . -5) (undo-tree-id6748 . -5) (undo-tree-id6749 . -5) (undo-tree-id6750 . -5) (undo-tree-id6751 . -5) (undo-tree-id6752 . -5) (undo-tree-id6753 . -5) (undo-tree-id6754 . -5) (undo-tree-id6755 . -5) (undo-tree-id6756 . -5) (undo-tree-id6757 . -5) (undo-tree-id6758 . -5) (undo-tree-id6759 . -5) (undo-tree-id6760 . -5) (undo-tree-id6761 . -5) (undo-tree-id6762 . -5) (undo-tree-id6763 . -5) (undo-tree-id6764 . -5) (undo-tree-id6765 . -5) (undo-tree-id6766 . -5) (undo-tree-id6767 . -5) (undo-tree-id6768 . -5) (undo-tree-id6769 . -5) (undo-tree-id6770 . -5) (undo-tree-id6771 . -5) (undo-tree-id6772 . -5) (undo-tree-id6773 . -5) (undo-tree-id6774 . -5) (undo-tree-id6775 . -5) (undo-tree-id6776 . -5) (undo-tree-id6777 . -5) (undo-tree-id6778 . -5) (undo-tree-id6779 . -5) (undo-tree-id6780 . -5) (undo-tree-id6781 . -5) (undo-tree-id6782 . -5) (undo-tree-id6783 . -5) (undo-tree-id6784 . -5) (undo-tree-id6785 . -5) (undo-tree-id6786 . -5) (undo-tree-id6787 . -5) (undo-tree-id6788 . -5) (undo-tree-id6789 . -5) (undo-tree-id6790 . -5) (undo-tree-id6791 . -5) (undo-tree-id6792 . -5) (undo-tree-id6793 . -5) (undo-tree-id6794 . -5) (undo-tree-id6795 . -5) (undo-tree-id6796 . -5) (undo-tree-id6797 . -5) (undo-tree-id6798 . -5) (undo-tree-id6799 . -5) (undo-tree-id6800 . -5) (undo-tree-id6801 . -5) (undo-tree-id6802 . -5) (undo-tree-id6803 . -5) (undo-tree-id6804 . -5) (undo-tree-id6805 . -5) (undo-tree-id6806 . -5) (undo-tree-id6807 . -5) (undo-tree-id6808 . -5) (undo-tree-id6809 . -5) (undo-tree-id6810 . -5) (undo-tree-id6811 . -5) (undo-tree-id6812 . -5) (undo-tree-id6813 . -5) (undo-tree-id6814 . -5) (undo-tree-id6815 . -5) (undo-tree-id6816 . -5) (undo-tree-id6817 . -5) (undo-tree-id6818 . -5) (undo-tree-id6819 . -5) (undo-tree-id6820 . -5) (undo-tree-id6821 . -5) (undo-tree-id6822 . -5) (undo-tree-id6823 . -5) (undo-tree-id6824 . -5) (undo-tree-id6825 . -5) (undo-tree-id6826 . -5) (undo-tree-id6827 . -5) (undo-tree-id6828 . -5) (undo-tree-id6829 . -5) (undo-tree-id6830 . -5) (undo-tree-id6831 . -5) (undo-tree-id6832 . -5) (undo-tree-id6833 . -5) (undo-tree-id6834 . -5) (undo-tree-id6835 . -5) (undo-tree-id6836 . -5) (undo-tree-id6837 . -5) (undo-tree-id6838 . -5) (undo-tree-id6839 . -5) (undo-tree-id6840 . -5) (undo-tree-id6841 . -5) (undo-tree-id6842 . -5) (undo-tree-id6843 . -5) (undo-tree-id6844 . -5) (undo-tree-id6845 . -5) (undo-tree-id6846 . -5) (undo-tree-id6847 . -5) (undo-tree-id6848 . -5) (undo-tree-id6849 . -5) (undo-tree-id6850 . -5) (undo-tree-id6851 . -5) (undo-tree-id6852 . -5) (undo-tree-id6853 . -5) (undo-tree-id6854 . -5) (undo-tree-id6855 . -5) (undo-tree-id6856 . -5) (undo-tree-id6857 . -5) (undo-tree-id6858 . -5) (undo-tree-id6859 . -5) (undo-tree-id6860 . -5) (undo-tree-id6861 . -5) (undo-tree-id6862 . -5) (undo-tree-id6863 . -5) (undo-tree-id6864 . -5) (undo-tree-id6865 . -5) (undo-tree-id6866 . -5) (undo-tree-id6867 . -5) (undo-tree-id6868 . -5) (undo-tree-id6869 . -5) (undo-tree-id6870 . -5) (undo-tree-id6871 . -5) (undo-tree-id6872 . -5) (undo-tree-id6873 . -5) (undo-tree-id6874 . -5) (undo-tree-id6875 . -5) (undo-tree-id6876 . -5) (undo-tree-id6877 . -5) (undo-tree-id6878 . -5) (undo-tree-id6879 . -5) (undo-tree-id6880 . -5) (undo-tree-id6881 . -5) (undo-tree-id6882 . -5) (undo-tree-id6883 . -5) (undo-tree-id6884 . -5) (undo-tree-id6885 . -5) (undo-tree-id6886 . -5) (undo-tree-id6887 . -5) (undo-tree-id6888 . -5) (undo-tree-id6889 . -5) (undo-tree-id6890 . -5) (undo-tree-id6891 . -5) (undo-tree-id6892 . -5) (undo-tree-id6893 . -5) (undo-tree-id6894 . -1) (undo-tree-id6895 . -5) (undo-tree-id6896 . -5) (undo-tree-id6897 . -5) (undo-tree-id6898 . -5) (undo-tree-id6899 . -5) (undo-tree-id6900 . -5) (undo-tree-id6901 . -5) (undo-tree-id6902 . -5) (undo-tree-id6903 . -5) (undo-tree-id6904 . -5) (undo-tree-id6905 . -5) (undo-tree-id6906 . -5) (undo-tree-id6907 . -5) (undo-tree-id6908 . -5) (undo-tree-id6909 . -5) (undo-tree-id6910 . -5) (undo-tree-id6911 . -5) (undo-tree-id6912 . -5) (undo-tree-id6913 . -5) (undo-tree-id6914 . -5) (undo-tree-id6915 . -5) (undo-tree-id6916 . -5) (undo-tree-id6917 . -5) (undo-tree-id6918 . -5) (undo-tree-id6919 . -5) (undo-tree-id6920 . -5) (undo-tree-id6921 . -5) (undo-tree-id6922 . -5) (undo-tree-id6923 . -5) (undo-tree-id6924 . -5) (undo-tree-id6925 . -5) (undo-tree-id6926 . -5) (undo-tree-id6927 . -5) (undo-tree-id6928 . -5) (undo-tree-id6929 . -5) (undo-tree-id6930 . -5) (undo-tree-id6931 . -5) (undo-tree-id6932 . -5) (undo-tree-id6933 . -5) (undo-tree-id6934 . -5) (undo-tree-id6935 . -5) (undo-tree-id6936 . -5) (undo-tree-id6937 . -5) (undo-tree-id6938 . -5) (undo-tree-id6939 . -5) (undo-tree-id6940 . -5) (undo-tree-id6941 . -5) (undo-tree-id6942 . -5) (undo-tree-id6943 . -5) (undo-tree-id6944 . -5) (undo-tree-id6945 . -5) (undo-tree-id6946 . -5) (undo-tree-id6947 . -5) (undo-tree-id6948 . -5) (undo-tree-id6949 . -5) (undo-tree-id6950 . -5) (undo-tree-id6951 . -5) (undo-tree-id6952 . -5) (undo-tree-id6953 . -5) (undo-tree-id6954 . -5) (undo-tree-id6955 . -5) (undo-tree-id6956 . -5) (undo-tree-id6957 . -5) (undo-tree-id6958 . -5) (undo-tree-id6959 . -5) (undo-tree-id6960 . -5) (undo-tree-id6961 . -5) (undo-tree-id6962 . -5) (undo-tree-id6963 . -5) (undo-tree-id6964 . -5) (undo-tree-id6965 . -5) (undo-tree-id6966 . -5) (undo-tree-id6967 . -5) (undo-tree-id6968 . -5) (undo-tree-id6969 . -5) (undo-tree-id6970 . -5) (undo-tree-id6971 . -5) (undo-tree-id6972 . -5) (undo-tree-id6973 . -5) (undo-tree-id6974 . -5) (undo-tree-id6975 . -5) (undo-tree-id6976 . -5) (undo-tree-id6977 . -5) (undo-tree-id6978 . -5) (undo-tree-id6979 . -5) (undo-tree-id6980 . -5) (undo-tree-id6981 . -5) (undo-tree-id6982 . -5) (undo-tree-id6983 . -5) (undo-tree-id6984 . -5) (undo-tree-id6985 . -5) (undo-tree-id6986 . -5) (undo-tree-id6987 . -5) (undo-tree-id6988 . -5) (undo-tree-id6989 . -5) (undo-tree-id6990 . -5) (undo-tree-id6991 . -5) (undo-tree-id6992 . -5) (undo-tree-id6993 . -5) (undo-tree-id6994 . -5) (undo-tree-id6995 . -5) (undo-tree-id6996 . -5) (undo-tree-id6997 . -5) (undo-tree-id6998 . -5) (undo-tree-id6999 . -5) (undo-tree-id7000 . -5) (undo-tree-id7001 . -5) (undo-tree-id7002 . -5) (undo-tree-id7003 . -5) (undo-tree-id7004 . -5) (undo-tree-id7005 . -5) (undo-tree-id7006 . -5) (undo-tree-id7007 . -5) (undo-tree-id7008 . -5) (undo-tree-id7009 . -5) (undo-tree-id7010 . -5) (undo-tree-id7011 . -5) (undo-tree-id7012 . -5) (undo-tree-id7013 . -5) (undo-tree-id7014 . -5) (undo-tree-id7015 . -5) (undo-tree-id7016 . -5) (undo-tree-id7017 . -5) (undo-tree-id7018 . -5) (undo-tree-id7019 . -5) (undo-tree-id7020 . -5) (undo-tree-id7021 . -5) (undo-tree-id7022 . -5) (undo-tree-id7023 . -5) (undo-tree-id7024 . -5) (undo-tree-id7025 . -5) (undo-tree-id7026 . -5) (undo-tree-id7027 . -5) (undo-tree-id7028 . -5) (undo-tree-id7029 . -5) (undo-tree-id7030 . -5) (undo-tree-id7031 . -5) (undo-tree-id7032 . -5) (undo-tree-id7033 . -5) (undo-tree-id7034 . -5) (undo-tree-id7035 . -5) (undo-tree-id7036 . -5) (undo-tree-id7037 . -5) (undo-tree-id7038 . -5) (undo-tree-id7039 . -5) (undo-tree-id7040 . -5) (undo-tree-id7041 . -5) (undo-tree-id7042 . -5) (undo-tree-id7043 . -5) (undo-tree-id7044 . -5) (undo-tree-id7045 . -5) (undo-tree-id7046 . -5) (undo-tree-id7047 . -5) (undo-tree-id7048 . -5) (undo-tree-id7049 . -5) (undo-tree-id7050 . -5) (undo-tree-id7051 . -5) (undo-tree-id7052 . -5) (undo-tree-id7053 . -5) (undo-tree-id7054 . -5) (undo-tree-id7055 . -5) (undo-tree-id7056 . -5) (undo-tree-id7057 . -5) (undo-tree-id7058 . -5) (undo-tree-id7059 . -5) (undo-tree-id7060 . -5) (undo-tree-id7061 . -5) (undo-tree-id7062 . -5) (undo-tree-id7063 . -5) (undo-tree-id7064 . -5) (undo-tree-id7065 . -5) (undo-tree-id7066 . -5) (undo-tree-id7067 . -5) (undo-tree-id7068 . -5) (undo-tree-id7069 . -5) (undo-tree-id7070 . -5) (undo-tree-id7071 . -5) (undo-tree-id7072 . -5) (undo-tree-id7073 . -5) (undo-tree-id7074 . -5) (undo-tree-id7075 . -5) (undo-tree-id7076 . -5) (undo-tree-id7077 . -5) (undo-tree-id7078 . -5) (undo-tree-id7079 . -5) (undo-tree-id7080 . -5) (undo-tree-id7081 . -5) (undo-tree-id7082 . -5) (undo-tree-id7083 . -5)) (26072 23912 890412 928000) 0 nil])
([nil nil ((625 . 631) (623 . 625) (620 . 623)) ((#("std" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face) 2 3 (fontified nil face font-lock-constant-face)) . 620) (undo-tree-id4896 . -3) (#("::" 0 1 (fontified nil) 1 2 (fontified nil)) . 623) (undo-tree-id4897 . -2) (#("mem_fn" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 625) (undo-tree-id4898 . -6)) (26072 23624 716828 170000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((621 . 623)) ((#("::" 0 1 (fontified t) 1 2 (fontified t)) . 621) (undo-tree-id2548 . -2) (undo-tree-id2549 . -2) (undo-tree-id2550 . -2) (undo-tree-id2551 . -2) (undo-tree-id2552 . -2) (undo-tree-id2553 . -2) (undo-tree-id2554 . -2) (undo-tree-id2555 . -2) (undo-tree-id2556 . -2) (undo-tree-id2557 . -2) (undo-tree-id2558 . -2) (undo-tree-id2559 . -2) (undo-tree-id2560 . -2) (undo-tree-id2561 . -2) (undo-tree-id2562 . -2) (undo-tree-id2563 . -2) (undo-tree-id2564 . -2) (undo-tree-id2565 . -2) (undo-tree-id2566 . -2) (undo-tree-id2567 . -2) (undo-tree-id2568 . -2) (undo-tree-id2569 . -2) (undo-tree-id2570 . -2) (undo-tree-id2571 . -2) (undo-tree-id2572 . -2) (undo-tree-id2573 . -2) (undo-tree-id2574 . -2) (undo-tree-id2575 . -2) (undo-tree-id2576 . -2) (undo-tree-id2577 . -2) (undo-tree-id2578 . -2) (undo-tree-id2579 . -2) (undo-tree-id2580 . -2) (undo-tree-id2581 . -2) (undo-tree-id2582 . -2) (undo-tree-id2583 . -2) (undo-tree-id2584 . -2) (undo-tree-id2585 . -2) (undo-tree-id2586 . -2) (undo-tree-id2587 . -2) (undo-tree-id2588 . -2) (undo-tree-id2589 . -2) (undo-tree-id2590 . -2) (undo-tree-id2591 . -2) (undo-tree-id2592 . -2) (undo-tree-id2593 . -2) (undo-tree-id2594 . -2) (undo-tree-id2595 . -2) (undo-tree-id2596 . -2) (undo-tree-id2597 . -2) (undo-tree-id2598 . -2) (undo-tree-id2599 . -2) (undo-tree-id2600 . -2) (undo-tree-id2601 . -2) (undo-tree-id2602 . -2) (undo-tree-id2603 . -2) (undo-tree-id2604 . -2) (undo-tree-id2605 . -2) (undo-tree-id2606 . -2) (undo-tree-id2607 . -2) (undo-tree-id2608 . -2) (undo-tree-id2609 . -2) (undo-tree-id2610 . -2) (undo-tree-id2611 . -2) (undo-tree-id2612 . -2) (undo-tree-id2613 . -2) (undo-tree-id2614 . -2) (undo-tree-id2615 . -2) (undo-tree-id2616 . -2) (undo-tree-id2617 . -2) (undo-tree-id2618 . -2) (undo-tree-id2619 . -2) (undo-tree-id2620 . -2) (undo-tree-id2621 . -2) (undo-tree-id2622 . -2) (undo-tree-id2623 . -2) (undo-tree-id2624 . -2) (undo-tree-id2625 . -2) (undo-tree-id2626 . -2) (undo-tree-id2627 . -2)) (26072 23460 837138 318000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((753 . 754) (745 . 753) (743 . 745) (apply yas--snippet-revive 713 743 #s(yas--snippet nil (#s(yas--field 1 720 742 nil nil nil t nil)) nil 21 nil #s(yas--field 1 720 742 nil nil nil t nil) nil nil)) (733 . 742) (#("bnf_token" 0 9 (fontified nil)) . -733) (733 . 742) (#("bnf" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -733) (undo-tree-id7333 . -3) (undo-tree-id7334 . -3) 736 (733 . 736) (731 . 733) (nil fontified nil 720 . 731) (nil face (rainbow-delimiters-depth-3-face) 720 . 731) (720 . 731) (#("to" 0 2 (fontified nil)) . 720) (nil fontified nil 720 . 722) (nil face (rainbow-delimiters-depth-3-face) 720 . 722) (720 . 722) (#("token_class" 0 11 (fontified nil)) . -720) (nil fontified nil 720 . 731) (nil face (rainbow-delimiters-depth-3-face) 720 . 731) (720 . 731) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -720) (undo-tree-id7335 . -2) (undo-tree-id7336 . -2) 722 (721 . 722) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 721) (720 . 721) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 720 742 nil nil nil t nil)) nil 21 nil #s(yas--field 1 720 742 nil nil nil t nil) nil nil)) (713 . 732) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 713) (713 . 737) (#("v" 0 1 (fontified nil)) . 713) (713 . 714) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -713) (713 . 748) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -713) (undo-tree-id7337 . -3) (undo-tree-id7338 . -3) 716 (713 . 716) (704 . 708) (#("  " 0 2 (fontified nil)) . 704) (710 . 711) (704 . 706) (#("    " 0 4 (fontified nil)) . 704) (711 . 712) (708 . 711) (703 . 708) (t 26072 24116 19826 628000) 675) nil (26072 26934 696785 51000) 0 nil])
([nil nil ((351 . 357)) ((#("statio" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 351) (undo-tree-id6339 . -6) (undo-tree-id6340 . -6) (undo-tree-id6341 . -6) (undo-tree-id6342 . -6) (undo-tree-id6343 . -6) (undo-tree-id6344 . -6) (undo-tree-id6345 . -6) (undo-tree-id6346 . -6) (undo-tree-id6347 . -6) (undo-tree-id6348 . -6) (undo-tree-id6349 . -6) (undo-tree-id6350 . -6) (undo-tree-id6351 . -6) (undo-tree-id6352 . -6) (undo-tree-id6353 . -6) (undo-tree-id6354 . -6) (undo-tree-id6355 . -6) (undo-tree-id6356 . -6) (undo-tree-id6357 . -6) (undo-tree-id6358 . -6) (undo-tree-id6359 . -6) (undo-tree-id6360 . -6) (undo-tree-id6361 . -6) (undo-tree-id6362 . -6) (undo-tree-id6363 . -6) (undo-tree-id6364 . -6) (undo-tree-id6365 . -6) (undo-tree-id6366 . -6) (undo-tree-id6367 . -6) (undo-tree-id6368 . -6) (undo-tree-id6369 . -6) (undo-tree-id6370 . -6) (undo-tree-id6371 . -6) (undo-tree-id6372 . -6) (undo-tree-id6373 . -6) (undo-tree-id6374 . -6) (undo-tree-id6375 . -6) (undo-tree-id6376 . -6) (undo-tree-id6377 . -6) (undo-tree-id6378 . -6) (undo-tree-id6379 . -6) (undo-tree-id6380 . -6) (undo-tree-id6381 . -6) (undo-tree-id6382 . -6) (undo-tree-id6383 . -6) (undo-tree-id6384 . -6) (undo-tree-id6385 . -6) (undo-tree-id6386 . -6) (undo-tree-id6387 . -6) (undo-tree-id6388 . -6) (undo-tree-id6389 . -6) (undo-tree-id6390 . -6) (undo-tree-id6391 . -6) (undo-tree-id6392 . -6) (undo-tree-id6393 . -6) (undo-tree-id6394 . -6) (undo-tree-id6395 . -6) (undo-tree-id6396 . -6) (undo-tree-id6397 . -6) (undo-tree-id6398 . -6) (undo-tree-id6399 . -6) (undo-tree-id6400 . -6) (undo-tree-id6401 . -6) (undo-tree-id6402 . -6) (undo-tree-id6403 . -6) (undo-tree-id6404 . -6) (undo-tree-id6405 . -6) (undo-tree-id6406 . -6) (undo-tree-id6407 . -6) (undo-tree-id6408 . -6) (undo-tree-id6409 . -6) (undo-tree-id6410 . -6) (undo-tree-id6411 . -6) (undo-tree-id6412 . -6) (undo-tree-id6413 . -6) (undo-tree-id6414 . -6) (undo-tree-id6415 . -6) (undo-tree-id6416 . -6) (undo-tree-id6417 . -6) (undo-tree-id6418 . -6) (undo-tree-id6419 . -6) (undo-tree-id6420 . -6) (undo-tree-id6421 . -6) (undo-tree-id6422 . -6) (undo-tree-id6423 . -6) (undo-tree-id6424 . -6) (undo-tree-id6425 . -6) (undo-tree-id6426 . -6) (undo-tree-id6427 . -6) (undo-tree-id6428 . -6) (undo-tree-id6429 . -6) (undo-tree-id6430 . -6) (undo-tree-id6431 . -6) (undo-tree-id6432 . -6) (undo-tree-id6433 . -6) (undo-tree-id6434 . -6) (undo-tree-id6435 . -6) (undo-tree-id6436 . -6) (undo-tree-id6437 . -6) (undo-tree-id6438 . -6) (undo-tree-id6439 . -6) (undo-tree-id6440 . -6) (undo-tree-id6441 . -6) (undo-tree-id6442 . -6) (undo-tree-id6443 . -6) (undo-tree-id6444 . -6) (undo-tree-id6445 . -6) (undo-tree-id6446 . -6) (undo-tree-id6447 . -6) (undo-tree-id6448 . -6) (undo-tree-id6449 . -6) (undo-tree-id6450 . -6) (undo-tree-id6451 . -6) (undo-tree-id6452 . -6) (undo-tree-id6453 . -6) (undo-tree-id6454 . -6) (undo-tree-id6455 . -5) (undo-tree-id6456 . -5) (undo-tree-id6457 . -5) (undo-tree-id6458 . -5) (undo-tree-id6459 . -5) (undo-tree-id6460 . -5) (undo-tree-id6461 . -5) (undo-tree-id6462 . -5) (undo-tree-id6463 . -5) (undo-tree-id6464 . -5) (undo-tree-id6465 . -5) (undo-tree-id6466 . -5) (undo-tree-id6467 . -5) (undo-tree-id6468 . -5) (undo-tree-id6469 . -5) (undo-tree-id6470 . -5) (undo-tree-id6471 . -5) (undo-tree-id6472 . -5) (undo-tree-id6473 . -5) (undo-tree-id6474 . -5) (undo-tree-id6475 . -5) (undo-tree-id6476 . -5) (undo-tree-id6477 . -5) (undo-tree-id6478 . -5) (undo-tree-id6479 . -5) (undo-tree-id6480 . -5) (undo-tree-id6481 . -5) (undo-tree-id6482 . -5) (undo-tree-id6483 . -5) (undo-tree-id6484 . -5) (undo-tree-id6485 . -5) (undo-tree-id6486 . -5) (undo-tree-id6487 . -5) (undo-tree-id6488 . -5) (undo-tree-id6489 . -5) (undo-tree-id6490 . -5) (undo-tree-id6491 . -5) (undo-tree-id6492 . -5) (undo-tree-id6493 . -5) (undo-tree-id6494 . -5) (undo-tree-id6495 . -5) (undo-tree-id6496 . -5) (undo-tree-id6497 . -5) (undo-tree-id6498 . -5) (undo-tree-id6499 . -5) (undo-tree-id6500 . -5) (undo-tree-id6501 . -5) (undo-tree-id6502 . -5) (undo-tree-id6503 . -5) (undo-tree-id6504 . -5) (undo-tree-id6505 . -5) (undo-tree-id6506 . -5) (undo-tree-id6507 . -5) (undo-tree-id6508 . -5) (undo-tree-id6509 . -5) (undo-tree-id6510 . -5) (undo-tree-id6511 . -5) (undo-tree-id6512 . -5) (undo-tree-id6513 . -5) (undo-tree-id6514 . -5) (undo-tree-id6515 . -5) (undo-tree-id6516 . -5) (undo-tree-id6517 . -5) (undo-tree-id6518 . -5) (undo-tree-id6519 . -5) (undo-tree-id6520 . -5) (undo-tree-id6521 . -5) (undo-tree-id6522 . -5) (undo-tree-id6523 . -5) (undo-tree-id6524 . -5) (undo-tree-id6525 . -5) (undo-tree-id6526 . -5) (undo-tree-id6527 . -5) (undo-tree-id6528 . -5) (undo-tree-id6529 . -5) (undo-tree-id6530 . -5) (undo-tree-id6531 . -5) (undo-tree-id6532 . -5) (undo-tree-id6533 . -5) (undo-tree-id6534 . -5) (undo-tree-id6535 . -6) (undo-tree-id6536 . -6) (undo-tree-id6537 . -6) (undo-tree-id6538 . -6) (undo-tree-id6539 . -6) (undo-tree-id6540 . -6) (undo-tree-id6541 . -6) (undo-tree-id6542 . -6) (undo-tree-id6543 . -6) (undo-tree-id6544 . -6) (undo-tree-id6545 . -6) (undo-tree-id6546 . -6) (undo-tree-id6547 . -6) (undo-tree-id6548 . -6) (undo-tree-id6549 . -6) (undo-tree-id6550 . -6) (undo-tree-id6551 . -6) (undo-tree-id6552 . -6) (undo-tree-id6553 . -6) (undo-tree-id6554 . -6) (undo-tree-id6555 . -6) (undo-tree-id6556 . -6) (undo-tree-id6557 . -6) (undo-tree-id6558 . -6) (undo-tree-id6559 . -6) (undo-tree-id6560 . -6) (undo-tree-id6561 . -6) (undo-tree-id6562 . -6) (undo-tree-id6563 . -6) (undo-tree-id6564 . -6) (undo-tree-id6565 . -6) (undo-tree-id6566 . -6) (undo-tree-id6567 . -6) (undo-tree-id6568 . -6) (undo-tree-id6569 . -6) (undo-tree-id6570 . -6) (undo-tree-id6571 . -6) (undo-tree-id6572 . -6) (undo-tree-id6573 . -6) (undo-tree-id6574 . -6) (undo-tree-id6575 . -6) (undo-tree-id6576 . -6) (undo-tree-id6577 . -6) (undo-tree-id6578 . -6) (undo-tree-id6579 . -6) (undo-tree-id6580 . -6) (undo-tree-id6581 . -6) (undo-tree-id6582 . -6) (undo-tree-id6583 . -6) (undo-tree-id6584 . -6) (undo-tree-id6585 . -6) (undo-tree-id6586 . -6) (undo-tree-id6587 . -6) (undo-tree-id6588 . -6) (undo-tree-id6589 . -6) (undo-tree-id6590 . -6) (undo-tree-id6591 . -6) (undo-tree-id6592 . -6) (undo-tree-id6593 . -6) (undo-tree-id6594 . -6) (undo-tree-id6595 . -6) (undo-tree-id6596 . -6) (undo-tree-id6597 . -6) (undo-tree-id6598 . -6) (undo-tree-id6599 . -6) (undo-tree-id6600 . -6) (undo-tree-id6601 . -6) (undo-tree-id6602 . -6) (undo-tree-id6603 . -6) (undo-tree-id6604 . -6) (undo-tree-id6605 . -6) (undo-tree-id6606 . -6) (undo-tree-id6607 . -6) (undo-tree-id6608 . -6) (undo-tree-id6609 . -6) (undo-tree-id6610 . -6) (undo-tree-id6611 . -6) (undo-tree-id6612 . -6) (undo-tree-id6613 . -6) (undo-tree-id6614 . -6) (undo-tree-id6615 . -6)) (26072 23912 498132 304000) 0 nil])
([nil nil (355) nil (26072 23624 361292 959000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 624) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 624) (undo-tree-id1976 . 1) (undo-tree-id1977 . -1) (t 26072 23294 913179 870000)) ((624 . 625) (624 . 625)) (26072 23460 437437 707000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(",token_class::bnf_token)" 0 1 (fontified t c-type c-decl-arg-start) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t face font-lock-constant-face) 5 6 (fontified t face font-lock-constant-face) 6 7 (fontified t face font-lock-constant-face) 7 8 (fontified t face font-lock-constant-face) 8 9 (fontified t face font-lock-constant-face) 9 10 (fontified t face font-lock-constant-face) 10 11 (fontified t face font-lock-constant-face) 11 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t face font-lock-type-face) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t face font-lock-type-face) 19 20 (fontified t face font-lock-type-face) 20 21 (fontified t face font-lock-type-face) 21 22 (fontified t face font-lock-type-face) 22 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-4-face))) . 669) (undo-tree-id7389 . -23) (t 26072 26302 553106 539000)) nil (26072 27014 219647 478000) 0 nil] [nil nil ((#(",token_class::bnf_token)" 0 1 (fontified t c-type c-decl-arg-start) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t face font-lock-constant-face) 5 6 (fontified t face font-lock-constant-face) 6 7 (fontified t face font-lock-constant-face) 7 8 (fontified t face font-lock-constant-face) 8 9 (fontified t face font-lock-constant-face) 9 10 (fontified t face font-lock-constant-face) 10 11 (fontified t face font-lock-constant-face) 11 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t face font-lock-type-face) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t face font-lock-type-face) 19 20 (fontified t face font-lock-type-face) 20 21 (fontified t face font-lock-type-face) 21 22 (fontified t face font-lock-type-face) 22 23 (fontified t face font-lock-type-face) 23 24 (fontified t face (rainbow-delimiters-depth-4-face))) . 669) (undo-tree-id7339 . -23) (undo-tree-id7340 . -14) (undo-tree-id7341 . -23) (undo-tree-id7342 . -24) (t 26072 26302 553106 539000)) ((669 . 693)) (26072 26934 694334 38000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -356) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) 357) ((356 . 357)) (26072 23912 79194 956000) 0 nil])
([nil nil ((344 . 350) (#("st" 0 2 (fontified nil)) . 344) (344 . 346) (#("static" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face)) . -344) (undo-tree-id3741 . -6) (undo-tree-id3742 . -6) (undo-tree-id3744 . -3) (undo-tree-id3746 . -3) (undo-tree-id3748 . -3) (undo-tree-id3750 . -3) (undo-tree-id3752 . -3) (undo-tree-id3754 . -3) (undo-tree-id3756 . -3) (undo-tree-id3758 . -3) (undo-tree-id3760 . -3) (undo-tree-id3762 . -3) (undo-tree-id3764 . -3) (undo-tree-id3766 . -3) (undo-tree-id3768 . -3) (undo-tree-id3770 . -3) (undo-tree-id3772 . -3) (undo-tree-id3774 . -3) (undo-tree-id3776 . -3) (undo-tree-id3778 . -3) (undo-tree-id3780 . -3) (undo-tree-id3782 . -3) (undo-tree-id3784 . -3) (undo-tree-id3786 . -3) (undo-tree-id3788 . -3) (undo-tree-id3790 . -3) (undo-tree-id3792 . -3) (undo-tree-id3794 . -3) (undo-tree-id3796 . -3) (undo-tree-id3798 . -3) (undo-tree-id3800 . -3) (undo-tree-id3802 . -3) (undo-tree-id3804 . -3) (undo-tree-id3806 . -3) (undo-tree-id3808 . -3) (undo-tree-id3810 . -3) (undo-tree-id3812 . -3) (undo-tree-id3814 . -3) (undo-tree-id3816 . -3) (undo-tree-id3818 . -3) (undo-tree-id3820 . -3) (undo-tree-id3822 . -3) (undo-tree-id3824 . -3) (undo-tree-id3826 . -3) (undo-tree-id3828 . -3) (undo-tree-id3830 . -3) (undo-tree-id3832 . -3) (undo-tree-id3834 . -3) (undo-tree-id3836 . -3) (undo-tree-id3838 . -3) (undo-tree-id3840 . -3) (undo-tree-id3842 . -3) (undo-tree-id3844 . -3) (undo-tree-id3846 . -3) (undo-tree-id3848 . -4) (undo-tree-id3850 . -4) (undo-tree-id3852 . -4) (undo-tree-id3854 . -4) (undo-tree-id3856 . -4) (undo-tree-id3858 . -4) (undo-tree-id3860 . -4) (undo-tree-id3862 . -4) (undo-tree-id3864 . -4) (undo-tree-id3866 . -4) (undo-tree-id3868 . -4) (undo-tree-id3870 . -4) (undo-tree-id3872 . -4) (undo-tree-id3874 . -4) (undo-tree-id3876 . -4) (undo-tree-id3878 . -4) (undo-tree-id3880 . -4) (undo-tree-id3882 . -4) (undo-tree-id3884 . -4) (undo-tree-id3886 . -4) (undo-tree-id3888 . -4) (undo-tree-id3890 . -4) (undo-tree-id3892 . -4) (undo-tree-id3894 . -4) (undo-tree-id3896 . -4) (undo-tree-id3898 . -4) (undo-tree-id3900 . -4) (undo-tree-id3902 . -4) (undo-tree-id3904 . -4) (undo-tree-id3906 . -4) (undo-tree-id3908 . -4) (undo-tree-id3910 . -4) (undo-tree-id3912 . -4) (undo-tree-id3914 . -4) (undo-tree-id3916 . -4) (undo-tree-id3918 . -4) (undo-tree-id3920 . -4) (undo-tree-id3922 . -4) (undo-tree-id3924 . -4) (undo-tree-id3926 . -4) (undo-tree-id3928 . -4) (undo-tree-id3930 . -4) (undo-tree-id3932 . -4) (undo-tree-id3934 . -4) (undo-tree-id3936 . -4) (undo-tree-id3938 . -4) (undo-tree-id3940 . -4) (undo-tree-id3942 . -4) (undo-tree-id3944 . -4) (undo-tree-id3946 . -4) (undo-tree-id3948 . -4) (undo-tree-id3950 . -4) (undo-tree-id3952 . -4) (undo-tree-id3954 . -4) (undo-tree-id3956 . -4) (undo-tree-id3958 . -4) (undo-tree-id3960 . -4) (undo-tree-id3962 . -4) (undo-tree-id3964 . -4) (undo-tree-id3966 . -4) (undo-tree-id3968 . -4) (undo-tree-id3970 . -4) (undo-tree-id3972 . -4) (undo-tree-id3974 . -4) (undo-tree-id3976 . -4) (undo-tree-id3978 . -4) (undo-tree-id3980 . -4) (undo-tree-id3982 . -4) (undo-tree-id3984 . -4) (undo-tree-id3986 . -4) (undo-tree-id3988 . -4) (undo-tree-id3990 . -4) (undo-tree-id3992 . -4) (undo-tree-id3994 . -4) (undo-tree-id3996 . -4) (undo-tree-id3998 . -4) (undo-tree-id4000 . -4) (undo-tree-id4002 . -4) (undo-tree-id4004 . -4) (undo-tree-id4006 . -4) (undo-tree-id4008 . -4) (undo-tree-id4010 . -4) (undo-tree-id4012 . -4) (undo-tree-id4014 . -4) (undo-tree-id4016 . -4) (undo-tree-id4018 . -4) (undo-tree-id4020 . -4) (undo-tree-id4022 . -4) (undo-tree-id4024 . -4) (undo-tree-id4026 . -4) (undo-tree-id4028 . -4) (undo-tree-id4030 . -4) (undo-tree-id4032 . -4) (undo-tree-id4034 . -4) (undo-tree-id4036 . -4) (undo-tree-id4038 . -4) (undo-tree-id4040 . -4) (undo-tree-id4042 . -4) (undo-tree-id4044 . -4) (undo-tree-id4046 . -4) (undo-tree-id4048 . -4) (undo-tree-id4050 . -4) (undo-tree-id4052 . -4) (undo-tree-id4054 . -4) (undo-tree-id4056 . -4) (undo-tree-id4058 . -4) (undo-tree-id4060 . -4) (undo-tree-id4062 . -4) (undo-tree-id4064 . -4) (undo-tree-id4066 . -4) (undo-tree-id4068 . -4) (undo-tree-id4070 . -4) (undo-tree-id4072 . -4) (undo-tree-id4074 . -4) (undo-tree-id4076 . -4) (undo-tree-id4078 . -4) (undo-tree-id4080 . -4) (undo-tree-id4082 . -4) (undo-tree-id4084 . -4) (undo-tree-id4086 . -4) (undo-tree-id4088 . -4) (undo-tree-id4090 . -4) (undo-tree-id4092 . -4) (undo-tree-id4094 . -4) (undo-tree-id4096 . -4) (undo-tree-id4098 . -4) (undo-tree-id4100 . -4) (undo-tree-id4102 . -4) (undo-tree-id4104 . -4) (undo-tree-id4106 . -4) (undo-tree-id4108 . -4) (undo-tree-id4110 . -4) (undo-tree-id4112 . -4) (undo-tree-id4114 . -4) (undo-tree-id4116 . -4) (undo-tree-id4118 . -4) (undo-tree-id4120 . -4) (undo-tree-id4122 . -4) (undo-tree-id4124 . -4) (undo-tree-id4126 . -4) (undo-tree-id4128 . -4) (undo-tree-id4130 . -4) (undo-tree-id4132 . -4) (undo-tree-id4134 . -4) (undo-tree-id4136 . -4) (undo-tree-id4138 . -4) (undo-tree-id4140 . -4) (undo-tree-id4142 . -4) (undo-tree-id4144 . -4) (undo-tree-id4146 . -4) (undo-tree-id4148 . -4) (undo-tree-id4150 . -4) (undo-tree-id4152 . -4) (undo-tree-id4154 . -4) (undo-tree-id4156 . -4) (undo-tree-id4158 . -4) (undo-tree-id4160 . -4) (undo-tree-id4162 . -4) (undo-tree-id4164 . -4) (undo-tree-id4166 . -4) (undo-tree-id4168 . -4) (undo-tree-id4170 . -4) (undo-tree-id4172 . -4) (undo-tree-id4174 . -4) (undo-tree-id4176 . -4) (undo-tree-id4178 . -4) (undo-tree-id4180 . -4) (undo-tree-id4182 . -4) (undo-tree-id4184 . -4) (undo-tree-id4186 . -4) (undo-tree-id4188 . -4) (undo-tree-id4190 . -4) (undo-tree-id4192 . -4) (undo-tree-id4194 . -4) (undo-tree-id4196 . -4) (undo-tree-id4198 . -4) (undo-tree-id4200 . -4) (undo-tree-id4202 . -4) (undo-tree-id4204 . -4) (undo-tree-id4206 . -4) (undo-tree-id4208 . -4) (undo-tree-id4210 . -4) (undo-tree-id4212 . -4) (undo-tree-id4214 . -4) (undo-tree-id4216 . -4) (undo-tree-id4218 . -4) (undo-tree-id4220 . -4) (undo-tree-id4222 . -4) (undo-tree-id4224 . -4) (undo-tree-id4226 . -4) (undo-tree-id4228 . -4) (undo-tree-id4230 . -4) (undo-tree-id4232 . -4) (undo-tree-id4234 . -4) (undo-tree-id4236 . -4) (undo-tree-id4238 . -4) (undo-tree-id4240 . -4) (undo-tree-id4242 . -4) (undo-tree-id4244 . -4) (undo-tree-id4246 . -4) (undo-tree-id4248 . -4) (undo-tree-id4250 . -4) (undo-tree-id4252 . -4) (undo-tree-id4254 . -4) (undo-tree-id4256 . -4) (undo-tree-id4258 . -4) (undo-tree-id4260 . -4) (undo-tree-id4262 . -4) (undo-tree-id4264 . -4) (undo-tree-id4266 . -4) (undo-tree-id4268 . -4) (undo-tree-id4270 . -4) (undo-tree-id4272 . -4) (undo-tree-id4274 . -4) (undo-tree-id4276 . -4) (undo-tree-id4278 . -4) (undo-tree-id4280 . -4) (undo-tree-id4282 . -4) (undo-tree-id4284 . -4) (undo-tree-id4286 . -4) (undo-tree-id4288 . -4) (undo-tree-id4290 . -4) (undo-tree-id4292 . -4) (undo-tree-id4294 . -4) (undo-tree-id4296 . -4) (undo-tree-id4298 . -4) (undo-tree-id4300 . -4) (undo-tree-id4302 . -4) (undo-tree-id4304 . -4) (undo-tree-id4306 . -4) (undo-tree-id4308 . -4) (undo-tree-id4310 . -4) (undo-tree-id4312 . -4) (undo-tree-id4314 . -4) (undo-tree-id4316 . -5) (undo-tree-id4318 . -5) (undo-tree-id4320 . -5) (undo-tree-id4322 . -5) (undo-tree-id4324 . -5) (undo-tree-id4326 . -5) (undo-tree-id4328 . -5) (undo-tree-id4330 . -5) (undo-tree-id4332 . -5) (undo-tree-id4334 . -5) (undo-tree-id4336 . -5) (undo-tree-id4338 . -5) (undo-tree-id4340 . -5) (undo-tree-id4342 . -5) (undo-tree-id4344 . -5) (undo-tree-id4346 . -5) (undo-tree-id4348 . -5) (undo-tree-id4350 . -5) (undo-tree-id4352 . -5) (undo-tree-id4354 . -5) (undo-tree-id4356 . -5) (undo-tree-id4358 . -5) (undo-tree-id4360 . -5) (undo-tree-id4362 . -5) (undo-tree-id4364 . -5) (undo-tree-id4366 . -5) (undo-tree-id4368 . -5) (undo-tree-id4370 . -5) (undo-tree-id4372 . -5) (undo-tree-id4374 . -5) (undo-tree-id4376 . -5) (undo-tree-id4378 . -5) (undo-tree-id4380 . -5) (undo-tree-id4382 . -5) (undo-tree-id4384 . -5) (undo-tree-id4386 . -5) (undo-tree-id4388 . -5) (undo-tree-id4390 . -5) (undo-tree-id4392 . -5) (undo-tree-id4394 . -5) (undo-tree-id4396 . -5) (undo-tree-id4398 . -5) (undo-tree-id4400 . -5) (undo-tree-id4402 . -5) (undo-tree-id4404 . -5) (undo-tree-id4406 . -5) (undo-tree-id4408 . -5) (undo-tree-id4410 . -5) (undo-tree-id4412 . -5) (undo-tree-id4414 . -5) (undo-tree-id4416 . -5) (undo-tree-id4418 . -5) (undo-tree-id4420 . -5) (undo-tree-id4422 . -5) (undo-tree-id4424 . -5) (undo-tree-id4426 . -5) (undo-tree-id4428 . -5) (undo-tree-id4430 . -5) (undo-tree-id4432 . -5) (undo-tree-id4434 . -5) (undo-tree-id4436 . -5) (undo-tree-id4438 . -5) (undo-tree-id4440 . -5) (undo-tree-id4442 . -5) (undo-tree-id4444 . -5) (undo-tree-id4446 . -5) (undo-tree-id4448 . -5) (undo-tree-id4450 . -5) (undo-tree-id4452 . -5) (undo-tree-id4454 . -5) (undo-tree-id4456 . -5) (undo-tree-id4458 . -5) (undo-tree-id4460 . -5) (undo-tree-id4462 . -5) (undo-tree-id4464 . -5) (undo-tree-id4466 . -5) (undo-tree-id4468 . -5) (undo-tree-id4470 . -5) (undo-tree-id4472 . -5) (undo-tree-id4474 . -6) (undo-tree-id4476 . -6) (undo-tree-id4478 . -6) (undo-tree-id4480 . -6) (undo-tree-id4482 . -6) (undo-tree-id4484 . -6) (undo-tree-id4486 . -6) (undo-tree-id4488 . -6) (undo-tree-id4490 . -6) (undo-tree-id4492 . -6) (undo-tree-id4494 . -6) (undo-tree-id4496 . -6) (undo-tree-id4498 . -6) (undo-tree-id4500 . -6) (undo-tree-id4502 . -6) (undo-tree-id4504 . -6) (undo-tree-id4506 . -6) (undo-tree-id4508 . -6) (undo-tree-id4510 . -6) (undo-tree-id4512 . -6) (undo-tree-id4514 . -6) (undo-tree-id4516 . -6) (undo-tree-id4518 . -6) (undo-tree-id4520 . -6) (undo-tree-id4522 . -6) (undo-tree-id4524 . -6) (undo-tree-id4526 . -6) (undo-tree-id4528 . -6) (undo-tree-id4530 . -6) (undo-tree-id4532 . -6) (undo-tree-id4534 . -6) (undo-tree-id4536 . -6) (undo-tree-id4538 . -6) (undo-tree-id4540 . -6) (undo-tree-id4542 . -6) (undo-tree-id4544 . -6) (undo-tree-id4546 . -6) (undo-tree-id4548 . -6) (undo-tree-id4550 . -6) (undo-tree-id4552 . -6) (undo-tree-id4554 . -6) (undo-tree-id4556 . -6) (undo-tree-id4558 . -6) (undo-tree-id4560 . -6) (undo-tree-id4562 . -6) (undo-tree-id4564 . -6) (undo-tree-id4566 . -6) (undo-tree-id4568 . -6) (undo-tree-id4570 . -6) (undo-tree-id4572 . -6) (undo-tree-id4574 . -6) (undo-tree-id4576 . -6) (undo-tree-id4578 . -6) (undo-tree-id4580 . -6) (undo-tree-id4582 . -6) (undo-tree-id4584 . -6) (undo-tree-id4586 . -6) (undo-tree-id4588 . -6) (undo-tree-id4590 . -6) (undo-tree-id4592 . -6) (undo-tree-id4594 . -6) (undo-tree-id4596 . -6) (undo-tree-id4598 . -6) (undo-tree-id4600 . -6) (undo-tree-id4602 . -6) (undo-tree-id4604 . -6) (undo-tree-id4606 . -6) (undo-tree-id4608 . -6) (undo-tree-id4610 . -6) (undo-tree-id4612 . -6) (undo-tree-id4614 . -6) (undo-tree-id4616 . -6) (undo-tree-id4618 . -6) (undo-tree-id4620 . -6) (undo-tree-id4622 . -6) (undo-tree-id4624 . -6) (undo-tree-id4626 . -6) (undo-tree-id4628 . -6) (undo-tree-id4630 . -6) 350 (348 . 350) (#("u" 0 1 (fontified t)) . -348) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4634 . -1) (undo-tree-id4636 . -1) (undo-tree-id4638 . -1) (undo-tree-id4640 . -1) (undo-tree-id4642 . -1) (undo-tree-id4644 . -1) (undo-tree-id4646 . -1) (undo-tree-id4648 . -1) (undo-tree-id4650 . -1) (undo-tree-id4652 . -1) (undo-tree-id4654 . -1) (undo-tree-id4656 . -1) (undo-tree-id4658 . -1) (undo-tree-id4660 . -1) (undo-tree-id4662 . -1) (undo-tree-id4664 . -1) (undo-tree-id4666 . -1) (undo-tree-id4668 . -1) (undo-tree-id4670 . -1) (undo-tree-id4672 . -1) (undo-tree-id4674 . -1) (undo-tree-id4676 . -1) (undo-tree-id4678 . -1) (undo-tree-id4680 . -1) (undo-tree-id4682 . -1) (undo-tree-id4684 . -1) (undo-tree-id4686 . -1) (undo-tree-id4688 . -1) (undo-tree-id4690 . -1) (undo-tree-id4692 . -1) (undo-tree-id4694 . -1) (undo-tree-id4696 . -1) (undo-tree-id4698 . -1) (undo-tree-id4700 . -1) (undo-tree-id4702 . -1) (undo-tree-id4704 . -1) (undo-tree-id4706 . -1) (undo-tree-id4708 . -1) (undo-tree-id4710 . -1) (undo-tree-id4712 . -1) (undo-tree-id4714 . -1) (undo-tree-id4716 . -1) (undo-tree-id4718 . -1) (undo-tree-id4720 . -1) (undo-tree-id4722 . -1) (undo-tree-id4724 . -1) (undo-tree-id4726 . -1) (undo-tree-id4728 . -1) (undo-tree-id4730 . -1) (undo-tree-id4732 . -1) (undo-tree-id4734 . -1) (undo-tree-id4736 . -1) (undo-tree-id4738 . -1) (undo-tree-id4740 . -1) (undo-tree-id4742 . -1) (undo-tree-id4744 . -1) (undo-tree-id4746 . -1) (undo-tree-id4748 . -1) (undo-tree-id4750 . -1) (undo-tree-id4752 . -1) (undo-tree-id4754 . -1) (undo-tree-id4756 . -1) (undo-tree-id4758 . -1) (undo-tree-id4760 . -1) (undo-tree-id4762 . -1) (undo-tree-id4764 . -1) (undo-tree-id4766 . -1) (undo-tree-id4768 . -1) (undo-tree-id4770 . -1) (undo-tree-id4772 . -1) (undo-tree-id4774 . -1) (undo-tree-id4776 . -1) (undo-tree-id4778 . -1) (undo-tree-id4780 . -1) (undo-tree-id4782 . -1) (undo-tree-id4784 . -1) (undo-tree-id4786 . -1) (undo-tree-id4788 . -1) (undo-tree-id4790 . -1) (undo-tree-id4792 . -1) (undo-tree-id4794 . -1) (undo-tree-id4796 . -1) (undo-tree-id4798 . -1) (undo-tree-id4800 . -1) (undo-tree-id4802 . -1) (undo-tree-id4804 . -1) (undo-tree-id4806 . -1) (undo-tree-id4808 . -1) (undo-tree-id4810 . -1) (undo-tree-id4812 . -1) (undo-tree-id4814 . -1) (undo-tree-id4816 . -1) (undo-tree-id4818 . -1) (undo-tree-id4820 . -1) (undo-tree-id4822 . -1) (undo-tree-id4824 . -1) (undo-tree-id4826 . -1) (undo-tree-id4828 . -1) (undo-tree-id4830 . -1) (undo-tree-id4832 . -1) (undo-tree-id4834 . -1) (undo-tree-id4836 . -1) (undo-tree-id4838 . -1) (undo-tree-id4840 . -1) 349 (344 . 349) (344 . 345) (t 26072 23500 656508 219000)) ((#(" " 0 1 (fontified nil)) . 344) (#("statu" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil)) . 344) (348 . 349) (#("ic" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil face font-lock-keyword-face)) . 348) (344 . 350) (#("st" 0 2 (fontified nil)) . 344) (344 . 346) (#("static" 0 6 (fontified t face font-lock-keyword-face)) . 344)) (26072 23624 6350 781000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(":" 0 1 (fontified t)) . -621) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1981 . -1) (undo-tree-id1983 . -1) (undo-tree-id1985 . -1) (undo-tree-id1987 . -1) (undo-tree-id1989 . -1) (undo-tree-id1991 . -1) (undo-tree-id1993 . -1) (undo-tree-id1995 . -1) (undo-tree-id1997 . -1) (undo-tree-id1999 . -1) (undo-tree-id2001 . -1) (undo-tree-id2003 . -1) (undo-tree-id2005 . -1) (undo-tree-id2007 . -1) (undo-tree-id2009 . -1) (undo-tree-id2011 . -1) (undo-tree-id2013 . -1) (undo-tree-id2015 . -1) (undo-tree-id2017 . -1) (undo-tree-id2019 . -1) (undo-tree-id2021 . -1) (undo-tree-id2023 . -1) (undo-tree-id2025 . -1) (undo-tree-id2027 . -1) (undo-tree-id2029 . -1) (undo-tree-id2031 . -1) (undo-tree-id2033 . -1) (undo-tree-id2035 . -1) (undo-tree-id2037 . -1) (undo-tree-id2039 . -1) (undo-tree-id2041 . -1) (undo-tree-id2043 . -1) (undo-tree-id2045 . -1) (undo-tree-id2047 . -1) (undo-tree-id2049 . -1) (undo-tree-id2051 . -1) (undo-tree-id2053 . -1) (undo-tree-id2055 . -1) (undo-tree-id2057 . -1) (undo-tree-id2059 . -1) (undo-tree-id2061 . -1) (undo-tree-id2063 . -1) (undo-tree-id2065 . -1) (undo-tree-id2067 . -1) (undo-tree-id2069 . -1) (undo-tree-id2071 . -1) (undo-tree-id2073 . -1) (undo-tree-id2075 . -1) (undo-tree-id2077 . -1) (undo-tree-id2079 . -1) (undo-tree-id2081 . -1) (undo-tree-id2083 . -1) (undo-tree-id2085 . -1) (undo-tree-id2087 . -1) (undo-tree-id2089 . -1) (undo-tree-id2091 . -1) (undo-tree-id2093 . -1) (undo-tree-id2095 . -1) (undo-tree-id2097 . -1) (undo-tree-id2099 . -1) (undo-tree-id2101 . -1) (undo-tree-id2103 . -1) (undo-tree-id2105 . -1) (undo-tree-id2107 . -1) (undo-tree-id2109 . -1) (undo-tree-id2111 . -1) (undo-tree-id2113 . -1) (undo-tree-id2115 . -1) (undo-tree-id2117 . -1) (undo-tree-id2119 . -1) (undo-tree-id2121 . -1) (undo-tree-id2123 . -1) (undo-tree-id2125 . -1) (undo-tree-id2127 . -1) (undo-tree-id2129 . -1) (undo-tree-id2131 . -1) (undo-tree-id2133 . -1) (undo-tree-id2135 . -1) (undo-tree-id2137 . -1) (undo-tree-id2139 . -1) (undo-tree-id2141 . -1) (undo-tree-id2143 . -1) (undo-tree-id2145 . -1) (undo-tree-id2147 . -1) (undo-tree-id2149 . -1) (undo-tree-id2151 . -1) (undo-tree-id2153 . -1) (undo-tree-id2155 . -1) (undo-tree-id2157 . -1) (undo-tree-id2159 . -1) (undo-tree-id2161 . -1) (undo-tree-id2163 . -1) (undo-tree-id2165 . -1) (undo-tree-id2167 . -1) (undo-tree-id2169 . -1) (undo-tree-id2171 . -1) (undo-tree-id2173 . -1) (undo-tree-id2175 . -1) (undo-tree-id2177 . -1) (undo-tree-id2179 . -1) (undo-tree-id2181 . -1) (undo-tree-id2183 . -1) (undo-tree-id2185 . -1) (undo-tree-id2187 . -1) (undo-tree-id2189 . -1) (undo-tree-id2191 . -1) (undo-tree-id2193 . -1) (undo-tree-id2195 . -1) (undo-tree-id2197 . -1) (undo-tree-id2199 . -1) (undo-tree-id2201 . -1) (undo-tree-id2203 . -1) (undo-tree-id2205 . -1) (undo-tree-id2207 . -1) (undo-tree-id2209 . -1) (undo-tree-id2211 . -1) (undo-tree-id2213 . -1) (undo-tree-id2215 . -1) (undo-tree-id2217 . -1) (undo-tree-id2219 . -1) (undo-tree-id2221 . -1) (undo-tree-id2223 . -1) (undo-tree-id2225 . -1) (undo-tree-id2227 . -1) (undo-tree-id2229 . -1) (undo-tree-id2231 . -1) (undo-tree-id2233 . -1) (undo-tree-id2235 . -1) (undo-tree-id2237 . -1) (undo-tree-id2239 . -1) (undo-tree-id2241 . -1) (undo-tree-id2243 . -1) (undo-tree-id2245 . -1) (undo-tree-id2247 . -1) (undo-tree-id2249 . -1) (undo-tree-id2251 . -1) (undo-tree-id2253 . -1) (undo-tree-id2255 . -1) (undo-tree-id2257 . -1) (undo-tree-id2259 . -1) (undo-tree-id2261 . -1) (undo-tree-id2263 . -1) (undo-tree-id2265 . -1) (undo-tree-id2267 . -1) (undo-tree-id2269 . -1) (undo-tree-id2271 . -1) (undo-tree-id2273 . -1) (undo-tree-id2275 . -1) (undo-tree-id2277 . -1) (undo-tree-id2279 . -1) (undo-tree-id2281 . -1) (undo-tree-id2283 . -1) (undo-tree-id2285 . -1) (undo-tree-id2287 . -1) (undo-tree-id2289 . -1) (undo-tree-id2291 . -1) (undo-tree-id2293 . -1) (undo-tree-id2295 . -1) (undo-tree-id2297 . -1) (undo-tree-id2299 . -1) (undo-tree-id2301 . -1) (#(":" 0 1 (fontified t)) . -622) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2306 . -1) (undo-tree-id2308 . -1) (undo-tree-id2310 . -1) (undo-tree-id2312 . -1) (undo-tree-id2314 . -1) (undo-tree-id2316 . -1) (undo-tree-id2318 . -1) (undo-tree-id2320 . -1) (undo-tree-id2322 . -1) (undo-tree-id2324 . -1) (undo-tree-id2326 . -1) (undo-tree-id2328 . -1) (undo-tree-id2330 . -1) (undo-tree-id2332 . -1) (undo-tree-id2334 . -1) (undo-tree-id2336 . -1) (undo-tree-id2338 . -1) (undo-tree-id2340 . -1) (undo-tree-id2342 . -1) (undo-tree-id2344 . -1) (undo-tree-id2346 . -1) (undo-tree-id2348 . -1) (undo-tree-id2350 . -1) (undo-tree-id2352 . -1) (undo-tree-id2354 . -1) (undo-tree-id2356 . -1) (undo-tree-id2358 . -1) (undo-tree-id2360 . -1) (undo-tree-id2362 . -1) (undo-tree-id2364 . -1) (undo-tree-id2366 . -1) (undo-tree-id2368 . -1) (undo-tree-id2370 . -1) (undo-tree-id2372 . -1) (undo-tree-id2374 . -1) (undo-tree-id2376 . -1) (undo-tree-id2378 . -1) (undo-tree-id2380 . -1) (undo-tree-id2382 . -1) (undo-tree-id2384 . -1) (undo-tree-id2386 . -1) (undo-tree-id2388 . -1) (undo-tree-id2390 . -1) (undo-tree-id2392 . -1) (undo-tree-id2394 . -1) (undo-tree-id2396 . -1) (undo-tree-id2398 . -1) (undo-tree-id2400 . -1) (undo-tree-id2402 . -1) (undo-tree-id2404 . -1) (undo-tree-id2406 . -1) (undo-tree-id2408 . -1) (undo-tree-id2410 . -1) (undo-tree-id2412 . -1) (undo-tree-id2414 . -1) (undo-tree-id2416 . -1) (undo-tree-id2418 . -1) (undo-tree-id2420 . -1) (undo-tree-id2422 . -1) (undo-tree-id2424 . -1) (undo-tree-id2426 . -1) (undo-tree-id2428 . -1) (undo-tree-id2430 . -1) (undo-tree-id2432 . -1) (undo-tree-id2434 . -1) (undo-tree-id2436 . -1) (undo-tree-id2438 . -1) (undo-tree-id2440 . -1) (undo-tree-id2442 . -1) (undo-tree-id2444 . -1) (undo-tree-id2446 . -1) (undo-tree-id2448 . -1) (undo-tree-id2450 . -1) (undo-tree-id2452 . -1) (undo-tree-id2454 . -1) (undo-tree-id2456 . -1) (undo-tree-id2458 . -1) (undo-tree-id2460 . -1) (undo-tree-id2462 . -1) (undo-tree-id2464 . -1) (undo-tree-id2466 . -1) (undo-tree-id2468 . -1) (undo-tree-id2470 . -1) (undo-tree-id2472 . -1) (undo-tree-id2474 . -1) (undo-tree-id2476 . -1) (undo-tree-id2478 . -1) (undo-tree-id2480 . -1) (undo-tree-id2482 . -1) (undo-tree-id2484 . -1) (undo-tree-id2486 . -1) (undo-tree-id2488 . -1) (undo-tree-id2490 . -1) (undo-tree-id2492 . -1) (undo-tree-id2494 . -1) (undo-tree-id2496 . -1) (undo-tree-id2498 . -1) (undo-tree-id2500 . -1) (undo-tree-id2502 . -1) (undo-tree-id2504 . -1) (undo-tree-id2506 . -1) (undo-tree-id2508 . -1) (undo-tree-id2510 . -1) (undo-tree-id2512 . -1) (undo-tree-id2514 . -1) (undo-tree-id2516 . -1) (undo-tree-id2518 . -1) (undo-tree-id2520 . -1) (undo-tree-id2522 . -1) (undo-tree-id2524 . -1) (undo-tree-id2526 . -1) (undo-tree-id2528 . -1) (undo-tree-id2530 . -1) (undo-tree-id2532 . -1) (undo-tree-id2534 . -1) (undo-tree-id2536 . -1) (undo-tree-id2538 . -1) (undo-tree-id2540 . -1) (undo-tree-id2542 . -1) (undo-tree-id2544 . -1) (undo-tree-id2546 . -1) 623 (t 26072 23308 763179 535000)) ((621 . 623)) (26072 23460 26745 589000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("b" 0 1 (fontified t face font-lock-type-face)) . -305) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -306) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (#("f" 0 1 (fontified t face font-lock-type-face)) . -307) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (#("_" 0 1 (fontified t face font-lock-type-face)) . -308) (undo-tree-id7349 . -1) 309 (437 . 442) (#("token" 0 5 (fontified nil)) . -437) (437 . 442) (435 . 437) (nil face (rainbow-delimiters-depth-5-face) 424 . 435) (nil fontified nil 424 . 435) (424 . 435) (#("token_" 0 6 (fontified nil)) . 424) (nil face (rainbow-delimiters-depth-5-face) 424 . 430) (nil fontified nil 424 . 430) (424 . 430) (#("token_class" 0 11 (fontified nil)) . -424) (nil face (rainbow-delimiters-depth-5-face) 424 . 435) (nil fontified nil 424 . 435) (424 . 435) (#("token_" 0 5 (fontified t) 5 6 (fontified t)) . -424) (undo-tree-id7350 . -6) (undo-tree-id7351 . -6) 430 (429 . 430) (#("_" 0 1 (fontified t)) . -429) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (#("c" 0 1 (fontified t)) . -430) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (#("l" 0 1 (fontified t)) . -431) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (#("a" 0 1 (fontified t)) . -432) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (#("s" 0 1 (fontified t)) . -433) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (#("s" 0 1 (fontified t)) . -434) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (#(":" 0 1 (fontified t)) . -435) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (#(":" 0 1 (fontified t)) . -436) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (#("b" 0 1 (fontified t)) . -437) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (#("n" 0 1 (fontified t)) . -438) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (#("f" 0 1 (fontified t)) . -439) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (#("_" 0 1 (fontified t)) . -440) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (#("t" 0 1 (fontified t)) . -441) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (#("o" 0 1 (fontified t)) . -442) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (#("k" 0 1 (fontified t)) . -443) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (#("e" 0 1 (fontified t)) . -444) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -445) (undo-tree-id7384 . -1) 446 (660 . 665) (#("token" 0 5 (fontified nil)) . -660) (660 . 665) (658 . 660) (647 . 658) (#("tok" 0 3 (fontified nil)) . 647) (647 . 650) (#("token_class" 0 11 (fontified nil)) . -647) (647 . 658) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -647) (undo-tree-id7385 . -3) (undo-tree-id7386 . -3) 650 (647 . 650) (647 . 648) (#("," 0 1 (fontified t)) . -669) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) 670 (669 . 670)) nil (26072 27014 219638 226000) 0 nil])
nil
([nil nil ((356 . 358)) ((#("c " 0 1 (fontified t face font-lock-keyword-face c-type c-decl-id-start) 1 2 (fontified t)) . 356) (undo-tree-id6336 . -2) (undo-tree-id6337 . -2) (undo-tree-id6338 . -2)) (26072 23912 77175 609000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -627) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4844 . -1) (undo-tree-id4846 . -1) (undo-tree-id4848 . -1) (undo-tree-id4850 . -1) (undo-tree-id4852 . -1) (undo-tree-id4854 . -1) (undo-tree-id4856 . -1) (undo-tree-id4858 . -1) (undo-tree-id4860 . -1) (undo-tree-id4862 . -1) (undo-tree-id4864 . -1) (undo-tree-id4866 . -1) (undo-tree-id4868 . -1) (undo-tree-id4870 . -1) (#("t" 0 1 (fontified t)) . -628) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (#("d" 0 1 (fontified t)) . -629) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (#(":" 0 1 (fontified t)) . -630) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (#(":" 0 1 (fontified t)) . -631) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (#("m" 0 1 (fontified t)) . -632) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (#("e" 0 1 (fontified t)) . -633) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (#("m" 0 1 (fontified t)) . -634) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (#("_" 0 1 (fontified t)) . -635) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (#("f" 0 1 (fontified t)) . -636) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (#("n" 0 1 (fontified t)) . -637) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -638) (undo-tree-id4891 . -1) 639 (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -643) (undo-tree-id4892 . 1) (undo-tree-id4893 . -1) (undo-tree-id4894 . 1) (undo-tree-id4895 . -1) 644 (t 26072 23564 846506 662000)) ((643 . 644) (627 . 639) (t 26072 23600 459839 132000)) (26072 23600 421741 143000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((621 . 622) (t 26072 23327 616512 409000)) ((#("&" 0 1 (fontified t)) . 621) (t 26072 23391 426510 861000)) (26072 23391 413959 414000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((apply -3 585 745 undo--wrap-and-run-primitive-undo 585 745 ((589 . 592) 691)) (t 26072 27017 656422 240000)) nil (26072 27193 659574 426000) 0 nil])
nil
nil
nil
([nil nil ((apply 3 585 691 undo--wrap-and-run-primitive-undo 585 691 ((#("// " 0 1 (c-is-sws t c-in-sws t fontified t face font-lock-comment-delimiter-face) 1 3 (c-in-sws t fontified t face font-lock-comment-delimiter-face)) . -589) 694)) (t 26072 27193 686417 892000)) nil (26072 27256 599149 573000) 0 nil])
([nil nil ((680 . 681) (#(")" 0 1 (fontified nil)) . -680) (680 . 681) (t 26072 27256 613083 6000)) nil (26072 27291 380252 279000) 0 nil])
([nil nil ((311 . 314) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -311) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -312) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) 313 (#("1" 0 1 (fontified t face font-lock-variable-name-face)) . -339) (undo-tree-id7394 . -1) 340 (t 26072 27291 396415 485000)) nil (26072 27396 197408 522000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-type-face)) . -675) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) (undo-tree-id7403 . -1) (undo-tree-id7404 . -1) (undo-tree-id7405 . -1) (undo-tree-id7406 . -1) (undo-tree-id7407 . -1) (undo-tree-id7408 . -1) (undo-tree-id7409 . -1) (undo-tree-id7410 . -1) (undo-tree-id7411 . -1) (undo-tree-id7412 . -1) (undo-tree-id7413 . -1) (undo-tree-id7414 . -1) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (undo-tree-id7433 . -1) (undo-tree-id7434 . -1) (undo-tree-id7435 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -676) (undo-tree-id7436 . -1) (undo-tree-id7437 . -1) (#("f" 0 1 (fontified t face font-lock-type-face)) . -677) (undo-tree-id7438 . -1) (undo-tree-id7439 . -1) (#("_" 0 1 (fontified t face font-lock-type-face)) . -678) (undo-tree-id7440 . -1) 679 (#("_" 0 1 (fontified t)) . -652) (undo-tree-id7441 . -1) 653 (652 . 657) (#("_" 0 1 (fontified t)) . -657) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) 658 (657 . 658) (#("b" 0 1 (fontified t face font-lock-type-face)) . -456) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -457) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (#("f" 0 1 (fontified t face font-lock-type-face)) . -458) (undo-tree-id7448 . -1) (undo-tree-id7449 . -1) (#("_" 0 1 (fontified t face font-lock-type-face)) . -459) (undo-tree-id7450 . -1) 460 (433 . 436) (433 . 434) (336 . 340) (#(" " 0 1 (fontified t)) . 336) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) 337 (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -337) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -338) (undo-tree-id7455 . -1) 339 (#("b" 0 1 (fontified t face font-lock-type-face)) . -331) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -332) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (#("f" 0 1 (fontified t face font-lock-type-face)) . -333) (undo-tree-id7460 . -1) (undo-tree-id7461 . -1) (#("_" 0 1 (fontified t face font-lock-type-face)) . -334) (undo-tree-id7462 . -1) 335 (315 . 317) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -315) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -316) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -317) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) 318 (305 . 308) (305 . 306) (t 26072 27396 213079 559000)) nil (26072 27466 547572 729000) 0 nil])
([nil nil ((nil rear-nonsticky nil 746 . 747) (#("
" 0 1 (fontified nil)) . -793) (742 . 794) 741 (t 26072 27466 559744 501000)) nil (26072 28336 100321 384000) 0 nil])
([nil nil ((779 . 782) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -779) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -780) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -781) (undo-tree-id7473 . -1) 782 (#("b" 0 1 (fontified t face font-lock-type-face)) . -772) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -773) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (#("f" 0 1 (fontified t face font-lock-type-face)) . -774) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) 775 (#("_" 0 1 (fontified t face font-lock-type-face)) . 775) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1)) nil (26072 28336 100315 731000) 0 nil])
([nil nil ((834 . 835) (828 . 834) (826 . 828) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -826) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) 827 (825 . 827) (apply yas--snippet-revive 799 825 #s(yas--snippet nil (#s(yas--field 1 806 824 nil nil nil t nil)) nil 23 nil #s(yas--field 1 806 824 nil nil nil t nil) nil nil)) (819 . 824) (#("token" 0 5 (fontified nil)) . -819) (819 . 824) (817 . 819) (nil fontified nil 806 . 817) (nil face (rainbow-delimiters-depth-3-face) 806 . 817) (806 . 817) (#("to" 0 2 (fontified nil)) . 806) (nil fontified nil 806 . 808) (nil face (rainbow-delimiters-depth-3-face) 806 . 808) (806 . 808) (#("token_class" 0 11 (fontified nil)) . -806) (nil fontified nil 806 . 817) (nil face (rainbow-delimiters-depth-3-face) 806 . 817) (806 . 817) (#("tok_" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -806) (undo-tree-id7492 . -4) (undo-tree-id7493 . -4) 810 (807 . 810) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 807) (806 . 807) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 806 824 nil nil nil t nil)) nil 23 nil #s(yas--field 1 806 824 nil nil nil t nil) nil nil)) (799 . 818) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 799) (799 . 823) (#("v" 0 1 (fontified nil)) . 799) (799 . 800) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -799) (799 . 834) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -799) (undo-tree-id7494 . -3) (undo-tree-id7495 . -3) 802 (799 . 802) (#("c" 0 1 (fontified t)) . -799) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) 800 (799 . 800) (790 . 794) (#("  " 0 2 (fontified nil)) . 790) (796 . 797) (790 . 792) (#("    " 0 4 (fontified nil)) . 790) (797 . 798) (794 . 797) (789 . 794) (t 26072 28336 116389 660000) 781) nil (26072 28539 487200 252000) 0 nil])
([nil nil ((509 . 510) (504 . 508) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -504) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) 505 (499 . 505) (492 . 497) (#("token" 0 5 (fontified nil)) . -492) (492 . 497) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -492) (undo-tree-id7500 . -2) (undo-tree-id7501 . -2) 494 (492 . 494) (#("r" 0 1 (fontified t)) . -492) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (#("i" 0 1 (fontified t)) . -493) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) 494 (492 . 494) (#("o" 0 1 (fontified t)) . -492) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (#("p" 0 1 (fontified t)) . -493) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (#("_" 0 1 (fontified t)) . -494) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (#("s" 0 1 (fontified t)) . -495) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) 496 (#("t" 0 1 (fontified t)) . -496) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (#("a" 0 1 (fontified t)) . -497) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (#("c" 0 1 (fontified t)) . -498) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (#("k" 0 1 (fontified t)) . -499) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) 500 (501 . 502) (apply yas--snippet-revive 472 501 #s(yas--snippet nil (#s(yas--field 1 479 500 nil nil nil t nil)) nil 26 nil #s(yas--field 1 479 500 nil nil nil t nil) nil nil)) (492 . 500) (490 . 492) (nil fontified nil 479 . 490) (nil face (rainbow-delimiters-depth-4-face) 479 . 490) (479 . 490) (#("to" 0 2 (fontified nil)) . 479) (nil fontified nil 479 . 481) (nil face (rainbow-delimiters-depth-4-face) 479 . 481) (479 . 481) (#("token_class" 0 11 (fontified nil)) . -479) (nil fontified nil 479 . 490) (nil face (rainbow-delimiters-depth-4-face) 479 . 490) (479 . 490) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -479) (undo-tree-id7522 . -2) (undo-tree-id7523 . -2) 481 (480 . 481) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 480) (479 . 480) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 479 500 nil nil nil t nil)) nil 26 nil #s(yas--field 1 479 500 nil nil nil t nil) nil nil)) (472 . 491) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 472) (472 . 496) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -472) (472 . 507) (470 . 472) (nil fontified nil 467 . 470) (467 . 470) (#("st" 0 2 (fontified nil)) . 467) (nil fontified nil 467 . 469) (467 . 469) (#("std" 0 3 (fontified nil)) . -467) (nil fontified nil 467 . 470) (467 . 470) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -467) (undo-tree-id7524 . -2) (undo-tree-id7525 . -2) 469 (468 . 469) (467 . 468) (466 . 467) (462 . 466) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -462) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) 463 (461 . 463) (456 . 457) (455 . 460) (apply yas--snippet-revive 429 455 #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 25 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (449 . 454) (#("token" 0 5 (fontified nil)) . -449) (449 . 454) (447 . 449) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-4-face) 436 . 447) (436 . 447) (#("to" 0 2 (fontified nil)) . 436) (nil fontified nil 436 . 438) (nil face (rainbow-delimiters-depth-4-face) 436 . 438) (436 . 438) (#("token_class" 0 11 (fontified nil)) . -436) (nil fontified nil 436 . 447) (nil face (rainbow-delimiters-depth-4-face) 436 . 447) (436 . 447) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -436) (undo-tree-id7528 . -3) (undo-tree-id7529 . -3) 439 (437 . 439) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 437) (436 . 437) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 436 454 nil nil nil t nil)) nil 25 nil #s(yas--field 1 436 454 nil nil nil t nil) nil nil)) (429 . 448) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 429) (429 . 453) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -429) (429 . 464) (427 . 429) (424 . 427) (423 . 424) (418 . 423) (415 . 418) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -415) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) 416 (412 . 416) (apply yas--snippet-revive 382 412 #s(yas--snippet nil (#s(yas--field 1 389 411 nil nil nil t nil)) nil 24 nil #s(yas--field 1 389 411 nil nil nil t nil) nil nil)) (402 . 411) (#("bnf_token" 0 9 (fontified nil)) . -402) (402 . 411) (400 . 402) (nil fontified nil 389 . 400) (nil face (rainbow-delimiters-depth-4-face) 389 . 400) (389 . 400) (#("tok" 0 3 (fontified nil)) . 389) (nil fontified nil 389 . 392) (nil face (rainbow-delimiters-depth-4-face) 389 . 392) (389 . 392) (#("token_class" 0 11 (fontified nil)) . -389) (nil fontified nil 389 . 400) (nil face (rainbow-delimiters-depth-4-face) 389 . 400) (389 . 400) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -389) (undo-tree-id7532 . -3) (undo-tree-id7533 . -3) 392 (390 . 392) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 390) (389 . 390) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 389 411 nil nil nil t nil)) nil 24 nil #s(yas--field 1 389 411 nil nil nil t nil) nil nil)) (382 . 401) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 382) (382 . 406) (#("v" 0 1 (fontified nil)) . 382) (382 . 383) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -382) (382 . 417) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -382) (undo-tree-id7534 . -3) (undo-tree-id7535 . -3) 385 (382 . 385) (380 . 382) (377 . 380) (376 . 378) (364 . 376) (359 . 364) (357 . 359) (#("u" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -357) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) 358 (347 . 358) (342 . 347) (t 26072 28539 513051 310000) 271) nil (26072 28950 303722 525000) 0 nil])
([nil nil ((384 . 386) (nil fontified nil 366 . 384) (nil face (rainbow-delimiters-depth-3-face) 366 . 384) (366 . 384) (#("sy" 0 2 (fontified nil)) . 366) (undo-tree-id7749 . -2) (nil fontified nil 366 . 368) (nil face (rainbow-delimiters-depth-3-face) 366 . 368) (366 . 368) (#("synatax_tree_class" 0 18 (fontified nil)) . -366) (undo-tree-id7750 . -18) (nil fontified nil 366 . 384) (nil face (rainbow-delimiters-depth-3-face) 366 . 384) (366 . 384) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -366) (undo-tree-id7751 . -2) (undo-tree-id7752 . -2) (undo-tree-id7753 . -2) 368 (367 . 368) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 367) (undo-tree-id7754 . -11) (366 . 367) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 366 398 nil nil nil t nil)) nil 27 nil #s(yas--field 1 366 398 nil nil nil t nil) nil nil)) (359 . 378) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 359) (359 . 383) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -359) (359 . 394) (357 . 359) (354 . 357) (#("st" 0 2 (fontified nil)) . 354) (354 . 356) (#("std" 0 3 (fontified nil)) . -354) (354 . 357) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -354) (undo-tree-id7755 . -2) (undo-tree-id7756 . -2) 356 (354 . 356) (#("void" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . 354) (undo-tree-id7757 . -3) (t 26072 28950 326374 522000)) nil (26072 29161 937002 872000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-constant-face)) . -347) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -348) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (#("a" 0 1 (fontified t face font-lock-constant-face)) . -349) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -350) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (#("i" 0 1 (fontified t face font-lock-constant-face)) . -351) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -352) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) 353 (#(" " 0 1 (fontified t)) . 353) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) 354 (#("s" 0 1 (fontified t face font-lock-constant-face)) . -354) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -355) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (#("d" 0 1 (fontified t face font-lock-constant-face)) . -356) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (#(":" 0 1 (fontified t)) . -357) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (#(":" 0 1 (fontified t)) . -358) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (#("v" 0 1 (fontified t face font-lock-constant-face)) . -359) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -360) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (#("c" 0 1 (fontified t face font-lock-constant-face)) . -361) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (#("t" 0 1 (fontified t face font-lock-constant-face)) . -362) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (#("o" 0 1 (fontified t face font-lock-constant-face)) . -363) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -364) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (#("<" 0 1 (fontified t)) . -365) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) 366 (#(">" 0 1 (fontified t c-type c-decl-id-start face (rainbow-delimiters-depth-3-face))) . -398) (undo-tree-id7740 . 1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . 1) (undo-tree-id7744 . -1) 399 (apply yas--snippet-revive 359 399 #s(yas--snippet nil (#s(yas--field 1 366 398 nil nil nil t nil)) nil 27 nil #s(yas--field 1 366 398 nil nil nil t nil) nil nil)) (386 . 398) (#("synatax_tree" 0 12 (fontified nil)) . -386) (undo-tree-id7745 . -12) (386 . 398) (#("s" 0 1 (fontified t)) . -386) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) 387 (386 . 387)) nil (26072 29161 936985 135000) 0 nil])
([nil nil ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 676) (undo-tree-id7763 . -2) (t 26072 29161 953035 954000)) nil (26072 29213 373965 435000) 0 nil])
([nil nil ((#("::" 0 2 (fontified t)) . 676) (undo-tree-id7762 . -1)) nil (26072 29213 373964 98000) 0 nil])
([nil nil ((#("vector" 0 6 (fontified t face font-lock-type-face)) . 676) (undo-tree-id7761 . -5)) nil (26072 29213 373962 480000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 676) (undo-tree-id7759 . 1) (undo-tree-id7760 . -1)) nil (26072 29213 373960 824000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 708) (undo-tree-id7758 . -1)) nil (26072 29213 373955 774000) 0 nil])
([nil nil ((954 . 955) (986 . 987) (1018 . 1019) (apply yas--snippet-revive 992 1018 #s(yas--snippet nil (#s(yas--field 1 999 1017 nil nil nil t nil)) nil 36 nil #s(yas--field 1 999 1017 nil nil nil t nil) nil nil)) (1012 . 1017) (#("token" 0 5 (fontified nil)) . -1012) (1012 . 1017) (1010 . 1012) (999 . 1010) (#("to" 0 2 (fontified nil)) . 999) (999 . 1001) (#("token_class" 0 11 (fontified nil)) . -999) (999 . 1010) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -999) (undo-tree-id7764 . -3) (undo-tree-id7765 . -3) 1002 (1000 . 1002) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 1000) (999 . 1000) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 999 1017 nil nil nil t nil)) nil 36 nil #s(yas--field 1 999 1017 nil nil nil t nil) nil nil)) (992 . 1011) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 992) (992 . 1016) (#("v" 0 1 (fontified nil)) . 992) (992 . 993) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -992) (992 . 1027) (#("vec" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -992) (undo-tree-id7766 . -3) (undo-tree-id7767 . -3) 995 (992 . 995) (990 . 992) (nil fontified nil 987 . 990) (987 . 990) (#("st" 0 2 (fontified nil)) . 987) (nil fontified nil 987 . 989) (987 . 989) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -987) (undo-tree-id7768 . -3) (undo-tree-id7769 . -3) 990 (987 . 990) (986 . 987) (apply yas--snippet-revive 960 986 #s(yas--snippet nil (#s(yas--field 1 967 985 nil nil nil t nil)) nil 35 nil #s(yas--field 1 967 985 nil nil nil t nil) nil nil)) (980 . 985) (#("token" 0 5 (fontified nil)) . -980) (980 . 985) (978 . 980) (967 . 978) (#("to" 0 2 (fontified nil)) . 967) (967 . 969) (#("token_class" 0 11 (fontified nil)) . -967) (967 . 978) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -967) (undo-tree-id7770 . -2) (undo-tree-id7771 . -2) 969 (968 . 969) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 968) (967 . 968) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 967 985 nil nil nil t nil)) nil 35 nil #s(yas--field 1 967 985 nil nil nil t nil) nil nil)) (960 . 979) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 960) (960 . 984) (#("v" 0 1 (fontified nil)) . 960) (960 . 961) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -960) (960 . 995) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -960) (undo-tree-id7772 . -2) (undo-tree-id7773 . -2) 962 (960 . 962) (#("c" 0 1 (fontified t)) . -960) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) 961 (960 . 961) (958 . 960) (nil fontified nil 955 . 958) (955 . 958) (#("st" 0 2 (fontified nil)) . 955) (nil fontified nil 955 . 957) (955 . 957) (#("std" 0 3 (fontified nil)) . -955) (nil fontified nil 955 . 958) (955 . 958) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -955) (undo-tree-id7776 . -2) (undo-tree-id7777 . -2) 957 (955 . 957) (954 . 955) (969 . 970) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -969) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) 970 (959 . 970) (#("J" 0 1 (fontified t)) . -959) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) 960 (957 . 960) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -957) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -958) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -959) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -960) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) 961 (956 . 961) (apply yas--snippet-revive 877 956 #s(yas--snippet nil (#s(yas--field 1 886 955 nil nil nil t nil)) nil 33 nil #s(yas--field 1 886 955 nil nil nil t nil) nil nil)) (apply yas--snippet-revive 924 954 #s(yas--snippet nil (#s(yas--field 1 931 953 nil nil nil t nil)) nil 34 nil #s(yas--field 1 931 953 nil nil nil t nil) #s(yas--field 1 886 955 nil nil nil t nil) nil)) (944 . 953) (#("bnf_token" 0 9 (fontified nil)) . -944) (944 . 953) (942 . 944) (931 . 942) (#("to" 0 2 (fontified nil)) . 931) (931 . 933) (#("token_class" 0 11 (fontified nil)) . -931) (931 . 942) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -931) (undo-tree-id7790 . -2) (undo-tree-id7791 . -2) 933 (932 . 933) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 932) (931 . 932) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 931 953 nil nil nil t nil)) nil 34 nil #s(yas--field 1 931 953 nil nil nil t nil) #s(yas--field 1 886 955 nil nil nil t nil) nil)) (924 . 943) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 924) (924 . 948) (#("v" 0 1 (fontified nil)) . 924) (924 . 925) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -924) (924 . 959) (#("v" 0 1 (fontified t)) . -924) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) 925 (924 . 925) (922 . 924) (nil fontified nil 919 . 922) (nil face (rainbow-delimiters-depth-4-face) 919 . 922) (919 . 922) (#("st" 0 2 (fontified nil)) . 919) (nil fontified nil 919 . 921) (nil face (rainbow-delimiters-depth-4-face) 919 . 921) (919 . 921) (#("std" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -919) (undo-tree-id7794 . -3) (undo-tree-id7795 . -3) 922 (919 . 922) (918 . 920) (906 . 918) (#("synatax_tree" 0 12 (fontified nil)) . -906) (906 . 918) (904 . 906) (nil fontified nil 886 . 904) (nil face (rainbow-delimiters-depth-3-face) 886 . 904) (886 . 904) (#("sy" 0 2 (fontified nil)) . 886) (nil fontified nil 886 . 888) (nil face (rainbow-delimiters-depth-3-face) 886 . 888) (886 . 888) (#("synatax_tree_class" 0 18 (fontified nil)) . -886) (nil fontified nil 886 . 904) (nil face (rainbow-delimiters-depth-3-face) 886 . 904) (886 . 904) (#("sy" 0 1 (fontified t) 1 2 (fontified t)) . -886) (undo-tree-id7796 . -2) (undo-tree-id7797 . -2) 888 (887 . 888) (#("typename Signature" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 18 (fontified nil face font-lock-type-face)) . 887) (886 . 887) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 886 955 nil nil nil t nil)) nil 33 nil #s(yas--field 1 886 955 nil nil nil t nil) nil nil)) (877 . 905) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 877) (877 . 910) (#("f" 0 1 (fontified nil)) . 877) (877 . 878) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 27 (fontified nil) 27 28 (syntax-table (5 . 60) fontified nil)) . -877) (877 . 905) (#("fun" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -877) (undo-tree-id7798 . -3) (undo-tree-id7799 . -3) 880 (877 . 880) (868 . 872) (#("  " 0 2 (fontified nil)) . 868) (874 . 875) (868 . 870) (#("    " 0 4 (fontified nil)) . 868) (875 . 876) (873 . 875) (872 . 873) (867 . 872) (t 26072 29213 396368 28000) 797) nil (26072 30100 315478 324000) 0 nil])
([nil nil ((669 . 670) (t 26072 30100 336346 123000)) nil (26072 30194 314659 463000) 0 nil])
([nil nil ((nil rear-nonsticky nil 822 . 823) (nil fontified nil 822 . 823) (nil fontified nil 821 . 822) (nil fontified nil 685 . 821) (nil fontified nil 684 . 685) (nil fontified nil 670 . 684) (670 . 823) 669) nil (26072 30194 314658 518000) 0 nil])
([nil nil ((836 . 845) (823 . 836)) nil (26072 30194 314653 686000) 0 nil])
([nil nil (530) nil (26072 30273 891439 861000) 0 nil])
([nil current ((347 . 353) (#("st" 0 2 (fontified nil)) . 347) (347 . 349) (#("static" 0 6 (fontified nil)) . -347) (347 . 353) (#("stati" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -347) (undo-tree-id7800 . -5) (undo-tree-id7801 . -5) (undo-tree-id7802 . -5) (undo-tree-id7803 . -5) (undo-tree-id7804 . -5) (undo-tree-id7805 . -5) (undo-tree-id7806 . -5) (undo-tree-id7807 . -5) (undo-tree-id7808 . -5) (undo-tree-id7809 . -5) (undo-tree-id7810 . -5) (undo-tree-id7811 . -5) (undo-tree-id7812 . -5) (undo-tree-id7813 . -5) (undo-tree-id7814 . -5) (undo-tree-id7815 . -5) (undo-tree-id7816 . -5) (undo-tree-id7817 . -5) (undo-tree-id7818 . -5) (undo-tree-id7819 . -5) (undo-tree-id7820 . -5) (undo-tree-id7821 . -5) (undo-tree-id7822 . -5) (undo-tree-id7823 . -5) (undo-tree-id7824 . -5) (undo-tree-id7825 . -5) (undo-tree-id7826 . -5) (undo-tree-id7827 . -5) (undo-tree-id7828 . -5) (undo-tree-id7829 . -5) (undo-tree-id7830 . -5) (undo-tree-id7831 . -5) (undo-tree-id7832 . -5) (undo-tree-id7833 . -5) (undo-tree-id7834 . -5) (undo-tree-id7835 . -5) (undo-tree-id7836 . -5) (undo-tree-id7837 . -5) (undo-tree-id7838 . -5) (undo-tree-id7839 . -5) (undo-tree-id7840 . -5) (undo-tree-id7841 . -5) (undo-tree-id7842 . -5) (undo-tree-id7843 . -5) (undo-tree-id7844 . -5) (undo-tree-id7845 . -5) (undo-tree-id7846 . -5) (undo-tree-id7847 . -5) (undo-tree-id7848 . -5) (undo-tree-id7849 . -5) (undo-tree-id7850 . -5) (undo-tree-id7851 . -5) (undo-tree-id7852 . -5) (undo-tree-id7853 . -5) 352 (347 . 352) (347 . 348) (t 26072 30194 333010 470000)) nil (26072 30273 891433 632000) 0 nil])
nil
