(undo-tree-save-format-version . 1)
"262fc447910eb330ef25ac8926889d6014c95196"
[nil nil nil nil (26073 42765 72708 574000) 0 nil]
([nil nil ((1212 . 1213) (t 26072 57203 499413 439000)) nil (26073 42765 72705 97000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 1212) (t 26073 42765 80199 821000)) nil (26073 42792 829503 672000) 0 nil])
([nil nil ((990 . 991) (t 26073 42792 843534 259000)) nil (26073 45015 76047 407000) 0 nil])
([nil nil ((1261 . 1262) (1213 . 1214) (#("&" 0 1 (fontified t)) . -1213) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 1214 (1213 . 1214) (t 26073 45015 80289 710000)) nil (26073 45259 754511 870000) 0 nil])
([nil nil ((407 . 408) (t 26073 45259 756966 187000)) nil (26073 45372 154171 8000) 0 nil])
([nil nil ((441 . 442)) nil (26073 45372 154167 380000) 0 nil])
([nil nil ((816 . 817) (772 . 773) (t 26073 45372 166970 692000)) nil (26073 45413 59267 775000) 0 nil])
([nil nil ((#("    static synatax_tree_class::synatax_tree null_sy_tree;
" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 29 (face font-lock-constant-face fontified t) 29 31 (fontified t) 31 42 (face font-lock-type-face fontified t) 42 43 (face font-lock-type-face c-type c-decl-id-start fontified t) 43 44 (fontified t) 44 56 (face font-lock-variable-name-face fontified t) 56 58 (fontified t)) . 1017) (undo-tree-id2 . -57) (undo-tree-id3 . -44) (undo-tree-id4 . -56) (undo-tree-id5 . -56) 1073 (t 26073 45413 63638 991000)) nil (26073 47363 31928 913000) 0 nil])
([nil nil ((nil rear-nonsticky nil 844 . 845) (#("
" 0 1 (fontified nil)) . -898) (840 . 899) 839) nil (26073 47363 31913 919000) 0 nil])
([nil nil ((1185 . 1186) (1183 . 1185) (1173 . 1183) (1168 . 1169) (1168 . 1170) (nil fontified nil 1150 . 1168) (nil face (rainbow-delimiters-depth-3-face) 1150 . 1168) (1150 . 1168) (#("to" 0 2 (fontified nil)) . 1150) (nil fontified nil 1150 . 1152) (nil face (rainbow-delimiters-depth-3-face) 1150 . 1152) (1150 . 1152) (#("token_class::token" 0 18 (fontified nil)) . -1150) (nil fontified nil 1150 . 1168) (nil face (rainbow-delimiters-depth-3-face) 1150 . 1168) (1150 . 1168) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1150) (undo-tree-id0 . -3) (undo-tree-id1 . -3) 1153 (1150 . 1153) (#("r" 0 1 (fontified t)) . -1150) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t)) . -1151) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("t" 0 1 (fontified t)) . -1152) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("_" 0 1 (fontified t)) . -1153) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("n" 0 1 (fontified t)) . -1154) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("e" 0 1 (fontified t)) . -1155) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("x" 0 1 (fontified t)) . -1156) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("t" 0 1 (fontified t)) . -1157) (undo-tree-id16 . -1) 1158 (1159 . 1160) (apply yas--snippet-revive 1141 1159 #s(yas--snippet nil (#s(yas--field 1 1150 1158 nil nil nil t nil)) nil 3 nil #s(yas--field 1 1150 1158 nil nil nil t nil) nil nil)) (1152 . 1158) (1151 . 1152) (#("typename Signature" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 18 (fontified nil face font-lock-type-face)) . 1151) (1150 . 1151) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1150 1158 nil nil nil t nil)) nil 3 nil #s(yas--field 1 1150 1158 nil nil nil t nil) nil nil)) (1141 . 1169) (#("function<${1:typename Signature}>" 0 33 (fontified nil)) . 1141) (1141 . 1174) (#("f" 0 1 (fontified nil)) . 1141) (1141 . 1142) (#("function<typename Signature>" 0 8 (fontified nil) 8 9 (syntax-table (4 . 62) fontified nil) 9 27 (fontified nil) 27 28 (syntax-table (5 . 60) fontified nil)) . -1141) (1141 . 1169) (#("f" 0 1 (fontified t)) . -1141) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 1142 (#("i" 0 1 (fontified t)) . -1142) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("u" 0 1 (fontified t)) . -1143) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 1144 (1142 . 1144) (1141 . 1142) (1132 . 1136) (#("  " 0 2 (fontified nil)) . 1132) (1138 . 1139) (1132 . 1134) (#("    " 0 4 (fontified nil)) . 1132) (1139 . 1140) (1137 . 1139) (#("y" 0 1 (fontified t)) . -1137) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("n" 0 1 (fontified t)) . -1138) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#("a" 0 1 (fontified t)) . -1139) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("t" 0 1 (fontified t)) . -1140) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("a" 0 1 (fontified t)) . -1141) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("x" 0 1 (fontified t)) . -1142) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("_" 0 1 (fontified t)) . -1143) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("t" 0 1 (fontified t)) . -1144) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t)) . -1145) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("e" 0 1 (fontified t)) . -1146) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("e" 0 1 (fontified t)) . -1147) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("_" 0 1 (fontified t)) . -1148) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("c" 0 1 (fontified t)) . -1149) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("l" 0 1 (fontified t)) . -1150) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("a" 0 1 (fontified t)) . -1151) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("s" 0 1 (fontified t)) . -1152) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("s" 0 1 (fontified t)) . -1153) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 1154 (1136 . 1154) (#("s" 0 1 (fontified nil)) . 1136) (1136 . 1137) (#("synatax_tree_class" 0 18 (fontified nil)) . -1136) (1136 . 1154) (#("s" 0 1 (fontified t)) . -1136) (undo-tree-id57 . -1) (undo-tree-id58 . -1) 1137 (1136 . 1137) (#("f" 0 1 (fontified t)) . -1136) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("u" 0 1 (fontified t)) . -1137) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("n" 0 1 (fontified t)) . -1138) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#(":" 0 1 (fontified t c-type c-decl-end)) . -1139) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#(":" 0 1 (fontified t)) . -1140) (undo-tree-id67 . -1) (undo-tree-id68 . -1) 1141 (1132 . 1136) (#("  " 0 2 (fontified nil)) . 1132) (1138 . 1139) (1132 . 1134) (#("    " 0 4 (fontified nil)) . 1132) (1139 . 1140) (1136 . 1139) (1131 . 1136) (t 26073 47363 350383 712000) 1130) nil (26075 8855 802286 345000) 0 nil])
([nil nil ((#("    std::function<token_class::token*()> ret_next_fun;
" 0 4 (fontified t) 4 5 (fontified t face font-lock-constant-face) 5 6 (fontified t face font-lock-constant-face) 6 7 (fontified t face font-lock-constant-face) 7 8 (fontified t) 8 9 (fontified t) 9 17 (fontified t face font-lock-type-face) 17 18 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-3-face)) 18 29 (fontified t face font-lock-constant-face) 29 31 (fontified t) 31 36 (fontified t face font-lock-type-face) 36 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-4-face)) 38 39 (fontified t face (rainbow-delimiters-depth-4-face)) 39 40 (fontified t syntax-table (5 . 60) c-type c-decl-id-start face (rainbow-delimiters-depth-3-face)) 40 41 (fontified t) 41 42 (fontified t face font-lock-variable-name-face) 42 43 (fontified t face font-lock-variable-name-face) 43 44 (fontified t face font-lock-variable-name-face) 44 45 (fontified t face font-lock-variable-name-face) 45 46 (fontified t face font-lock-variable-name-face) 46 47 (fontified t face font-lock-variable-name-face) 47 48 (fontified t face font-lock-variable-name-face) 48 49 (fontified t face font-lock-variable-name-face) 49 50 (fontified t face font-lock-variable-name-face) 50 51 (fontified t face font-lock-variable-name-face) 51 52 (fontified t face font-lock-variable-name-face) 52 53 (fontified t face font-lock-variable-name-face) 53 54 (fontified t) 54 55 (fontified t)) . 1132) (undo-tree-id126 . -55) (undo-tree-id127 . -55) (undo-tree-id128 . -53) (undo-tree-id129 . -53) (undo-tree-id130 . -18) (undo-tree-id131 . 1) (undo-tree-id132 . 1) (undo-tree-id133 . -53) (undo-tree-id134 . -53) (undo-tree-id135 . -53) (undo-tree-id136 . -53) (undo-tree-id137 . -41) (undo-tree-id138 . -41) (undo-tree-id139 . -53) (undo-tree-id140 . -53) (undo-tree-id141 . -53) (undo-tree-id142 . -53) (undo-tree-id143 . -53) (undo-tree-id144 . -53) (undo-tree-id145 . -53) (undo-tree-id146 . -53) (undo-tree-id147 . -53) (undo-tree-id148 . -53) (undo-tree-id149 . -53) (undo-tree-id150 . -53) (undo-tree-id151 . -53) (undo-tree-id152 . -53) (undo-tree-id153 . -53) (undo-tree-id154 . -53) (undo-tree-id155 . -53) (undo-tree-id156 . -53) (undo-tree-id157 . -53) (undo-tree-id158 . -53) (undo-tree-id159 . -53) (undo-tree-id160 . -53) (undo-tree-id161 . -53) (undo-tree-id162 . -53) (undo-tree-id163 . -53) (undo-tree-id164 . -53) (undo-tree-id165 . -53) (undo-tree-id166 . -53) (undo-tree-id167 . -41) (undo-tree-id168 . -53) (undo-tree-id169 . -53) (undo-tree-id170 . -53) (undo-tree-id171 . -53) (undo-tree-id172 . -53) (undo-tree-id173 . -53) (undo-tree-id174 . -53) (undo-tree-id175 . -53) (undo-tree-id176 . -53) (undo-tree-id177 . -53) (undo-tree-id178 . -53) (undo-tree-id179 . -53) (undo-tree-id180 . -53) (undo-tree-id181 . -53) (undo-tree-id182 . -53) (undo-tree-id183 . -53) (undo-tree-id184 . -53) (undo-tree-id185 . -53) (undo-tree-id186 . -53) (undo-tree-id187 . -53) (undo-tree-id188 . -53) (undo-tree-id189 . -53) (undo-tree-id190 . -53) (undo-tree-id191 . -53) (undo-tree-id192 . -53) (undo-tree-id193 . -53) (undo-tree-id194 . -53) (undo-tree-id195 . -53) (undo-tree-id196 . -53) (undo-tree-id197 . -53) (undo-tree-id198 . -53) (undo-tree-id199 . -53) (undo-tree-id200 . -53) (undo-tree-id201 . -53) (undo-tree-id202 . -53) (undo-tree-id203 . -53) (undo-tree-id204 . -53) (undo-tree-id205 . -53) (undo-tree-id206 . -53) (undo-tree-id207 . -53) (undo-tree-id208 . -53) (undo-tree-id209 . -53) (undo-tree-id210 . -53) (undo-tree-id211 . -53) (undo-tree-id212 . -53) (undo-tree-id213 . -53) (undo-tree-id214 . -53) (undo-tree-id215 . -53) (undo-tree-id216 . -53) (undo-tree-id217 . -53) (undo-tree-id218 . -53) (undo-tree-id219 . -53) (undo-tree-id220 . -53) (undo-tree-id221 . -55) (undo-tree-id222 . -54) 1185 (t 26075 8855 813972 363000)) nil (26075 8925 310448 156000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1062 . 1063) (#("
" 0 1 (fontified nil)) . -1113) (1058 . 1114) 1034) nil (26075 8925 310369 50000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1059) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (undo-tree-id88 . -4) (undo-tree-id89 . -4) (undo-tree-id90 . -4) (undo-tree-id91 . -4) (undo-tree-id92 . -4) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . -4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) (undo-tree-id125 . -4) 1063 (1059 . 1063) (1059 . 1060) 1063) nil (26075 8925 310363 884000) 0 nil])
([nil nil ((1081 . 1082) (1079 . 1081) (1077 . 1079) (1069 . 1077) (#("o" 0 1 (fontified nil)) . 1069) (1069 . 1070) (#("operator" 0 8 (fontified nil)) . -1069) (1069 . 1077) (#("op" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face)) . -1069) (undo-tree-id223 . -2) (undo-tree-id224 . -2) 1071 (1069 . 1071) (1068 . 1069) (1064 . 1068) (#("v" 0 1 (fontified nil)) . 1064) (1064 . 1065) (#("void" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1064) (undo-tree-id225 . -4) (undo-tree-id226 . -4) 1068 (1064 . 1068) (1060 . 1064) (1060 . 1061) 1113 (t 26075 8925 313975 144000)) nil (26075 8979 777736 686000) 0 nil])
([nil nil ((1116 . 1117) (1114 . 1116) (1106 . 1114) (1105 . 1106) (1087 . 1105) (#("tok" 0 3 (fontified nil)) . 1087) (1087 . 1090) (#("token_class::token" 0 18 (fontified nil)) . -1087) (1087 . 1105) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1087) (undo-tree-id227 . -3) (undo-tree-id228 . -3) 1090 (1087 . 1090) (1082 . 1087) (t 26075 8979 797310 661000) 1081) nil (26075 10825 270862 971000) 0 nil])
([nil nil ((#("void " 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t)) . 1064) (undo-tree-id582 . -4) (undo-tree-id583 . -5) (undo-tree-id584 . -5) (undo-tree-id585 . -5) (undo-tree-id586 . -5) (undo-tree-id587 . -5) (undo-tree-id588 . -5) (undo-tree-id589 . -5) (undo-tree-id590 . -5) (undo-tree-id591 . -5) (undo-tree-id592 . -5) (undo-tree-id593 . -5) (undo-tree-id594 . -5) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -5) (undo-tree-id599 . -5) (undo-tree-id600 . -5) (undo-tree-id601 . -5) (undo-tree-id602 . -5) (undo-tree-id603 . -5) (undo-tree-id604 . -5) (undo-tree-id605 . -5) (undo-tree-id606 . -5) (undo-tree-id607 . -5) (undo-tree-id608 . -5) (undo-tree-id609 . -5) (undo-tree-id610 . -5) (undo-tree-id611 . -5) (undo-tree-id612 . -5) (undo-tree-id613 . -5) (undo-tree-id614 . -5) (undo-tree-id615 . -5) (undo-tree-id616 . -5) (undo-tree-id617 . -5) (undo-tree-id618 . -5) (undo-tree-id619 . -5) (undo-tree-id620 . -5) (undo-tree-id621 . -5) (undo-tree-id622 . -5) (undo-tree-id623 . -5) (undo-tree-id624 . -5) (undo-tree-id625 . -5) (undo-tree-id626 . -5) (undo-tree-id627 . -5) (undo-tree-id628 . -5) (undo-tree-id629 . -5) (undo-tree-id630 . -5) (undo-tree-id631 . -5) (undo-tree-id632 . -5) (undo-tree-id633 . -5) (undo-tree-id634 . -5) (undo-tree-id635 . -5) (undo-tree-id636 . -4) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -4) (undo-tree-id641 . -4) (undo-tree-id642 . -4) (undo-tree-id643 . -4) (undo-tree-id644 . -4) (undo-tree-id645 . -4) (undo-tree-id646 . -4) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (undo-tree-id649 . -4) (undo-tree-id650 . -4) (undo-tree-id651 . -4) (undo-tree-id652 . -4) (undo-tree-id653 . -4) (undo-tree-id654 . -4) (undo-tree-id655 . -4) (undo-tree-id656 . -4) (undo-tree-id657 . -4) (undo-tree-id658 . -4) (undo-tree-id659 . -4) (undo-tree-id660 . -4) (undo-tree-id661 . -4) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -3) (undo-tree-id666 . -3) (undo-tree-id667 . -3) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -2) (undo-tree-id689 . -2) (undo-tree-id690 . -2) (undo-tree-id691 . -2) (undo-tree-id692 . -2) (undo-tree-id693 . -2) (undo-tree-id694 . -2) (undo-tree-id695 . -2) (undo-tree-id696 . -2) (undo-tree-id697 . -2) (undo-tree-id698 . -2) (undo-tree-id699 . -2) (undo-tree-id700 . -2) (undo-tree-id701 . -2) (undo-tree-id702 . -2) (undo-tree-id703 . -2) (undo-tree-id704 . -2) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -2) (undo-tree-id713 . -2) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -5) (undo-tree-id741 . -5) (t 26075 10825 277384 325000)) nil (26075 11248 797613 102000) 0 nil])
([nil nil ((1064 . 1065)) nil (26075 11248 797517 499000) 0 nil])
([nil nil ((1064 . 1067)) nil (26075 11248 797516 824000) 0 nil])
([nil nil ((1060 . 1062) (#("    " 0 4 (fontified nil)) . 1060) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) (undo-tree-id535 . -4) (undo-tree-id536 . -4) (undo-tree-id537 . -4) (undo-tree-id538 . -4) (undo-tree-id539 . -4) (undo-tree-id540 . -4) (undo-tree-id541 . -4) (undo-tree-id542 . -4) (undo-tree-id543 . -4) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -4) (undo-tree-id554 . -4) (undo-tree-id555 . -4) (undo-tree-id556 . -4) (undo-tree-id557 . -4) (undo-tree-id558 . -4) (undo-tree-id559 . -4) (undo-tree-id560 . -4) (undo-tree-id561 . -4) (undo-tree-id562 . -4) (undo-tree-id563 . -4) (undo-tree-id564 . -4) (undo-tree-id565 . -4) (undo-tree-id566 . -4) (undo-tree-id567 . -4) (undo-tree-id568 . -4) (undo-tree-id569 . -4) (undo-tree-id570 . -4) (undo-tree-id571 . -4) (undo-tree-id572 . -4) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -4) (undo-tree-id576 . -4) (undo-tree-id577 . -4) (undo-tree-id578 . -4) (undo-tree-id579 . -4) (undo-tree-id580 . -4) (undo-tree-id581 . -4) (1067 . 1068)) nil (26075 11248 797512 995000) 0 nil])
([nil nil ((1060 . 1064) (#("  " 0 2 (fontified nil)) . 1060) (1066 . 1067)) nil (26075 11248 797414 47000) 0 nil])
([nil nil ((1069 . 1070)) nil (26075 11248 797413 409000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1076 1098 nil nil nil t nil)) nil 4 nil #s(yas--field 1 1076 1098 nil nil nil t nil) nil nil)) (1069 . 1088) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 1069) (1069 . 1093) (#("v" 0 1 (fontified nil)) . 1069) (1069 . 1070) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -1069) (1069 . 1104) (#("v" 0 1 (fontified t c-type c-decl-id-start face font-lock-type-face)) . -1069) (undo-tree-id422 . -1) (undo-tree-id423 . -1) 1070) nil (26075 11248 797411 968000) 0 nil])
([nil nil ((1077 . 1078) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 1077) (undo-tree-id417 . -11) (undo-tree-id418 . -9) (undo-tree-id419 . -11) (undo-tree-id420 . -9) (undo-tree-id421 . -11) (1076 . 1077)) nil (26075 11248 797409 488000) 0 nil])
([nil nil ((nil fontified nil 1076 . 1098) (nil face (rainbow-delimiters-depth-3-face) 1076 . 1098) (1076 . 1098) (#("to" 0 2 (fontified nil)) . 1076) (undo-tree-id229 . -2) (nil fontified nil 1076 . 1078) (nil face (rainbow-delimiters-depth-3-face) 1076 . 1078) (1076 . 1078) (#("token_class::bnf_token" 0 22 (fontified nil)) . -1076) (undo-tree-id230 . -22) (nil fontified nil 1076 . 1098) (nil face (rainbow-delimiters-depth-3-face) 1076 . 1098) (1076 . 1098) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1076) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) 1078) nil (26075 11248 797399 298000) 0 nil])
([nil nil ((apply yas--snippet-revive 1069 1099 #s(yas--snippet nil (#s(yas--field 1 1076 1098 nil nil nil t nil)) nil 4 nil #s(yas--field 1 1076 1098 nil nil nil t nil) nil nil))) nil (26075 11248 796124 74000) 0 nil])
([nil nil ((1188 . 1191) (1184 . 1188) (apply yas--snippet-revive 1154 1184 #s(yas--snippet nil (#s(yas--field 1 1161 1183 nil nil nil t nil)) nil 10 nil #s(yas--field 1 1161 1183 nil nil nil t nil) nil nil)) (nil fontified nil 1161 . 1183) (nil face (rainbow-delimiters-depth-4-face) 1161 . 1183) (1161 . 1183) (#("to" 0 2 (fontified nil)) . 1161) (nil fontified nil 1161 . 1163) (nil face (rainbow-delimiters-depth-4-face) 1161 . 1163) (1161 . 1163) (#("token_class::bnf_token" 0 22 (fontified nil)) . -1161) (nil fontified nil 1161 . 1183) (nil face (rainbow-delimiters-depth-4-face) 1161 . 1183) (1161 . 1183) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1161) (undo-tree-id742 . -2) (undo-tree-id743 . -2) 1163 (1162 . 1163) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 1162) (1161 . 1162) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1161 1183 nil nil nil t nil)) nil 10 nil #s(yas--field 1 1161 1183 nil nil nil t nil) nil nil)) (1154 . 1173) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 1154) (1154 . 1178) (#("v" 0 1 (fontified nil)) . 1154) (1154 . 1155) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -1154) (1154 . 1189) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -1154) (undo-tree-id744 . -2) (undo-tree-id745 . -2) 1156 (1154 . 1156) (#("<" 0 1 (fontified t)) . -1154) (undo-tree-id746 . -1) (undo-tree-id747 . -1) 1155 (1154 . 1155) (1152 . 1154) (1151 . 1152) (#("a" 0 1 (fontified t)) . -1151) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("d" 0 1 (fontified t)) . -1152) (undo-tree-id750 . -1) (undo-tree-id751 . -1) 1153 (1150 . 1153) (1149 . 1150) (1150 . 1151) (1148 . 1150) (1147 . 1148) (#("r" 0 1 (fontified t)) . -1147) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (#("t" 0 1 (fontified t)) . -1148) (undo-tree-id754 . -1) (undo-tree-id755 . -1) 1149 (1145 . 1149) (#("g" 0 1 (fontified t)) . -1145) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("h" 0 1 (fontified t)) . -1146) (undo-tree-id758 . -1) (undo-tree-id759 . -1) 1147 (1144 . 1147) (1141 . 1144) (1140 . 1141) (1118 . 1140) (#("to" 0 2 (fontified nil)) . 1118) (1118 . 1120) (#("token_class::bnf_token" 0 22 (fontified nil)) . -1118) (1118 . 1140) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1118) (undo-tree-id760 . -2) (undo-tree-id761 . -2) 1120 (1118 . 1120) (1113 . 1118) (t 26075 11248 804067 967000) 1110) nil (26075 13575 497546 677000) 0 nil])
([nil nil ((1134 . 1136) (1133 . 1134) (#(">" 0 1 (fontified t)) . -1133) (undo-tree-id762 . -1) 1134 (#("<" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1111) (undo-tree-id763 . -1) 1112 (1111 . 1112) (1133 . 1134) (#(" " 0 1 (fontified t)) . 1133) (undo-tree-id764 . -1) (undo-tree-id765 . -1) 1134 (1133 . 1134) (nil fontified nil 1111 . 1133) (nil face (rainbow-delimiters-depth-3-face) 1111 . 1133) (1111 . 1133) (#("to" 0 2 (fontified nil)) . 1111) (nil fontified nil 1111 . 1113) (nil face (rainbow-delimiters-depth-3-face) 1111 . 1113) (1111 . 1113) (#("token_class::bnf_token" 0 22 (fontified nil)) . -1111) (nil fontified nil 1111 . 1133) (nil face (rainbow-delimiters-depth-3-face) 1111 . 1133) (1111 . 1133) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1111) (undo-tree-id766 . -2) (undo-tree-id767 . -2) 1113 (1111 . 1113) (t 26075 13575 504161 34000)) nil (26075 18179 42177 667000) 0 nil])
([nil nil ((1161 . 1162) (1159 . 1161) (1150 . 1159) (#("bnf_token" 0 9 (fontified nil)) . -1150) (1150 . 1159) (1148 . 1150) (1137 . 1148) (#("to" 0 2 (fontified nil)) . 1137) (1137 . 1139) (#("token_class" 0 11 (fontified nil)) . -1137) (1137 . 1148) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1137) (undo-tree-id768 . -2) (undo-tree-id769 . -2) 1139 (1137 . 1139) (1136 . 1137) (t 26075 18179 87678 977000)) nil (26075 18258 548881 594000) 0 nil])
([nil nil ((1162 . 1163) (t 26075 18258 557682 170000)) nil (26075 19903 243807 902000) 0 nil])
([nil nil ((1163 . 1166)) nil (26075 19903 243807 223000) 0 nil])
([nil nil ((1166 . 1168)) nil (26075 19903 243806 649000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1175 1193 nil nil nil t nil)) nil 12 nil #s(yas--field 1 1175 1193 nil nil nil t nil) nil nil)) (1168 . 1187) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 1168) (1168 . 1192) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -1168) (1168 . 1203)) nil (26075 19903 243805 662000) 0 nil])
([nil nil ((1176 . 1177) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 1176) (1175 . 1176)) nil (26075 19903 243804 201000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1176) (undo-tree-id784 . -1) (undo-tree-id785 . -1) 1177) nil (26075 19903 243803 219000) 0 nil])
([nil nil ((1176 . 1177)) nil (26075 19903 243801 427000) 0 nil])
([nil nil ((nil fontified nil 1175 . 1193) (nil face (rainbow-delimiters-depth-4-face) 1175 . 1193) (1175 . 1193) (#("to" 0 2 (fontified nil)) . 1175) (nil fontified nil 1175 . 1177) (nil face (rainbow-delimiters-depth-4-face) 1175 . 1177) (1175 . 1177) (#("token_class::token" 0 18 (fontified nil)) . -1175) (nil fontified nil 1175 . 1193) (nil face (rainbow-delimiters-depth-4-face) 1175 . 1193) (1175 . 1193) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1175) (undo-tree-id782 . -2) (undo-tree-id783 . -2) 1177) nil (26075 19903 243800 231000) 0 nil])
([nil nil ((apply yas--snippet-revive 1168 1194 #s(yas--snippet nil (#s(yas--field 1 1175 1193 nil nil nil t nil)) nil 12 nil #s(yas--field 1 1175 1193 nil nil nil t nil) nil nil))) nil (26075 19903 243796 924000) 0 nil])
([nil nil ((1194 . 1195)) nil (26075 19903 243796 173000) 0 nil])
([nil nil ((1195 . 1201)) nil (26075 19903 243795 190000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -1199) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -1200) (undo-tree-id780 . -1) (undo-tree-id781 . -1) 1201) nil (26075 19903 243794 101000) 0 nil])
([nil nil ((1199 . 1200)) nil (26075 19903 243790 951000) 0 nil])
([nil nil ((1200 . 1201)) nil (26075 19903 243790 373000) 0 nil])
([nil nil ((1201 . 1204)) nil (26075 19903 243789 708000) 0 nil])
([nil nil ((1204 . 1206)) nil (26075 19903 243788 907000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1213 1231 nil nil nil t nil)) nil 13 nil #s(yas--field 1 1213 1231 nil nil nil t nil) nil nil)) (1206 . 1225) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 1206) (1206 . 1230) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -1206) (1206 . 1241)) nil (26075 19903 243787 632000) 0 nil])
([nil nil ((1214 . 1215) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 1214) (undo-tree-id777 . -11) (1213 . 1214)) nil (26075 19903 243785 978000) 0 nil])
([nil nil ((nil fontified nil 1213 . 1224) (nil face (rainbow-delimiters-depth-4-face) 1213 . 1224) (1213 . 1224) (#("to" 0 2 (fontified nil)) . 1213) (undo-tree-id771 . -2) (nil fontified nil 1213 . 1215) (nil face (rainbow-delimiters-depth-4-face) 1213 . 1215) (1213 . 1215) (#("token_class" 0 11 (fontified nil)) . -1213) (undo-tree-id772 . -11) (nil fontified nil 1213 . 1224) (nil face (rainbow-delimiters-depth-4-face) 1213 . 1224) (1213 . 1224) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1213) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) 1215) nil (26075 19903 243783 858000) 0 nil])
([nil nil ((1224 . 1226)) nil (26075 19903 243777 921000) 0 nil])
([nil nil ((1226 . 1231) (#("token" 0 5 (fontified nil)) . -1226) (undo-tree-id770 . -5) (1226 . 1231)) nil (26075 19903 243776 406000) 0 nil])
([nil nil ((apply yas--snippet-revive 1206 1232 #s(yas--snippet nil (#s(yas--field 1 1213 1231 nil nil nil t nil)) nil 13 nil #s(yas--field 1 1213 1231 nil nil nil t nil) nil nil))) nil (26075 19903 243765 887000) 0 nil])
([nil nil ((nil fontified t 1232 . 1234) (nil face (rainbow-delimiters-depth-4-face) 1232 . 1234) (1232 . 1234) (t 26075 19903 254414 974000)) nil (26075 19951 405231 285000) 0 nil])
([nil nil ((1232 . 1234) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -1232) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 1233) (t 26075 19951 417750 244000)) nil (26075 19964 90826 539000) 0 nil])
([nil nil ((#("{}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 1232) (undo-tree-id788 . 1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . 2) (undo-tree-id792 . -1) (undo-tree-id793 . 1) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (t 26075 19964 107750 759000)) nil (26075 20190 879483 296000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -1350) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) 1351 (1344 . 1351) (apply yas--snippet-revive 1318 1344 #s(yas--snippet nil (#s(yas--field 1 1325 1343 nil nil nil t nil)) nil 15 nil #s(yas--field 1 1325 1343 nil nil nil t nil) nil nil)) (nil fontified nil 1325 . 1343) (nil face (rainbow-delimiters-depth-4-face) 1325 . 1343) (1325 . 1343) (#("to" 0 2 (fontified nil)) . 1325) (nil fontified nil 1325 . 1327) (nil face (rainbow-delimiters-depth-4-face) 1325 . 1327) (1325 . 1327) (#("token_class::token" 0 18 (fontified nil)) . -1325) (nil fontified nil 1325 . 1343) (nil face (rainbow-delimiters-depth-4-face) 1325 . 1343) (1325 . 1343) (#("to" 0 1 (fontified t) 1 2 (fontified t)) . -1325) (undo-tree-id1664 . -2) (undo-tree-id1665 . -2) 1327 (1326 . 1327) (#("typename Tp" 0 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 11 (fontified nil face font-lock-type-face)) . 1326) (1325 . 1326) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1325 1343 nil nil nil t nil)) nil 15 nil #s(yas--field 1 1325 1343 nil nil nil t nil) nil nil)) (1318 . 1337) (#("vector<${1:typename Tp}>" 0 24 (fontified nil)) . 1318) (1318 . 1342) (#("v" 0 1 (fontified nil)) . 1318) (1318 . 1319) (#("vector<typename Tp, typename Alloc>" 0 6 (fontified nil) 6 7 (syntax-table (4 . 62) fontified nil) 7 18 (fontified nil) 18 19 (c-type c-<>-arg-sep fontified nil) 19 34 (fontified nil) 34 35 (syntax-table (5 . 60) fontified nil)) . -1318) (1318 . 1353) (#("ve" 0 1 (fontified t) 1 2 (fontified t)) . -1318) (undo-tree-id1666 . -2) (undo-tree-id1667 . -2) 1320 (1318 . 1320) (1316 . 1318) (nil fontified nil 1313 . 1316) (1313 . 1316) (#("st" 0 2 (fontified nil)) . 1313) (nil fontified nil 1313 . 1315) (1313 . 1315) (#("std" 0 3 (fontified nil)) . -1313) (nil fontified nil 1313 . 1316) (1313 . 1316) (#("st" 0 1 (fontified t) 1 2 (fontified t)) . -1313) (undo-tree-id1668 . -2) (undo-tree-id1669 . -2) 1315 (1313 . 1315) (1312 . 1313)) nil (26075 20219 816417 396000) 0 nil] [nil nil ((1201 . 1203) (#("s" 0 1 (fontified t)) . -1201) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (#("t" 0 1 (fontified t)) . -1202) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("d" 0 1 (fontified t)) . -1203) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (#(":" 0 1 (fontified t)) . -1204) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (#(":" 0 1 (fontified t)) . -1205) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (#("v" 0 1 (fontified t)) . -1206) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("e" 0 1 (fontified t)) . -1207) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("c" 0 1 (fontified t)) . -1208) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("t" 0 1 (fontified t)) . -1209) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (#("o" 0 1 (fontified t)) . -1210) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) 1211 (#("r" 0 1 (fontified t)) . -1211) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (#("<" 0 1 (fontified t)) . -1212) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (#("t" 0 1 (fontified t)) . -1213) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (#("o" 0 1 (fontified t)) . -1214) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("k" 0 1 (fontified t)) . -1215) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (#("e" 0 1 (fontified t)) . -1216) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("n" 0 1 (fontified t)) . -1217) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (#("_" 0 1 (fontified t)) . -1218) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (#("c" 0 1 (fontified t)) . -1219) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (#("l" 0 1 (fontified t)) . -1220) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (#("a" 0 1 (fontified t)) . -1221) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#("s" 0 1 (fontified t)) . -1222) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (#("s" 0 1 (fontified t)) . -1223) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#(":" 0 1 (fontified t)) . -1224) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (#(":" 0 1 (fontified t)) . -1225) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("t" 0 1 (fontified t)) . -1226) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("o" 0 1 (fontified t)) . -1227) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (#("k" 0 1 (fontified t)) . -1228) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("e" 0 1 (fontified t)) . -1229) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#("n" 0 1 (fontified t)) . -1230) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#(">" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1231) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . 1) (undo-tree-id952 . -1) 1232 (t 26075 19979 951084 729000)) ((1201 . 1232) (#("{}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 1201) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . 1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1)) (26075 20190 409750 398000) 0 nil])
([nil nil ((#(",std::vector<token_class::token> op_st=std::vector<token_class::token>" 0 1 (fontified t c-type c-decl-arg-start) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t) 5 6 (fontified t) 6 12 (fontified t face font-lock-type-face) 12 13 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-4-face)) 13 24 (fontified t face font-lock-constant-face) 24 26 (fontified t) 26 31 (fontified t face font-lock-type-face) 31 32 (fontified t syntax-table (5 . 60) face (rainbow-delimiters-depth-4-face)) 32 33 (fontified t) 33 34 (fontified t face font-lock-variable-name-face) 34 35 (fontified t face font-lock-variable-name-face) 35 36 (fontified t face font-lock-variable-name-face) 36 37 (fontified t face font-lock-variable-name-face) 37 38 (fontified t face font-lock-variable-name-face) 38 39 (fontified t) 39 40 (fontified t face font-lock-constant-face) 40 41 (fontified t face font-lock-constant-face) 41 42 (fontified t face font-lock-constant-face) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t face font-lock-type-face) 45 46 (fontified t face font-lock-type-face) 46 47 (fontified t face font-lock-type-face) 47 48 (fontified t face font-lock-type-face) 48 49 (fontified t face font-lock-type-face) 49 50 (fontified t face font-lock-type-face) 50 51 (fontified t syntax-table (4 . 62) face (rainbow-delimiters-depth-4-face)) 51 52 (fontified t face font-lock-constant-face) 52 53 (fontified t face font-lock-constant-face) 53 54 (fontified t face font-lock-constant-face) 54 55 (fontified t face font-lock-constant-face) 55 56 (fontified t face font-lock-constant-face) 56 57 (fontified t face font-lock-constant-face) 57 58 (fontified t face font-lock-constant-face) 58 59 (fontified t face font-lock-constant-face) 59 60 (fontified t face font-lock-constant-face) 60 61 (fontified t face font-lock-constant-face) 61 62 (fontified t face font-lock-constant-face) 62 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 67 (fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 70 (fontified t syntax-table (5 . 60) face (rainbow-delimiters-depth-4-face))) . 1162) (undo-tree-id1670 . -69) (undo-tree-id1671 . -70) (undo-tree-id1672 . -3) (undo-tree-id1673 . -3) (undo-tree-id1674 . -3) (undo-tree-id1675 . -3) (undo-tree-id1676 . -3) (undo-tree-id1677 . -3) (undo-tree-id1678 . -3) (undo-tree-id1679 . -3) (undo-tree-id1680 . -3) (undo-tree-id1681 . -3) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) (undo-tree-id1685 . -3) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -3) (undo-tree-id1691 . -3) (undo-tree-id1692 . -3) (undo-tree-id1693 . -2) (undo-tree-id1694 . -2) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) (undo-tree-id1714 . -2) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) (undo-tree-id1720 . -2) (undo-tree-id1721 . -2) (undo-tree-id1722 . -2) (undo-tree-id1723 . -2) (undo-tree-id1724 . -2) (undo-tree-id1725 . -2) (undo-tree-id1726 . -2) (undo-tree-id1727 . -2) (undo-tree-id1728 . -2) (undo-tree-id1729 . -2) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -2) (undo-tree-id1747 . -2) (undo-tree-id1748 . -2) (undo-tree-id1749 . -2) (undo-tree-id1750 . -2) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -2) (undo-tree-id1761 . -2) (undo-tree-id1762 . -2) (undo-tree-id1763 . -2) (undo-tree-id1764 . -2) (undo-tree-id1765 . -2) (undo-tree-id1766 . -2) (undo-tree-id1767 . -2) (undo-tree-id1768 . -2) (undo-tree-id1769 . -2) (undo-tree-id1770 . -2) (undo-tree-id1771 . -2) (undo-tree-id1772 . -2) (undo-tree-id1773 . -2) (undo-tree-id1774 . -2) (undo-tree-id1775 . -2) (undo-tree-id1776 . -2) (undo-tree-id1777 . -2) (undo-tree-id1778 . -2) (undo-tree-id1779 . -2) (undo-tree-id1780 . -2) (undo-tree-id1781 . -2) (undo-tree-id1782 . -2) (undo-tree-id1783 . -2) (undo-tree-id1784 . -2) (undo-tree-id1785 . -2) (undo-tree-id1786 . -2) (undo-tree-id1787 . -2) (undo-tree-id1788 . -2) (undo-tree-id1789 . -2) (undo-tree-id1790 . -2) (undo-tree-id1791 . -2) (undo-tree-id1792 . -2) (undo-tree-id1793 . -2) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -70) (t 26075 20219 824427 722000)) nil (26075 20316 87877 111000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 1202) (undo-tree-id1019 . 1) (undo-tree-id1020 . 1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (t 26075 20019 427752 988000)) ((1202 . 1203)) (26075 20190 1784 914000) 0 nil])
([nil nil ((1281 . 1283) (1280 . 1281) (t 26075 20316 104431 605000)) nil (26075 20471 668989 900000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -1199) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id959 . -1) (undo-tree-id961 . -1) (undo-tree-id963 . -1) (undo-tree-id965 . -1) (undo-tree-id967 . -1) (undo-tree-id969 . -1) (undo-tree-id971 . -1) (undo-tree-id973 . -1) (undo-tree-id975 . -1) (undo-tree-id977 . -1) (undo-tree-id979 . -1) (undo-tree-id981 . -1) (undo-tree-id983 . -1) (undo-tree-id985 . -1) (undo-tree-id987 . -1) (undo-tree-id989 . -1) (undo-tree-id991 . -1) (undo-tree-id993 . -1) (undo-tree-id995 . -1) (undo-tree-id997 . -1) (undo-tree-id999 . -1) (undo-tree-id1001 . -1) (undo-tree-id1003 . -1) (undo-tree-id1005 . -1) (undo-tree-id1007 . -1) (undo-tree-id1009 . -1) (#("=" 0 1 (fontified t)) . -1200) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -1201) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) 1202) ((1199 . 1202)) (26075 20189 510810 664000) 0 nil])
([nil nil ((1179 . 1180) (1174 . 1179) (1165 . 1169) (#("  " 0 2 (fontified nil)) . 1165) (1171 . 1172) (1165 . 1167) (#("    " 0 4 (fontified nil)) . 1165) (1172 . 1173) (1169 . 1172) (#("st" 0 2 (fontified nil)) . 1169) (1169 . 1171) (#("std" 0 3 (fontified nil)) . -1169) (1169 . 1172) (#("st" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face)) . -1169) (undo-tree-id1921 . -2) (undo-tree-id1922 . -2) 1171 (1169 . 1171) (1169 . 1170) (1191 . 1192) (t 26075 20471 681104 530000)) nil (26075 20652 839878 521000) 0 nil])
([nil nil ((1199 . 1200)) ((#("t" 0 1 (fontified t face font-lock-variable-name-face)) . 1199) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (t 26075 20166 847758 921000)) (26075 20166 825677 41000) 0 nil])
([nil nil ((1286 . 1287) (t 26075 20652 851111 835000)) nil (26075 21228 603746 720000) 0 nil])
nil
([nil nil ((#("=" 0 1 (fontified t)) . -1255) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) 1256 (1255 . 1256) (t 26075 21228 637801 664000)) nil (26075 22535 195276 276000) 0 nil])
([nil nil ((1281 . 1282) (1279 . 1281) (nil fontified nil 1257 . 1279) (nil face (rainbow-delimiters-depth-4-face) 1257 . 1279) (1257 . 1279) (#("to" 0 2 (fontified nil)) . 1257) (nil fontified nil 1257 . 1259) (nil face (rainbow-delimiters-depth-4-face) 1257 . 1259) (1257 . 1259) (#("token_class::bnf_token" 0 22 (fontified nil)) . -1257) (nil fontified nil 1257 . 1279) (nil face (rainbow-delimiters-depth-4-face) 1257 . 1279) (1257 . 1279) (#("tok" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -1257) (undo-tree-id2064 . -3) (undo-tree-id2065 . -3) 1260 (1257 . 1260) (1256 . 1258) (1255 . 1256) (t 26075 22535 207854 368000)) nil (26075 22550 619437 995000) 0 nil])
([nil nil ((1351 . 1352) (t 26075 22550 631188 326000)) nil (26075 25417 807038 996000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1168 . 1169) (#("
" 0 1 (fontified nil)) . -1269) (1164 . 1270) 1083 (t 26075 25417 821304 402000)) nil (26075 32557 589579 321000) 0 nil])
([nil nil ((1163 . 1166) (1162 . 1163)) nil (26075 32557 589578 479000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1440 . 1441) (#("
" 0 1 (fontified nil)) . -1599) (1436 . 1600) 1381) nil (26075 32557 589577 183000) 0 nil])
([nil nil ((1484 . 1485)) nil (26075 32557 589573 113000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1640 . 1641) (#("
" 0 1 (fontified nil)) . -1672) (1636 . 1673) 1635 (t 26075 32557 598257 407000)) nil (26075 32587 211611 600000) 0 nil])
([nil nil ((1669 . 1670)) nil (26075 32587 211607 539000) 0 nil])
([nil nil ((1166 . 1168) (t 26075 32587 221591 927000)) nil (26075 32678 248202 537000) 0 nil])
([nil nil ((apply -3 1060 1279 undo--wrap-and-run-primitive-undo 1060 1279 ((1064 . 1067) 1171)) (t 26075 32678 261595 572000)) nil (26075 32719 612714 568000) 0 nil])
([nil nil ((apply 3 1060 1171 undo--wrap-and-run-primitive-undo 1060 1171 ((#("// " 0 1 (c-is-sws t fontified t face font-lock-comment-delimiter-face c-in-sws t) 1 3 (fontified t face font-lock-comment-delimiter-face c-in-sws t)) . -1064) 1174)) (t 26075 32719 624930 562000)) nil (26075 32828 376380 492000) 0 nil])
([nil nil ((#(",int i" 0 1 (fontified t c-type c-decl-arg-start) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t) 5 6 (fontified t face font-lock-variable-name-face)) . 1162) (undo-tree-id2069 . -5) (undo-tree-id2070 . -5) (undo-tree-id2071 . -5) (undo-tree-id2072 . -5) (t 26075 32828 384934 929000)) nil (26075 32864 418426 672000) 0 nil])
([nil current ((1111 . 1114) (#("u" 0 1 (fontified t)) . -1111) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) 1112 (1111 . 1112) (1111 . 1112)) nil (26075 32864 418417 814000) 0 nil])
nil
