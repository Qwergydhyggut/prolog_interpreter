(undo-tree-save-format-version . 1)
"93e8e32ae235c8e3b728b8c6bc0d87c7a93cfc8c"
[nil nil nil nil (26070 17710 558644 495000) 0 nil]
([nil nil ((70 . 71) (68 . 70) (63 . 68) (59 . 63) (#("voi" 0 3 (fontified nil)) . 59) (59 . 62) (#("void" 0 1 (fontified t c-is-sws t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face)) . -59) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 63 (59 . 63) (58 . 58) (58 . 59) (57 . 57) (57 . 58) (57 . 57) (57 . 58) (60 . 65) (#("e" 0 1 (fontified nil)) . 60) (undo-tree-id2 . -1) (60 . 61) (#("endif" 0 5 (fontified nil)) . -60) (undo-tree-id3 . -5) (60 . 65) (#("en" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -60) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) 62 (60 . 62) (59 . 60) (58 . 58) (58 . 59) (57 . 57) (57 . 58) (56 . 56) (56 . 57) (54 . 56) (48 . 54) (#("M" 0 1 (fontified t face font-lock-variable-name-face)) . -48) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 49 (37 . 49) (apply yas--snippet-revive 30 37 #s(yas--snippet nil nil #s(yas--exit 37 nil) 34 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 37 nil) 34 nil nil nil nil)) (30 . 37) (#("define $0" 0 9 (fontified nil)) . 30) (undo-tree-id10 . -9) (30 . 39) (#("d" 0 1 (fontified nil)) . 30) (undo-tree-id11 . -1) (30 . 31) (#("define macro" 0 12 (fontified nil)) . -30) (undo-tree-id12 . -12) (30 . 42) (#("de" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face)) . -30) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) 32 (30 . 32) (29 . 30) (28 . 28) (28 . 29) (20 . 28) (#("M" 0 1 (fontified t)) . -20) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 21 (19 . 21) (#("O" 0 1 (fontified t)) . -19) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 20 (9 . 20) (apply yas--snippet-revive 2 9 #s(yas--snippet nil nil #s(yas--exit 9 nil) 33 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 9 nil) 33 nil nil nil nil)) (2 . 9) (#("ifndef $0" 0 9 (fontified nil)) . 2) (undo-tree-id22 . -9) (2 . 11) (#("i" 0 1 (fontified nil)) . 2) (undo-tree-id23 . -1) (2 . 3) (#("ifndef macro" 0 12 (fontified nil)) . -2) (undo-tree-id24 . -12) (2 . 14) (#("ifn" 0 1 (fontified t face font-lock-preprocessor-face) 1 2 (fontified t face font-lock-preprocessor-face) 2 3 (fontified t face font-lock-preprocessor-face)) . -2) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) 5 (3 . 5) (#("n" 0 1 (fontified t face font-lock-preprocessor-face)) . -3) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 4 (2 . 4) (1 . 2) (#("$" 0 1 (fontified t)) . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 2 (1 . 2) (t 26070 17144 886096 539000)) nil (26070 17710 558638 199000) 0 nil])
([nil nil ((80 . 81) 70) nil (26070 17710 558578 312000) 0 nil])
([nil current ((68 . 73) (t 26070 17710 616085 210000)) nil (26070 17770 780488 79000) 0 nil])
nil
